<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2015, 学剑</title>
    <url>/2016/01/03/2015%EF%BC%8C%E5%AD%A6%E5%89%91/</url>
    <content><![CDATA[<p>2015总结：刚出新手村的小侠客面对这纷繁的世界。</p>
<a id="more"></a>
<p><br></p>
<hr>
<p>2015年，是一个蜕变的一年。</p>
<p>不管是如何度过了大学生活，总之，到时候离开了。<br>马上就要进入“外面的世界”，<br>就好像，以前玩的RPG游戏，我们终于从新手村熬出来了，要踏上大陆的征程，当然，首先要完成新手村最后的考验。</p>
<hr>
<p><br></p>
<h1 id="新手村"><a href="#新手村" class="headerlink" title="新手村"></a>新手村</h1><p>一般，刚从新手村出来，面对这繁华的大陆，无数的诱惑，没有村长老爷爷（为什么不是老奶奶呢？）给你的小感叹号，告诉你一步步做什么。<br>穿着 裁缝铺大婶给你的衣服，挥舞着 铁匠大叔给你的长剑，带着 药铺小老板送你的几瓶红蓝药剂，相信我，一般用不到蓝色那瓶，不要舍不得用，到最后往往被更高级的药取代，好点的，能去跟杂货铺小奸商换1铜币，但大部分都是被丢弃的命运。</p>
<h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><p>繁华的大陆有着千奇百怪的任务，不再像村长让你按顺序把村子周围清理一遍。<br>但是，刚出来的你面对着高额的悬赏任务，看着别人拿着把鎏金大剑，帅气的撕下悬赏，这时的你，只能摸摸残次的长剑（殊不知，当时，刚获得这把剑的时候，你曾开心的抱着它入睡），然后在任务版最下面一排寻找着。找邻居丢的小猫，帮饭馆打打野味，或者干脆就暂放长剑，去为客人端茶倒水……<br>每晚，盘算着还差多少能换来一把鎏金大剑，幻想着像之前那个人那样，帅气的撕下最顶部的悬赏，你也曾练习多次——撕悬赏的姿势。<br>又如何？<br>· 很多人看着每晚天文般的数字，就慢慢放弃了。在饭馆端菜的闲暇，看着一桌桌刚出来的侠客们谈天论地，默默的想起自己曾经的梦想，但又被老板的一喝惊醒。<br>· 很多人光顾着铜币，最基础的招式都忘记了，买着到手的鎏金大剑，帅气的用自己演练过多遍的姿势，撕下悬赏，在小侠客们艳羡的眼中，傲然的抬起下巴，奔向敌方。结果，一合不到，变血溅当场，连喝红药的时间都没有。<br>· 还有一些人，白天赚铜币，晚上练武功。Atk↑ Hp↓ and 狗带…</p>
<h1 id="衙门"><a href="#衙门" class="headerlink" title="衙门"></a>衙门</h1><p>这是，小侠客踏上这片大陆来，最受教育的一个地方。<br>他们是文明的，<br>他们是合法的，<br>他们能在文明&amp;合法的前提下，让你无言以对。<br>这还是 顺天府 的体验。</p>
<h1 id="武馆"><a href="#武馆" class="headerlink" title="武馆"></a>武馆</h1><p>想做一名侠客，所以刚出来，还是先找一个武馆安顿下来，就算现在不能撕大悬赏，但也可以每天练剑，还可以攒铜币。<br>但，你从1xxxxxxxxxxxx号新手村出来，村长又没给你推荐信，这么多的新手村，都是想做侠客的人，找个武馆谈何容易？</p>
<p><br></p>
<h2 id="第一个武馆，"><a href="#第一个武馆，" class="headerlink" title="第一个武馆，"></a>第一个武馆，</h2><p>武师：看你研究过招式的好坏。<br>小侠客：是的，曾经研究过一些，但是，只是皮毛而已。<br>武师：不错，那就说说 剑招中 探刺剑的动作要领吧。<br>小侠客：(⊙o⊙)…对不起，我只是懂一些皮毛。<br>武师：吓！ 什么↑~ 这都不知道？你怎么研究的招式！那你知道剑招有哪些吗？（鄙视ING）<br>小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫，您刚才说的 探刺剑，属于刺剑一种，刺剑主要分为 平刺剑 、上刺剑 、下刺剑 、低刺剑、后刺剑 、探刺剑 。<br>武师：（依旧鄙视），这对于研究招式的来说是基础知识啊，你连这都不知道，你还说自己研究过招式。（你造假！）<br>往后，就是各种怀疑。。<br>小侠客 OUT</p>
<h2 id="第二个武馆，"><a href="#第二个武馆，" class="headerlink" title="第二个武馆，"></a>第二个武馆，</h2><p>前面很顺利，谈了1个多小时。。。<br>武师：你和别人对战过那么多次，你都用什么剑谱上的哪一式？<br>小侠客：我现在还没看那些剑谱的招式，我只是在想到的几个招式基础上，出一招。<br>武师：哦？ 那你是瞎打咯？<br>小侠客：不是瞎打，我也是有选择的，并不是想到什么就出什么。<br>武师：哦~↑~↓（你就是瞎打，哈哈，被我看出来了吧，瞎打，瞎打，瞎打，耶！）<br>小侠客 OUT</p>
<h2 id="第三个武馆"><a href="#第三个武馆" class="headerlink" title="第三个武馆"></a>第三个武馆</h2><p>武师：你现在是想做 剑客的学童是吗？那说说基本的剑招吧。<br>小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫。<br>武师：恩，可以，那简单说一下 劈剑的动作要领吧<br>小侠客：立剑，由上向下为劈，力达剑身，臂与剑成一直线。<br>武师：恩，不错，但是还有一点——抡劈贴身体右侧或左侧绕一立圆；后抡劈剑要与身体后转协调一致。<br>小侠客：（恍然大悟！）<br>武师：你为什么要做剑客呢？ 剑客的未来如何？<br>小侠客：慷慨激昂的谈论了一下。</p>
<p><br><br><strong>小侠客 达成成就 武馆剑童</strong><br><br></p>
<h1 id="村友"><a href="#村友" class="headerlink" title="村友"></a>村友</h1><p>离开了新手村，曾经你感叹，新手村人真多，但就是这么多人，在被大陆稀释一下，你也很难再找到同新手村的人，更何况你新手村的玩伴。到最后，每次见到村友，即使俩人曾彼此红眼相对，最终也会红脸喝醉。<br>但也可能，曾经俩人红脸喝醉，到如今的红眼相对，亦或，默然无视。</p>
<p><br></p>
<p>这个纷繁的世界<br>虽然还没有离开新手村，但提前体验了这个纷繁的世界。<br>2015年，想想，印象最深刻的还是下半年的这些体会。<br>独自一人来到北京，漂着~<br>2016年，我还是会继续做游戏，<br>我也希望认识更多做游戏的朋友。</p>
<p><br><br><br><br><br></p>
<hr>
<p> PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的… 换句话说：&gt; 别来找我论剑 &lt;</p>
]]></content>
      <tags>
        <tag>抽空写</tag>
      </tags>
  </entry>
  <entry>
    <title>2016,没走偏</title>
    <url>/2017/01/23/2016%EF%BC%8C%E6%B2%A1%E8%B5%B0%E5%81%8F/</url>
    <content><![CDATA[<p>2016回顾：毕业与就业</p>
<a id="more"></a>
<p><br></p>
<hr>
<p>2016年结束有好一阵子了，<br>但没有过年，总感觉2016还没有过去。。<br>这次的总结，与之前的不大一样；<br>有着人生的一个重要的节点，毕业与就业。</p>
<hr>
<p><br></p>
<h1 id="简单又充实的大学生涯"><a href="#简单又充实的大学生涯" class="headerlink" title="简单又充实的大学生涯"></a>简单又充实的大学生涯</h1><p>四年的大学生涯，圆满结束。<br>准确的来说应该是三年吧，最后一年基本就在北京实习了。<br>回首，整个大学生涯，还算可以吧，<br>虽然没有挂过科，没有做过弊，没有跳进三元湖里游个泳，没有裸过奔…<br>但是，也这么平平安安的过来了。<br><img src="http://img.blog.csdn.net/20170123230955916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>我投入游戏开发这行，是我高考完就定下的，<br>当时找有没有相关的专业，<br>挨，中国传媒大学新开了一个相关的，<br>但是，高考失利，没上了（本来正常发挥分也够呛能够到）；<br>只好选了个计算机方向的，怎么说，也是沾亲带故的嘛。<br>刚开始是 软件工程专业，后来通过卓越工程师计划转到了计算机科学与技术。<br>（这个计划，选拔时候又笔试又面试，结果，就是假期的时候多上了几个培训课，毕竟第一批，没经验呀，可怜的小白鼠）</p>
<p>没太大关系，<br>毕竟，我的目标是游戏开发。<br>在完成正常课程情况下，去自学游戏开发。<br>于是，大一拉了几个人一起去参加齐鲁软件大赛。<br>上大学是我第一次接触编程，<br>而且在大一，也没学什么，一堆基础课 加上 谭老师的《C++ 程序设计》。<br>就想做一个游戏出来…<br>那年夏天，暑假，一个屋子里有6，7个团队，都是准备参加大赛的；<br>身为队长加带头人，当然要对这个团队负责；<br>用什么方式开发，如何制定进度，每个人的分工，每个人工作的时间，事无巨细。<br>中间那些苦难的时光，就不多叙述了。<br>记忆最深刻的，就是五个人团结一致，找的小伙伴都很靠谱，记得当时应该是朝八晚八，中午有一个小时午休。<br>每个人都很自觉，不需要督促，不需要烦忧。<br>大概是一个月左右（五人合作时间），大体雏形已经出来了，<br>到最后，整个屋子没剩几个人了，但我们依旧坚持了下来。<br>最终，我大学期间第一个项目 —— 《残月夜》 出炉。</p>
<p><img src="http://img.blog.csdn.net/20131009215534656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="这里写图片描述"></p>
<p><a href="http://blog.csdn.net/lttree/article/details/12525775" target="_blank" rel="noopener">关于残月夜</a></p>
<p>大二这一年，主要应该是ACM吧。<br>本来大一暑假那段时间就应该去集训，但是因为齐鲁软件赛，就放下了ACM。<br>然后，大二就比较吃力了。ACM在我们学校也算刚开始起步，方向什么都靠着摸索，也不是很轻松。<br>结果，省赛失利，黯然退出。（因为不准备考研，所以大三要搞一搞就业相关的东西了，就没有在ACM再拼一年）<br>但是，蓝桥杯的成绩还可以，起码有个奖了…</p>
<p><img src="http://img.blog.csdn.net/20140624195413781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20140624195453375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><a href="http://blog.csdn.net/lttree/article/details/32321653" target="_blank" rel="noopener">关于我的ACM</a></p>
<p>然后，到了大三。<br>大三，就开始为就业做准备了，<br>首先是，重新拿起cocos2d引擎，模仿着做了很多当下流行的游戏，有些发了教程博文，有些就自己做着玩了玩：HelloKitty2048、万圣大作战，别踩白块、flappy bird、消灭星星。<br>然后，开始看一些书籍，因为我要做一个”有思想”的游戏开发者，多学多看一些游戏设计，可能更偏向于策划的东西。<br>最后，因为大三了，开始到达专业课的最终章了，就开始各种课设，大作业；再加上卓越计划的培训班，<br>学了一堆杂七杂八的，貌似现在已经忘了不少的东西：HTML，MFC，Android，iOS等等<br>然后，参加了cocos官方举办的游戏开发大赛，这个要好好说道说道了:<br>当时，我记得反转盛行，记得很火的捕鱼达人，然后就想了反过来，来个捕人达鱼，但是名字被美术同学嘲讽了，就改了个非常洋气的名字：人鱼塞壬。<br>时间不是很充裕，<br>看到比赛的时候就不是很早，<br>前期忙于最后期末考试及各种大课设，<br>中期，因为卓越班，暑假要到北京千锋培训十天，<br>但是，我的美术君是在学校进行甲骨文培训。<br>在千锋培训，也要交大作业呀，于是，一边学iOS开发，做大作业；一边再去忙活比赛作品。<br>事实证明，三心二意是不好的，尤其是当你两边都想做好的时候，最后iOS作品很一般，比赛作品也没实现多少。<br>还好回到学校，还有一段时间，马力全开的赶工，<br>先完成了大体的东西，然后慢慢往上加各种功能，到最后功能也没有加多少。<br>当初，游戏设定最初所想的都没有加上，<br>后来，作品交上去以后，也没有动力去完善它。</p>
<p><img src="http://img.blog.csdn.net/20140928175809265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20141031230507078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20150818075936616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><a href="http://blog.csdn.net/lx417147512/article/category/2602825" target="_blank" rel="noopener">2048系列教程</a><br><a href="http://blog.csdn.net/lx417147512/article/category/2889567" target="_blank" rel="noopener">别踩白块系列教程</a><br><a href="http://blog.csdn.net/lx417147512/article/category/3258131" target="_blank" rel="noopener">消灭星星系列教程</a><br><a href="http://blog.csdn.net/lx417147512/article/category/2677429" target="_blank" rel="noopener">万圣大作战系列教程</a><br><a href="http://blog.csdn.net/lttree/article/details/47729343" target="_blank" rel="noopener">关于人鱼塞壬</a></p>
<p>大四的时间，基本就是在北京实习了，至今也在这家公司，后面也会谈到。</p>
<p>短暂的大学生涯，印象最深刻的就是启蒙我CSDN的 贺利坚老师，ACM三大巨头 卢云宏老师、周世平老师、封玮老师。<br>然后，就是我那些奇葩可爱行为怪诞的室友与同学们，一起拼搏ACM、蓝桥杯的队友们，一起奋战齐鲁赛的组员们。</p>
<p>噢，<br>大学最亏欠的还有我那女友，<br>看上面那些忙忙碌碌的东西，就知道，<br>我很少有时间能陪她，不是在实验室就是在外面比赛。<br>感谢她在背后一直默默支持我鼓励我。<br>（这段话，绝对不是她在旁边逼迫我写的，键盘什么的跪着也不疼）</p>
<p><br></p>
<h1 id="奋斗的工作团队"><a href="#奋斗的工作团队" class="headerlink" title="奋斗的工作团队"></a>奋斗的工作团队</h1><p>话说，<br>那应该是2015年十月还是十一月份的，<br>一人一包一行李箱闯北京，<br>面试了三家，就落户于现在这个铭匠公司，<br>以前都是我自己在学校做，自己负责全部。<br>第一次接触，真正的游戏公司是如何运作的。</p>
<p>其实，在小公司干活，是一件非常累而且难的事情。<br>你会负责很多东西，你需要取舍，<br>哪些技术知识，浅尝辄止即可，无须深入；<br>哪些技术知识，需要好好研究探寻；<br>庄子中也谈论过：<br>吾生也有涯，而知也无涯。以有涯随无涯，殆已。<br>所以，把有限的精力投入到刀刃上是很重要的。</p>
<p>在 铭匠 呆了也有一年多了，<br>期间参与了3.2个游戏制作。<br>继续坚持在这里，还是因为做游戏的态度与氛围。<br>毕竟，还年轻，工作的原因不是单纯的铁饭碗或者高回报。<br>个人的发展与心情占据更高的位置。<br>更加重要的是，<br>我相信自己的眼光，<br>我相信我们团队。</p>
<p>马上游戏就要上线了，<br>史诗级大作:   诛神记！</p>
<p><img src="http://img.blog.csdn.net/20170123154953588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><br></p>
<h1 id="一些杂事"><a href="#一些杂事" class="headerlink" title="一些杂事"></a>一些杂事</h1><h2 id="今年，也读了一些书，有些是同事推荐的，有些是自己想看的。"><a href="#今年，也读了一些书，有些是同事推荐的，有些是自己想看的。" class="headerlink" title="今年，也读了一些书，有些是同事推荐的，有些是自己想看的。"></a>今年，也读了一些书，有些是同事推荐的，有些是自己想看的。</h2><ul>
<li>《活着》</li>
<li>《REWORK》</li>
<li>《从0到1》</li>
<li>《生死疲劳》</li>
<li>《人类简史》</li>
<li>《卓有成效的程序员》</li>
<li>《代码的整洁之道》</li>
</ul>
<h2 id="学python"><a href="#学python" class="headerlink" title="学python"></a>学python</h2><p>初衷是因为感觉python这个脚本语言很强大，可以做各种辅助自己的工具。<br>最后，也实践了一些，发工作日报，删文件名空格，火车票查询，感觉也不错，<br>为什么有种大炮打苍蝇的感觉。。。<br>接下来，还要做一些更多好玩的东西。。。</p>
<h2 id="个人博客-www-lt-tree-com"><a href="#个人博客-www-lt-tree-com" class="headerlink" title="个人博客  www.lt-tree.com"></a>个人博客  <a href="http://www.lt-tree.com/" target="_blank" rel="noopener">www.lt-tree.com</a></h2><p>用 hexo+Github 搭建了自己的个人博客。<br>现在，还没有腾出手好好研究，只是套了别人的模板。</p>
<h2 id="Unity"><a href="#Unity" class="headerlink" title="Unity"></a>Unity</h2><p>学了一些Unity的东西。<br>简单的学习，起码如果换引擎，也不会手足无措。<br>以后，也可能转Unity了。。。<br>有点准备。</p>
<p><br></p>
<h1 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h1><p>2017年，<br>第一件想做的事就是 —— 减肥。<br>曾经不怎么重视体重，<br>晚上学习，嘴巴闲不下来，<br>结果现在越来越严重了。<br>是时候该重视一下了，<br>健康，是革命的本钱嘛！</p>
<p>第二件事，读更多的书。<br>技术书籍可能不会读很多吧，<br>毕竟，有些东西等到出书，可能都被淘汰了。<br>主要想读更多的非专业技术书籍，<br>比如去年读的《活着》、《生死疲劳》等，<br>当然，还要扩展其他类别的。<br>你不知道下一款游戏是什么类型的，多扩充一下自己知识体系还是很好的。</p>
<p>最后一件事，老生常谈的 —— 学习。<br>互联网这个行业，原地踏步就是退步。<br>还是要一直学下去，<br>学还要有选择的学，不能瞎学。</p>
<p><br><br><br><br><br></p>
<hr>
<p>最后，<br>大学四年，没走偏。<br>毕业以后，没走偏。<br>2017，继续掌舵前行</p>
]]></content>
      <tags>
        <tag>抽空写</tag>
      </tags>
  </entry>
  <entry>
    <title>2017, 迷不茫</title>
    <url>/2018/04/03/2017,%20%20%E8%BF%B7%E4%B8%8D%E8%8C%AB/</url>
    <content><![CDATA[<p>2017都过去了4个月，<br>才有空，好好写写  过去的这一年。</p>
<a id="more"></a>
<p><br></p>
<hr>
<p>2017 - 2018, 发生了很多事，按时间段来分：<br>1.A公司 倒闭<br>2.加入&amp;离开 B公司<br>3.加入 C公司</p>
<hr>
<p><br></p>
<h1 id="A公司-Over"><a href="#A公司-Over" class="headerlink" title="A公司 Over"></a>A公司 Over</h1><p>其实，早就预感到了这一天的到来。<br>薪酬已经很低了，依旧留到最后。<br>首先，我还是比较感性一些，我在A公司呆了近两年的时间，我从没毕业实习就在这。<br>其次，我在这里能学到很多东西，同伴都是很资深且专业的人。<br>最后，我喜欢这个公司的氛围，喜欢大家一起工作共事的感觉。</p>
<p>最后做的TCG游戏的框架模式，也是我所喜欢的类型。<br>就像女巫去熬制药剂一样，我们负责提供原材料；策划通过不同原材料的比例来合成不同的东西。</p>
<p>最后没有撑下去，从我的角度来总结就是：<br>1.版号的限制。<br>这是最主要的问题，我们主要眼光放在了 中国的苹果市场，在游戏基本完成时，恰好赶上版号限制。那时候由于是版号政策刚刚实行，还是比较严格，公司有耗了大半年吧。<br>2.目标过于单一<br>这是后来，我入职B公司以后，才想到的。如同第一个问题，过于纠结 中国的苹果市场；相应的苹果海外市场及安卓海外市场也是可以去考虑的。对于技术来说，改成多语言版本，并不是难题。<br>当然也有几个问题，我没有仔细考虑：</p>
<ul>
<li>做海外市场的推广，如何进行。A公司是研发团队，对运营及发行，完全没有能力。</li>
<li>所做的题材是 西游题材，海外对此的接受程度如何。</li>
</ul>
<p>3.游戏选型<br>这是，我从开始就隐隐担忧的事情。做的是对战类型的游戏，它不像很多游戏，发行有很多技巧去让游戏营收。这种游戏，更重玩家数量，要的就是与人斗，其乐无穷的效果。一个小公司去研发这种类型的游戏，着实不能让我有信心。虽然，最后决定要在对战AI上弥补人数不足的问题，但是，感觉还是有些差那么一丢丢。（让AI 充个648！）</p>
<p>但是，我并不是老板，也不是专业的人员。所以，我的想法仅仅是从我能看到的方面去考虑。这里面我肯定疏忽了很多东西，毕竟，老板他们都是专业的，都在这个行业做了十几年，比我这个小菜鸟懂得太多了。</p>
<p>然后，就是在A公司的收获吧：<br>1.技术<br>虽然游戏不是很大，但是整个一套流程，及周边一些相关开发（SDK接入；ios平台上，针对Object-C代码的修改；android平台上，针对java代码的修改；等等…）<br>2.团队<br>一个对的团队是很重要的，三观基本一致，朝着共同的目标去奋斗，鼓励学习，追求高效。还记得凯神拿着大长刀演示，人物挥动武器时重心的变化，手的位置，发力点等；涛哥又捣鼓出了一个android应用，附近的人的聊天室…<br>3.无悔<br>在一个公司，心甘情愿的留到最后。这真的不是很容易的事情。因为这个游戏是我喜欢做的，虽然不是独一无二的原创，但是无论是玩法，还是游戏表现，还是做游戏的过程，都让我对它有信心。我感觉到自己是在开发一款游戏，美术对设计一丝不苟，吹毛求疵，策划对数值不断优化测试。不管怎么说，有过这么一次经历，也无悔了。</p>
<p><br></p>
<h1 id="B公司的入职与离职"><a href="#B公司的入职与离职" class="headerlink" title="B公司的入职与离职"></a>B公司的入职与离职</h1><p>A公司over以后，就开始要找工作了…<br>毕竟我也不是什么富二代啥的，在A公司由于一直在研发，也没有很高的收入，再加上女朋友也在身边，所以经济压力比较大。然后就没有花很长的时间去找一个工作。最后在很多公司中，选择了B公司。<br>我选择B公司的原因如下：</p>
<ul>
<li>资金充裕，游戏已经上线，营收虽然不多，但是基本能够自给自足，正在优化准备大力推广阶段。</li>
<li>扁平化的团队，其他同事的技术水平都比较高。</li>
<li>大公司的孵化团队，有很好的资源。</li>
<li>主攻海外市场的细分领域，目标明确且合理。</li>
</ul>
<p>在这家公司也呆了快一年的时间。老板和同事都挺好，由于个人原因吧，最终还是选择了离职。其实，用大白话来说，任何一个小型的团队，在维护<strong>基本</strong>团队建设基础上，最重要的一件事，还是<strong>做成一款产品</strong>。<br>我离职，也是想了很久才下决定的，因为同事关系都挺好，也一起呆了这么久，真的不容易。<br>我离职的原因如下：<br>1.技术<br>最主要的原因。不能说在这个公司没有学到技术，只是提升速度有些缓慢。因为偏向于换皮一类，技术提升还是有限度的。我希望提升的速度更快一些。<br>2.时间<br>个人喜好吧，我还是喜欢折腾一些东西，所以，我希望有一些自己的时间去做一些东西。但是工作时间有些长，休息都不够，更不用提其他的一些东西。这也是我有近大半年没有写过东西的原因之一（懒惰是原罪= =..）<br>3.观念<br>我目前是处于学习阶段，但其他同事都是工作了5年6年，甚至9年10年的。他们是想用自己所学的东西来变现的阶段。所以，很多东西就可能有些冲突。我不想太过于牺牲我自己来成全团队，这如同一场豪赌，赌赢了还好，若是输了…毕竟，我现在的半年和五年以后的半年，价值是不一样的。</p>
<p>在A公司，我坚持到了最后，是因为对我技术提升有很大的帮助。在B公司，收入是足够的，但是我还是离开，因为和我个人发展的确有冲突。我觉得对我不公平，对公司也不公平。所以，选择了离开。</p>
<p>我在B公司也学到的最主要的几个词：快速迭代，快速试错，搜集数据，重视反馈。</p>
<p><br></p>
<h1 id="加入C公司"><a href="#加入C公司" class="headerlink" title="加入C公司"></a>加入C公司</h1><p>这次找工作目标，其实挺明确的。<br>我去面试的时候，也没有藏着掖着；虽然面试有很多套路，很多技巧；但我觉得那都不是长久之计，适当的坦诚，真的很有必要。<br>公司招人，肯定看中下面几方面：</p>
<ul>
<li>能不能干活</li>
<li>能不能留下</li>
<li>能不能学习</li>
</ul>
<p>再往后才是薪资什么的<br>面试官，往往能分析到能不能干活和能不能学习；对于能不能留下，不好判断。<br>所以，我面试的时候，往往会表达出我所看重的东西，我所期望的东西 —— 个人的成长和进步；也正因为如此，有很多机会我都错过了。<br>其实，我觉得个人的进步和发展和工作并不冲突；在工作能力胜任的基础上，个人的每一分成长都会对工作产生积极正面的影响，但是，往往会被认为我会误工，对工作不认真不努力。<br>对此，我也只能抱歉离开。</p>
<p>选择C公司，真的是因为三观很合，无论是技术还是负责人。公司更看重功劳而非苦劳，鼓励高效率工作，而非低效率磨工，等等方案，当让我很有亲切感，归属感。<br>而且，入职以来，很多事情都验证了我的选择的正确性。</p>
<p><br></p>
<h1 id="这两段经历的总结"><a href="#这两段经历的总结" class="headerlink" title="这两段经历的总结"></a>这两段经历的总结</h1><p>这几年，我一直贯彻着，个人发展重于其他，不将就，不妥协。<br>但是还是或由于个人情感，或其他，将就了一些，妥协了一些。<br>正如我这篇文章的题目 迷 但不 茫。<br>过去这几年很迷，因为我目标明确了，但是却没有准确的实施下来。<br>过去这几年不茫，因为我还是朝着我的方向在走。<br>通过这几年的经验，最起码让我眼界扩宽了；身边的同事都比我资深，很有经验，有想法，与他们的合作与交流，让我进步很多。</p>
<p><br></p>
<h1 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h1><p>1.工作上<br>找一个对口的公司很重要，既然找到了，那就去做好它。<br>现在证明了我选择它，我选对了；接下来要给它看，它选择我，同样也是正确的。</p>
<p>2.生活上<br>恢复博客的更新，个人主页的更新。<br>以后，还是会维护CSDN和个人主页，各有侧重。<br>博客，更侧重于算法上的一些东西；个人主页，更多的是一些杂谈感想还有技术。</p>
<p><br><br><br><br><br></p>
<hr>
<p>然后，拨开迷雾，再度起航！</p>
]]></content>
      <tags>
        <tag>抽空写</tag>
      </tags>
  </entry>
  <entry>
    <title>2018, 稳中进</title>
    <url>/2019/02/10/2018%EF%BC%8C%E7%A8%B3%E4%B8%AD%E8%BF%9B/</url>
    <content><![CDATA[<p>对过去2018年的总结，及未来2019年的展望。</p>
<a id="more"></a>
<p><br></p>
<h1 id="过去的一年"><a href="#过去的一年" class="headerlink" title="过去的一年"></a>过去的一年</h1><p>过去的2018年，虽然大环境变差了，但是还是有很多的收获。</p>
<h2 id="多读书，读好书"><a href="#多读书，读好书" class="headerlink" title="多读书，读好书"></a>多读书，读好书</h2><p>过去一年，读了一些书，各种各样的，反而技术类的书籍没读多少。</p>
<ul>
<li>《三体》</li>
<li>《时间简史》</li>
<li>《我们仨》</li>
<li>《天才在左，疯子在右》</li>
<li>《追风筝的人》</li>
<li>《白夜行》</li>
<li>《解忧杂货铺》</li>
<li>《原则》</li>
<li>《游戏设计模式》</li>
<li>英文版《小王子》</li>
</ul>
<p><br></p>
<h2 id="知识付费"><a href="#知识付费" class="headerlink" title="知识付费"></a>知识付费</h2><p>技术书籍没有读多少，大部分技术上相关的东西，都是通过知识付费来获取的。</p>
<p>因为我发现，知识付费的东西相对于书籍，更先进，更贴合实际，有些甚至更成体系，而且还有互动，对于不了解的东西，可以及时去请教或者与一起学习的人讨论。</p>
<p>目前主要学习的APP是 知识星球 和 极客时间。</p>
<ul>
<li><p>帅张和他的朋友们</p>
<p>知识星球APP上知名星球之一，很多志同道合的朋友们，嘉宾和球主的精华很棒。</p>
</li>
<li><p>左耳听风</p>
<p>左耳朵耗子的全年付费专栏，讲述一些新技术、分布式、编程范式、进步方法、面试、高效学习、高效沟通等。</p>
</li>
<li><p>从0开始学游戏开发</p>
<p>原网易游戏引擎架构师的专栏，主要看一下大厂工程师的思维及观点等。</p>
</li>
<li><p>趣谈网络协议</p>
<p>系统了解学习网络相关知识。</p>
</li>
<li><p>人工智能基础课</p>
<p>了解人工智能的知识框架，更清晰的认识学习路径等。</p>
</li>
<li><p>数据结构与算法之美</p>
<p>梳理一下数据结构算法，还有一些实战练习等。</p>
</li>
<li><p>程序员进阶攻略</p>
<p>不光是技术上的进步，其他能力的提升进步也同样重要，这个专栏就是讲述程序员在未来可能遇到的很多选择，很多难关及如何面对。</p>
</li>
<li><p>每日一课</p>
<p>很多会议的技术分享及演讲等。</p>
</li>
</ul>
<p><br></p>
<h2 id="公司"><a href="#公司" class="headerlink" title="公司"></a>公司</h2><p>2018年，我从上一家公司离职，到了现在的公司。</p>
<p>这一年，做了很多事情。</p>
<ul>
<li><p>主导 代码规范 的制定及 功能开发流程规范 的制定</p>
<p>刚来的时候，发现这方面不完善，于是自己去搜集整理很多文章，贴合所用的语言，制定了这两个  规范。并且不断的去维护修改，真正做到了一个规范而非空谈。</p>
</li>
<li><p>XMind进行规划整理</p>
<p>以前做功能，最多也就在纸上写写画画。</p>
<p>来到这个公司，发现大家都在使用XMind进行所作功能或体系的整理。</p>
<p>好的东西当然要吸收过来，也开始使用XMind整理。</p>
<p>嗯，真香~</p>
</li>
<li><p>短暂的管理</p>
<p>下半年，主程由于身体原因，休息了一段时间。</p>
<p>我短暂的管理了一下团队，虽然只是短短一段时间，真正在其位，还是感到责任之重。</p>
<p>最大的一点感悟就是，每个人都有自己的诉求，管人比做事更麻烦。</p>
<p>然后就是，做游戏，主程所追求的是全局最优，分配下去每个人所追求的局部最优。</p>
<p>最后，一定要多注意身体，身体才是革命的本钱呀！</p>
</li>
<li><p>最佳新人</p>
<p>在公司年会的时候，被给予《最佳新人》奖项。</p>
<p>这既是对我过去一年努力工作的肯定，也是对未来工作的一个鞭策。</p>
<p>新的一年，要继续加油呀。</p>
</li>
</ul>
<p><br></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p>理财</p>
<p>开始着手理财方面的东西，不要等到有钱了再去想这件事。</p>
<p>合理分配资产，不只是为了增值，也是为了预防。</p>
</li>
<li><p>英语</p>
<p>英语的重要性，不用多说，再次捡起来，先从背单词开始。</p>
<p>为什么先开始背单词呢？背单词无用论？</p>
<p>我是会日常韩语的（就是日常交流神马没问题，但是没法考试等），在真正日常使用或者看文献，   我亲身体验最重要的就是单词量了。</p>
<p>理解不了某个句子，并不是因为你语法不过关，而是里面单词不懂啥意思。</p>
<p>（当然，以上都是我个人理解感悟，并非专家之言。）</p>
</li>
<li><p>健身锻炼</p>
<p>身体是革命的本钱，每天下班，都花一段时间练一练。</p>
<p>虽然体重没什么大变化，但是体型变好了一些，而且精气神都不一样了。</p>
</li>
<li><p>lt-tree.com</p>
<p>个人主页，采用模板，重新整理，恢复更新。</p>
</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="新的一年"><a href="#新的一年" class="headerlink" title="新的一年"></a>新的一年</h1><p>在2019，要干些什么呢？</p>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>公司的项目这一年即将上线，之前taptap三天版本，反响很好；这次的版本有更多更好的玩法，希望能火一下。当然，设计玩法、宣传游戏这些，都跟我没啥关系；我能做的就是将现有项目架构优化完善。</p>
<h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><p>微信深入大家的生活，公众号也是时候做一个玩一玩了，折腾呗。</p>
<h2 id="小游戏"><a href="#小游戏" class="headerlink" title="小游戏"></a>小游戏</h2><p>公众号这个非主业都做了，小游戏还远吗？</p>
<h2 id="减肥"><a href="#减肥" class="headerlink" title="减肥"></a>减肥</h2><p>身体是革命的本钱呀。</p>
<h2 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h2><p>继续学习理财方面的知识，做好资产的分配布置。</p>
<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>要学会做一个吝啬及懒惰的人。</p>
<p>对自己时间吝啬一些，没必要的时间不要花费；</p>
<p>对自己工作懒惰一些，能用脚本做的事情，不要重复劳动。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>过去的一年，稳中求进；</strong></p>
<p><strong>希望2019，再上一层楼。</strong></p>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>抽空写</tag>
      </tags>
  </entry>
  <entry>
    <title>2019, 渐露角</title>
    <url>/2020/01/31/2019%EF%BC%8C%E6%B8%90%E9%9C%B2%E8%A7%92/</url>
    <content><![CDATA[<p>对过去2019年的总结，及未来2020年的展望。</p>
<a id="more"></a>
<p>今年是工作的第五年，毕业的第四年。<br>在一个行业打拼了五年，也应该能摸到一些门路了，起码大概的条条框框也该 门儿清 了。</p>
<p><br></p>
<h1 id="忆昔日，渐入佳境"><a href="#忆昔日，渐入佳境" class="headerlink" title="忆昔日，渐入佳境"></a>忆昔日，渐入佳境</h1><p>过去的一年很忙碌，虽然付出了很多，但也有很多的收获。</p>
<h2 id="公司"><a href="#公司" class="headerlink" title="公司"></a>公司</h2><p>一直在做 黑月 这款项目，在年前进行了五次测试，效果还不错。<br>这个项目，是从我来公司，就一直跟进的项目，目前为止已经快开发两年，从第一次测试到第五次测试，一步步见证这款游戏的变化与成长。<br>单看技术角度，相较于刚来时的情况，有很大的变化。<br>一些基础工具，扩展工具，脚本工具，自动化工具的搭建，也初见规模。<br>外延拓展分享，内部流程规范等，也很有成效。<br>虽然项目很忙，但也抽出时间，两周一期的分享，也做了十期，反响很好。<br>后面，个人负责项目中联网对战模块，吸取之前多个版本的精华，参考外界的资料，根据当前项目具体情况，也实现了一套闭环的架构。（包含 不同步判定、不同步采集、不同步回放、不同步纠错、不同步统计、延迟统计等）在最后第五次测试的效果也达到了自己的预期与标准。</p>
<p>过去的这段时间，尤其最近的一年非常的忙碌，但是，也很有收获。</p>
<p>现在项目渐入尾声，由于种种原因，非常遗憾的无法继续随着团队走下去。最后还是祝福游戏大火，不枉负大家几年来的辛勤劳动。</p>
<h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><p>阅读，依旧在进行。在过去的一年，主要阅读行业相关的内容，更偏重一些软技能。其他方面的书籍，并不多。只是在 极客时间 中，看了不少大咖的分享，订阅了不少专栏。</p>
<h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><ul>
<li>《未来简史》</li>
<li>《简单逻辑学》</li>
<li>《小狗钱钱》</li>
<li>《非暴力沟通》</li>
<li>《Alice in Wonderland》</li>
<li>《Peter Pan and Wendy》</li>
</ul>
<h4 id="知识付费"><a href="#知识付费" class="headerlink" title="知识付费"></a>知识付费</h4><ul>
<li>《数据结构与算法之美》</li>
<li>《左耳听风》</li>
<li>《数据分析实战45讲》</li>
<li>《技术领导力实战笔记》</li>
<li>《技术与商业案例解读》</li>
<li>《说透中台》</li>
<li>《设计模式之美》</li>
<li>《项目管理实战》</li>
<li>《Python核心技术与实战》</li>
</ul>
<h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><p>去年的目标是要减肥，结果忙起来，真是……  </p>
<p>主要还是自己懒啊，年末的时候公司体检，查出来一堆问题，再也不是 健康灵活的小胖子了（好吧，小胖子怎么可能健康呢？时候未到罢了）。</p>
<p>今年，真的要重视一些了，身体这辆车抛锚，哪个路口绿灯都没用啊。</p>
<h3 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h3><p>据报道（不一定权威哈，但也参考参考吧），84%的90后有理财习惯。</p>
<p>当代年轻人压力太大了，需要合理规划自己的财产，为自己未来提前规划打算一下。</p>
<p>也通过主动了解，主动咨询等方式，开始一些理财行为（比如定投、打新等等），去年有获得一些小额收益，更多的是对这方面知识，有更深刻的理解。</p>
<h3 id="个人主页、公众号"><a href="#个人主页、公众号" class="headerlink" title="个人主页、公众号"></a>个人主页、公众号</h3><p>个人主页恢复了更新，但是频率很低。</p>
<p>有些文章写完大纲草稿，还没有整理；有些文章写了一半，还未完成；更有一大批的方向和主题堆积。</p>
<p>公众号申请完毕，在测试中，也没有好好整理过。</p>
<p>百废待兴的节奏= =.</p>
<h3 id="小游戏"><a href="#小游戏" class="headerlink" title="小游戏"></a>小游戏</h3><p>em….</p>
<p>有策划案，有Demo美术资源，就差一个程序员了= =，猜猜那个程序员在哪里呢。</p>
<p>好吧，我胖是有原因的。</p>
<h3 id="女朋友"><a href="#女朋友" class="headerlink" title="女朋友"></a>女朋友</h3><p>有一个在背后默默支持、鼓励的女朋友是我迄今为止最荣幸的一件事了。</p>
<p>过去的一年，仿佛回到了大学生活；</p>
<p>那时虽然在同一所大学，但是忙于实验室，无暇陪伴；</p>
<p>现在虽然在同一屋檐，忙于工作，无暇照顾。</p>
<p>经常我回家时，她已睡去，我起床时，她已上班。</p>
<p>但是，她依旧给我很大的鼓励，很大的支持，让我没有后顾之忧，只需勇往直前。</p>
<p>一切尽在不言中。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="望明朝，稳扎稳打"><a href="#望明朝，稳扎稳打" class="headerlink" title="望明朝，稳扎稳打"></a>望明朝，稳扎稳打</h1><p>今年的开头有点崩啊，先是武汉肺炎 来势汹汹，再是Kobe离世 晴天霹雳。</p>
<p>在这个多事之秋，各路“神仙”尽显下流本色，发国难财，谣言四起，制造恐慌，令人长吁短叹。</p>
<p>本来，过年开开心心去韩国玩一圈，结果因为疫情也玩的不尽兴，很早就回来自我隔离了。</p>
<p>各省市不断延后上班日期，给整个不大好的大环境，更添几分寒意。</p>
<p>跟女朋友在一起也快有10年了，不能再像以前一样，为了自己更在意的东西去牺牲太多的利益，现在需要更加稳妥一些，稳扎稳打，一步一个脚印。</p>
<p>总之，过去的一年，很多FLAG也算完成了，立住了；但也有很多没有立住，倒得七扭八歪。</p>
<p>立FLAG时间：</p>
<ul>
<li>减肥，目标80KG</li>
<li>小游戏</li>
<li>公众号</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今年主打一个词 —— 乐观 ！</p>
<p>工作了五年，也对自己的未来的发展方向，有了些理解。</p>
<p>现在就是朝着既定的目标与方向，稳扎稳打，奋力前行。</p>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>抽空写</tag>
      </tags>
  </entry>
  <entry>
    <title>2020，苦中乐</title>
    <url>/2021/01/24/2020%EF%BC%8C%E8%8B%A6%E4%B8%AD%E4%B9%90/</url>
    <content><![CDATA[<p>对过去2020年的总结，及未来2021年的展望。</p>
<a id="more"></a>
<p>疫情反复，项目上线，苦中作乐</p>
<p><br></p>
<h1 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h1><p>过去的一年，很难。<br>还记得过年期间，国内疫情初起，大家被迫在家待机的时候，由于国外还未见端倪，我还在国外四处游玩，只不过已经开始谨慎的带起了口罩。<br>然后，事态日趋严重，我也慢慢收起了玩心，尽早回了国，怕晚了回不来了（果然，同去的妹妹，没有与我们一起回来，最终晚回国好久）<br>最终，大家都一起扛了过来，万物复苏，欣欣向荣，不过，最近又有复苏的迹象，为了不折腾，不惹事，我就选择对了不回家，留在北京过年了。</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>正如去年年结时所说的那样，我从上家公司离职，然后在疫情如此严峻的情况下，也经由之前同事的帮助，加入了现在的公司。<br>由于入职第一年，并且恰逢新游上线；忙碌了一整年，但最终也有所收获，不负付出。<br>最大的收获，就是在行业五年，终于有一款说得上名的产品《少年三国志·零》，虽不说是从头跟到尾，但是后面也跟着经历了几次付费测试及定级测试乃至最终的正式上线。<br>所负责的功能，也从最开始的接手旧有功能的维护，到独立调研并设定新玩法的技术选型，到后面独自维护整个战斗系统。<br>虽说年会上在奖品上无所斩获，但经过这一年的努力也得到团队的认可，获得 最佳新人 的称号。</p>
<p><br><br><br></p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>这一年由于疫情原因加上项目上线，基本全身心投入工作中，所学所读也有限，尤其是身体上开始亮起了红灯。</p>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ul>
<li>《设计模式之美》</li>
<li>《10x程序员工作法》</li>
<li>《技术领导力实战笔记》</li>
<li>《高效表达》</li>
</ul>
<h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><ul>
<li>《穷爸爸富爸爸》</li>
<li>《能力陷阱》</li>
<li>《掌控习惯》</li>
<li>《激荡十年，水大鱼大：中国企业2008-2018》</li>
<li>《上帝掷骰子吗：量子物理史话》</li>
<li>《象与骑象人》</li>
<li>《笑场》</li>
<li>《恶魔法则》</li>
</ul>
<p><br><br><br><br><br></p>
<h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1><p>过去的一年，将自己霍霍的够呛，身体从前年黄灯变成了红灯，新的一年需要缓和一下了，健康才是革命的本钱。而且，过去的一年，也常因为工作，忽略了女友的感受，新的一年也要多稳固稳固女友，争取有进一步的发展。</p>
<p>工作上的事情，也渐入佳境，可以开始腾出手来做一些总结，扩展等事情，充分发挥主观能动性。</p>
<p>又到了立FLAG时间了。<br>去年立FLAG的时候，生怕完不成，悠着悠着写了仨，结果倒了俩，剩的那个也颤颤巍巍。<br>今年，我再恬不知耻的立几个吧，也得有个目标不是…</p>
<ul>
<li>减肥（这次一定）</li>
<li>1款小游戏</li>
<li>3次旅游</li>
<li>16场篮球</li>
</ul>
<p>新的一年，关键词依旧是 —— 乐观。</p>
<p>笑对工作，笑对生活，笑对世界，深呼吸，没有什么过不去的。</p>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>抽空写</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos2d iPhone 边缘触屏延迟现象</title>
    <url>/2018/06/06/Cocos2d%20iPhone%20%E8%BE%B9%E7%BC%98%E8%A7%A6%E5%B1%8F%E5%BB%B6%E8%BF%9F%E7%8E%B0%E8%B1%A1/</url>
    <content><![CDATA[<p>Cocos2d iPhone 边缘触屏延迟现象<br>发现并解决问题全历程</p>
<a id="more"></a>
<p><br></p>
<hr>
<p>初衷:<br>这是在工作中遇到BUG，然后解决BUG的历程。<br>希望我的思路及方向能对你有所启发。</p>
<hr>
<p><br></p>
<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>游戏在真机测试出现某些区域不响应的问题。</p>
<p><br></p>
<h1 id="查原因"><a href="#查原因" class="headerlink" title="查原因"></a>查原因</h1><h2 id="找反馈者沟通"><a href="#找反馈者沟通" class="headerlink" title="找反馈者沟通"></a>找反馈者沟通</h2><p>去了解具体发生的问题及有无任何规律等。<br>了解到只在<strong>iPhone手机</strong>上才出现。</p>
<h2 id="自己测试"><a href="#自己测试" class="headerlink" title="自己测试"></a>自己测试</h2><ul>
<li>黑盒<br>方法：根据现象，进一步测试，打不同手机包等<br>经过各种测试，总结出的特征如下：<ul>
<li>只有iPhone手机有问题（测试过几款Android手机 及 模拟器）</li>
<li>只有边缘触摸有问题（将触摸区域移动过不同的位置）</li>
<li>只有iPhone 6s以上手机有问题</li>
</ul>
</li>
<li>白盒<br>方法：打印触屏信息等。<br>发现 开始触摸时并没有打印，但是在结束触摸时，开始触摸喝结束触摸同时相应。<br>进一步打印，发现<strong>触摸开始和结束在同一帧执行</strong>。</li>
<li>总结<br>其实，在只有 iPhone 6s 以上手机有问题就比较好确定了。<br>经过调查发现 6s开始支持了 3D touch。</li>
</ul>
<p><br></p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>既然发现3D touch有关，那就关闭3D touch看看效果。<br>关闭以后发现，左右两边没有问题了，但是底边还是有问题。<br>又了解到苹果按住边缘滑动，会滑出任务管理器，这个好像没办法关掉…</p>
<p>然后，就去cocos2d的github的issues看有没有遇到同样的问题的。<br>发现也有人遇到了同样的问题，已经解决好了。 [ <a href="https://github.com/cocos2d/cocos2d-x/issues/18479" target="_blank" rel="noopener">https://github.com/cocos2d/cocos2d-x/issues/18479</a> ]<br>解决方法就是将手势识别的触摸开始的延迟关掉。</p>
<p>在 AppController.mm 文件内，</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[window makeKeyAndVisible];</span><br></pre></td></tr></table></figure>
<p>之后加入:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">UIGestureRecognizer</span>* gesture <span class="keyword">in</span> window.gestureRecognizers)</span><br><span class="line">&#123;</span><br><span class="line">    gesture.delaysTouchesBegan=<span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完美解决问题。<br>真是查问题5小时，解决问题5秒钟。</p>
<p><br></p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>一般到这里，解决完问题就结束了。<br>BUG是无穷尽的，但是它们是有共性的。<br>我们遇到一个问题，通过分析它能解决一类问题，这才是进步。</p>
<p>UIGestureRecognizer 是手势识别器的基类。<br>它用于识别触摸序列（或其他输入）的逻辑进行解耦，并对该识别进行操作，负责发送操作消息或转发触摸消息等。<br>它主要有以下的手势：</p>
<ul>
<li>UITapGestureRecognizer            [轻拍手势]</li>
<li>UIPinchGestureRecognizer          [捏合(缩放)手势]</li>
<li>UIRotationGestureRecognizer       [旋转手势]</li>
<li>UISwipeGestureRecognizer          [轻扫手势]</li>
<li>UIPanGestureRecognizer            [平移手势]</li>
<li>UIScreenEdgePanGestureRecognizer  [屏幕边缘平移手势]</li>
<li>UILongPressGestureRecognizer      [长按手势]</li>
</ul>
<p>如果窗口绑定了手势识别器，触摸事件会先经过手势识别器处理，再传递给视图。<br>如果手势识别器识别了触摸，则传给视图的其余触摸事件将会被取消。<br>它有三个主要的属性:</p>
<ul>
<li>cancelsTouchesInView<br>如果手势识别器识别出手势，则从视图中解除该手势的其余触摸，从而使窗口不再传递它们。</li>
<li>delaysTouchesBegan<br>只要手势识别器分析触摸事件没有失败，窗口就会将UITouchPhaseBegan阶段中的触摸对象传递给视图。如果随后识别手势，则视图不接收这些触摸对象。</li>
<li>delaysTouchesEnded<br>只要手势识别器分析触摸事件没有失败，窗口就会将UITouchPhaseEnded阶段中的触摸对象传递给视图。如果随后识别手势，则触摸被取消。</li>
</ul>
<p>更详细的可以看 参考资料3</p>
<p><br></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>遇到问题 -&gt; 分析&amp;总结特征 -&gt; 解决问题 -&gt; 扩展问题<br>针对同一个问题，学到的比其他人更多更广，长期以来，必将更进一步。</p>
<p><br><br><br><br><br></p>
<hr>
<p>参考资料:</p>
<ul>
<li>stackoverflow - TouchesBegan delay on left hand side of the display<br>[ <a href="https://stackoverflow.com/questions/39998489/touchesbegan-delay-on-left-hand-side-of-the-display" target="_blank" rel="noopener">https://stackoverflow.com/questions/39998489/touchesbegan-delay-on-left-hand-side-of-the-display</a> ]</li>
<li>stackoverflow - Swift SpriteKit 3D Touch and touches moved<br>[ <a href="https://stackoverflow.com/questions/36060423/swift-spritekit-3d-touch-and-touches-moved" target="_blank" rel="noopener">https://stackoverflow.com/questions/36060423/swift-spritekit-3d-touch-and-touches-moved</a> ]</li>
<li>苹果开发者 UIGestureRecognizer [ <a href="https://developer.apple.com/documentation/uikit/uigesturerecognizer?changes=_4&amp;language=objc" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uigesturerecognizer?changes=_4&amp;language=objc</a> ]</li>
</ul>
]]></content>
      <tags>
        <tag>cocos2d</tag>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos2d 之 tolua</title>
    <url>/2019/10/14/Cocos2d%20%E4%B9%8B%20tolua/</url>
    <content><![CDATA[<p>本文简介：</p>
<ol>
<li>环境搭建</li>
<li>使用到的相关配置结构介绍</li>
<li>具体实操</li>
<li>遇到问题及解决方案</li>
</ol>
<a id="more"></a>
<p><br></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在游戏开发过程中，主要业务逻辑等由Lua开发（因为可以动态热更、灵活便捷等），但是Lua毕竟是脚本语言，遇到一些高性能需求或其他涉及底层变动，需要用C++来实现（你大爷还是你大爷）。</p>
<p>对于将C++的类或方法导出给Lua调用，</p>
<p>Cocos2d-x引擎采用的是 tolua++，通过便携tolua++的pkg配置文件，来定义要导出的每一个类的信息，这个步骤相当于用tolua++的规则将类的头文件重写成pkg文件，tolua++会根据这个文件以及类的cpp文件来生成C++代码文件。</p>
<p>直接使用tolua++在批量导出的时候会比较麻烦，基于此，引擎提供了 genbindings.py 文件来完成批量导出的工作，流程如下：</p>
<ol>
<li>编写要导出的C++类</li>
<li>为这个类编写一个ini配置文件（一个ini可对应多个类）</li>
<li>修改genbindings脚本，加载ini配置</li>
<li>执行genbindings脚本，生成类导出到Lua的C++代码</li>
<li>将生成的代码添加到项目中，并执行注册方法</li>
</ol>
<p><br></p>
<p>本文主要内容一览：</p>
<ol>
<li>环境搭建</li>
<li>使用到的相关配置结构介绍</li>
<li>具体实操</li>
<li>遇到问题及解决方案</li>
</ol>
<hr>
<p><br></p>
<p><br></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h2><ul>
<li><a href="https://blog.csdn.net/shuzfan/article/details/52690554" target="_blank" rel="noopener">NDK r9b</a><ul>
<li>这里 README上，写的需求版本 r10c or later；但是脚本头部注释要求版本 r9b；经过实际测试使用 <strong>r9b 版本NDK</strong> 有效。</li>
<li>配置环境变量，ndk根目录：NDK_ROOT </li>
</ul>
</li>
<li><a href="http://www.python.org/ftp/python/2.7.3/python-2.7.3.msi" target="_blank" rel="noopener">Python2.7.3(32bit)</a><ul>
<li>配置环境变量，具体到exe文件：PYTHON_BIN（xxx\python.exe)</li>
</ul>
</li>
<li><a href="http://pyyaml.org/download/pyyaml/PyYAML-3.11.win32-py2.7.exe" target="_blank" rel="noopener">Python库 pyyaml</a><ul>
<li>解压或安装到上面python的相应位置： xxx\Lib\site-packages</li>
</ul>
</li>
<li><a href="https://raw.github.com/dumganhar/my_old_cocos2d-x_backup/download/downloads/Cheetah.zip" target="_blank" rel="noopener">Python库 pyCheetah</a><ul>
<li>解压或安装到上面python的相应位置： xxx\Lib\site-packages</li>
</ul>
</li>
</ul>
<p><br></p>
<h2 id="Mac-平台"><a href="#Mac-平台" class="headerlink" title="Mac 平台"></a>Mac 平台</h2><p>待补充</p>
<p><br></p>
<p><br></p>
<h1 id="配置介绍"><a href="#配置介绍" class="headerlink" title="配置介绍"></a>配置介绍</h1><h2 id="genbindings-py-文件"><a href="#genbindings-py-文件" class="headerlink" title="genbindings.py 文件"></a>genbindings.py 文件</h2><p>这个脚本文件主要作用是根据ini文件，执行 cocos2d\tools\bindings-generator\generator.py 来生成导出C++代码。</p>
<p>这个文件需要修改的地方不多，多注意下列几个地方即可：</p>
<ul>
<li>project_root：项目工程根目录</li>
<li>cocos_root：cocos引擎根目录</li>
<li>cxx_generator_root：调用的generator.py文件所在的目录</li>
<li>tolua_root：tolua根目录，ini配置文件的目录</li>
<li>output_dir：导出C++代码的目录</li>
<li>cmd_args：需要处理的ini配置文件，如果这次导出不需要，可以用 # 注释</li>
</ul>
<p><br></p>
<h2 id="ini-文件配置"><a href="#ini-文件配置" class="headerlink" title="ini 文件配置"></a>ini 文件配置</h2><p>ini配置文件主要作用于描述要导出的类，一个ini文件可以配置多个类，一般都以文件夹为单位。</p>
<p>配置文件的结构由三部分组成：</p>
<ul>
<li>段：一个文件分为多个段；每个段名称用中括号包裹并独占一行</li>
<li>键：一个段有多个键；每个键都代表一个配置</li>
<li>值：一个键对应任意个值；所有值以空格分隔</li>
</ul>
<p>例如：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注释A</span></span><br><span class="line"><span class="section">[sectionA]</span></span><br><span class="line"><span class="attr">keyA1</span> = </span><br><span class="line"><span class="attr">keyA2</span> = valueA2</span><br><span class="line"><span class="attr">keyA3</span> = valueA3 valueA4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释B</span></span><br><span class="line"><span class="section">[sectionB]</span></span><br><span class="line"><span class="attr">keyB1</span> = valueB1</span><br><span class="line"><span class="attr">keyB2</span> =</span><br></pre></td></tr></table></figure>
<p><br></p>
<p>除了上述配置文件基本规则，还需要注意一些常用且重要的键：</p>
<ul>
<li><p>prefix：生成的函数前缀，可能在自建类的模板中用不到，它主要作用应该是做唯一性区分</p>
</li>
<li><p>target_namespace：目标命名空间，lua调用是需要用到，若不填则为全局</p>
</li>
<li><p>headers：要导出的C++类头文件</p>
</li>
<li><p>classes：要导出的Lua类</p>
</li>
<li><p>skip：需要跳过的类方法</p>
<ul>
<li><p>不同类间用 <strong>逗号</strong> 分隔，不同函数名间用 <strong>空格</strong> 分隔</p>
</li>
<li><p>函数名可以用 <strong>正则表达式</strong> ，类名::[set.*]，代表跳过所有set开头的函数</p>
</li>
<li><p>若要跳过整个类，可以用 <em> 代替，类名::[</em>]</p>
</li>
<li><p>例如： </p>
<ul>
<li><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip</span> = ClassA::[*], ClassB::[funcNameA funcNameB]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>rename_functions：可以指定某个类的某个方法以一个新名字导出</p>
<ul>
<li><p>不同类间用 <strong>逗号</strong> 分隔，不同函数名间用 <strong>空格</strong> 分隔</p>
</li>
<li><p>例如：</p>
<ul>
<li><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">rename_functions</span> = ClassA::[oldFuncNameA=newFuncNameA oldFuncNameB=newFuncNameB], ClassB::[oldFuncNameC=newFuncNameC]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>还有一些其他键，不是很常用或重要，一般上面都有注释，可以自行分析填写。</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>genbindings.py 文件 和 ini文件 都是为 generator.py 文件传递配置的。</p>
<p>一般为了将自建的类文件与引擎的区分开，都会新建一个文件夹专门放自建类文件，并与引擎文件同级，同样的导出方法也需要新建一套。</p>
<p>大概结构如下：</p>
<p><img src="tolua结构.png" alt="tolua结构"></p>
<p><br></p>
<p><br></p>
<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="修改引擎代码"><a href="#修改引擎代码" class="headerlink" title="修改引擎代码"></a>修改引擎代码</h2><ol>
<li>修改引擎相关代码（路径：xxx\cocos2d）</li>
<li>配置相应 ini文件、genbindings 文件（路径：xxx\cocos2d\tools\tolua）</li>
<li>执行genbindings脚本（注意用python2.x - 32bit）</li>
<li>使用VS编译导出的文件</li>
<li>运行游戏验证</li>
</ol>
<p><br></p>
<h2 id="创建或修改自建类"><a href="#创建或修改自建类" class="headerlink" title="创建或修改自建类"></a>创建或修改自建类</h2><ol>
<li>修改相关源码</li>
<li>配置相应 ini文件、genbindings 文件<ul>
<li>检查 相应ini文件中是否已经导出了该类<ul>
<li>检查 ini文件中 headers 键的值，确定能找到该文件</li>
<li>检查 ini文件中 classes 键的值，确定导出了所修改的类</li>
<li>检查 ini文件中 skip 键的值，确定所需要导出的类没有被跳过</li>
</ul>
</li>
<li>检查 genbindings.py，确定导出配置<ul>
<li>检查 genbindings.py 中 cmd_args的值，确定执行相应ini文件</li>
</ul>
</li>
</ul>
</li>
<li>执行genbindings脚本（注意用python2.x - 32bit）</li>
<li>使用VS编译导出的文件</li>
<li>运行游戏验证</li>
</ol>
<p><br></p>
<p><br></p>
<h1 id="出现问题及解决方案"><a href="#出现问题及解决方案" class="headerlink" title="出现问题及解决方案"></a>出现问题及解决方案</h1><ul>
<li><p>NDK_ROOT not defined. Please define NDK_ROOT in your environment.</p>
<ul>
<li>检查自己环境变量，加上NDK_ROOT</li>
</ul>
</li>
<li><p>PYTHON_BIN not defined, use current python.</p>
<ul>
<li>检查自己环境变量，加上PYTHON_BIN</li>
</ul>
</li>
<li><p>llvm toolchain not found!</p>
<ul>
<li>路径:  “%ndk_root%/toolchains/“ , 找不到llvm，检查文件命名；脚本中会先去检查 llvm-3.4，再去查llvm-3.3，保证这两个存在一个就行</li>
</ul>
</li>
<li><p>‘XX\XX\python’ 不是内部或外部命令，也不是可运行程序</p>
<ul>
<li>环境变量PYTHON_BIN路径错误，PYTHON_BIN 应该是python2的可执行程序（.exe）</li>
</ul>
</li>
<li><p>LibclangError: [Error 193] %1 不是有效的 Win32. To provide a path to libclang use Config.set_library_path() or Config.set_library_file().</p>
<ul>
<li>python库 pyyaml 和 pyCheetah 都用32位版本</li>
</ul>
</li>
<li><p>自建类的导出代码文件include中不包含文件所属的文件夹</p>
<ul>
<li><p>主要是由于自建类独立文件夹导致，generator.py 在生成头文件路径的时候，是以引擎为准，所以指定在 xxx/cocos2d/cocos 目录下查找，可见 generator.py 的 search_path 变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'search_path'</span>: os.path.abspath(os.path.join(userconfig.get(<span class="string">'DEFAULT'</span>, <span class="string">'cocosdir'</span>), <span class="string">'cocos'</span>)),</span><br></pre></td></tr></table></figure>
<p>所以，导出自建类文件的时候，头文件所属的文件夹均忽略了。可见 cocos2d\tools\bindings-generator\targets\lua\templates\layout_head.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"scripting/lua-bindings/auto/$&#123;out_file&#125;.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> $macro_judgement</span></span><br><span class="line">$macro_judgement</span><br><span class="line"><span class="meta">#end <span class="meta-keyword">if</span></span></span><br><span class="line"><span class="meta">#for header in $headers</span></span><br><span class="line">    <span class="meta">#set relative = os.path.relpath(header, $search_path)</span></span><br><span class="line">    #if not '..' in relative</span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"$&#123;relative.replace(os.path.sep, '/')&#125;"</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"$&#123;os.path.basename(header)&#125;"</span></span></span><br><span class="line">    <span class="meta">#end <span class="meta-keyword">if</span></span></span><br><span class="line"><span class="meta">#end for</span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"scripting/lua-bindings/manual/tolua_fix.h"</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"scripting/lua-bindings/manual/LuaBasicConversions.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> $cpp_headers</span></span><br><span class="line"><span class="meta">#for header in $cpp_headers</span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"$&#123;header&#125;"</span></span></span><br><span class="line"><span class="meta">#end for</span></span><br><span class="line"><span class="meta">#end <span class="meta-keyword">if</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解决：根据之前的结构来看，genbindings.py 是会像 generator.py 传递参数的，我们可以由genbindings根据自己代码源目录指定搜索路径。</p>
<p>在genbindings.py中 添加搜索路径参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">search_root = os.path.abspath(os.path.join(源文件根目录))</span><br><span class="line">config.set(<span class="string">'DEFAULT'</span>, <span class="string">'searchdir'</span>, search_root)</span><br></pre></td></tr></table></figure>
<p>然后再generator.py中不再自行拼接搜索路径，而是使用传递过来的路径：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 'search_path': os.path.abspath(os.path.join(userconfig.get('DEFAULT', 'cocosdir'), 'cocos')),</span></span><br><span class="line"><span class="string">'search_path'</span>: os.path.abspath(os.path.join(userconfig.get(<span class="string">'DEFAULT'</span>, <span class="string">'searchdir'</span>))),</span><br></pre></td></tr></table></figure>
<p>至此，兼容了引擎和自建类。</p>
</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<p>参考资料：</p>
<ul>
<li>《精通COCOS2D-X游戏开发 进阶卷》</li>
</ul>
]]></content>
      <tags>
        <tag>cocos2d</tag>
        <tag>想就做</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos2d-lua ScrollView优化1</title>
    <url>/2018/05/21/Cocos2d-lua%20ScrollView%E4%BC%98%E5%8C%961/</url>
    <content><![CDATA[<p>cocos2d lua<br>修改ScrollView第一弹: item</p>
<a id="more"></a>
<p><br></p>
<h1 id="做了什么"><a href="#做了什么" class="headerlink" title="做了什么"></a>做了什么</h1><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>在使用ListView的时候，有多少个数据就会创建多少个item，并不会重复利用或回收释放。<br>随着数据量的增加，会对性能造成很大的影响。</p>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ul>
<li><p>clone 改成 create[据说是这样，我没有测试过 = =…]<br>我们在使用ListView的时候，创建一个item，是通过lua重写的pushBackCustomItemView，<br>它会先调用ListView的pushBackDefaultItem，通过clone创建一个csb，我们再把数据赋过去。<br>所以，我们完全可以create一个csb，相对于clone会快一些。</p>
<p>缺点： 这个应该会有点效果，嗯，有点效果而已。</p>
</li>
<li><p>分帧加载（逐帧加载）<br>并不是在一帧全加载完，而是选择每帧加载一定个数，直到加载完成</p>
<p>缺点： 通过lua现有的协程来实现，但是流畅度不是很好，刚进入界面的时候可能看到item是逐渐加载进来的。</p>
</li>
<li><p>异步加载<br>这个主要对一些图片多的item，我们如果需要切换图，可以通过异步加载，等图片加载完再换图，这样不影响之后item的加载。</p>
<p>缺点： 会看到 默认图（csb创建的样子） -&gt; 真正效果的转换过程。</p>
</li>
<li><p>滑动到底加载<br>就是先加载一定数量，监听到底部了，再拉取后面的部分，直到全部加载完。</p>
<p>缺点： 做一系列监听滑动等，没有根本解决问题。</p>
</li>
</ul>
<ul>
<li>重用item[本次实现的方法]<br>其实，上面的那些方法，都是优化的技巧，并没有从根本上解决问题。<br>我们要根本的解决问题，就是创建可视区域可容纳数量+1的item，然后不断重用这些item。<br>在ListView同一时刻，只能见到5个item，那我就创建6个item，然后不断重用这些item。</li>
</ul>
<p><br></p>
<h1 id="2-怎么做的"><a href="#2-怎么做的" class="headerlink" title="2.怎么做的"></a>2.怎么做的</h1><h2 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h2><p>首先明确view与inner，<br>view像一个窗口，它的大小就是我们可以见到的大小（当然要设置裁切），<br>inner是我们创建的所有item添加的地方（item并不是加载ScrollView上，而是加在了inner上）<br>ScrollView/ListView会监听滑动，同时相应的移动inner的位置，从而让我们看到item位置的变化。<br><strong>简而言之，item加载inner上，是inner动，不是view动。</strong></p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>在ScrollView或者ListView中，正常情况是这样的：<br>(前面数字代表item位置，后面数字代表item， —-代表可视区域)</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="number">1</span>                   <span class="number">1</span></span><br><span class="line">    <span class="comment">----</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2</span>                   <span class="number">2</span></span><br><span class="line"><span class="number">3</span>   <span class="number">3</span>                   <span class="number">3</span></span><br><span class="line">                        <span class="comment">----</span></span><br><span class="line"><span class="number">4</span>   <span class="number">4</span>                   <span class="number">4</span></span><br><span class="line">    <span class="comment">----                </span></span><br><span class="line"><span class="number">5</span>   <span class="number">5</span>                   <span class="number">5</span></span><br><span class="line"><span class="number">6</span>   <span class="number">6</span>                   <span class="number">6</span></span><br><span class="line">                        <span class="comment">----</span></span><br><span class="line"><span class="number">7</span>   <span class="number">7</span>                   <span class="number">7</span></span><br><span class="line"><span class="number">8</span>   <span class="number">8</span>                   <span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>可以发现，<br>前面的例子中, 只能看见2, 3, 4; 但是看不见的1, 5, 6, 7, 8 依旧存在<br>后面的例子中, 只能看见4, 5, 6; 但是看不见的1, 2, 3, 7, 8 依旧存在</p>
<p>所以，我们改成下面的样子:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>                        </span><br><span class="line">    <span class="comment">----</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2</span>                    </span><br><span class="line"><span class="number">3</span>   <span class="number">3</span>                    </span><br><span class="line">                        <span class="comment">----</span></span><br><span class="line"><span class="number">4</span>   <span class="number">4</span>                   <span class="number">4</span></span><br><span class="line">    <span class="comment">----                </span></span><br><span class="line"><span class="number">5</span>                       <span class="number">5</span></span><br><span class="line"><span class="number">6</span>                       <span class="number">6</span></span><br><span class="line">                        <span class="comment">----</span></span><br><span class="line"><span class="number">7</span>                        </span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>因为可视区域只有3个item，我们就创建3个item，然后不断重用它们。(当然实际操作中，需要多创建一个，否则有穿帮风险)<br>但是，位置，我们依旧留着（划重点，<strong>inner大小不变</strong>，否则无法滑动），<br>在往下滑的时候，最上面的跑到下面去顶替下面的item；<br>往上滑的时候，最下面的跑到上面去顶替上面的item；</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>实现方法，<br>可以通过监听ScrollView滑动，每当ScrollView滚动，我们可以知道当前inner位置，<br>然后知道item的位置，从而判断item需不需要移动位置。<br>这里，用的是编辑一个绘制方法，每隔一段时间，都看一下各个item位置，然后根据需求移动位置。<br>我们在加载csb的时候将ScrollView记录下来，在view的update中调用它。<br>（本来想重写update，但是遇到了一些问题，所以妥协用了它，具体可以看后面 遇到的问题）</p>
<p>init:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    name            :   item类名 </span></span><br><span class="line"><span class="comment">    totalItemNum    :   item总数</span></span><br><span class="line"><span class="comment">    ...             :   创建item时需要的参数</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ScrollView:setItemViewModel</span><span class="params">(name, totalItemNum, ...)</span></span></span><br></pre></td></tr></table></figure>
<p>主要代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 得到所需绘制item个数</span></span><br><span class="line"><span class="keyword">local</span> count = <span class="built_in">math</span>.<span class="built_in">ceil</span>(self:getContentSize().height / self.tItemContentSize.height) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, count <span class="keyword">do</span></span><br><span class="line">    <span class="comment">-- 创建item</span></span><br><span class="line">    <span class="keyword">local</span> view = CSBReaderLoad(name)</span><br><span class="line">    view:init(...)</span><br><span class="line">    <span class="keyword">if</span> view.setIndex <span class="keyword">then</span></span><br><span class="line">        view:setIndex(i)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 将父节点转为widget类型（原因可见 遇到的问题）</span></span><br><span class="line">    <span class="keyword">local</span> widget = quick.packageNodeToWidget(view.pLayer:getChildByName(<span class="string">"LayerTouch"</span>))</span><br><span class="line">    view.pLayer = widget</span><br><span class="line">    <span class="comment">-- widget随父节点透明度变化，默认是false</span></span><br><span class="line">    widget:setCascadeOpacityEnabled(<span class="literal">true</span>)</span><br><span class="line">    self:addChild(view.pLayer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 总数小于所需绘制item个数，需要隐藏多创建的</span></span><br><span class="line">    view.pLayer:setVisible(i &gt; <span class="number">0</span> <span class="keyword">and</span> i &lt;= self.totalItemNum)</span><br><span class="line">    <span class="comment">-- 设置位置，注意我们加item是从下往上加的</span></span><br><span class="line">    view.pLayer:setPositionY(self.tItemContentSize.height * (self.totalItemNum - i))</span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">insert</span>(self.tItemView, view)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>update:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ScrollView:updateView</span><span class="params">(dt)</span></span></span><br></pre></td></tr></table></figure>
<p>主要代码：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 控制刷新时间</span></span><br><span class="line">self.updateTimer = self.updateTimer + dt</span><br><span class="line"><span class="keyword">if</span> (self.updateTimer &lt; self.updateInterval) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">self.updateTimer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 遍历所有创建的item，如果它们需要移动位置，就移动它们的位置，并让它们重绘自己</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, length <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> item = self:getItemView(i)</span><br><span class="line">    <span class="keyword">local</span> viewPos = self:getPositionInView(item.pLayer);</span><br><span class="line">    <span class="keyword">if</span> increaseVal &lt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> viewPos.y &lt; minBoundary <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> item.index <span class="keyword">and</span> item.setIndex <span class="keyword">then</span></span><br><span class="line">                item:setIndex(item.index - length)</span><br><span class="line">                item.pLayer:setVisible(item.index &gt; <span class="number">0</span> <span class="keyword">and</span> item.index &lt;= self.totalItemNum)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            item.pLayer:setPositionY(item.pLayer:getPositionY() + offset)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> increaseVal &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> (viewPos.y &gt; maxBoundary <span class="keyword">and</span> item.pLayer:getPositionY() - offset &gt; -self.tContentSize.height) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> item.index <span class="keyword">and</span> item.setIndex <span class="keyword">then</span></span><br><span class="line">                item:setIndex(item.index + length)</span><br><span class="line">                item.pLayer:setVisible(item.index &gt; <span class="number">0</span> <span class="keyword">and</span> item.index &lt;= self.totalItemNum)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">            item.pLayer:setPositionY(item.pLayer:getPositionY() - offset)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h1 id="3-遇到的问题"><a href="#3-遇到的问题" class="headerlink" title="3. 遇到的问题"></a>3. 遇到的问题</h1><h2 id="关于update"><a href="#关于update" class="headerlink" title="关于update"></a>关于update</h2><p>在3.x中lua启用定时器有两种方法：</p>
<p>第一种方法 scheduleUpdateWithPriorityLua</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">scheduleUpdateWithPriorityLua(update, priority)</span><br><span class="line">	update - 刷新函数，</span><br><span class="line">	priority - 优先级，</span><br></pre></td></tr></table></figure>
<p>此方法在Node类中实现，所以它的子类都可以使用。<br>此方法默认为每帧都刷新因此，无法自定义刷新时间。<br>这里，没有用这个方法，是因为ScrollView自己已经实现了update方法。<br>所以，当我们重新注册给ScrollView一个update的时候，发现无法替换。<br>这里涉及到计时器存储刷新方法：<br>刷新方法通过哈希表存储，在主循环期间，不移除已有方法，而是将它暂停，且恢复时不加载新方法，而是将原有方法恢复。</p>
<p>启用定时器的源码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Node::scheduleUpdateWithPriorityLua(<span class="keyword">int</span> nHandler, <span class="keyword">int</span> priority)</span><br><span class="line">&#123;</span><br><span class="line">    unscheduleUpdate();</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> CC_ENABLE_SCRIPT_BINDING</span></span><br><span class="line">    _updateScriptHandler = nHandler;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    _scheduler-&gt;scheduleUpdate(<span class="keyword">this</span>, priority, !_running);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行： unscheduleUpdate();<br>会先判断节点是否有update方法，在哈希表中查找，并执行移除方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">tHashUpdateEntry *element = <span class="literal">nullptr</span>;</span><br><span class="line">HASH_FIND_PTR(_hashForUpdates, &amp;target, element);</span><br><span class="line"><span class="keyword">if</span> (element)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_updateHashLocked)</span><br><span class="line">    &#123;</span><br><span class="line">        element-&gt;entry-&gt;markedForDeletion = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;removeUpdateFromHash(element-&gt;entry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面移除方法，会根据_updateHashLocked值来执行，<br>它为真时，<br>如果节点原来有update，就先废弃它，废弃的方法是，将它标记为已删除，并让它暂停。注意！这里并没有真正的删除，而是将他表示是否删除的字段改值。<br>它为假时，<br>直接从哈希表中移除update方法。</p>
<p>执行：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">_scheduler-&gt;scheduleUpdate(<span class="keyword">this</span>, priority, !_running);</span><br></pre></td></tr></table></figure></p>
<p>加入update，也会先从哈希表中查找update，再执行添加方法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">tHashUpdateEntry *hashElement = <span class="literal">nullptr</span>;</span><br><span class="line">HASH_FIND_PTR(_hashForUpdates, &amp;target, hashElement);</span><br><span class="line"><span class="keyword">if</span> (hashElement)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// check if priority has changed</span></span><br><span class="line">    <span class="keyword">if</span> ((*hashElement-&gt;<span class="built_in">list</span>)-&gt;priority != priority)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_updateHashLocked)</span><br><span class="line">        &#123;</span><br><span class="line">            CCLOG(<span class="string">"warning: you CANNOT change update priority in scheduled function"</span>);</span><br><span class="line">            hashElement-&gt;entry-&gt;markedForDeletion = <span class="literal">false</span>;</span><br><span class="line">            hashElement-&gt;entry-&gt;paused = paused;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// will be added again outside if (hashElement).</span></span><br><span class="line">            unscheduleUpdate(target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hashElement-&gt;entry-&gt;markedForDeletion = <span class="literal">false</span>;</span><br><span class="line">        hashElement-&gt;entry-&gt;paused = paused;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加方法，会先判断优先级，如果优先级相同，那么就恢复原来的update。<br>否则，根据 _updateHashLocked 值执行接下来操作。</p>
<p>从移除和添加可以发现，关键值在于 _updateHashLocked的值，<br>这个值在Scheduler::update中设置，开始的时候设置为true，最后结束设置为false。<br>所以，如果要修改，就很麻烦，就放弃用这个方法了。<br><em>道理同样适用于所有自己已经重写了update，想要更换update情形</em></p>
<p>第二种方法，通过定时管理器调用<br>就是上面指的Scheduler,不过我们不调ScrollView的，而是创建一个新的。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">scheduler:scheduleScriptFunc(update, inteval, isOnce)</span><br><span class="line">	scheduler - cc.Director:getInstance():getScheduler()</span><br><span class="line">	update - 更新方法</span><br><span class="line">	inteval - 刷新时间间隔</span><br><span class="line">	isOnce - 是否只执行一次</span><br></pre></td></tr></table></figure>
<p>注意，如果用这个方法，需要负责创建，也要负责移除。<br>上面方法会返回一个id，之后可以通过这个id来删除它。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">cc.Director:getInstance():getScheduler():unscheduleScriptEntry(id)</span><br></pre></td></tr></table></figure>
<h2 id="为什么要把item包装成Widget"><a href="#为什么要把item包装成Widget" class="headerlink" title="为什么要把item包装成Widget"></a>为什么要把item包装成Widget</h2><p>在刚开始往ScrollView加child时，方法是将item的Node直接往ScrollView addChild（ScrollView封装了它，其实就是往inner addChild）<br>但是当直接addChild时，会产生很多问题：比如按钮吞噬触摸，无法滑动等等。</p>
<p>那就要问一下了，为什么ListView没事呢？<br>这其实是Cocos对继承自ccui.Widget的事件的处理。<br>所有的控件事件监听都是单点触摸，并且会吞噬事件。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">_touchListener = EventListenerTouchOneByOne::create();</span><br><span class="line">CC_SAFE_RETAIN(_touchListener);</span><br><span class="line">_touchListener-&gt;setSwallowTouches(<span class="literal">true</span>);</span><br><span class="line">_touchListener-&gt;onTouchBegan = CC_CALLBACK_2(Widget::onTouchBegan, <span class="keyword">this</span>);</span><br><span class="line">_touchListener-&gt;onTouchMoved = CC_CALLBACK_2(Widget::onTouchMoved, <span class="keyword">this</span>);</span><br><span class="line">_touchListener-&gt;onTouchEnded = CC_CALLBACK_2(Widget::onTouchEnded, <span class="keyword">this</span>);</span><br><span class="line">_touchListener-&gt;onTouchCancelled = CC_CALLBACK_2(Widget::onTouchCancelled, <span class="keyword">this</span>);</span><br><span class="line">_eventDispatcher-&gt;addEventListenerWithSceneGraphPriority(_touchListener, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>在widget的onTouchBegan, onTouchMove, onTouchEnd中，都会调用 propagateTouchEvent,<br>这个方法是传播事件，每个子节点会吞噬事件，自己处理完，再向父节点传递，一般ScrollView、ListView、PageView会处理这些事件。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Widget* widgetParent = getWidgetParent();</span><br><span class="line"><span class="keyword">if</span> (widgetParent)</span><br><span class="line">&#123;</span><br><span class="line">    widgetParent-&gt;_hittedByCamera = _hittedByCamera;</span><br><span class="line">    widgetParent-&gt;interceptTouchEvent(event, sender, touch);</span><br><span class="line">    widgetParent-&gt;_hittedByCamera = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，只有继承自Widget类的，才会接收到interceptTouchEvent,并进行处理。<br>而且，ScrollView的interceptTouchEvent 已经处理好了按钮的点击，取消等效果。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> ScrollView::interceptTouchEvent(Widget::TouchEventType event, Widget *sender,Touch* touch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!_touchEnabled)</span><br><span class="line">    &#123;</span><br><span class="line">        Layout::interceptTouchEvent(event, sender, touch);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(_direction == Direction::NONE)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    Vec2 touchPoint = touch-&gt;getLocation();</span><br><span class="line">    <span class="keyword">switch</span> (event)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> TouchEventType::BEGAN:</span><br><span class="line">        &#123;</span><br><span class="line">            _isInterceptTouch = <span class="literal">true</span>;</span><br><span class="line">            _touchBeganPosition = touch-&gt;getLocation();</span><br><span class="line">            handlePressLogic(touch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TouchEventType::MOVED:</span><br><span class="line">        &#123;</span><br><span class="line">            _touchMovePosition = touch-&gt;getLocation();</span><br><span class="line">            <span class="comment">// calculates move offset in points</span></span><br><span class="line">            <span class="keyword">float</span> offsetInInch = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">switch</span> (_direction)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> Direction::HORIZONTAL:</span><br><span class="line">                    offsetInInch = convertDistanceFromPointToInch(Vec2(<span class="built_in">std</span>::<span class="built_in">abs</span>(sender-&gt;getTouchBeganPosition().x - touchPoint.x), <span class="number">0</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Direction::VERTICAL:</span><br><span class="line">                    offsetInInch = convertDistanceFromPointToInch(Vec2(<span class="number">0</span>, <span class="built_in">std</span>::<span class="built_in">abs</span>(sender-&gt;getTouchBeganPosition().y - touchPoint.y)));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Direction::BOTH:</span><br><span class="line">                    offsetInInch = convertDistanceFromPointToInch(sender-&gt;getTouchBeganPosition() - touchPoint);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (offsetInInch &gt; _childFocusCancelOffsetInInch)</span><br><span class="line">            &#123;</span><br><span class="line">                sender-&gt;setHighlighted(<span class="literal">false</span>);</span><br><span class="line">                handleMoveLogic(touch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> TouchEventType::CANCELED:</span><br><span class="line">        <span class="keyword">case</span> TouchEventType::ENDED:</span><br><span class="line">        &#123;</span><br><span class="line">            _touchEndPosition = touch-&gt;getLocation();</span><br><span class="line">            handleReleaseLogic(touch);</span><br><span class="line">            <span class="keyword">if</span> (sender-&gt;isSwallowTouches())</span><br><span class="line">            &#123;</span><br><span class="line">                _isInterceptTouch = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前的方法有问题，就是因为直接将Node addChild到ScrollView，当触摸传递到Node，发现无法转成Widget对象，就放弃了向上传播事件。<br>所以，需要将item包装成Widget来让它将事件传递给ScrollView。</p>
<p><br></p>
<h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>怎么用这个呢？</p>
<ol>
<li>调用 ScrollView:setItemViewModel(item, item总数, 创建item所需的额外参数)</li>
<li>所有的item要有方法 item:setIndex(index), 并且以 self.index 作为自己的index[这里可以写一个类来封装，让所有item都继承它]</li>
<li>在删除的时候，要将ScrollView的每帧更新方法移除 </li>
</ol>
<p>现在，ScrollView已经可以重用item了。<br>但是，还是比较粗糙；做为一个控件，仅仅是这样可不行。<br>之后，会对这个控件慢慢优化，让它支持更多的功能，更加得心应手。</p>
]]></content>
      <tags>
        <tag>cocos2d</tag>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos2d-lua ScrollView优化2</title>
    <url>/2018/06/05/Cocos2d-lua%20ScrollView%E4%BC%98%E5%8C%962/</url>
    <content><![CDATA[<p>cocos2d lua<br>修改ScrollView第二弹: 功能扩展</p>
<a id="more"></a>
<p><br></p>
<hr>
<p>温故：<br>上回书说到, 对Cocos2d-lua的ScrollView进行了修改优化。<br>主要做了 —— 重用item。<br>仅仅是重用item, 是远远不够的；还要对它进行进一步的功能扩展。</p>
<hr>
<p><br></p>
<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>这次的扩展包括：</p>
<ul>
<li>支持横向和竖向</li>
<li>支持多行多列</li>
<li>item的适配</li>
<li>item数量不够时的居中</li>
<li>刷新数据</li>
<li>跳转到指定item</li>
<li>飞入动画</li>
</ul>
<p><br></p>
<h2 id="多方向"><a href="#多方向" class="headerlink" title="多方向"></a>多方向</h2><p>之前的版本仅仅是纵向而已, 当然要支持横向的滑动了。<br>横向滑动其实与纵向不同。</p>
<h3 id="纵向"><a href="#纵向" class="headerlink" title="纵向"></a>纵向</h3><p>由于ScrollView锚点在(0, 0), 要针对这个做一些处理。<br>否则, 显示的是如下的样子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>从下往上排列, 而且滑动是从下往上滑。<br>显然, 这并不符合常规操作。<br>正常应该是, 从上往下滑, 且:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>所以, 需要对它的坐标进行小处理。<br>这里有两个坐标需要被处理：</p>
<ul>
<li><p>item（要求锚点为(0, 0))<br>  它正常坐标是从(0, 0)开始, 然后随着索引增加变为: (0, itemSize.height <em> index)<br>  修改后的坐标应该是从(0, innerSize.height - itemSize.height)开始, 随着索引增加变为:(0, innerSize.height - itemSize.height </em> index)</p>
</li>
<li><p>inner<br>  正常开始的坐标为(0, 0), 显示的是最底部的信息, 随着滑动y坐标减少。<br>  修改后坐标为(0, scrollviewSize.height - innerSize.height), 显示最顶部的信息, 随着滑动y坐标增加。</p>
</li>
</ul>
<h3 id="横向"><a href="#横向" class="headerlink" title="横向"></a>横向</h3><p>横向就没有那么多问题了, 很符合常规的动作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 	2 	3 	4 	5 	...</span><br></pre></td></tr></table></figure>
<p>它的两个坐标就不需要处理:</p>
<ul>
<li><p>item(要求锚点为(0, 0))<br>  坐标从(0, 0)开始, 随着索引增加变为: (itemSize.width * index, 0)</p>
</li>
<li><p>inner<br>  坐标从(0, 0)开始, 随着滑动x坐标增加</p>
</li>
</ul>
<h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> ScrollViewDirection = &#123;</span><br><span class="line">    DIR_VERTICAL = <span class="number">1</span>,</span><br><span class="line">    DIR_HORIZONTAL = <span class="number">2</span>,</span><br><span class="line">    DIR_BOTH = <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ScrollView 的大小</span></span><br><span class="line">self.tContentSize</span><br><span class="line"><span class="comment">-- Item 的大小</span></span><br><span class="line">self.tItemContentSize</span><br><span class="line"><span class="comment">-- item总数</span></span><br><span class="line">self.iTotalItemNum </span><br><span class="line"><span class="comment">-- 重用的item的集合</span></span><br><span class="line">self.tItemView</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ScrollViewDirection.DIR_HORIZONTAL == self:getDirection() <span class="keyword">then</span></span><br><span class="line">    self.tContentSize.width = self.tItemContentSize.width * self.iTotalItemNum</span><br><span class="line">    self:getInnerContainer():setContentSize(self.tContentSize)</span><br><span class="line">    self.fLastContentPos = self:getContentSize().width - self.tContentSize.width</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> count = <span class="built_in">math</span>.<span class="built_in">min</span>(self.iTotalItemNum, <span class="built_in">math</span>.<span class="built_in">ceil</span>(self:getContentSize().width / self.tItemContentSize.width) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, count <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> view = CSBReaderLoad(name)</span><br><span class="line">        view:init(...)</span><br><span class="line">        <span class="keyword">if</span> view.setIndex <span class="keyword">then</span></span><br><span class="line">            view:setIndex(i)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 将父节点转为widget类型（原因可见 上一篇文章）</span></span><br><span class="line">        <span class="keyword">local</span> widget = quick.packageNodeToWidget(view.pLayer:getChildByName(<span class="string">"LayerTouch"</span>))</span><br><span class="line">        view.pLayer = widget</span><br><span class="line">        <span class="comment">-- widget随父节点透明度变化，默认是false</span></span><br><span class="line">        widget:setCascadeOpacityEnabled(<span class="literal">true</span>)</span><br><span class="line">        self:addChild(view.pLayer)</span><br><span class="line"></span><br><span class="line">        view.pLayer:setVisible(i &gt; <span class="number">0</span> <span class="keyword">and</span> i &lt;= self.iTotalItemNum)</span><br><span class="line">        view.pLayer:setPosition(self.tItemContentSize.width * (i - <span class="number">1</span>), <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(self.tItemView, view)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    self:jumpToLeft()</span><br><span class="line">    self:getInnerContainer():setPositionX(self.fLastContentPos)</span><br><span class="line">    self:setTouchEnabled(self.tContentSize.width &gt; self:getContentSize().width)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elseif</span> ScrollViewDirection.DIR_VERTICAL == self:getDirection() <span class="keyword">then</span></span><br><span class="line">    self.tContentSize.height = self.tItemContentSize.height * self.iTotalItemNum</span><br><span class="line">    self:getInnerContainer():setContentSize(self.tContentSize)</span><br><span class="line">    self.fLastContentPos = self:getContentSize().height - self.tContentSize.height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> count = <span class="built_in">math</span>.<span class="built_in">min</span>(self.iTotalItemNum, <span class="built_in">math</span>.<span class="built_in">ceil</span>(self:getContentSize().height / self.tItemContentSize.height) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, count <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> view = CSBReaderLoad(name)</span><br><span class="line">        view:init(...)</span><br><span class="line">        <span class="keyword">if</span> view.setIndex <span class="keyword">then</span></span><br><span class="line">            view:setIndex(i)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 将父节点转为widget类型（原因可见 上一篇文章）</span></span><br><span class="line">        <span class="keyword">local</span> widget = quick.packageNodeToWidget(view.pLayer:getChildByName(<span class="string">"LayerTouch"</span>))</span><br><span class="line">        view.pLayer = widget</span><br><span class="line">        <span class="comment">-- widget随父节点透明度变化，默认是false</span></span><br><span class="line">        widget:setCascadeOpacityEnabled(<span class="literal">true</span>)</span><br><span class="line">        self:addChild(view.pLayer)</span><br><span class="line"></span><br><span class="line">        view.pLayer:setVisible(i &gt; <span class="number">0</span> <span class="keyword">and</span> i &lt;= self.iTotalItemNum)</span><br><span class="line">        view.pLayer:setPositionY(self.tItemContentSize.height * (self.iTotalItemNum - i))</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(self.tItemView, view)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    self:jumpToTop()</span><br><span class="line">    self:getInnerContainer():setPositionY(self.fLastContentPos)</span><br><span class="line">    self:setTouchEnabled(self.tContentSize.height &gt; self:getContentSize().height)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="适配item"><a href="#适配item" class="headerlink" title="适配item"></a>适配item</h2><p>根据ScrollView显示区域大小及方向, 适当调整item大小。<br>更充分重用item, 适应多尺寸item。<br>如果是纵向的ScrollView, 根据width的值, 来决定放缩值。<br>如果是横向的ScrollView, 根据height的值, 来决定放缩值。<br>然后根据放缩值再修改一下item size的值。</p>
<h3 id="修改的东西-以纵向滑动ScrollView为例"><a href="#修改的东西-以纵向滑动ScrollView为例" class="headerlink" title="修改的东西(以纵向滑动ScrollView为例)"></a>修改的东西(以纵向滑动ScrollView为例)</h3><ul>
<li>ScrollView inner 大小</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> scale = ScrollViewSize.width / (ItemSize.width * multiNum)</span><br></pre></td></tr></table></figure>
<ul>
<li>需要绘制item的总个数</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> totalRow = cond(totalItemNum % multiNum == <span class="number">0</span>, </span><br><span class="line">    totalItemNum / multiNum,</span><br><span class="line">    <span class="built_in">math</span>.<span class="built_in">ceil</span>(totalItemNum / multiNum))</span><br></pre></td></tr></table></figure>
<ul>
<li>item的位置</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">self.iCount = <span class="built_in">math</span>.<span class="built_in">min</span>(totalRow, <span class="built_in">math</span>.<span class="built_in">ceil</span>(ScrollViewSize.height / ItemSize.height) + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, self.iCount <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> j = <span class="number">1</span>, self.iMultiNum <span class="keyword">do</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        item:setPosition(ItemSize.width * (j - <span class="number">1</span>), ItemSize.height * (totalRow - i))</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="多行多列"><a href="#多行多列" class="headerlink" title="多行多列"></a>多行多列</h2><p>重用item, 这么棒的东西, 肯定要多用用呀。<br>支持多行多列，是根据ScrollView的滚动方向，再根据传入的行/列值进行设置。<br>需要重新计算一些数值。(下面均以纵向滑动的ScrollView为例)</p>
<h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><ul>
<li>放缩值</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">scale = innerSize.width / (itemSize.width * multiNum)</span><br></pre></td></tr></table></figure>
<ul>
<li>inner size</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据总共需要的行数来计算高度</span></span><br><span class="line">totalRow = (totalItemNum % multiNum == <span class="number">0</span>) <span class="keyword">and</span> (totalItemNum / multiNum) <span class="keyword">or</span> (<span class="built_in">math</span>.<span class="built_in">ceil</span>(totalItemNum / multiNum))</span><br><span class="line">innerSize.height = totalRow * itemSize.height</span><br></pre></td></tr></table></figure>
<ul>
<li>item position</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 获得需要重用的行数</span></span><br><span class="line">showRow = <span class="built_in">math</span>.<span class="built_in">min</span>(totalRow, <span class="built_in">math</span>.<span class="built_in">ceil</span>(viewSize.height / itemSize.height) + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, showRow <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> j = <span class="number">1</span>, multiNum <span class="keyword">do</span></span><br><span class="line">		...</span><br><span class="line"></span><br><span class="line">		view:setPosition(itemSize.width * (j - <span class="number">1</span>), itemSize.height * (totalRow - i))</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="item数量不够时的居中"><a href="#item数量不够时的居中" class="headerlink" title="item数量不够时的居中"></a>item数量不够时的居中</h2><p>主要是有个需求，希望item没有填满view的时候，所有的item居中显示。<br>其实，item还是按照原来的方式放置，只需要移动inner的位置即可。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    描述:</span></span><br><span class="line"><span class="comment">        ScrollView内Item是否居中显示</span></span><br><span class="line"><span class="comment">    参数:</span></span><br><span class="line"><span class="comment">        isCenter - boolean</span></span><br><span class="line"><span class="comment">            是否居中显示</span></span><br><span class="line"><span class="comment">    返回:</span></span><br><span class="line"><span class="comment">        无</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ScrollView:setShowCenter</span><span class="params">(isCenter)</span></span></span><br><span class="line">    <span class="keyword">local</span> viewSize = self:getContentSize()</span><br><span class="line">    <span class="keyword">if</span> ScrollViewDirection.DIR_HORIZONTAL == self:getDirection() <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> dertaValue = viewSize.width - self.tContentSize.width</span><br><span class="line">        <span class="keyword">if</span> isCenter <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> dertaValue &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">                self:getInnerContainer():setPositionX(dertaValue/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            self:getInnerContainer():setPositionX(dertaValue)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ScrollViewDirection.DIR_VERTICAL == self:getDirection() <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> dertaValue = viewSize.height - self.tContentSize.height</span><br><span class="line">        <span class="keyword">if</span> isCenter <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> dertaValue &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">                self:getInnerContainer():setPositionY(dertaValue/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            self:getInnerContainer():setPositionY(dertaValue)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="刷新数据"><a href="#刷新数据" class="headerlink" title="刷新数据"></a>刷新数据</h2><p>创建完ScrollView，除非item变动自己的位置，否则是不会刷新数据的。<br>所以需要一个手动刷新的方法。<br>这里充分利用了lua的变长参数，在配合人为默认规定。ie</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    描述:</span></span><br><span class="line"><span class="comment">        刷新ScrollView中指定索引的item</span></span><br><span class="line"><span class="comment">    参数:</span></span><br><span class="line"><span class="comment">        ... - 传入一堆int</span></span><br><span class="line"><span class="comment">            item的索引, -1代表全部刷新</span></span><br><span class="line"><span class="comment">    返回:</span></span><br><span class="line"><span class="comment">        无</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ScrollView:refreshItems</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> args = &#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> #args &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> args[<span class="number">1</span>] == <span class="number">-1</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> items = self:getAllItemView()</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(items) <span class="keyword">do</span></span><br><span class="line">                v:setIndex(v.iIndex)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">-- 先做一个映射表，便于查找是否需要更新</span></span><br><span class="line">            <span class="keyword">local</span> tempTable = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(args) <span class="keyword">do</span></span><br><span class="line">                tempTable[v] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">local</span> items = self:getAllItemView()</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(items) <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">if</span> v.iIndex <span class="keyword">and</span> tempTable[v.iIndex] == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">                    v:setIndex(v.iIndex)</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这里我用了一个映射表。<br>否则需要嵌套两层循环，复杂度 m * n<br>做一个映射，只需要 n + m<br>用空间来换取时间</p>
<h2 id="跳转到指定item"><a href="#跳转到指定item" class="headerlink" title="跳转到指定item"></a>跳转到指定item</h2><p>这个功能ListView是支持的，觉得ScrollView也有必要支持一下。<br>方法是先计算出inner需要移动多少距离，从而知道了index需要变化多少。</p>
<h3 id="主要步骤-（也是以垂直滑动方向为例）"><a href="#主要步骤-（也是以垂直滑动方向为例）" class="headerlink" title="主要步骤:（也是以垂直滑动方向为例）"></a>主要步骤:（也是以垂直滑动方向为例）</h3><ol>
<li>计算所需跳转的index在最上方位置是第几行</li>
<li>计算inner需要滑动多少距离</li>
<li>计算从当前到目标，index需要变动多少</li>
<li>按照移动后的index，重新布局item</li>
</ol>
<h3 id="主要代码："><a href="#主要代码：" class="headerlink" title="主要代码："></a>主要代码：</h3><ul>
<li><p>步骤1</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> line = (index % self.iMultiNum == <span class="number">0</span>) <span class="keyword">and</span></span><br><span class="line">    (index / self.iMultiNum) <span class="keyword">or</span></span><br><span class="line">    (<span class="built_in">math</span>.<span class="built_in">ceil</span>(index / self.iMultiNum))</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤2</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> posY = self:getContentSize().height - self.tContentSize.height + self.tItemContentSize.height * (line - <span class="number">1</span>)</span><br><span class="line"><span class="comment">-- 要考虑到滑动到底部，无法继续向上滑的情况</span></span><br><span class="line">posY = (posY &gt; <span class="number">0</span>) <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">or</span> posY</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤3</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> changeIndex = <span class="built_in">math</span>.<span class="built_in">ceil</span>((posY - self:getInnerContainer():getPositionY()) / self.tItemContentSize.height)</span><br><span class="line"><span class="comment">-- inner跳到指定位置</span></span><br><span class="line">self:jumpToDestination(cc.p(<span class="number">0</span>, posY))</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤4</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">self:updateViewByChangeIndex(changeIndex * self.iMultiNum)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="根据index，重新布局item"><a href="#根据index，重新布局item" class="headerlink" title="根据index，重新布局item"></a>根据index，重新布局item</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    描述:</span></span><br><span class="line"><span class="comment">        根据index，重新布局item</span></span><br><span class="line"><span class="comment">    参数:</span></span><br><span class="line"><span class="comment">        changeIndex:   int</span></span><br><span class="line"><span class="comment">            改变的index值</span></span><br><span class="line"><span class="comment">    返回:</span></span><br><span class="line"><span class="comment">        无</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ScrollView:updateViewByChangeIndex</span><span class="params">(changeIndex)</span></span></span><br><span class="line">    <span class="keyword">local</span> totalBlock = (self.iTotalItemNum % self.iMultiNum == <span class="number">0</span>) <span class="keyword">and</span></span><br><span class="line">        (self.iTotalItemNum / self.iMultiNum) <span class="keyword">or</span></span><br><span class="line">        (<span class="built_in">math</span>.<span class="built_in">ceil</span>(self.iTotalItemNum / self.iMultiNum))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> items = self:getAllItemView()</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(items) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> idx = v.iIndex + changeIndex</span><br><span class="line"></span><br><span class="line">        v:setIndex(idx)</span><br><span class="line">        v.pLayer:setVisible(idx &gt; <span class="number">0</span> <span class="keyword">and</span> idx &lt;= self.iTotalItemNum)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">local</span> i = (idx % self.iMultiNum == <span class="number">0</span>) <span class="keyword">and</span> (idx / self.iMultiNum) <span class="keyword">or</span> (<span class="built_in">math</span>.<span class="built_in">ceil</span>(idx / self.iMultiNum))</span><br><span class="line">        <span class="keyword">local</span> j = self.iMultiNum - (idx % self.iMultiNum)</span><br><span class="line">        v.pLayer:setPosition(self.tItemContentSize.width * (j - <span class="number">1</span>), self.tItemContentSize.height * (totalBlock - i))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="跳转的item在ScrollView中的位置"><a href="#跳转的item在ScrollView中的位置" class="headerlink" title="跳转的item在ScrollView中的位置"></a>跳转的item在ScrollView中的位置</h3><p>需要跳转到的item在可视区域的 上、中、下 显示<br>首先，一定要让使用者传入出现的位置枚举，<br>然后在计算inner移动的位置上加上偏移量。<br>如果要在中间显示，需要减去（向下移动） ScrollViewSize.height/2 , 因为初始的位置是按照item在最上面计算的，减去一半高度后，还需要再加上item本身高度的一半 ItemSize.height/2。<br>如果在底部显示，则需要减去（向下移动） ScrollViewSize.height , 同理，需要再加回来一个item的高度 ItemSize.height。<br>最后，依然要判定滑动到底部，无法滑动的情况。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">SCROLLVIEW_ALIGNMENT = &#123;</span><br><span class="line">    FIRST = <span class="number">1</span>,</span><br><span class="line">    MID = <span class="number">2</span>,</span><br><span class="line">    LAST = <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> posY = self:getContentSize().height - self.tContentSize.height + self.tItemContentSize.height * (line - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> alignment == SCROLLVIEW_ALIGNMENT.MID <span class="keyword">then</span></span><br><span class="line">    posY = posY - self:getContentSize().height / <span class="number">2</span> + self.tItemContentSize.height / <span class="number">2</span></span><br><span class="line"><span class="keyword">elseif</span> alignment == SCROLLVIEW_ALIGNMENT.LAST <span class="keyword">then</span></span><br><span class="line">    posY = posY - self:getContentSize().height + self.tItemContentSize.height</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">posY = (posY &gt; <span class="number">0</span>) <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">or</span> posY</span><br></pre></td></tr></table></figure>
<h2 id="飞入动画"><a href="#飞入动画" class="headerlink" title="飞入动画"></a>飞入动画</h2><p>额外再加一个飞入动画的支持吧。<br>就是从外部飞入到ScrollView的效果。</p>
<p>方法也很简单，就是在开始的时候，让所有的item在ScrollView外部；再一个个飞入到自己本应在的位置。<br>依旧是以垂直向为例。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 遍历所有item</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(self.tItemView) <span class="keyword">do</span></span><br><span class="line">	<span class="comment">-- 记录它本来所在的位置</span></span><br><span class="line">    <span class="keyword">local</span> aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 把它放在区域外</span></span><br><span class="line">    v.pLayer:setPositionY(-self:getContentSize().height - self.tItemContentSize.height)</span><br><span class="line">    v.pLayer:runAction(</span><br><span class="line">        act.seq(</span><br><span class="line">        	<span class="comment">-- 一个个飞入</span></span><br><span class="line">            act.delay((k - <span class="number">1</span>) * [delay_time]),</span><br><span class="line">            act.movto([move_time], aimPos)</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>当然，也要支持多方向ScrollView，并且要支持从前端飞入还是从后端飞入。<br>这些都是通过改动初始位置及回弹值来实现。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    描述:</span></span><br><span class="line"><span class="comment">        ScrollView内item的从外部飞入动画, 有回弹效果</span></span><br><span class="line"><span class="comment">    参数:</span></span><br><span class="line"><span class="comment">        fromBack:   boolean</span></span><br><span class="line"><span class="comment">            对于垂直方向, true代表自下而上; 对于水平方向, true代表自右向左</span></span><br><span class="line"><span class="comment">    返回:</span></span><br><span class="line"><span class="comment">        无</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ScrollView:playFlyInAction</span><span class="params">(fromBack)</span></span></span><br><span class="line">    fromBack = fromBack == <span class="literal">nil</span> <span class="keyword">and</span> <span class="literal">true</span>    </span><br><span class="line">    self.tItemView = self.tItemView <span class="keyword">or</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">   	<span class="keyword">local</span> moveTime = <span class="number">0.2</span></span><br><span class="line">   	<span class="keyword">local</span> delayTime = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self:getDirection() == ScrollViewDirection.DIR_HORIZONTAL <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> initPos = fromBack <span class="keyword">and</span> (self:getContentSize().width + self.tItemContentSize.width) <span class="keyword">or</span> (-self:getContentSize().width - self.tItemContentSize.width)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(self.tItemView) <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">local</span> aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())</span><br><span class="line"></span><br><span class="line">            v.pLayer:setPositionX(initPos)</span><br><span class="line">            v.pLayer:runAction(</span><br><span class="line">                act.seq(</span><br><span class="line">                    act.delay((k - <span class="number">1</span>) * delayTime),</span><br><span class="line">                    act.movto(moveTime, aimPos)</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> self:getDirection() == ScrollViewDirection.DIR_VERTICAL <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> initPos = fromBack <span class="keyword">and</span> (-self:getContentSize().height - self.tItemContentSize.height) <span class="keyword">or</span> (self:getContentSize().height + self.tItemContentSize.height)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(self.tItemView) <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">local</span> aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())</span><br><span class="line"></span><br><span class="line">            v.pLayer:setPositionY(initPos)</span><br><span class="line">            v.pLayer:runAction(</span><br><span class="line">                act.seq(</span><br><span class="line">                    act.delay((k - <span class="number">1</span>) * delayTime),</span><br><span class="line">                    act.movto(moveTime, aimPos)</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>公司用ScrollView主要是用来替代ListView，虽然主要是用ScrollView的重用item的特性。<br>但是还是要平滑的过渡过来，要支持ListView常用的一些接口。让这个组件更完善更好用。<br>当然功能扩展还没有停止，之后也会陆陆续续的更新。</p>
]]></content>
      <tags>
        <tag>cocos2d</tag>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos2d-lua class实现分析</title>
    <url>/2018/09/18/Cocos2d-lua%20class%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>Cocos2d-lua class实现分析</p>
<a id="more"></a>
<p><br></p>
<h3 id="lua中的类"><a href="#lua中的类" class="headerlink" title="lua中的类"></a>lua中的类</h3><p>lua语言中实际上来说是没有类这个概念的，但是它也可以用自己的各种机制来实现类的效果。<br>从概念上来说，类有三大特性：封装性、继承性、多态性。lua有元表机制。<br>从结构上来说，类其实就是一个键值对的集合。lua有table可以满足。</p>
<p>lua的表查找键值对流程如下图所示：</p>
<p><img src="lua表查找键值对流程.jpg" alt="lua表查找键值对流程"></p>
<p>所以，我们通过lua的table及它的元表机制，可以在lua中实现类。</p>
<p><br></p>
<h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>在cocos2d中，自己做了一个class方法，来作为类的机制。 文件位置: [cocos\scripting\lua-bindings\script\cocos2d\functions.lua]</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">class</span><span class="params">(classname, ...)</span></span></span><br><span class="line">    <span class="keyword">local</span> cls = &#123;__cname = classname&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> supers = &#123;...&#125;</span><br><span class="line">    <span class="keyword">for</span> _, super <span class="keyword">in</span> <span class="built_in">ipairs</span>(supers) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> superType = <span class="built_in">type</span>(super)</span><br><span class="line">        <span class="built_in">assert</span>(superType == <span class="string">"nil"</span> <span class="keyword">or</span> superType == <span class="string">"table"</span> <span class="keyword">or</span> superType == <span class="string">"function"</span>,</span><br><span class="line">            <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"class() - create class \"%s\" with invalid super class type \"%s\""</span>,</span><br><span class="line">                classname, superType))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> superType == <span class="string">"function"</span> <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">assert</span>(cls.__create == <span class="literal">nil</span>,</span><br><span class="line">                <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"class() - create class \"%s\" with more than one creating function"</span>,</span><br><span class="line">                    classname));</span><br><span class="line">            <span class="comment">-- if super is function, set it to __create</span></span><br><span class="line">            cls.__create = super</span><br><span class="line">        <span class="keyword">elseif</span> superType == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> super[<span class="string">".isclass"</span>] <span class="keyword">then</span></span><br><span class="line">                <span class="comment">-- super is native class</span></span><br><span class="line">                <span class="built_in">assert</span>(cls.__create == <span class="literal">nil</span>,</span><br><span class="line">                    <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"class() - create class \"%s\" with more than one creating function or native class"</span>,</span><br><span class="line">                        classname));</span><br><span class="line">                cls.__create = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> super:<span class="built_in">create</span>() <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">-- super is pure lua class</span></span><br><span class="line">                cls.__supers = cls.__supers <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">                cls.__supers[#cls.__supers + <span class="number">1</span>] = super</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> cls.super <span class="keyword">then</span></span><br><span class="line">                    <span class="comment">-- set first super pure lua class as class.super</span></span><br><span class="line">                    cls.super = super</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">error</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"class() - create class \"%s\" with invalid super type"</span>,</span><br><span class="line">                        classname), <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    cls.<span class="built_in">__index</span> = cls</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cls.__supers <span class="keyword">or</span> #cls.__supers == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">setmetatable</span>(cls, &#123;<span class="built_in">__index</span> = cls.super&#125;)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">setmetatable</span>(cls, &#123;<span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(_, key)</span></span></span><br><span class="line">            <span class="keyword">local</span> supers = cls.__supers</span><br><span class="line">            <span class="keyword">for</span> i = <span class="number">1</span>, #supers <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">local</span> super = supers[i]</span><br><span class="line">                <span class="keyword">if</span> super[key] <span class="keyword">then</span> <span class="keyword">return</span> super[key] <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span>&#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cls.ctor <span class="keyword">then</span></span><br><span class="line">        <span class="comment">-- add default constructor</span></span><br><span class="line">        cls.ctor = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    cls.new = <span class="function"><span class="keyword">function</span><span class="params">(...)</span></span></span><br><span class="line">        <span class="keyword">local</span> instance</span><br><span class="line">        <span class="keyword">if</span> cls.__create <span class="keyword">then</span></span><br><span class="line">            instance = cls.__create(...)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            instance = &#123;&#125;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        setmetatableindex(instance, cls)</span><br><span class="line">        instance.class = cls</span><br><span class="line">        instance:ctor(...)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    cls.<span class="built_in">create</span> = <span class="function"><span class="keyword">function</span><span class="params">(_, ...)</span></span></span><br><span class="line">        <span class="keyword">return</span> cls.new(...)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>有几个设定键：</p>
<ul>
<li>__cname : 类名</li>
<li>__create : 初始化方法</li>
<li>__supers : 父类集合</li>
</ul>
<p>有几个函数：</p>
<ul>
<li>ctor : 构造函数</li>
<li>new : 初始化函数</li>
<li>create : 初始化函数（对new的一个封装，为了使用方法同C++部分一致）</li>
</ul>
<p><br></p>
<p>class方法：</p>
<ol>
<li>设置类名</li>
<li>遍历传入的构造方法</li>
</ol>
<ul>
<li>若是 function类型，则设置为初始化方法</li>
<li>若是 table类型<ul>
<li>若是 C++的类，设置初始化方法为调用原生类的create方法</li>
<li>若是 纯lua类，将自己添加到基类中</li>
</ul>
</li>
</ul>
<ol start="3">
<li>处理自己的元表</li>
</ol>
<ul>
<li>ctor：必须要有</li>
<li>new<ul>
<li>获取instance值</li>
<li>设置instance元表index<ul>
<li>若是 C++类，设置peer<br>（<em>PS：peer是 tolua++提供的存储C++对象在Lua中的扩展</em>）</li>
<li>若是 纯lua类，设置元表</li>
</ul>
</li>
<li>执行构造方法</li>
<li>返回instance</li>
</ul>
</li>
<li>create：对new的一个封装，为了使用方法同C++部分一致</li>
</ul>
<ol start="4">
<li>处理构造函数、初始化函数的创建与封装</li>
</ol>
<p><br><br><br></p>
<hr>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="http://blog.justbilt.com/2017/03/04/quick-x-oop/" target="_blank" rel="noopener">Quick-Cocos2d-x 中的面向对象</a></li>
<li><a href="https://github.com/zfengzhen/Blog/blob/master/article/tolua%2B%2B%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90.md" target="_blank" rel="noopener">tolua++实现分析</a></li>
</ul>
]]></content>
      <tags>
        <tag>瞎分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos2d-x 接入 GameCenter 排行榜与成就</title>
    <url>/2017/04/29/Cocos2d-x%20%E6%8E%A5%E5%85%A5%20GameCenter%20%E6%8E%92%E8%A1%8C%E6%A6%9C%E4%B8%8E%E6%88%90%E5%B0%B1/</url>
    <content><![CDATA[<p>Cocos2d-x 接入 GameCenter 排行榜与成就<br>[mac - XCode 8.3 - cocos2d-x lua]</p>
<a id="more"></a>
<p><br></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>要求接入GameCenter的排行榜和成就。</p>
<p>GameCenter 是苹果推出的一个社交平台，<br>它主要提供了以下几个功能：</p>
<ul>
<li>排行榜</li>
<li>成就</li>
<li>挑战</li>
</ul>
<p>而且，苹果同时提供了GameKit框架来让GameCenter更易集成。<br>可能是因为GameCenter的热度过去了吧，相关的东西都比较早期。<br>整理总结了一下，希望对他人有所帮助。</p>
<p>我的环境：<br>mac - XCode 8.3 - cocos2d-x lua</p>
<p><br></p>
<h1 id="公共的处理"><a href="#公共的处理" class="headerlink" title="公共的处理"></a>公共的处理</h1><h2 id="配置-iTunes-Connect-排行榜与成就的位置。"><a href="#配置-iTunes-Connect-排行榜与成就的位置。" class="headerlink" title="配置 iTunes Connect 排行榜与成就的位置。"></a>配置 iTunes Connect 排行榜与成就的位置。</h2><p>登录iTunes Connect, 找到要处理的APP。<br>选择 功能-&gt;GameCenter<br>可以看到三个大项：</p>
<ul>
<li>移动群组</li>
<li>排行榜</li>
<li>成就</li>
</ul>
<h2 id="添加GameKit框架"><a href="#添加GameKit框架" class="headerlink" title="添加GameKit框架"></a>添加GameKit框架</h2><p>打开项目工程，将 Capabilities 的 GameCenter 打开。<br>这样，XCode就会将GameKit框架加到我们的工程中。</p>
<h2 id="登录GameCenter"><a href="#登录GameCenter" class="headerlink" title="登录GameCenter"></a>登录GameCenter</h2><p>登录GameCenter:  【这个步骤在我们加载完游戏时进行即可】</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>) authenticateLocalPlayer &#123;</span><br><span class="line">    <span class="comment">// 获取本地用户</span></span><br><span class="line">    GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证登录</span></span><br><span class="line">    localPlayer.authenticateHandler = ^(<span class="built_in">UIViewController</span> *viewController, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">        [<span class="keyword">self</span> setLastError:error];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (localPlayer.authenticated) &#123;                        <span class="comment">// 本地用户已经登录</span></span><br><span class="line">            _gameCenterFeaturesEnabled = <span class="literal">YES</span>;                   <span class="comment">// 此变量是判断是否已经登录上GameCenter</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(viewController) &#123;                             <span class="comment">// 没有用户，弹出登录界面</span></span><br><span class="line">            [<span class="keyword">self</span> presentViewController:viewController];        </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                                                <span class="comment">// 没有用户，并且没有登录界面</span></span><br><span class="line">            _gameCenterFeaturesEnabled = <span class="literal">NO</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关于lua调用object-c"><a href="#关于lua调用object-c" class="headerlink" title="关于lua调用object-c"></a>关于lua调用object-c</h2><p>因为我的环境是 cocos2d-x lua，所以，用通过lua来调用object-c。<br>cocos2d-x其实已经有相关的调用结构 —— LuaObjcBridge, 可以直接用 callStaticMethod来调用：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">LuaObjcBridge.callStaticMethod(methodName className,args)</span><br></pre></td></tr></table></figure>
<h2 id="GameKit辅助处理类"><a href="#GameKit辅助处理类" class="headerlink" title="GameKit辅助处理类"></a>GameKit辅助处理类</h2><p>GameKitHelper.h:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;GameKit/GameKit.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"cocos2d.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方便lua调用</span></span><br><span class="line"><span class="meta">#include <span class="meta-string">"CCLuaEngine.h"</span></span></span><br><span class="line"><span class="meta">#include <span class="meta-string">"CCLuaBridge.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GameKitHelper</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">// 处理错误</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSError</span>* lastError;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">+ (<span class="keyword">id</span>) sharedGameKitHelper;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Player authentication, info</span></span><br><span class="line">-(<span class="keyword">void</span>) authenticateLocalPlayer;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>GameKitHelper.mm</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"GameKitHelper.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GameKitHelper</span> ()</span></span><br><span class="line">        &lt;GKGameCenterControllerDelegate&gt; &#123;</span><br><span class="line">    <span class="built_in">BOOL</span> _gameCenterFeaturesEnabled;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GameKitHelper</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark Singleton stuff</span></span><br><span class="line"></span><br><span class="line">+(<span class="keyword">id</span>) sharedGameKitHelper &#123;</span><br><span class="line">    <span class="keyword">static</span> GameKitHelper *sharedGameKitHelper;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        sharedGameKitHelper =</span><br><span class="line">                [[GameKitHelper alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> sharedGameKitHelper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark Player Authentication</span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) authenticateLocalPlayer &#123;</span><br><span class="line">    GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];</span><br><span class="line"></span><br><span class="line">    localPlayer.authenticateHandler = ^(<span class="built_in">UIViewController</span> *viewController, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">        [<span class="keyword">self</span> setLastError:error];</span><br><span class="line">        <span class="keyword">if</span> (localPlayer.authenticated) &#123;</span><br><span class="line">            _gameCenterFeaturesEnabled = <span class="literal">YES</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(viewController) &#123;</span><br><span class="line">            [<span class="keyword">self</span> presentViewController:viewController];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _gameCenterFeaturesEnabled = <span class="literal">NO</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark Property setters</span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) setLastError:(<span class="built_in">NSError</span>*)error &#123;</span><br><span class="line">    _lastError = [error <span class="keyword">copy</span>];</span><br><span class="line">    <span class="keyword">if</span> (_lastError) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"GameCenter -- setLastError -- ERROR: %@"</span>, [[_lastError userInfo] </span><br><span class="line">          description]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark UIViewController stuff</span></span><br><span class="line"></span><br><span class="line">-(<span class="built_in">UIViewController</span>*) getRootViewController &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIApplication</span> </span><br><span class="line">      sharedApplication].keyWindow.rootViewController;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)presentViewController:(<span class="built_in">UIViewController</span>*)vc &#123;</span><br><span class="line">    <span class="built_in">UIViewController</span>* rootVC = [<span class="keyword">self</span> getRootViewController];</span><br><span class="line">    [rootVC presentViewController:vc animated:<span class="literal">YES</span> </span><br><span class="line">      completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="登录GameCenter时机"><a href="#登录GameCenter时机" class="headerlink" title="登录GameCenter时机"></a>登录GameCenter时机</h2><p>由你决定，可以放在 AppDelegate 中 applicationDidFinishLaunching时。</p>
<p><br></p>
<h1 id="关于排行榜"><a href="#关于排行榜" class="headerlink" title="关于排行榜"></a>关于排行榜</h1><h2 id="配置-iTunes-Connect"><a href="#配置-iTunes-Connect" class="headerlink" title="配置 iTunes Connect"></a>配置 iTunes Connect</h2><p>在iTunes Connect 找到 排行榜。</p>
<p>简单说一下流程吧：<br>配置排行榜的结构，然后我们在游戏中将数据上传到这个结构，最后显示到GameCenter中。</p>
<p>排行榜分为 单个排行榜 与 组合排行榜。(顾名思义，区别就不需要解释了吧？)<br>里面需要配置的相应属性，可参考本文末尾的关于。</p>
<p>要注意两点：</p>
<ol>
<li>排行榜ID，因为只有它是在创建后无法更改的。（而且，要记住这个ID，因为后面程序要用到）</li>
<li>排行榜只要发布了（经过审批发布），就无法删除了。</li>
</ol>
<p>接下来就看属性去配置它吧。</p>
<h2 id="XCode工程配置"><a href="#XCode工程配置" class="headerlink" title="XCode工程配置"></a>XCode工程配置</h2><p>模拟这个流程：登录GameCenter -&gt; 提交排行榜数据 ( -&gt; 如果需要，弹出GameCenter排行榜)<br>提交排行榜数据:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>) submitScore:(int64_t)score category:(<span class="built_in">NSString</span>*)category &#123;       <span class="comment">// 这里两个参数 score是数据， category是ID，就是我们创建排行榜以后，不可更改的那个ID。</span></span><br><span class="line">    <span class="comment">// 检查是否在登录状态</span></span><br><span class="line">    <span class="keyword">if</span> (!_gameCenterFeaturesEnabled)    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"GameCenter -- submitScore -- Player not authenticated"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个分数对象</span></span><br><span class="line">    GKScore* gkScore = [[GKScore alloc] initWithCategory:category];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置分数对象的值</span></span><br><span class="line">    gkScore.value = score;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向GameCenter提交数据</span></span><br><span class="line">    [gkScore reportScoreWithCompletionHandler: ^(<span class="built_in">NSError</span>* error)    &#123;</span><br><span class="line">        [<span class="keyword">self</span> setLastError:error];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实践使用"><a href="#实践使用" class="headerlink" title="实践使用"></a>实践使用</h2><p>在公用部分，已经添加了GameCenter的登录验证相关的东西了。</p>
<ul>
<li>将排行榜数据提交的函数</li>
</ul>
<p>GameKitHelper.h</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>) submitScore:(int64_t)score category:(<span class="built_in">NSString</span>*)category;</span><br></pre></td></tr></table></figure>
<p>GameKitHelper.mm</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>) submitScore:(int64_t)score category:(<span class="built_in">NSString</span>*)category &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!_gameCenterFeaturesEnabled)    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"GameCenter -- submitScore -- Player not authenticated"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GKScore* gkScore = [[GKScore alloc] initWithCategory:category];</span><br><span class="line"></span><br><span class="line">    gkScore.value = score;</span><br><span class="line"></span><br><span class="line">    [gkScore reportScoreWithCompletionHandler: ^(<span class="built_in">NSError</span>* error)    &#123;</span><br><span class="line">        [<span class="keyword">self</span> setLastError:error];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>给lua调用的函数</li>
</ul>
<p>GameKitHelper.h</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+(<span class="keyword">void</span>) getScore:(<span class="built_in">NSDictionary</span> *)dict;</span><br></pre></td></tr></table></figure>
<p>GameKitHelper.mm</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+(<span class="keyword">void</span>) getScore:(<span class="built_in">NSDictionary</span> *)dict &#123;</span><br><span class="line">    <span class="built_in">NSString</span>* rID = [dict objectForKey:<span class="string">@"id"</span>];</span><br><span class="line">    <span class="keyword">int</span> score = [[dict objectForKey:<span class="string">@"score"</span>] intValue];</span><br><span class="line">    </span><br><span class="line">    [[GameKitHelper sharedGameKitHelper] submitScore:(int64_t)score category:rID];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>lua调用</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">LuaObjcBridge.callStaticMethod(<span class="string">"GameKitHelper"</span>, <span class="string">"getScore"</span>, &#123;id = 排行榜的ID, score = 分数值&#125;)</span><br></pre></td></tr></table></figure>
<p><br></p>
<h1 id="关于成就"><a href="#关于成就" class="headerlink" title="关于成就"></a>关于成就</h1><h2 id="配置-iTunes-Connect-1"><a href="#配置-iTunes-Connect-1" class="headerlink" title="配置 iTunes Connect"></a>配置 iTunes Connect</h2><p>还是老位置，之前看的排行榜，这次点成就。<br>还是老样子，成就的ID，创建后不可修改，成就发布后不可删除。<br>但是，成就还要多一点，就是每个游戏总共有2000点成就分（为什么是2000？你问老乔去。。），你可以给每个成就分配一些成就分。<br>成就还有是否隐藏的选项，但是它的隐藏并不是看不到这个成就了，而是有一个成就名称为隐藏的成就显示在列表中。<br>还有，它的进度是一个顺时针扇形来表示，就是你的图标刚开始是被遮掩的，随着进度的增加，会逐渐显现出图标，方向是顺时针扇形。</p>
<p>其他相关参数，可参考本文末尾的关于。</p>
<h2 id="XCode工程配置-1"><a href="#XCode工程配置-1" class="headerlink" title="XCode工程配置"></a>XCode工程配置</h2><p>流程与排行榜的一样，但是这次提交的不是分数了，而是成就完成的百分比。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提交成就数据</span></span><br><span class="line">-(<span class="keyword">void</span>) submitAchievment:(<span class="built_in">NSString</span> *)identifier percent:(<span class="keyword">double</span>) percentComplete &#123;          <span class="comment">// identifier 成就ID, percentComplete: 成就完成百分比</span></span><br><span class="line">    <span class="comment">// 判断登录认证</span></span><br><span class="line">    <span class="keyword">if</span> (!_gameCenterFeaturesEnabled)    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"GameCenter -- submitAchievment -- Player not authenticated"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建成就结构，注入成就ID</span></span><br><span class="line">    GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置成就百分比</span></span><br><span class="line">    [achievement setPercentComplete:percentComplete];  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交成就数据</span></span><br><span class="line">    [achievement reportAchievementWithCompletionHandler:^(<span class="built_in">NSError</span> *error) &#123;  </span><br><span class="line">        <span class="keyword">if</span>(error != <span class="literal">nil</span>)&#123;  </span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"GameCenter -- submitAchievment --  error:%@"</span>, [error localizedDescription]);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"GameCenter -- submitAchievment --  提交成就成功"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实践使用-1"><a href="#实践使用-1" class="headerlink" title="实践使用"></a>实践使用</h2><p>同排行榜一样。</p>
<ul>
<li>将成就数据提交的函数</li>
</ul>
<p>GameKitHelper.h</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)submitAchievment:(<span class="built_in">NSString</span> *)identifier percent:(<span class="keyword">double</span>)percentComplete;</span><br></pre></td></tr></table></figure>
<p>GameKitHelper.mm</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>) submitAchievment:(<span class="built_in">NSString</span> *)identifier percent:(<span class="keyword">double</span>) percentComplete &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_gameCenterFeaturesEnabled)    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"GameCenter -- submitAchievment -- Player not authenticated"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  </span><br><span class="line">      </span><br><span class="line">    [achievement setPercentComplete:percentComplete];  </span><br><span class="line">      </span><br><span class="line">    [achievement reportAchievementWithCompletionHandler:^(<span class="built_in">NSError</span> *error) &#123;  </span><br><span class="line">        <span class="keyword">if</span>(error != <span class="literal">nil</span>)&#123;  </span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"GameCenter -- submitAchievment --  error:%@"</span>, [error localizedDescription]);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"GameCenter -- submitAchievment --  提交成就成功"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>给lua调用的函数</li>
</ul>
<p>GameKitHelper.h</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+(<span class="keyword">void</span>) getAchievement:(<span class="built_in">NSDictionary</span> *)dict;</span><br></pre></td></tr></table></figure>
<p>GameKitHelper.mm</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+(<span class="keyword">void</span>) getAchievement:(<span class="built_in">NSDictionary</span> *)dict &#123;</span><br><span class="line">    <span class="built_in">NSString</span>* aID = [dict objectForKey:<span class="string">@"id"</span>];</span><br><span class="line">    <span class="keyword">double</span> percent = [[dict objectForKey:<span class="string">@"percent"</span>] doubleValue];</span><br><span class="line">    </span><br><span class="line">    [[GameKitHelper sharedGameKitHelper] submitAchievment:(<span class="built_in">NSString</span> *)aID percent:percent];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>lua调用</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">LuaObjcBridge.callStaticMethod(<span class="string">"GameKitHelper"</span>, <span class="string">"getAchievement"</span>, &#123;id = 成就ID, percent = 成就百分比&#125;)</span><br></pre></td></tr></table></figure>
<p><br></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>GameCenter还是挺好的一个东西。<br>它还有一个好友挑战功能，但这个主要适合之前 Flappy Bird，别踩白块 那些游戏来弄。<br>或许，这也是这个平台没落了的原因吧。</p>
<p><br><br><br><br><br></p>
<hr>
<ol>
<li>关于</li>
</ol>
<ul>
<li><a href="http://www.cocos2d-x.org/reference/native-cpp/V3.5/d6/d59/classcocos2d_1_1_lua_objc_bridge.html" target="_blank" rel="noopener">关于 LuaObjcBridge</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide_zh_CN/Chapters/About.html#//apple_ref/doc/uid/TP40016325-CH1-SW1" target="_blank" rel="noopener">关于 iTunes Connect</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectGameCenter_Guide_SCh/Chapters/Leaderboards.html#//apple_ref/doc/uid/TP40014490-CH2-SW1" target="_blank" rel="noopener">中文版 排行榜及成就 配置属性</a></li>
</ul>
<p><br></p>
<ol start="2">
<li>参考</li>
</ol>
<ul>
<li><a href="https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6" target="_blank" rel="noopener">https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6</a></li>
<li><a href="http://www.jianshu.com/p/4279f84d8340" target="_blank" rel="noopener">http://www.jianshu.com/p/4279f84d8340</a></li>
<li><a href="http://blog.csdn.net/shenjie12345678/article/details/45025403/" target="_blank" rel="noopener">http://blog.csdn.net/shenjie12345678/article/details/45025403/</a></li>
</ul>
]]></content>
      <tags>
        <tag>cocos2d</tag>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos2d之颜色混合</title>
    <url>/2018/09/09/Cocos2d%E4%B9%8B%E9%A2%9C%E8%89%B2%E6%B7%B7%E5%90%88/</url>
    <content><![CDATA[<p>Cocos2d之颜色混合<br>BlendFunc、Sprite、ImageView</p>
<a id="more"></a>
<p><br></p>
<h1 id="颜色混合"><a href="#颜色混合" class="headerlink" title="颜色混合"></a>颜色混合</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>混合：指两种颜色的叠加方式</li>
<li>颜色：包括RGBA（红、绿、蓝、透明度）信息</li>
<li>源颜色：后加入点的颜色</li>
<li>目标颜色：先加入点的颜色</li>
<li>源因子：后加入点的颜色乘以的系数</li>
<li>目标因子：先加入点的颜色乘以的系数。</li>
</ul>
<p>每个图片都可以看作是点的集合，此处只关注点的颜色信息。两张图片重合在一起时，就是部分点重合在一起，OpenGL在绘制时，会根据各自混合因子计算（源颜色<em>源因子 + 目标颜色</em>目标因子），最终得出表现颜色。</p>
<p><br></p>
<h2 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h2><p>PS: 颜色分量最大值为1.0, 计算时不会按照超过1.0的值计算。</p>
<ul>
<li>源颜色 (Rs, Gs, Bs, As)</li>
<li>目标颜色 (Rd, Gd, Bd, Ad)</li>
<li>源因子 (Sr, Sg, Sb, Sa)</li>
<li>目标因子 (Dr, Dg, Db, Da)</li>
</ul>
<p>表达式: (Rs<em>Sr + Rd</em>Dr, Gs<em>Sg + Gd</em>Dg, Bs<em>Sb + Bd</em>Db, As<em>Sa + Ad</em>Da)</p>
<p><br></p>
<h2 id="混合因子"><a href="#混合因子" class="headerlink" title="混合因子"></a>混合因子</h2><table>
<thead>
<tr>
<th>混合方式</th>
<th>因子值</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>GL_ZERO</td>
<td>(0, 0, 0, 0)</td>
<td>该颜色不参与颜色混合（因为系数为0，乘多少都是0）</td>
</tr>
<tr>
<td>GL_ONE</td>
<td>(1, 1, 1, 1)</td>
<td>该颜色完整参与颜色混合（1是1，2是2，不打折扣）</td>
</tr>
<tr>
<td>GL_SRC_COLOR</td>
<td>(Rs, Gs, Bs, As)</td>
<td>使用源颜色的各项数值做系数</td>
</tr>
<tr>
<td>GL_DST_COLOR</td>
<td>(Rd, Gd, Bd, Ad)</td>
<td>使用目标颜色的各项数值做系数</td>
</tr>
<tr>
<td>GL_ONE_MINUS_SRC_COLOR</td>
<td>(1-Rs, 1-Gs, 1-Bs, 1-As)</td>
<td>满值(1.0)减去源颜色的各项数值做系数</td>
</tr>
<tr>
<td>GL_ONE_MINUS_DST_COLOR</td>
<td>(1-Rd, 1-Gd, 1-Bd, 1-Ad)</td>
<td>满值(1.0)减去目标颜色的各项数值做系数</td>
</tr>
<tr>
<td>GL_SRC_ALPHA</td>
<td>(As, As, As, As)</td>
<td>使用源颜色的透明度做颜色的各项系数</td>
</tr>
<tr>
<td>GL_DST_ALPHA</td>
<td>(Ad, Ad, Ad, Ad)</td>
<td>使用目标颜色的透明度做颜色的各项系数</td>
</tr>
<tr>
<td>GL_ONE_MINUS_SRC_ALPHA</td>
<td>(1-As, 1-As, 1-As, 1-As)</td>
<td>满值(1.0)减去源颜色的透明度做颜色的各项系数</td>
</tr>
<tr>
<td>GL_ONE_MINUS_DST_ALPHA</td>
<td>(1-Ad, 1-Ad, 1-Ad, 1-Ad)</td>
<td>满值(1.0)减去目标颜色的透明度做颜色的各项系数</td>
</tr>
</tbody>
</table>
<p><br><br><br></p>
<h1 id="Cocos2d相关基础"><a href="#Cocos2d相关基础" class="headerlink" title="Cocos2d相关基础"></a>Cocos2d相关基础</h1><h2 id="BlendFunc"><a href="#BlendFunc" class="headerlink" title="BlendFunc"></a>BlendFunc</h2><p>定义在 ccTypes.h 中，是一个存储源因子和目标因子的结构体。</p>
<p>内部定义了一些常用混合因子<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Blending disabled. Uses &#123;GL_ONE, GL_ZERO&#125; */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> BlendFunc DISABLE;</span><br><span class="line"><span class="comment">/** Blending enabled for textures with Alpha premultiplied. Uses &#123;GL_ONE, GL_ONE_MINUS_SRC_ALPHA&#125; */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> BlendFunc ALPHA_PREMULTIPLIED;</span><br><span class="line"><span class="comment">/** Blending enabled for textures with Alpha NON premultiplied. Uses &#123;GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA&#125; */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> BlendFunc ALPHA_NON_PREMULTIPLIED;</span><br><span class="line"><span class="comment">/** Enables Additive blending. Uses &#123;GL_SRC_ALPHA, GL_ONE&#125; */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> BlendFunc ADDITIVE;</span><br></pre></td></tr></table></figure></p>
<h2 id="BlendProtocol-amp-TextureProtocol"><a href="#BlendProtocol-amp-TextureProtocol" class="headerlink" title="BlendProtocol &amp; TextureProtocol"></a>BlendProtocol &amp; TextureProtocol</h2><p>均定义在协议基类 CCProtocols.h 中，<br>BlendProtocol类是用来设置/获取当前使用的BlendFunc（混合因子）的。<br>TextureProtocol继承了BlendProtocol类，同时提供了对当前纹理的操作支持。</p>
<p><br><br><br></p>
<h1 id="Sprite-amp-ImageView"><a href="#Sprite-amp-ImageView" class="headerlink" title="Sprite &amp; ImageView"></a>Sprite &amp; ImageView</h1><p>在Cocos2d中主要是会对图片进行颜色混合的设置，图片类主要就是Sprite和ImageView。</p>
<h2 id="Sprite"><a href="#Sprite" class="headerlink" title="Sprite"></a>Sprite</h2><p>因为Sprite继承了TextureProtocol类，所以相应继承了对BlendFunc的操作。<br>直接使用 setBlendFunc/getBlendFunc 即可。</p>
<p><br></p>
<h2 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h2><p>虽然ImageView没有继承相关类，但是所有继承Widget的类都有获取绘制节点的方法 getVirtualRenderer。<br>ImageView重写了这个方法，会返回一个 Scale9Sprite，它是继承Sprite的，然后可以用对Sprite方法了。</p>
<p><br><br><br></p>
]]></content>
      <tags>
        <tag>跟着学</tag>
      </tags>
  </entry>
  <entry>
    <title>Go环境搭建小记</title>
    <url>/2017/03/23/Go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>Go环境搭建<br>Mac + Go1.7 + VSCode1.8</p>
<a id="more"></a>
<p><br></p>
<hr>
<p>由于工作原因，需要学习一下Go。<br>其实，我一直就对这个语言挺感兴趣的。<br>虽说技多不压身，但贪多嚼不烂；本来想着嚼烂了客户端，再去学一学Go。<br>没关系，先提前了解一下吧。</p>
<hr>
<p><br></p>
<p>这个语言，对新手真是不友好到极点。<br>搭环境废了很大功夫。</p>
<p>先列一下我的环境：<br>Mac系统 - Go 1.7 - VSCode 1.8<br>（ IDE为什么选择VSCode？VSCode优点可以自行Google ）</p>
<p><br><br><br></p>
<h1 id="Go的设置"><a href="#Go的设置" class="headerlink" title="Go的设置"></a>Go的设置</h1><p>先把Go下载，然后安装到Mac。<br>然后需要配置一下环境变量</p>
<ul>
<li>GOROOT<br>这个是你Go安装到的位置，一般在  /usr/local/go</li>
<li>GOPATH<br>这个是你工作区路径，一般在自建的文件夹下（这个自建的文件夹下要有3个子文件夹[src、pkg、bin]）</li>
<li>GOBIN（选配）<br>工作区路径下的bin文件夹（<strong>路径唯一</strong>）</li>
</ul>
<p>当时这块就混淆了一下。<br>因为Go是支持多个工作区域的，后面我们要为Go下载一系列依赖包（就是在命令行用 go get 获得的一堆东西），如果都放在一个工作区域，就会有些混乱。<br>所以，很多人就建立两个区域，一个放依赖包，一个用来放自己平时的东西。<br>这时候，环境变量上就要有多个区域，Mac用 ‘:’ 来区隔。（依赖包默认下载到第一个工作区域）</p>
<p>在命令行下：</p>
<ol>
<li>打开配置（<code>vim .bash_profile</code>） 开始搭Go环境。</li>
<li><code>export GOPATH=&quot;/Users/你的用户名/依赖包目录:/Users/你的用户名/工作区目录&quot;</code><br>依赖包默认下载到GOPATH的第一个目录下，所以依赖包目录要放在第一个，然后用’:’分隔<br><code>export PATH=$PATH:${GOPATH//://bin:}/bin</code><br>如果设置GOBIN，GOBIN只能设置一个路径，但是你可以将每个GOPATH下的bin添加到PATH中<br><code>export PATH=$PATH:$GOPATH</code><br>路径加入到PATH</li>
<li>保存退出，然后重启配置（source .bash_profile)</li>
<li>输入 go env 看看Go的环境变量</li>
</ol>
<p><em>PS: 关于GOBIN：go install编译存放路径。不允许设置多个路径。可以为空。为空时则遵循“约定优于配置”原则，可执行文件放在各自GOPATH目录的bin文件夹中（前提是：package main的main函数文件不能直接放到GOPATH的src下面。)</em></p>
<p><br></p>
<h1 id="VSCode的配置"><a href="#VSCode的配置" class="headerlink" title="VSCode的配置"></a>VSCode的配置</h1><p>下载VSCode，然后在左侧小图标的最下面那个扩展选项中，搜索Go，进行下载(一般会搜索到两个go 和 Go，我下载的是第二个Go)。<br>接下来，要下载一系列的依赖包。</p>
<h2 id="打开命令行，分别输入以下命令进行下载："><a href="#打开命令行，分别输入以下命令进行下载：" class="headerlink" title="打开命令行，分别输入以下命令进行下载："></a>打开命令行，分别输入以下命令进行下载：</h2><pre><code>go get -u -v github.com/nsf/gocode
go get -u -v github.com/rogpeppe/godef
go get -u -v github.com/golang/lint/golint
go get -u -v github.com/lukehoban/go-outline
go get -u -v sourcegraph.com/sqs/goreturns
go get -u -v golang.org/x/tools/cmd/gorename
go get -u -v github.com/tpng/gopkgs
go get -u -v golang.org/x/tools/cmd/guru
</code></pre><p>这一步，需要  科学上网工具  的支持，而且有时候，你有科学上网工具的支持都不顶用。<br>本质上讲，以gocode为例，它将gocode相关文件下载到src，然后将它编译生成可执行文件，将可执行文件放到bin目录下。<br>所以，可以直接去github上下载下来，然后自己编译一下，将生成的可执行文件放到bin目录下。</p>
<h2 id="配置VSCode相关"><a href="#配置VSCode相关" class="headerlink" title="配置VSCode相关"></a>配置VSCode相关</h2><p>主要是 settings.json 与 launch.json</p>
<p>如果你配置了 GOPATH、GOROOT ，就不需要配置相应的setting.json。<br>（进入方法是 code -&gt; 首选项 -&gt; 用户设置）</p>
<p>打开VSCode，选择你的工作区域文件夹，然后在编辑配置文件。（不选文件夹不能配置）<br>进入方法是 code -&gt; 首选项 -&gt; 工作区设置</p>
<p>主要修改program字段: <code>program: &quot;${workspaceRoot}&quot;</code><br>如果你的文件，比如test.go 放在src下就： <code>program: &quot;${workspaceRoot}/src&quot;</code></p>
<p><br></p>
<h1 id="让Mac-支持-VSCode调试功能"><a href="#让Mac-支持-VSCode调试功能" class="headerlink" title="让Mac 支持 VSCode调试功能"></a>让Mac 支持 VSCode调试功能</h1><p>英语原文：  <a href="https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md" target="_blank" rel="noopener">&gt;这里&lt;</a></p>
<p>简单翻译一下步骤：</p>
<ol>
<li>创建一个自签名证书<br> 找到钥匙串访问，（ 证书助理 -&gt; 创建证书（身份类型：自签名证书，证书类型：代码签名，勾选 覆盖这些默认值） -&gt; 继续到最后，指定用于该证书的位置: 系统 ）</li>
<li>设定信任属性<br> 重启系统后，找到自己创建的证书，在 （ 显示简介 -&gt; 信任 -&gt; 代码签名 ） 选择 （ 始终信任 ）</li>
<li>重新编译dlv文件<br> 打开命令行，进入依赖包所处的工作区: <code>src/github.com/derekparker/delve</code><br> 如果你的Go版本是1.5，则运行： <code>GO15VENDOREXPERIMENT=1 CERT=你创建的证书名称 make install</code><br> 其他版本就直接：<code>CERT=你创建的证书名称 make install</code></li>
</ol>
<p><br></p>
<h1 id="总结小记。"><a href="#总结小记。" class="headerlink" title="总结小记。"></a>总结小记。</h1><p>终于折腾完了。<br>花了好久时间，看了N多教程，但还是走了不少弯路。<br>在 GOPATH、GOROOT理解上，在GOBIN路径唯一上，在创建签名证书处等等。<br>所以，整理了一下这篇文章，希望对他人有所帮助。</p>
]]></content>
      <tags>
        <tag>跟着学</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins部署之不识别python</title>
    <url>/2019/08/29/Jenkins%E9%83%A8%E7%BD%B2%E4%B9%8B%E4%B8%8D%E8%AF%86%E5%88%ABpython/</url>
    <content><![CDATA[<p>Jenkins部署之 不识别python</p>
<a id="more"></a>
<p><br></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在使用jenkins部署自动化android打包。</p>
<p>有时间可以写关于jenkins使用的文章。</p>
<p>本文就是记录一些遇到的问题，不枉查了一些时间。</p>
<p><br></p>
<p><br></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>配置jenkins后，使用windows命令行时，执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">py <span class="number">-3</span> script.py</span><br></pre></td></tr></table></figure>
<p>报错：大概意思是，py命令可识别python 2，但是不识别 python 3</p>
<p>在执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 script.py</span><br></pre></td></tr></table></figure>
<p>报错：python3 不是内部或外部命令</p>
<p><br></p>
<p><br></p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="表象"><a href="#表象" class="headerlink" title="表象"></a>表象</h2><p>解决的方案有很多]</p>
<ol>
<li><p>使用python3的时候，对于调用的python可执行程序及脚本，使用绝对路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xxx\xxx\python.exe xxx\xxx\script.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>将python3路径的python.exe路径加入到 jenkins的环境变量中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Jenkins(根目录) -&gt; Manage Jenkins(管理) -&gt; Global Attribute(全局属性) -&gt; Environment variables(环境变量) -&gt; new(新增) -&gt; 添加 键值对</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><br></p>
<h2 id="根源"><a href="#根源" class="headerlink" title="根源"></a>根源</h2><p>如果单纯想解决问题，上面的方法是完全可以解决的。</p>
<p>但是有几个缺点：</p>
<ol>
<li>不通用，通常这些打包脚本都是普适于所有机器；在这台机器上要把所有脚本都修改一遍</li>
<li>无法使用py命令，跟第一条普适性类似</li>
</ol>
<p>因为，上面解决方法只能说是绕行，不能算是从根源解决。</p>
<p><br></p>
<p>实际上，通过jenkins部署时输出的日志，也可以分析出一些。</p>
<p>在构建时，最上面输出了一行 Running as SYSTEM，即使用系统环境变量来执行命令。</p>
<p>查看环境变量，发现python3的路径都放在上面 Administrator的用户变量中，并不是在下面的系统变量。</p>
<p>但是，在电脑执行命令行，默认也使用了Administrator用户执行，所以能找到python3。</p>
<p>所以，如果想使用python3，就可以将python3路径也加到系统变量中，</p>
<p>但是python可执行程序，无论2还是3，都是python.exe，需要自己处理一下（可以复制一份改名成 python2.exe 或 python3.exe）</p>
<p><br></p>
<p>接下来，是处理 py命令，py.exe 位于 C:\Windows ，它解析不同版本是通过注册表来查询的位置，所以，需要修改注册表内容来让py命令可以查找到各版本python。</p>
<p>查看注册表方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开始菜单右键 -&gt; 运行 -&gt; regedit</span><br></pre></td></tr></table></figure>
<p>系统变量 HKEY_LOCAL_MACHINE -&gt; SOFTWARE -&gt; PythonCore </p>
<p>个人变量 HKEY_CURRENT_USER -&gt; SOFTWARE -&gt; PythonCore</p>
<p>改完了还是重启一下</p>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua代码规范</title>
    <url>/2018/12/26/Lua%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>在公司整理了一份Lua语言的代码规范，分享一下。</p>
<a id="more"></a>
<p><br></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写代码如同写文章，每个人或多或少都有自己的风格。我们在进行产品开发的过程中，更多的是团队上的协作与交流而非单打独斗。所以，为了 <strong>提高开发效率，降低维护成本，促进团队合作</strong>，代码的审查，整理出这篇文章。</p>
<p>借助于《Python风格指南》中的警告词，在此处引用一下：代码的阅读频率比编写的要高得多，本风格指南旨在通过一致性提高代码的可读性。一致性在不断增加的度量中，与其他项目、项目内以及单个模块或功能内是重要的。但是最重要的是:知道什么时候不一致，并运用你最好的判断——有时风格指南并不适用。当应用规则会降低代码的可读性时，最好打破规则。</p>
<p>最后，一句话送给大家：</p>
<blockquote>
<p>Programming style is an art.</p>
</blockquote>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="1-版式"><a href="#1-版式" class="headerlink" title="1. 版式"></a>1. 版式</h1><h2 id="1-1-基础"><a href="#1-1-基础" class="headerlink" title="1.1 基础"></a>1.1 基础</h2><ul>
<li><p>所有文件均采用: <strong>UTF-8 无 BOM 格式</strong></p>
</li>
<li><p>程序块要采用 <strong>缩进风格</strong> 编写，缩进的空格数为 <strong>4个</strong> ，对齐使用 <strong>空格键</strong>，<strong>禁用TAB键</strong> </p>
<ul>
<li>避免使用不同编辑器阅读程序时，因TAB键设置的空格数不同而造成程序布局不整齐。</li>
</ul>
</li>
<li><p>函数内代码不超过 <strong>50行</strong> , 单行代码不超过 <strong>80列</strong></p>
<ul>
<li><p>长表达式要在 <strong>低优先级操作符</strong> 处拆分成新行，<strong>操作符放在新行之首</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- bad style</span></span><br><span class="line"><span class="keyword">local</span> monsterModel = &#123;id = monsterData.id, index = <span class="number">0</span>, entityData = monsterData, <span class="built_in">type</span> = monsterData.role_type, state = EnumMonsterStatus.Alive, level = <span class="number">0</span>, coordinate = &#123;toward = EnumEntityToward.None, x = <span class="number">0</span>, z = <span class="number">0</span>&#125;, dropModels = &#123; &#125;, hpMedicineDropRate = <span class="number">0</span>, epMedicineDropRate = <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- good style</span></span><br><span class="line"><span class="keyword">local</span> monsterModel = &#123;</span><br><span class="line">    id = monsterData.id,</span><br><span class="line">    index = <span class="number">0</span>,</span><br><span class="line">    entityData = monsterData,</span><br><span class="line">    <span class="built_in">type</span> = monsterData.role_type,</span><br><span class="line">    state = EnumMonsterStatus.Alive,</span><br><span class="line">    level = <span class="number">0</span>,</span><br><span class="line">    coordinate = &#123;toward = EnumEntityToward.None, x = <span class="number">0</span>, z = <span class="number">0</span>&#125;,</span><br><span class="line">    dropModels = &#123;&#125;,</span><br><span class="line">    hpMedicineDropRate = <span class="number">0</span>,</span><br><span class="line">    epMedicineDropRate = <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- bad style</span></span><br><span class="line"><span class="keyword">if</span> self.pEntity:isAttackStatus() <span class="keyword">or</span> self.pEntity:isWakeStatus() <span class="keyword">or</span> self.pEntity:isTobeHitStatus() <span class="keyword">or</span> self.pEntity:isMoveStatus() <span class="keyword">or</span> self.pEntity:isJostledStatus() <span class="keyword">then</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- good style</span></span><br><span class="line"><span class="keyword">if</span> self.pEntity:isAttackStatus() </span><br><span class="line">    <span class="keyword">or</span> self.pEntity:isWakeStatus() </span><br><span class="line">    <span class="keyword">or</span> self.pEntity:isTobeHitStatus() </span><br><span class="line">    <span class="keyword">or</span> self.pEntity:isMoveStatus() </span><br><span class="line">    <span class="keyword">or</span> self.pEntity:isJostledStatus() <span class="keyword">then</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>若函数或过程中的参数较长，则要进行适当的划分</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">self.pQualitity = CREATESPINE(</span><br><span class="line">    RES.QUALITYEFFECT_SPINE[_type].ID, </span><br><span class="line">    self.LayerQuality,</span><br><span class="line">    RES.QUALITYEFFECT_SPINE[_type].NAME, </span><br><span class="line">    <span class="literal">true</span>, <span class="literal">nil</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="1-2-代码"><a href="#1-2-代码" class="headerlink" title="1.2 代码"></a>1.2 代码</h2><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><ul>
<li>代码概念与逻辑之间，逻辑段落小节之间，用 <strong>单个空行</strong> 分割</li>
<li>函数之间用 <strong>单个空行</strong> 分割</li>
<li>在注释之前增加 <strong>单个或多个空行</strong></li>
</ul>
<p><br></p>
<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><ul>
<li><p>双目运算符，<strong>前后</strong> 都要有一个空格</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">（<span class="number">110</span> + <span class="number">50</span> * i, <span class="number">110</span> + <span class="number">50</span> / (i + <span class="number">1</span>), <span class="built_in">time</span> + i - <span class="number">12</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>逗号 <strong>前无空格，后跟空格</strong></p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cond</span><span class="params">(c, a, b)</span></span></span><br><span class="line">	<span class="keyword">if</span> c <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> b</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(<span class="built_in">table</span>) <span class="keyword">do</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>做为 函数参数部分 或 函数调用 的小括号 <strong>前后无空格 </strong> </p>
<ul>
<li><p>原因：</p>
<ul>
<li><p>lua解析语法时是采用空格等分割来解析的，某些情况下，不小心加空格会导致非预期的结果</p>
</li>
<li><p>容易忘记相关空格，导致风格不统一，因此不如都不加</p>
</li>
</ul>
</li>
<li><p>样例:</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">totable</span><span class="params">(val)</span></span></span><br><span class="line">    <span class="keyword">local</span> tab = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"table"</span> == <span class="built_in">type</span>(val) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    tab[<span class="number">1</span>] = val</span><br><span class="line">    <span class="keyword">return</span> tab</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> clientTable = totable(serverTable)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>大括号 <strong>前后无空格</strong>，后跟运算符看情况</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">package</span>.<span class="built_in">loaded</span>[<span class="built_in">path</span>] = <span class="literal">nil</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>每行代码结束时，<strong>禁止使用分号</strong></li>
<li>单字符使用 <strong>单引号</strong> , 字符串使用 <strong>双引号</strong></li>
<li>使用 <strong>小括号</strong> 来强行规定运算顺序</li>
</ul>
<p><br></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="本规范的代码目标是自说明代码。"><a href="#本规范的代码目标是自说明代码。" class="headerlink" title="本规范的代码目标是自说明代码。"></a>本规范的代码目标是自说明代码。</h4><p>相对于代码的维护，注释的维护往往是非常差的，所以切忌乱用注释，尽量只在下列地方添加注释。</p>
<ul>
<li>代码比较晦涩，用了不同于常人的方法（显然这种方法肯定要比常人方法更高效）</li>
<li>对外的接口部分，描述清楚作用及参数返回</li>
<li>不同于正常逻辑的部分，一般是策划强制要求，要予以说明</li>
<li>所有含有物理含义的变量、常量，如果其命名不是充分自说明的，在声明时必须加以注释，说明其物理含义</li>
<li>数据结构声明，不能充分自说明的，必须加以注释，说明</li>
</ul>
<h4 id="注释的规范"><a href="#注释的规范" class="headerlink" title="注释的规范"></a>注释的规范</h4><ul>
<li><p>单行注释，注意 <strong>空格</strong></p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 这是单行注释</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>多行注释，注意缩进。</p>
<p>最后 ]] 前加一个缩进，是为了让某些编辑器（Sublime、VSCode）折叠时简洁一些</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">	这是多行注释</span></span><br><span class="line"><span class="comment">	这是多行注释</span></span><br><span class="line"><span class="comment">	]]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>函数注释格式，位于函数上一行，采用多行注释，三个字段：描述、参数（可缺省）、返回（可缺省）</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[describe:</span></span><br><span class="line"><span class="comment">		这是函数描述</span></span><br><span class="line"><span class="comment">	param1:参数类型</span></span><br><span class="line"><span class="comment">		参数描述</span></span><br><span class="line"><span class="comment">	param2:参数类型</span></span><br><span class="line"><span class="comment">		参数描述</span></span><br><span class="line"><span class="comment">	[param3]:参数类型（[]代表可选参数）</span></span><br><span class="line"><span class="comment">		参数描述</span></span><br><span class="line"><span class="comment">	return:返回值类型，返回值类型</span></span><br><span class="line"><span class="comment">		返回值类型 - 描述</span></span><br><span class="line"><span class="comment">		返回值类型 - 描述</span></span><br><span class="line"><span class="comment">	]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span><span class="params">(param1, param2, param3)</span></span></span><br><span class="line">	...</span><br><span class="line">    <span class="keyword">return</span> return1, return2</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>文件注释</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">	author: author1</span></span><br><span class="line"><span class="comment">	partner: partner1, partner2</span></span><br><span class="line"><span class="comment">	XMind: XMind名称</span></span><br><span class="line"><span class="comment">	describe: 这是一个测试的类，主要负责的功能是啦啦啦啦啦啦啦啦啦啦啦啦</span></span><br><span class="line"><span class="comment">	]]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2. 命名规范"></a>2. 命名规范</h1><h2 id="2-1-谨记"><a href="#2-1-谨记" class="headerlink" title="2.1 谨记"></a>2.1 谨记</h2><ul>
<li>最好的代码应该是 <strong>自说明代码</strong>，这种代码不需要多余的注释，本身便具备了作者意图的信息。</li>
<li>采用英文单词或单词组合，单词首先要准确，其次要简单。 <strong>注意单词拼写，切忌使用拼音！</strong></li>
<li>不要为了避免命名过长而随意截取单词，丢失可读性</li>
<li>所有命名不要与Cocos2d-x引擎或其他第三方工具已有的命名风格冲突</li>
<li>作用域越大的名称应该越详细越能表述自己<ul>
<li>i 做为小局部变量相对来说很妥当，但是做为全局变量会很糟糕。</li>
</ul>
</li>
<li>尽量不要用 _ 开头的名称，这些一般是lua内部所使用</li>
<li>除非必要，不要用数字或者奇怪的字符来命名</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="2-2-类的命名规范"><a href="#2-2-类的命名规范" class="headerlink" title="2.2 类的命名规范"></a>2.2 类的命名规范</h2><ul>
<li><p>所有 <strong>类的定义</strong> 均采用 <strong>大驼峰命名法（Pascal命名法）</strong></p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Example = class(<span class="string">"Example"</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>所有 <strong>类的函数</strong> 均采用 <strong>小驼峰命名法</strong></p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Example:exampleFunction()</span><br><span class="line">	...</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>所有 <strong>类的成员</strong> 均采用 self.（类型）（名称），类型均为小写，名称开头大写（整体是 <strong>小驼峰命名法</strong>）</p>
<ul>
<li>类型对照表</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>缩写</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>int</td>
<td>i</td>
<td>整数</td>
</tr>
<tr>
<td>float</td>
<td>f</td>
<td>浮点数（不分float or double）</td>
</tr>
<tr>
<td>boolean</td>
<td>b</td>
<td>布尔</td>
</tr>
<tr>
<td>string</td>
<td>s</td>
<td>字符串</td>
</tr>
<tr>
<td>enum</td>
<td>e</td>
<td>枚举</td>
</tr>
<tr>
<td>ptr</td>
<td>p</td>
<td>userdata</td>
</tr>
<tr>
<td>function</td>
<td>func</td>
<td>函数</td>
</tr>
<tr>
<td>table</td>
<td>t</td>
<td>table，<strong>后缀为Array代表数组，后缀为Map代表字典</strong></td>
</tr>
</tbody>
</table>
<ul>
<li><p>如果是传入的回调函数，则采用 self.pXXXHandler 来命名</p>
</li>
<li><p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.iExample</span><br><span class="line">self.bExampleExample</span><br><span class="line">self.sExampleExampleExample</span><br><span class="line">self.tExampleArray</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>一般由 <strong>名词</strong> 或者 <strong>多名词 </strong> 组成，不要随意简写</p>
</li>
<li><p>根据类的特性和使用场景，加上相关的后缀或者前缀</p>
</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="2-3-变量命名"><a href="#2-3-变量命名" class="headerlink" title="2.3 变量命名"></a>2.3 变量命名</h2><ul>
<li><p>采用 <strong>小驼峰命名法</strong> </p>
</li>
<li><p>使用 <strong>名词</strong> 或者是 <strong>形容词+名词</strong> 命名</p>
</li>
<li><p>尽量避免出现 <strong>仅靠部分字母大小写区分</strong> 的相似的变量</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> posx, posX</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="2-4-常量命名"><a href="#2-4-常量命名" class="headerlink" title="2.4 常量命名"></a>2.4 常量命名</h2><ul>
<li><p><strong>配置常量</strong> ，<strong>均用大写，单词间以下划线相连</strong></p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--幻影设置</span></span><br><span class="line">GHOST_STATE = &#123;     </span><br><span class="line">    INTERVAL_TIME = <span class="number">80</span>,     <span class="comment">--出现间隔时间（毫秒）</span></span><br><span class="line">    FADE_TIME = <span class="number">500</span>,        <span class="comment">--fade时间（毫秒）</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>类内配置常量，local引用，<strong>均用大写，单词间以下划线相连</strong></p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> LOCAL_CONST = &#123;</span><br><span class="line">    SPINE_ID = <span class="number">1</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> GHOST = ConstUI.GHOST_STATE</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>所有枚举，均采用 <strong>大驼峰命名法</strong>，并必须加Enum前缀，枚举值采用 <strong>大驼峰命名法</strong></p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">EnumExample = &#123;</span><br><span class="line">    Example = <span class="number">1</span>,</span><br><span class="line">    ExampleExample = <span class="number">2</span>,</span><br><span class="line">    ExampleExampleExample = <span class="number">3</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局枚举值，应该在 global_enum中分模块定义；禁止在Ui或Cache中定义全局枚举值。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>全局函数，需要根据功能，分table调用，比如 table.insert, table.remove 这种。除了必要main.lua内函数，禁止没有范围，直接命名使用全局函数</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="3-使用规则及技巧"><a href="#3-使用规则及技巧" class="headerlink" title="3. 使用规则及技巧"></a>3. 使用规则及技巧</h1><h2 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h2><ul>
<li><p>尽量使用local变量而非global变量</p>
</li>
<li><p>同一行变量赋值不要超过 <strong>3</strong> 个，且无值时用nil显式赋值</p>
</li>
<li><p>常量避免使用 magic number</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- bad style</span></span><br><span class="line"><span class="comment">-- 9.8就是 magic number</span></span><br><span class="line"><span class="keyword">local</span> speed = <span class="built_in">time</span> * <span class="number">9.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- good style</span></span><br><span class="line"><span class="built_in">_G</span>.ACCELERATION = <span class="number">9.8</span></span><br><span class="line"><span class="keyword">local</span> speed = <span class="built_in">time</span> * ACCELERATION</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>禁止使用三元操作 <strong>and or </strong></p>
<ul>
<li>and 后值若为boolean类型，会不符预期，给后期查错造成困扰。</li>
</ul>
</li>
<li><p>默认参数</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcMethod</span><span class="params">(param)</span></span></span><br><span class="line">	param = param <span class="keyword">or</span> defalutValue</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 默认值为true</span></span><br><span class="line">param = param ~= <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 默认值为false</span></span><br><span class="line">param = param <span class="keyword">or</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>_ 做为想忽略的变量</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _, v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab) <span class="keyword">do</span></span><br><span class="line">   ... </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>针对上面情况，即使for循环，尽量不要用 i, k, v，而采用更为详细一些的变量名称</p>
</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="3-2-table"><a href="#3-2-table" class="headerlink" title="3.2 table"></a>3.2 table</h2><ul>
<li><p>表的拷贝  <strong>此方法在表内条目大于2000时会失效</strong></p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">toTable = &#123;<span class="built_in">unpack</span>(fromTable)&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>判断空表</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">#t == <span class="number">0</span> 不能判断表为空</span><br><span class="line"></span><br><span class="line">应该使用: <span class="built_in">next</span>(t) == <span class="literal">nil</span></span><br><span class="line">PS：<span class="built_in">next</span>(t) 返回的是第一个找到的键的值，对于存储布尔类型值的表，可能返回<span class="literal">false</span>，因此必须与<span class="literal">nil</span>比较。</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>更快的插入值</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 慢，不推荐</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(t, value)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更快！推荐</span></span><br><span class="line">t[#t + <span class="number">1</span>] = value</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="3-3-函数"><a href="#3-3-函数" class="headerlink" title="3.3 函数"></a>3.3 函数</h2><ul>
<li><p>明确函数的功能，精确（而不是近似）地实现函数设计</p>
</li>
<li><p>接口函数参数的合法性检查，明确由<strong>调用者</strong>负责，而非函数设计者</p>
</li>
<li><p>防止将函数的参数作为工作变量，有可能误改参数内容</p>
</li>
<li><p>为简单的功能编写函数</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">value = (a &gt; b) <span class="keyword">and</span> a <span class="keyword">or</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span><span class="params">(a, b)</span></span></span><br><span class="line">	<span class="keyword">return</span> (a &gt; b) <span class="keyword">and</span> a <span class="keyword">or</span> b    </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不要设计多用途而面面俱到的函数</p>
<ul>
<li>多功能集于一身的函数，很可能使函数的理解、测试、维护变得困难</li>
</ul>
</li>
<li><p>功能不明确较小的函数，特别使仅有一个上级函数调用它时，应考虑把它合并到上级函数中，而不必单独存在。</p>
</li>
<li><p>设计高扇入、合理扇出（小于7，一般3-5）的函数</p>
<ul>
<li>说明：扇入指有多少上级函数调用它；扇出是指一个函数直接调用其他函数的数目。</li>
<li>扇入过大，表明使用此函数的上级函数越多，这样的函数使用效率高，但不能违背函数间的独立性而单纯地追求高扇入。</li>
<li>扇出过大，表明函数过分复杂，需要控制和协调过多的下级函数；而扇出过小，表明函数的调用层次可能过多，不利于程序的阅读和函数结构的分析，并且程序运行时会对系统资源（如堆栈空间等）造成压力。</li>
<li>良好的软件结构通常是顶层函数的扇出较高，中层函数的扇出较少，而底层函数则扇入到公共模块中。</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="3-4-其他"><a href="#3-4-其他" class="headerlink" title="3.4 其他"></a>3.4 其他</h2><h3 id="对于大数据量的特殊优化"><a href="#对于大数据量的特殊优化" class="headerlink" title="对于大数据量的特殊优化"></a>对于大数据量的特殊优化</h3><ul>
<li><p><strong>多次</strong> 重复使用的全局接口，可以用局部变量保存下再使用</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- example1</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">10000000</span> <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> x = <span class="built_in">math</span>.<span class="built_in">sin</span>(i)    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- example2</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">sin</span> = <span class="built_in">math</span>.<span class="built_in">sin</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">10000000</span> <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> x = <span class="built_in">sin</span>(i) </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">example2 效率会高于 example1</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>创建 <strong>非常多</strong> 的小size表时，应预先填充好表的大小</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- example1</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">10000000</span> <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> tab = &#123;&#125;</span><br><span class="line">    tab[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    tab[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">    tab[<span class="number">3</span>] = <span class="number">3</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- example2</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">10000000</span> <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">local</span> tab = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</span><br><span class="line">    tab[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    tab[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">    tab[<span class="number">3</span>] = <span class="number">3</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">example2 效率高于 example1</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>很多个</strong> 字符串连接，使用 table.concat 而非 ..</p>
<ul>
<li><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- example1</span></span><br><span class="line"><span class="keyword">local</span> str1 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">100000</span> <span class="keyword">do</span></span><br><span class="line">	str1 = str1 .. <span class="string">'a'</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- example2</span></span><br><span class="line"><span class="keyword">local</span> str2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">local</span> tab = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">100000</span> <span class="keyword">do</span></span><br><span class="line">    tab[#tab + <span class="number">1</span>] = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">str2 = <span class="built_in">table</span>.<span class="built_in">concat</span>(tab, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">example2 效率高于 example1，效果十分显著</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>有时候，用 do .. end 可以明确限定局部变量的作用域  <em>（顺带一提，未理解禁用）</em></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> v</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span> <span class="comment">-- x作用域结束，被系统清理</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<p>想更进一步？</p>
<p>推荐阅读:</p>
<ul>
<li><p><a href="http://lua-users.org/wiki/LuaStyleGuide" target="_blank" rel="noopener">Lua Style Guide</a></p>
</li>
<li><p><strong>《代码大全》</strong></p>
</li>
<li><p>《程序员修炼之道》</p>
</li>
<li><p>《高效程序员的45个习惯》</p>
</li>
<li><p>《重构》</p>
</li>
</ul>
<p>​                </p>
]]></content>
      <tags>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>TreeHouse装修指南之工具</title>
    <url>/2018/07/17/TreeHouse%E8%A3%85%E4%BF%AE%E6%8C%87%E5%8D%97%E4%B9%8B%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。<br>（通俗点说，就是hexo的相关搭建及应用的各效果的实现）</p>
<p>工具相关</p>
<a id="more"></a>
<p><br></p>
<h1 id="添加阅读统计功能"><a href="#添加阅读统计功能" class="headerlink" title="添加阅读统计功能"></a>添加阅读统计功能</h1><p>用LeanCloud加入阅读统计功能</p>
<ol>
<li>注册账号<br><a href="https://leancloud.cn/" title="点击前往注册" target="_blank" rel="noopener">LeanCloud官网</a></li>
<li>创建应用<br>点击应用，创建应用，输入应用名称（可修改），不勾选schema</li>
<li>创建统计类<br>点击创建Class，保存博客的相关访问数据，Class名称为Counter（必须），设置不限制数据条目的ACL权限</li>
<li>获取App ID与App Key<br>点击最左侧的设置，下属的应用Key，可以看到App ID及App Key</li>
<li>配置App ID与App Key<br>打开Next主题的_config.yml文件，找到leancloud_visitors，配置相关字段，不要忘了enable要为true哟。</li>
<li>对Web安全的设置<br>点击最左侧的设置，下属的安全中心，在Web安全域名处，设置可以更新数据的自己博客域名。</li>
</ol>
<p>然后就可以在应用中的Counter类里看到相关阅读数据了，并且文章下面也有访问数量记录了。</p>
<p><br></p>
<h1 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h1><p>我的next版本是5.1.4, 已经集成了这个功能，只需要打开开关即可（在next配置文件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line">canvas_nest: false  改成true</span><br></pre></td></tr></table></figure>
<p>如果要修改相关配置（线条颜色，粗细，数量等等），可以在下面文件修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\themes\next\source\lib\canvas-nest\canvas-nest.min.js</span><br></pre></td></tr></table></figure>
<p>背景的几何线条是采用的nest效果<br>一个基于html5 canvas绘制的网页背景效果<br>来自github的开源项目 <a href="https://github.com/hustcc/canvas-nest.js" target="_blank" rel="noopener">https://github.com/hustcc/canvas-nest.js</a></p>
<p><br></p>
<h1 id="设置网站的图标"><a href="#设置网站的图标" class="headerlink" title="设置网站的图标"></a>设置网站的图标</h1><p>在next主题的图片文件夹下，将相应图片替换即可。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\themes\next\source\images</span><br></pre></td></tr></table></figure></p>
<p>相关图片配置如下：（注意格式和大小）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[下面代码 位于next的配置文件内]</span><br><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h1 id="实现统计功能"><a href="#实现统计功能" class="headerlink" title="实现统计功能"></a>实现统计功能</h1><p>增加字数统计及阅读时长</p>
<p>修改next主题配置文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\themes\next\_config.yml</span><br></pre></td></tr></table></figure></p>
<p>修改下面的配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true     /*  字数统计      */</span><br><span class="line">  min2read: true    /*  阅读时长统计    */</span><br><span class="line">  totalcount: false   /*  总字数统计   */</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure></p>
<p>如果没有，就自己安装，在根目录下输入：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></p>
<p>然后再将上面配置添加到主题文件内。</p>
<p>到这里，显示的字数统计和阅读时间没有单位，需要修改文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\themes\next\layout\_macro\post.swing</span><br></pre></td></tr></table></figure></p>
<p>修改：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span title=&quot;&#123;&#123; __(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt; &#123;&#123; wordcount(post.content) &#125;&#125; 字 &lt;/span&gt;</span><br><span class="line">&lt;span title=&quot;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125;&quot;&gt; &#123;&#123; min2read(post.content) &#125;&#125; 分钟 &lt;/span&gt;</span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h1 id="添加分享功能"><a href="#添加分享功能" class="headerlink" title="添加分享功能"></a>添加分享功能</h1><p>NEXT主题配置中自带分享插件，这里使用 NeedMoreShader2，</p>
<p>将theme的配置文件（themes\next\_config.yml）中这部分注释打开，并将相关开关设置为 开启</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># NeedMoreShare2</span></span><br><span class="line"><span class="comment"># This plugin is a pure javascript sharing lib which is useful in China.</span></span><br><span class="line"><span class="comment"># See: https://github.com/revir/need-more-share2</span></span><br><span class="line"><span class="comment"># Also see: https://github.com/DzmVasileusky/needShareButton</span></span><br><span class="line"><span class="comment"># iconStyle: default | box</span></span><br><span class="line"><span class="comment"># boxForm: horizontal | vertical</span></span><br><span class="line"><span class="comment"># position: top / middle / bottom + Left / Center / Right</span></span><br><span class="line"><span class="comment"># networks: Weibo,Wechat,Douban,QQZone,Twitter,Linkedin,Mailto,Reddit,</span></span><br><span class="line"><span class="comment">#          Delicious,StumbleUpon,Pinterest,Facebook,GooglePlus,Slashdot,</span></span><br><span class="line"><span class="comment">#          Technorati,Posterous,Tumblr,GoogleBookmarks,Newsvine,</span></span><br><span class="line"><span class="comment">#          Evernote,Friendfeed,Vkontakte,Odnoklassniki,Mailru</span></span><br><span class="line"><span class="attr">needmoreshare2:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  postbottom:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    options:</span></span><br><span class="line"><span class="attr">      iconStyle:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">      boxForm:</span> <span class="string">horizontal</span></span><br><span class="line"><span class="attr">      position:</span> <span class="string">bottomCenter</span></span><br><span class="line"><span class="attr">      networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br><span class="line"><span class="attr">  float:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    options:</span></span><br><span class="line"><span class="attr">      iconStyle:</span> <span class="string">box</span></span><br><span class="line"><span class="attr">      boxForm:</span> <span class="string">horizontal</span></span><br><span class="line"><span class="attr">      position:</span> <span class="string">middleRight</span></span><br><span class="line"><span class="attr">      networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br></pre></td></tr></table></figure>
<p>更详细的配置可参考注释中的两个github仓库。</p>
<p>微信分享没有反应：</p>
<ul>
<li><p>这是通过将当前网页生成一个二维码实现的，老版的api停止服务了，换新的就行了。详情可见issue：<a href="https://github.com/revir/need-more-share2/issues/4" target="_blank" rel="noopener">https://github.com/revir/need-more-share2/issues/4</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">路径：\themes\next\source\lib\needsharebutton\needsharebutton.js</span><br><span class="line">将：</span><br><span class="line"><span class="keyword">var</span> imgSrc = <span class="string">"https://api.qinco.me/api/qr?size=400&amp;content="</span> + <span class="built_in">encodeURIComponent</span>(myoptions.url);</span><br><span class="line">修改为：</span><br><span class="line"><span class="keyword">var</span> imgSrc = <span class="string">"http://tool.oschina.net/action/qrcode/generate?output=image/png&amp;error=L&amp;type=0&amp;margin=2&amp;size=4&amp;data="</span> + <span class="built_in">encodeURIComponent</span>(myoptions.url);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<h1 id="添加RSS功能"><a href="#添加RSS功能" class="headerlink" title="添加RSS功能"></a>添加RSS功能</h1><ol>
<li><p>安装feed插件</p>
<ul>
<li><p>在hexo根目录，启动git，安装feed插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-feed --save</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>修改hexo配置</p>
<ul>
<li><p>根目录下的 _config.yml</p>
</li>
<li><p>添加feed插件配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RSS</span></span><br><span class="line"><span class="attr">plugin:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment"># Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  hub:</span> </span><br><span class="line"><span class="attr">  content:</span> <span class="string">'true'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>修改主题配置</p>
<ul>
<li><p>主题目录下配置文件 themes\next\_config.yml</p>
</li>
<li><p>设置rss文件路径（搜索 rss）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p><br></p>
<h1 id="本地搜索功能"><a href="#本地搜索功能" class="headerlink" title="本地搜索功能"></a>本地搜索功能</h1><ol>
<li><p>安装searchdb插件</p>
<ul>
<li><p>在hexo根目录，启动git，安装插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>开启主题配置</p>
<ul>
<li><p>主题目录下配置文件 themes\next\_config.yml</p>
</li>
<li><p>开启本地搜索：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="comment"># 是否开启</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># auto/manual 两个选项，代表搜索的执行是自动的实时执行还是通过回车或按钮来进行</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># 每篇文章显示前n个结果，-1表示显示全部</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p><br></p>
<h1 id="博客底部显示修改"><a href="#博客底部显示修改" class="headerlink" title="博客底部显示修改"></a>博客底部显示修改</h1><h2 id="删除强力驱动"><a href="#删除强力驱动" class="headerlink" title="删除强力驱动"></a>删除强力驱动</h2><p>路径：/themes/next/_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line"><span class="attr">  powered:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line"><span class="attr">    version:</span> <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line"><span class="string">将相应配置都改为</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="显示具体日期"><a href="#显示具体日期" class="headerlink" title="显示具体日期"></a>显示具体日期</h2><p>路径：/themes/next/layout/_partials/footer.swig</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目标内容：</span><br><span class="line">&lt;div class=&quot;copyright&quot;&gt;&#123;#</span><br><span class="line">#&#125;&#123;% set current = date(Date.now(), &quot;YYYY&quot;) %&#125;&#123;#</span><br><span class="line">#&#125;&amp;copy; &#123;% if theme.footer.since and theme.footer.since != current %&#125;&#123;&#123; theme.footer.since &#125;&#125; &amp;mdash; &#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;span itemprop=&quot;copyrightYear&quot;&gt;&#123;&#123; current &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;with-love&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;fa fa-&#123;&#123; theme.footer.icon &#125;&#125;&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;author&quot; itemprop=&quot;copyrightHolder&quot;&gt;&#123;&#123; theme.footer.copyright || config.author &#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">将其中 YYYY 改为 YYYY-MM-DD</span><br></pre></td></tr></table></figure>
<h2 id="修改底部图标"><a href="#修改底部图标" class="headerlink" title="修改底部图标"></a>修改底部图标</h2><p>路径：/themes/next/layout/_partials/footer.swig</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目标内容：</span><br><span class="line">  &lt;span class=&quot;with-love&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;fa fa-&#123;&#123; theme.footer.icon &#125;&#125;&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  </span><br><span class="line">修改为：</span><br><span class="line">&lt;span class=&quot;with-love&quot; id=&quot;animate&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/span&gt;</span><br></pre></td></tr></table></figure>
<p>后面的 fa-heart 图标可以换成其他的图标，图标库地址：<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">http://fontawesome.io/icons/</a> </p>
<h2 id="显示访问量相关"><a href="#显示访问量相关" class="headerlink" title="显示访问量相关"></a>显示访问量相关</h2><p>使用不蒜子提供的统计功能：（<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">http://ibruce.info/2015/04/04/busuanzi/</a>）</p>
<ol>
<li><p>修改卜算子配置（由于原有域名过期，所以需要更换）</p>
<ul>
<li><p>路径：\themes\next\layout_third-party\analytics\busuanzi-counter.swig</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目标代码：</span><br><span class="line">&#123;% if theme.busuanzi_count.enable %&#125;</span><br><span class="line">&lt;div class=&quot;busuanzi-count&quot;&gt;</span><br><span class="line">  &lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">修改为：</span><br><span class="line">&#123;% if theme.busuanzi_count.enable %&#125;</span><br><span class="line">&lt;div class=&quot;busuanzi-count&quot;&gt;</span><br><span class="line">  &lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>开启主题配置</p>
<ul>
<li><p>路径：/themes/next/_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line"><span class="attr">  site_uv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-user"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  site_uv_footer:</span></span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line"><span class="attr">  site_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  site_pv_footer:</span></span><br><span class="line">  <span class="comment"># custom pv span for one page only</span></span><br><span class="line"><span class="attr">  page_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-file-o"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  page_pv_footer:</span></span><br><span class="line">  </span><br><span class="line"><span class="string">设置为：</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_uv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-user"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  site_uv_footer:</span> <span class="string">人</span></span><br><span class="line"><span class="attr">  site_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  site_pv_footer:</span> <span class="string">次</span></span><br><span class="line"><span class="attr">  page_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-file-o"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">  page_pv_footer:</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h2><p>路径：/themes/next/layout/_partials/footer.swig</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加代码：</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加网站运行时间 --&gt;</span><br><span class="line">&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line">    function createtime() &#123;</span><br><span class="line">        var grt= new Date(&quot;04/13/2020 00:00:00&quot;);//这里设置网站开始时间， 月/日/年</span><br><span class="line">        now.setTime(now.getTime()+250);</span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">        if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;</span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;</span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;网站已运行 &quot;+dnum+&quot; 天 &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><ol>
<li><p>安装valine插件</p>
<ul>
<li><p>在hexo根目录，启动git，安装插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install valine --save</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>开启主题配置</p>
<ul>
<li><p>主题目录下配置文件 themes\next\_config.yml</p>
</li>
<li><p>开启本地评论系统：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  appid:</span>  <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span>  <span class="comment"># your leancloud application appkey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>其他</p>
<ul>
<li>如果想评论时开启验证码，则verify项改为true，同时Leancloud官网-&gt;应用-&gt;设置-&gt;安全中心中的验证码项也要打开。</li>
</ul>
</li>
</ol>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>想就做</tag>
        <tag>hexo搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua表存储优化</title>
    <url>/2019/05/12/Lua%E8%A1%A8%E5%AD%98%E5%82%A8%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>用Python脚本实现对 Lua表的压缩</p>
<a id="more"></a>
<p><br></p>
<hr>
<h1 id="一览"><a href="#一览" class="headerlink" title="一览"></a>一览</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在研发过程中，通常会定义一些Excel表格，规定行列值让策划填写，然后，转成lua的table文件，直接使用。</p>
<p>但是，随着研发进行，项目迭代，表格将越来越大。</p>
<p>如果表格中存在大量重复数据，或者表格中很多列数值重复，则可以通过数据压缩给表减减肥。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>利用python实现lua表的数据压缩</p>
<ul>
<li>excel表内存在大量 <strong>同列不同行</strong> 内容一致</li>
<li>excel表内存在大量 <strong>复合型</strong> 单元格内容一致</li>
</ul>
<p>具体代码，均在github中： <a href="https://github.com/lt-tree/CompressLuaTable" target="_blank" rel="noopener">ltree98’s github  -&gt;  CompressLua</a></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="参照方案"><a href="#参照方案" class="headerlink" title="参照方案"></a>参照方案</h1><p>这是我在网上看到的文章： </p>
<p>​    <a href="https://blog.uwa4d.com/archives/1490.html" target="_blank" rel="noopener">Lua配置表存储优化方案</a></p>
<p>总结的来说，就是</p>
<ul>
<li>利用lua的元表机制。如果在table中取的值不存在，会去它的元表中查找（如果元表存在）。</li>
<li>将重复的table，提取出来，将所有使用的地方引用过去。</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h1><p>在参照方案的文章中，也提供了解决方法，但是在使用过程中遇见一些问题。</p>
<h2 id="对同一文件压缩后文件MD5可能不一致"><a href="#对同一文件压缩后文件MD5可能不一致" class="headerlink" title="对同一文件压缩后文件MD5可能不一致"></a>对同一文件压缩后文件MD5可能不一致</h2><p>对同一个lua文件，进行减肥，在减肥后，虽然最终体重一样，但是可能这次瘦了肚子，下次瘦了腿。</p>
<p>主要原因就是参照方案使用lua处理，对同一个table遍历顺序是不稳定的，即table中存在 A B C 元素，可能这次遍历顺序是 A-B-C，下次遍历顺序可能就是 B-A-C；稳定性得不到保证。</p>
<p>lua的官网对于table的遍历描述一直是：</p>
<blockquote>
<p>The order in which the indices are enumerated is not specified, <em>even for numeric indices</em>. (To traverse a table in numeric order, use a numerical <strong>for</strong> or the <a href="http://www.lua.org/manual/5.1/manual.html#pdf-ipairs" target="_blank" rel="noopener"><code>ipairs</code></a> function.)</p>
</blockquote>
<p>就是 索引在遍历过程中的次序是不固定的，即使是数字索引也不固定。</p>
<p>因为，项目中使用热更机制是比较两个文件的MD5，决定是否更新该文件。</p>
<p>所以，这个问题就显得很严重，每次热更要更新所有的表。当然，这个问题也可以通过做备份等方式来弥补，但是毕竟治标不治本。</p>
<p><em>但是用不同的lua版本发现：</em></p>
<p><em>使用 lua5.1 版本 生成的压缩文件是一致的</em></p>
<p><em>使用 lua5.3版本 生成的压缩文件是不一致的</em></p>
<p><br></p>
<p><br></p>
<h2 id="复杂度高"><a href="#复杂度高" class="headerlink" title="复杂度高"></a>复杂度高</h2><p>虽然是现成的，但是也没法直接拿来用；</p>
<p>还是要根据项目现状进行修改。</p>
<p>在整合过程中，发现逻辑比较复杂，而且工具集与我们现有的python不符。（如果用其他工具集，又要去配置相应环境等，比较麻烦）。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="修改方案"><a href="#修改方案" class="headerlink" title="修改方案"></a>修改方案</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul>
<li>解决 Excel表 内存在大量 同列不同行 内容一致</li>
<li>解决 Excel表内存在大量 复合型单元格 内容一致</li>
</ul>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul>
<li>对于重复table，只存一份，其他引用过去</li>
<li>设计一个基础元表，存储Excel每列 最频繁的值；其他表缺省 最频繁的值</li>
<li>设置 只读属性</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>Lua作用域内存放最大的local变量个数为 200个，超过的需要放入临时数组</li>
<li>输出到lua文件，key值不可存在特殊字符($、- 等)</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>Lua表的可读性变差，需要跳转获取最终值</li>
<li>使用元表实现，若后续处理（比如 加密，修改操作 等）也存在使用元表，增加处理的复杂度</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul>
<li><p>Excel表：Excel转换成Lua的表，一般结构为</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- tableName.lua</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> tableName = &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tableName</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认表：未来的元表，存储Excel中每列最频繁的元素</p>
</li>
<li><p>重复表：Excel表中各单元格重复的 复合型元素（array/table） </p>
</li>
</ul>
<p><br></p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li><p>遍历表，进行统计</p>
<ul>
<li><p>统计Excel表中各列元素出现次数</p>
</li>
<li><p>统计Excel表中 单元格复合型元素 出现次数</p>
</li>
</ul>
</li>
<li><p>构造 重复表</p>
<ul>
<li>筛选 单元格复合型元素 次数大于1的元素，构建重复表</li>
</ul>
</li>
<li><p>构造 默认表</p>
<ul>
<li>根据各列最频繁元素，构造默认表</li>
</ul>
</li>
<li><p>整理 Excel表</p>
<ul>
<li>根据默认表，将重复的字段忽略 </li>
</ul>
</li>
<li><p>输出 各表</p>
<ul>
<li>根据 重复表，替换并输出 重复表</li>
<li>根据 重复表，替换并输出 Excel表</li>
<li>根据 重复表，替换并输出 默认表</li>
</ul>
</li>
<li><p>设置 元表 及 只读属性</p>
</li>
</ol>
<p><br></p>
<h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><p><strong>最新代码请移步 <a href="https://github.com/lt-tree/CompressLuaTable" target="_blank" rel="noopener">lt-tree的github</a></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###################################################################</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">##  tools</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_dict_deep</span><span class="params">(dict_temp)</span>:</span></span><br><span class="line">	<span class="string">"""Count dictionary's deep</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">		Args:</span></span><br><span class="line"><span class="string">			dict_temp: dict</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">		Returns:</span></span><br><span class="line"><span class="string">			int : deep</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line"></span><br><span class="line">    deep = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> dict_temp.values():</span><br><span class="line">        <span class="keyword">if</span> isinstance(item, dict):</span><br><span class="line">            temp_deep = count_dict_deep(item)</span><br><span class="line">            <span class="keyword">if</span> temp_deep &gt; deep:</span><br><span class="line">                deep = temp_deep</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deep+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_weight</span><span class="params">(obj1)</span>:</span></span><br><span class="line">	<span class="string">"""Calculate obj's weight</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">		Args:</span></span><br><span class="line"><span class="string">			obj1: tuple[dict's string, dict's frequency]</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		Returns:</span></span><br><span class="line"><span class="string">			int : weight</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line"></span><br><span class="line">    dict1 = eval(obj1[<span class="number">0</span>])</span><br><span class="line">    times1 = obj1[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    deep1 = count_dict_deep(dict1)</span><br><span class="line">    ans = deep1 + <span class="number">1</span>/times1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_table_frequency</span><span class="params">(unit_dict, dict_frequency)</span>:</span></span><br><span class="line">    <span class="string">"""Count table frequency</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Count table frequency and record as &#123;table string: times&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            unit_dict: dict, need analyse data</span></span><br><span class="line"><span class="string">            dict_frequency: dict, the record's set</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    unit_str = str(unit_dict)</span><br><span class="line">    <span class="keyword">if</span> unit_str <span class="keyword">in</span> dict_frequency:</span><br><span class="line">        dict_frequency[unit_str] = dict_frequency[unit_str] + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dict_frequency[unit_str] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># traversing sub dict</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> unit_dict.values():</span><br><span class="line">        <span class="keyword">if</span> isinstance(item, dict):</span><br><span class="line">            count_table_frequency(item, dict_frequency)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_table_value_frequency</span><span class="params">(key, value, item_frequency)</span>:</span></span><br><span class="line">    <span class="string">"""Count table value frequency</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Count every excel column element appear times.</span></span><br><span class="line"><span class="string">        Record as &#123;</span></span><br><span class="line"><span class="string">                    key1 : &#123;element1 : times, element2: times, ...&#125;</span></span><br><span class="line"><span class="string">                    key2 : &#123;element1 : times, element2: times, ...&#125;</span></span><br><span class="line"><span class="string">                    ...</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            key: string</span></span><br><span class="line"><span class="string">            value: string or dict</span></span><br><span class="line"><span class="string">            item_frequency: dict, the record's set</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isinstance(value, dict):</span><br><span class="line">        value = str(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> item_frequency.keys():</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">in</span> item_frequency[key].keys():</span><br><span class="line">            item_frequency[key][value] = item_frequency[key][value] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            item_frequency[key][value] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        item_frequency[key] = &#123;&#125;</span><br><span class="line">        item_frequency[key][value] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traverse_table</span><span class="params">(excel_dict, dict_frequency, item_frequency)</span>:</span></span><br><span class="line">    <span class="string">"""Traverse table.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Analyse lua table.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            excel_dict: dict</span></span><br><span class="line"><span class="string">            dict_frequency: dict</span></span><br><span class="line"><span class="string">            item_frequency: dict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> sorted(excel_dict):</span><br><span class="line">        <span class="keyword">if</span> isinstance(excel_dict[key], dict):</span><br><span class="line">            count_table_frequency(excel_dict[key], dict_frequency)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> excel_dict[key].items():</span><br><span class="line">                count_table_value_frequency(k, v, item_frequency)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_repeat_dict</span><span class="params">(item_dict, repeat_dict)</span>:</span></span><br><span class="line">    <span class="string">"""Check repeat dict</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Check repeat dict and return the repeat index, if not exist in repeat dict return -1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            item_dict: dict</span></span><br><span class="line"><span class="string">            repeat_dict: dict</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            int</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    dict_str = str(item_dict)</span><br><span class="line">    <span class="keyword">if</span> dict_str <span class="keyword">in</span> repeat_dict.keys():</span><br><span class="line">        <span class="keyword">return</span> repeat_dict[dict_str]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_repeat_dict</span><span class="params">(item_dict, repeat_dict, cur_index = <span class="number">-1</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Replace repeat dict</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Check if element exist in repeat dict and replace by designation string.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            item_dict: dict</span></span><br><span class="line"><span class="string">            repeat_dict: dict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    cur_index = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> item_dict.items():</span><br><span class="line">        <span class="keyword">if</span> isinstance(value, dict):</span><br><span class="line">            index = check_repeat_dict(value, repeat_dict)</span><br><span class="line">            <span class="keyword">if</span> index != <span class="number">-1</span> <span class="keyword">and</span> (index &lt; cur_index <span class="keyword">or</span> cur_index == <span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> index &gt; <span class="number">190</span>:</span><br><span class="line">                    item_dict[key] = REPEAT_KEY_PREFIX + <span class="string">'['</span> + str(index - LOCAL_TABLE_MAX) + <span class="string">']'</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    item_dict[key] = REPEAT_KEY_PREFIX + str(index)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                replace_repeat_dict(value, repeat_dict, cur_index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">output_file</span><span class="params">(table_name, file_path, repeat_dict, final_dict, default_dict)</span>:</span></span><br><span class="line">    <span class="string">"""Output file</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            table_name: string</span></span><br><span class="line"><span class="string">            file_path: path</span></span><br><span class="line"><span class="string">            repeat_dict: dict</span></span><br><span class="line"><span class="string">            final_dict: dict</span></span><br><span class="line"><span class="string">            default_dict: dict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    file_handler = codecs.open(file_path, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># output repeat dict</span></span><br><span class="line">    <span class="keyword">for</span> dictStr, index <span class="keyword">in</span> sorted(repeat_dict.items(), key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>]):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># replace repeat item by repeat_dict </span></span><br><span class="line">        repeat_dict_item = eval(dictStr)</span><br><span class="line">        replace_repeat_dict(repeat_dict_item, repeat_dict, index)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> index &lt;= LOCAL_TABLE_MAX:</span><br><span class="line">            <span class="comment"># file_handler.write("local %s = &#123;\n" % (REPEAT_KEY_PREFIX + str(index)))</span></span><br><span class="line">            file_handler.write(<span class="string">"local %s = &#123;\n"</span> % (REPEAT_KEY_PREFIX + str(index)))</span><br><span class="line">            convert.convert_dict_lua_file(file_handler, repeat_dict_item, <span class="number">1</span>)</span><br><span class="line">            file_handler.write(<span class="string">"&#125;\n"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> index == (LOCAL_TABLE_MAX + <span class="number">1</span>):</span><br><span class="line">                file_handler.write(<span class="string">"\nlocal __rt = createtable and createtable(%d, 0) or &#123;&#125;\n"</span> % (len(repeat_dict)-LOCAL_TABLE_MAX))</span><br><span class="line">            </span><br><span class="line">            file_handler.write(<span class="string">"__rt[%d] = &#123;\n"</span> % (index - LOCAL_TABLE_MAX))</span><br><span class="line">            convert.convert_dict_lua_file(file_handler, repeat_dict_item, <span class="number">1</span>)</span><br><span class="line">            file_handler.write(<span class="string">"&#125;\n"</span>)       </span><br><span class="line"></span><br><span class="line">    <span class="comment"># output final dict</span></span><br><span class="line">    replace_repeat_dict(final_dict, repeat_dict)</span><br><span class="line">    file_handler.write(<span class="string">"\nlocal %s = &#123;\n"</span> % (table_name))</span><br><span class="line">    convert.convert_dict_lua_file(file_handler, final_dict, <span class="number">1</span>)</span><br><span class="line">    file_handler.write(<span class="string">"&#125;\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># output default dict</span></span><br><span class="line">    replace_repeat_dict(default_dict, repeat_dict)</span><br><span class="line">    file_handler.write(<span class="string">"\nlocal %s = &#123;\n"</span> % (DEFAULT_TABLE_NAME))</span><br><span class="line">    convert.convert_dict_lua_file(file_handler, default_dict, <span class="number">1</span>)</span><br><span class="line">    file_handler.write(<span class="string">"&#125;\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set metatable and read-only</span></span><br><span class="line">    file_handler.write(<span class="string">"\ndo\n"</span>)</span><br><span class="line">    file_handler.write(<span class="string">"\tlocal base = &#123;__index = %s, __newindex = function() error(\"Attempt to modify read-only table\") end&#125;\n"</span> % (DEFAULT_TABLE_NAME))</span><br><span class="line">    file_handler.write(<span class="string">"\tfor k, v in pairs(%s) do\n"</span> % (table_name))</span><br><span class="line">    file_handler.write(<span class="string">"\t\tsetmetatable(v, base)\n"</span>)</span><br><span class="line">    file_handler.write(<span class="string">"\tend\n"</span>)</span><br><span class="line">    file_handler.write(<span class="string">"\tbase.__metatable = false\n"</span>)</span><br><span class="line">    file_handler.write(<span class="string">"end\n"</span>)</span><br><span class="line"></span><br><span class="line">    file_handler.write(<span class="string">"\nreturn %s\n"</span> % (table_name))</span><br><span class="line">    file_handler.close()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">###################################################################</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">##  structure method</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">structure_repeat_dict</span><span class="params">(dict_frequency)</span>:</span></span><br><span class="line">    <span class="string">"""Structure frequency dict</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Select frequency &gt; 1 element to structure dict.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            dict_frequency: dict</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            dict; &#123;dict's string : repeat index&#125;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    repeat_dict = &#123;&#125;</span><br><span class="line">    repeat_index = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> sorted(dict_frequency.items(), key=<span class="keyword">lambda</span> x:calc_weight(x)):</span><br><span class="line">        <span class="keyword">if</span> value &gt; <span class="number">1</span>:</span><br><span class="line">            repeat_dict[key] = repeat_index</span><br><span class="line">            repeat_index = repeat_index + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> repeat_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">structure_default_dict</span><span class="params">(excel_dict, all_item_frequency)</span>:</span></span><br><span class="line">    <span class="string">"""Structure default dict</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            excel_dict: dict</span></span><br><span class="line"><span class="string">            all_item_frequency: dict</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            dict; &#123;key : most frequently value&#125;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    excel_item = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> excel_dict.values():</span><br><span class="line">        excel_item = item</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    default_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> excel_item.items():</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> sorted(all_item_frequency[key].items(), key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>], reverse=<span class="keyword">True</span>):</span><br><span class="line">            <span class="keyword">if</span> isinstance(value, dict):</span><br><span class="line">                default_dict[key] = eval(k)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                default_dict[key] = k</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> default_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">structure_final_dict</span><span class="params">(excel_dict, default_dict)</span>:</span></span><br><span class="line">    <span class="string">"""Structure final dict</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Structure final dict by default_dict and excel_dict.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            excel_dict: dict</span></span><br><span class="line"><span class="string">            default_dict: dict</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            dict</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    final_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> excel_dict.items():</span><br><span class="line">        final_dict[key] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isinstance(value, dict):</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> value.items():</span><br><span class="line">                <span class="keyword">if</span> default_dict[k] != v:</span><br><span class="line">                    final_dict[key][k] = v</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            final_dict[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> final_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_file</span><span class="params">(src_path, dst_path, file_name)</span>:</span></span><br><span class="line">    dict_frequency_statistics = &#123;&#125;</span><br><span class="line">    all_item_frequency_statistics = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># conver lua table to python dict</span></span><br><span class="line">    file_dict = convert.convert_lua_table_dict(src_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># analyse dict</span></span><br><span class="line">    traverse_table(file_dict, dict_frequency_statistics, all_item_frequency_statistics)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get repeat dict</span></span><br><span class="line">    repeat_dict = structure_repeat_dict(dict_frequency_statistics)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get default dict</span></span><br><span class="line">    default_dict = structure_default_dict(file_dict, all_item_frequency_statistics)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># structure final dict</span></span><br><span class="line">    final_dict = structure_final_dict(file_dict, default_dict)</span><br><span class="line"></span><br><span class="line">    output_file(file_name, dst_path, repeat_dict, final_dict, default_dict)</span><br></pre></td></tr></table></figure>
<h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><ul>
<li>six.py：<a href="https://github.com/benjaminp/six" target="_blank" rel="noopener">专门用于兼容 Python2 和 Python3 的库</a></li>
<li>slpp.py：<a href="https://github.com/SirAnthony/slpp" target="_blank" rel="noopener">用来将 lua的table结构 转换成 python dictionary结构</a></li>
<li>BEBase.py：基础模块，目前包含 转换、格式化输出等</li>
<li>CompressLua.py ：压缩Lua工具</li>
</ul>
<p><br></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="为什么-lua5-1-有序，-lua5-3-无序"><a href="#为什么-lua5-1-有序，-lua5-3-无序" class="headerlink" title="为什么 lua5.1 有序， lua5.3 无序"></a>为什么 lua5.1 有序， lua5.3 无序</h3><p>最开始使用lua5.3来执行 参照方案，所以出现了压缩后的文件不一致问题；</p>
<p>一开始也没有想是lua版本的问题，只是单纯觉得用lua实现太不方便了，就直接用python重写了。</p>
<p>后来在实现完python版本，然后进行整理的时候，</p>
<p>发现lua5.1版本其实还是固定顺序的（虽然官方文档写的不保证），</p>
<p>但是lua5.3版本的确是无序，而且这个无序是载入无序，</p>
<p>也就是说，对同一个table，载入时会安排好顺序，后面遍历就固定顺序了，但是下次载入可能就换了个顺序。</p>
<p>为什么lua5.3会载入无序呢？</p>
<p>lua中table的 for pairs 遍历是通过next来实现的，next的实现在不同lua版本没有变化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">luaH_next</span> <span class="params">(lua_State *L, Table *t, StkId key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = findindex(L, t, key);  <span class="comment">/* find original element */</span></span><br><span class="line">  <span class="keyword">for</span> (i++; i &lt; t-&gt;sizearray; i++) &#123;  <span class="comment">/* try first array part */</span></span><br><span class="line">    <span class="keyword">if</span> (!ttisnil(&amp;t-&gt;<span class="built_in">array</span>[i])) &#123;  <span class="comment">/* a non-nil value? */</span></span><br><span class="line">      setnvalue(key, cast_num(i+<span class="number">1</span>));</span><br><span class="line">      setobj2s(L, key+<span class="number">1</span>, &amp;t-&gt;<span class="built_in">array</span>[i]);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i -= t-&gt;sizearray; i &lt; sizenode(t); i++) &#123;  <span class="comment">/* then hash part */</span></span><br><span class="line">    <span class="keyword">if</span> (!ttisnil(gval(gnode(t, i)))) &#123;  <span class="comment">/* a non-nil value? */</span></span><br><span class="line">      setobj2s(L, key, key2tval(gnode(t, i)));</span><br><span class="line">      setobj2s(L, key+<span class="number">1</span>, gval(gnode(t, i)));</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">/* no more elements */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>都是先查数组部分，再查哈希部分。</p>
<p>所以，key值的设置就是关键。</p>
<p>lua关于table中加入新key值解释是：</p>
<blockquote>
<p>/<em><br><strong> inserts a new key into a hash table; first, check whether key’s main
</strong> position is free. If not, check whether colliding node is in its main<br><strong> position or not: if it is not, move colliding node to an empty place and
</strong> put new key in its main position; otherwise (colliding node is in its main<br>** position), new key goes to an empty position.
</em>/</p>
</blockquote>
<p>向哈希表插入新key值，</p>
<ul>
<li>先检查key的 mainposition(哈希值) 是否空着<ul>
<li>是：key值放在 mainposition</li>
<li>否：查看占据位置的 值 的 mainposition 是否是该位置<ul>
<li>是：找到 空位置，然后把 key值放在该位置</li>
<li>否：将占据位置的值 移动到空位置，然后将key值放在 该位置</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>核心就是，</p>
<p>当发生哈希碰撞的时候，会在碰撞位置 物理向上查找到空位置，然后作为 后加入值 的位置。</p>
<p>因此，出现发生碰撞的时候，需要先去判断 占据位置的值 的哈希值是否是 该位置。</p>
<p>由于，对同一个 哈希值 的不同值，是有链关系的，所以，后来的兄弟被移到别的位置了，还是能被找到，并不会因为后来兄弟把它扔别的地方就丢了。</p>
<p>最后，当没有空位置的时候，就要进行 rehash操作，这个设计到lua表的具体实现，等以后有空再整理一下吧。</p>
<p>mainposition的值是怎么来的呢？</p>
<p>这里先只讨论string类型的值，</p>
<p>对于 lua5.1 来说：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">TString *<span class="title">luaS_newlstr</span> <span class="params">(lua_State *L, <span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">size_t</span> l)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> h = cast(<span class="keyword">unsigned</span> <span class="keyword">int</span>, l);  <span class="comment">/* seed */</span></span><br><span class="line">  <span class="keyword">size_t</span> step = (l&gt;&gt;<span class="number">5</span>)+<span class="number">1</span>;  <span class="comment">/* if string is too long, don't hash all its chars */</span></span><br><span class="line">  <span class="keyword">size_t</span> l1;</span><br><span class="line">  <span class="keyword">for</span> (l1=l; l1&gt;=step; l1-=step)  <span class="comment">/* compute hash */</span></span><br><span class="line">    h = h ^ ((h&lt;&lt;<span class="number">5</span>)+(h&gt;&gt;<span class="number">2</span>)+cast(<span class="keyword">unsigned</span> <span class="keyword">char</span>, str[l1<span class="number">-1</span>]));</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> newlstr(L, str, l, h);  <span class="comment">/* not found */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处，h的取值即为该string的hash key，可以发现它是将 string长度作为种子，计算出来的，所以 lua5.1 是固定顺序的。</p>
<p>对于 lua5.3 来说：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">TString *<span class="title">luaS_createlngstrobj</span> <span class="params">(lua_State *L, <span class="keyword">size_t</span> l)</span> </span>&#123;</span><br><span class="line">  TString *ts = createstrobj(L, l, LUA_TLNGSTR, G(L)-&gt;seed);</span><br><span class="line">  ts-&gt;u.lnglen = l;</span><br><span class="line">  <span class="keyword">return</span> ts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处，h取值是一个随机种子，在创建的时候随机生成的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** a macro to help the creation of a unique random seed when a state is</span></span><br><span class="line"><span class="comment">** created; the seed is used to randomize hashes.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(luai_makeseed)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> luai_makeseed()		cast(unsigned int, time(NULL))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>至此，破案。</p>
<h3 id="关于-repeat-dict-的嵌套问题（v0-0-2更新）"><a href="#关于-repeat-dict-的嵌套问题（v0-0-2更新）" class="headerlink" title="关于 repeat_dict 的嵌套问题（v0.0.2更新）"></a>关于 repeat_dict 的嵌套问题（v0.0.2更新）</h3><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><p>最终输出的lua会存在以下结构：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> __rt1 = &#123;</span><br><span class="line">    [<span class="number">1</span>] = __rt2,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">local</span> __rt2 = &#123;</span><br><span class="line">    [<span class="number">1</span>] = <span class="number">0</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样在lua使用时，由于定义__rt1时，__rt2未被声明定义，所以输出出来的结果是：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">__rt1 = &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">__rt2 = &#123;</span><br><span class="line">    [<span class="number">1</span>] = <span class="number">0</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是由于，repeat_dict只是单纯根据出现频繁次数排序的，所以可能存在上面的去引用下面的情况。</p>
<h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><p>这种方案是比较正规的方法，</p>
<ol>
<li><p>将repeat_dict内所有序号都看作一个节点，然后通过引用关系相连，可以生成多条链结构。</p>
</li>
<li><p>根据链的长度进行遍历，共同维护将要输出的最终链结构</p>
<ul>
<li><p>每遍历一个节点，都先去最终结构遍历位置关系及是否已经输出</p>
</li>
<li><p>找到合适的位置，将结点插入进去</p>
</li>
</ul>
</li>
<li><p>将最终链结构按顺序赋值输出</p>
</li>
</ol>
<h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><p>这种方案比较投机取巧一些。</p>
<p>因为存在嵌套关系，那肯定是递归深度高的table嵌套了递归深度低的table。</p>
<p>所以先输出递归深度低的table，再输出递归深度高的table，那就不会出现这种问题。</p>
<p>但是，为了更好查找，同样深度的table，根据出现频率要再排序。</p>
<h3 id="针对不同python版本打表不一致问题（v0-0-3更新-amp-v0-0-4更新）"><a href="#针对不同python版本打表不一致问题（v0-0-3更新-amp-v0-0-4更新）" class="headerlink" title="针对不同python版本打表不一致问题（v0.0.3更新 &amp; v0.0.4更新）"></a>针对不同python版本打表不一致问题（v0.0.3更新 &amp; v0.0.4更新）</h3><p>经使用发现，不同python版本会导致，输出的表内容不一致。（暂时只试验了 Python 3.4 及 Python 3.7）</p>
<p>经过试验查询，发现是Python在存到字典后读取的顺序是不同的，导致sorted排序会有所差异（Python3.7没有问题，Python3.4会有所差异）。</p>
<p>查了相关资料发现，在python3.6开始 普通字典可以记住元素添加顺序，之前并没有，所以会导致之前的字典遍历顺序有问题。</p>
<ul>
<li>PS：注意，此处排序的稳定性 和 添加顺序一致 是两个概念。<ul>
<li>排序的稳定性：对于待排序数列 1,1,2,3， 经历稳定排序，则不会进行交换操作，第一个位置的1 和 第二个位置的1 不会交换位置（虽然两者值相同）</li>
<li>添加顺序的一致：输入 age, sex, sex, age；如果添加顺序一致，那么 sex永远会优先遍历到第二次，从而顺序会是 {sex: 2, age: 2}；如果添加顺序不一致，就可能出现 {age: 2, sex: 2}</li>
</ul>
</li>
</ul>
<p>原因查明白了，该想怎么解决了。就是对同样频率的再根据key排个序。（没有什么顺序是排序解决不了的，如果不行，多排几遍…）</p>
<p>基于同样的问题，v0.0.4进一步修改，字典转字符串，要先对字典排序再转，否则将出现根据存储顺序不一致问题，然后比较是否重复元素，也由原来比较字符串相同改为比较字典相同。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<ul>
<li>参考资料<ul>
<li><a href="https://blog.uwa4d.com/archives/1490.html" target="_blank" rel="noopener">Lua配置表存储优化方案</a></li>
<li><a href="https://github.com/lua/lua" target="_blank" rel="noopener">lua codes</a></li>
<li><a href="https://www.cnblogs.com/animalize/p/5633215.html" target="_blank" rel="noopener">Python 3.x简史 - 记录3.0之后重要更新</a></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>想就做</tag>
        <tag>Lua</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>TreeHouse装修指南之文章</title>
    <url>/2018/07/17/TreeHouse%E8%A3%85%E4%BF%AE%E6%8C%87%E5%8D%97%E4%B9%8B%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。<br>（通俗点说，就是hexo的相关搭建及应用的各效果的实现）</p>
<p>文章相关</p>
<a id="more"></a>
<p><br></p>
<h1 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h1><h2 id="在正文不显示，只在摘要-首页显示"><a href="#在正文不显示，只在摘要-首页显示" class="headerlink" title="在正文不显示，只在摘要/首页显示"></a>在正文不显示，只在摘要/首页显示</h2><p>首先加入相关配置设定<br>在 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\themes\next\layout\_macro\post.swing</span><br></pre></td></tr></table></figure>
<p>中加入配置代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.summary_img  %&#125;</span><br><span class="line">  &lt;div class=&quot;out-img-topic&quot;&gt;</span><br><span class="line">    &lt;img src=&#123;&#123; post.summary_img &#125;&#125; class=&quot;img-topic&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>添加位置是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if is_index %&#125;</span><br><span class="line">    在这里插入代码</span><br><span class="line">    &#123;% if post.description and theme.excerpt_description %&#125;</span><br><span class="line">      &#123;&#123; post.description &#125;&#125;</span><br><span class="line">      &lt;!--noindex--&gt;</span><br><span class="line">      &lt;div class=&quot;post-button text-center&quot;&gt;</span><br><span class="line">        &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;</span><br><span class="line">          &#123;&#123; __(&apos;post.read_more&apos;) &#125;&#125; &amp;raquo;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!--/noindex--&gt;</span><br><span class="line">    &#123;% elif post.excerpt  %&#125;</span><br><span class="line">      &#123;&#123; post.excerpt &#125;&#125;</span><br><span class="line">      &lt;!--noindex--&gt;</span><br><span class="line">      &lt;div class=&quot;post-button text-center&quot;&gt;</span><br><span class="line">        &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&#123;% if theme.scroll_to_more %&#125;#&#123;&#123; __(&apos;post.more&apos;) &#125;&#125;&#123;% endif %&#125;&quot; rel=&quot;contents&quot;&gt;</span><br><span class="line">          &#123;&#123; __(&apos;post.read_more&apos;) &#125;&#125; &amp;raquo;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!--/noindex--&gt;</span><br><span class="line">    &#123;% elif theme.auto_excerpt.enable %&#125;</span><br><span class="line">      &#123;% set content = post.content | striptags %&#125;</span><br><span class="line">      &#123;&#123; content.substring(0, theme.auto_excerpt.length) &#125;&#125;</span><br><span class="line">      &#123;% if content.length &gt; theme.auto_excerpt.length %&#125;...&#123;% endif %&#125;</span><br><span class="line">      &lt;!--noindex--&gt;</span><br><span class="line">      &lt;div class=&quot;post-button text-center&quot;&gt;</span><br><span class="line">        &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&#123;% if theme.scroll_to_more %&#125;#&#123;&#123; __(&apos;post.more&apos;) &#125;&#125;&#123;% endif %&#125;&quot; rel=&quot;contents&quot;&gt;</span><br><span class="line">          &#123;&#123; __(&apos;post.read_more&apos;) &#125;&#125; &amp;raquo;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!--/noindex--&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">      &#123;% if post.type === &apos;picture&apos; %&#125;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;&#123;&#123; post.content &#125;&#125;&lt;/a&gt;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;&#123; post.content &#125;&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line">    &#123;&#123; post.content &#125;&#125;</span><br><span class="line">&#123;% endif  %&#125;</span><br></pre></td></tr></table></figure>
<p>然后在文章那部分加字段及图片位置名称<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">summary_img: image_url</span><br></pre></td></tr></table></figure></p>
<p>image_url 是public文件夹下的相对路径</p>
<h2 id="正文、摘要-首页均显示"><a href="#正文、摘要-首页均显示" class="headerlink" title="正文、摘要/首页均显示"></a>正文、摘要/首页均显示</h2><h3 id="url图片"><a href="#url图片" class="headerlink" title="url图片"></a>url图片</h3><p>可以将图片上传到一些免费的CDN中，然后将生成的URL地址直接拿来引用。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src= &quot;image_url&quot;&gt;</span><br><span class="line">![](image_url)</span><br></pre></td></tr></table></figure></p>
<h3 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h3><p>以在public目录下创建文件夹，专门存储图片，然后调用。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](image_url)</span><br></pre></td></tr></table></figure></p>
<p>image_url 可以是public文件夹下的相对路径，也可以是网络地址。</p>
<h2 id="只在文章内显示"><a href="#只在文章内显示" class="headerlink" title="只在文章内显示"></a>只在文章内显示</h2><p>在_config中将 post_asset_folder 设置为true，<br>这样，在hexo new时生成md文件同时也生成同名文件夹。</p>
<p>将图片放在里面，比如 a.png，然后直接在文章内调用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](a.png)</span><br></pre></td></tr></table></figure></p>
<p>注意，如果要用文件夹内的图片，必须设置 post_asset_folder; 否则hexo在生成的时候，不会吧文件夹内容生成。</p>
<p><br></p>
<h1 id="代码块相关设置"><a href="#代码块相关设置" class="headerlink" title="代码块相关设置"></a>代码块相关设置</h1><p>主题配置文件: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\themes\next\_config.yml</span><br></pre></td></tr></table></figure>
<p>代码块高亮，共五种模式，效果展示可以看注释里面的网址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Code Highlight theme</span><br><span class="line"># Available value:</span><br><span class="line">#    normal | night | night eighties | night blue | night bright</span><br><span class="line"># https://github.com/chriskempson/tomorrow-theme</span><br><span class="line">highlight_theme: night</span><br></pre></td></tr></table></figure>
<p>要让代码各种颜色，就需要注意格式</p>
<p>```语言<br>  代码<br>```</p>
<p>具体语言用哪个可以看这个列表: <a href="https://prismjs.com/#languages-list" target="_blank" rel="noopener">https://prismjs.com/#languages-list</a><br>例如 Objective-C 要用 objectivec</p>
<p><br></p>
<h1 id="文章tag显示修改"><a href="#文章tag显示修改" class="headerlink" title="文章tag显示修改"></a>文章tag显示修改</h1><p>在文章底部的tag，显示样子，默认是 #tag 改成 图片tag</p>
<p>修改主题模板文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\themes\next\layout\_macro\post.swig</span><br><span class="line">将 &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;#</span><br><span class="line">替换成 &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h1 id="超链接样式"><a href="#超链接样式" class="headerlink" title="超链接样式"></a>超链接样式</h1><p>将文章内的超链接样式修改一下，默认显示一个颜色，鼠标移动到链接上显示另一种颜色。</p>
<p>修改主题模板文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">themes\next\source\css\_common\components\post\post.styl</span><br><span class="line">添加相应修改：</span><br><span class="line"></span><br><span class="line">// 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;               /*  修改文本内的内容  p是为了不影响首页 阅读全文的样式 */</span><br><span class="line">  color: #0593d3;             /*  默认显示文本颜色    */</span><br><span class="line">  border-bottom: 1px solid #0593d3;     /*  底部下划线 1像素 实线 颜色 */</span><br><span class="line">  &amp;:hover &#123;                 /*  鼠标移动上去后显示的文本颜色  */</span><br><span class="line">    color: #fc6423;       </span><br><span class="line">    border-bottom: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h1 id="添加文章版权信息"><a href="#添加文章版权信息" class="headerlink" title="添加文章版权信息"></a>添加文章版权信息</h1><p>将主题配置文件的copytright打开，并修改license相关</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Declare license on posts</span><br><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  license: CC BY-NC-SA 3.0 CN</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/cn/</span><br></pre></td></tr></table></figure>
<p>修改copytright的链接地址：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">themes\next\layout\_macro\post-copyright.swig</span><br></pre></td></tr></table></figure></p>
<p>将其中链接部分，修改一下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.lt-tree.com/&#123;&#123; post.path | default(post.permalink) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot;&gt;http://www.lt-tree.com/&#123;&#123; post.path | default(post.permalink) &#125;&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>想就做</tag>
        <tag>hexo搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>TreeHouse装修指南之菜单</title>
    <url>/2018/07/17/TreeHouse%E8%A3%85%E4%BF%AE%E6%8C%87%E5%8D%97%E4%B9%8B%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<p>本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。<br>（通俗点说，就是hexo的相关搭建及应用的各效果的实现）</p>
<p>菜单相关</p>
<a id="more"></a>
<p><br></p>
<h1 id="公益404"><a href="#公益404" class="headerlink" title="公益404"></a>公益404</h1><p>腾讯公益404页面，寻找丢失儿童，做一些力所能及的事情。<br>需要新建 404.html 页面，放到主题的 source 目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</span><br><span class="line">          charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot;</span><br><span class="line">          homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h1 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h1><p>修改文件： \themes\next\_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_icon: link 					icon名字</span><br><span class="line">links_title: Links 					标题名字</span><br><span class="line">links_layout: block 				排版：竖排，一个链接一行</span><br><span class="line"># links_layout: inline  			排版：横排，n个链接一行</span><br><span class="line">links:</span><br><span class="line">  #Title: http://example.com/		名称（可以是中文）：网址</span><br></pre></td></tr></table></figure>
<p><br></p>
<h1 id="添加个人头像-amp-头像旋转"><a href="#添加个人头像-amp-头像旋转" class="headerlink" title="添加个人头像&amp;头像旋转"></a>添加个人头像&amp;头像旋转</h1><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p>修改next主题配置文件 _config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avatar: image_url</span><br></pre></td></tr></table></figure>
<p>image_url 可以是public文件夹下的相对路径，也可以是网络地址。</p>
<h2 id="头像旋转"><a href="#头像旋转" class="headerlink" title="头像旋转"></a>头像旋转</h2><p>修改文件： \themes\next\source\css\_common\components\sidebar\sidebar-author.styl</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">$site</span>-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="variable">$site</span>-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$site</span>-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$site</span>-author-image-border-width solid <span class="variable">$site</span>-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置圆形头像 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">58px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">58px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">58px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  -webkit-<span class="attribute">transition</span>: -webkit-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: -moz-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span>:hover &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  -webkit-<span class="attribute">transform</span>: rotateY(<span class="number">360deg</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: rotateY(<span class="number">360deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: rotateY(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-author-name</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">$site</span>-author-name-margin;</span><br><span class="line">  <span class="attribute">text-align</span>: <span class="variable">$site</span>-author-name-align;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$site</span>-author-name-color;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="variable">$site</span>-author-name-weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-description</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="variable">$site</span>-description-margin-top;</span><br><span class="line">  <span class="attribute">text-align</span>: <span class="variable">$site</span>-description-align;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$site</span>-description-font-size;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$site</span>-description-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br></p>
<h1 id="社交小图标相关"><a href="#社交小图标相关" class="headerlink" title="社交小图标相关"></a>社交小图标相关</h1><p>修改文件： \themes\next\_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: github_address || github</span><br><span class="line">  CSDN: csdn_address || copyright</span><br><span class="line">  E-Mail: mailto:email_address || envelope</span><br><span class="line">  微博: weibo_address || weibo</span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  GitHub: github</span><br><span class="line">  CSDN: copyright</span><br><span class="line">  E-Mail: envelope</span><br><span class="line">  微博: weibo</span><br><span class="line"></span><br><span class="line">  icons_only: false</span><br><span class="line">  transition: false</span><br></pre></td></tr></table></figure>
<p>social每行||后为图标名称，具体名称可以在 <a href="https://fontawesome.com/icons?d=gallery" target="_blank" rel="noopener">https://fontawesome.com/icons?d=gallery</a> 中查到。</p>
]]></content>
      <tags>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记</title>
    <url>/2016/11/22/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>python脚本学习记录</p>
<a id="more"></a>
<p><br></p>
<hr>
<p>动机：<br>脚本可以省很多事情，<br>开发游戏用了lua，<br>但是，<br>真正日常要做一些东西脚本的时候，<br>发现用lua还是比较麻烦些，<br>所以，<br>就瞄上了python，<br>恩，<br>说学就学。</p>
<p>注意：</p>
<ul>
<li>用的是python3</li>
<li>适合有一定脚本语言基础的人看（很多脚本语言的共性没有记录）</li>
</ul>
<hr>
<p><br></p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="输出语句-print"><a href="#输出语句-print" class="headerlink" title="输出语句 print"></a>输出语句 print</h2><p><strong>注意多个参数的格式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'hello python!'</span>)</span><br><span class="line">x = <span class="number">100</span></span><br><span class="line">y = <span class="string">'hello'</span></span><br><span class="line">print(<span class="string">'%s user, your score is %d'</span> % (y, x))</span><br><span class="line">print(<span class="string">r''</span>)							<span class="comment"># 在''内的字符不转义</span></span><br></pre></td></tr></table></figure>
<h2 id="list、tuple、dict、set"><a href="#list、tuple、dict、set" class="headerlink" title="list、tuple、dict、set"></a>list、tuple、dict、set</h2><ol>
<li><p>list    列表，有序的集合，随时添加删除元素<br>L = []<br>常用方法:<br>访问元素 - L[index] - index支持负数<br>末尾加入元素 - L.append(val)<br>某位置插入元素 - L.insert(index, val)<br>删除末尾元素 - L.pop()<br>删除某位置元素 - del L[index]</p>
</li>
<li><p>tuple 元组，初始化后不可修改 <strong>[ 初始化一个元素的元组时，元素后要加, : t = (1, ) ]</strong><br>T = ()<br><strong>list 与 tuple 可相互嵌套，tuple中的list可以增删，因为存的是地址</strong></p>
</li>
<li><p>dict 字典（你也可以叫它map)<br>D = {‘key’: value, }</p>
</li>
<li><p>set 集合，无序不重复<br>S = set([])</p>
</li>
</ol>
<h2 id="条件-与-循环"><a href="#条件-与-循环" class="headerlink" title="条件 与 循环"></a>条件 与 循环</h2><p>python的语法很简单，通过缩进来显示。<br>最重要的是<strong>:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件&gt;:</span><br><span class="line">	<span class="keyword">continue</span></span><br><span class="line"><span class="keyword">elif</span> &lt;条件&gt;:</span><br><span class="line">	<span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &lt; &gt; <span class="keyword">in</span> &lt;对象集合&gt;:</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> &lt;条件&gt;:</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span><span class="params">(parameters)</span>:</span></span><br><span class="line">	<span class="keyword">pass</span>								<span class="comment"># 一旦定义一个函数，不可以什么都不写，但可以像这样</span></span><br><span class="line">										<span class="comment"># 用pass来占位，先让代码运行起来。</span></span><br></pre></td></tr></table></figure>
<p>当然，默认参数值，返回多个值，都是支持的<br>额外要注意的应该是 <strong>参数</strong> 部分，包括：必选参数、默认参数、可变参数、命名关键字参数、关键字参数。<br>可变参数允许传入0个或任意个参数，这些会被自动组装为一个tuple；<br>关键字参数允许传入0个或任意个含参数名的参数，这些被自动组装为1个dict。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book</span><span class="params">(name, author, **kw)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> <span class="string">'language'</span> <span class="keyword">in</span> kw: 						<span class="comment"># 判断关键字参数中是否有 language 字段</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">	print(<span class="string">'name: '</span>, name, <span class="string">'author: '</span>, author, <span class="string">'other: '</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="comment"># methon1</span></span><br><span class="line">book(<span class="string">'From Grass To Tree'</span>, <span class="string">'ltree98'</span>, language = <span class="string">'CHN'</span>)</span><br><span class="line">book(<span class="string">'How To Study Python'</span>, <span class="string">'ltree98'</span>, language = <span class="string">'ENG'</span>, pages = <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># method2</span></span><br><span class="line">extra = &#123;<span class="string">'language'</span>: <span class="string">'KOR'</span>, <span class="string">'class'</span>: <span class="string">'novel'</span>&#125;</span><br><span class="line">book(<span class="string">'lalala'</span>, <span class="string">'tree'</span>, **extra)</span><br></pre></td></tr></table></figure>
<p>PS：如果参数中已经有了一个可变参数，那么后面的命名关键字参数就不需要特殊分隔符’*‘了。<br><strong>参数顺序： 必选参数、默认参数、可变参数、命名关键字参数、关键字参数。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b = <span class="number">0</span>, *args, **kw)</span>:</span>		<span class="comment"># 必选参数、默认参数、可变参数、关键字参数</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b = <span class="number">0</span>, *, d, **kw)</span>:</span>		<span class="comment"># 必选参数、默认参数、可变参数、命名关键字参数、关键字参数</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p><strong>对于任意函数，都可以通过func(*args, **kw)的形式来调用它，无论参数是如何定义的。</strong></p>
<h2 id="others"><a href="#others" class="headerlink" title="others:"></a>others:</h2><ul>
<li>range([start = 0,] stop, [, step = 1]]), 生成从start开始（默认为0）到stop（不等于stop）,步长为step（默认为1）的整数序列；<br>start 与 step都是可选参数。</li>
</ul>
<p><br></p>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="一些特性（切片、迭代、列表生成式、生成器）"><a href="#一些特性（切片、迭代、列表生成式、生成器）" class="headerlink" title="一些特性（切片、迭代、列表生成式、生成器）"></a>一些特性（切片、迭代、列表生成式、生成器）</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>针对截取操作<br>L[start: stop: step]<br>截取从start序号开始到stop序号，步长为step的值成一个list返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">		&gt;&gt;&gt; L = list(range(<span class="number">10</span>))</span><br><span class="line">		[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">		&gt;&gt;&gt; L1 = L[:<span class="number">5</span>]</span><br><span class="line">		[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">		&gt;&gt;&gt; L2 = L[<span class="number">2</span>:<span class="number">7</span>]</span><br><span class="line">		[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">		&gt;&gt;&gt; L3 = L[:<span class="number">-1</span>:<span class="number">2</span>]</span><br><span class="line">		[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">		&gt;&gt;&gt; L4 = L[:]</span><br><span class="line">		[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">```		</span><br><span class="line"></span><br><span class="line"><span class="comment">### 迭代</span></span><br><span class="line">给定一个list或tuple，通过<span class="keyword">for</span>循环来遍历它，这种遍历叫做 迭代（iteration）</span><br><span class="line">很多语言的迭代是通过下标来进行的，但python里，并不是。</span><br><span class="line">当然，顺序可能就不是你当初定义它时的顺序了。</span><br><span class="line">		</span><br><span class="line">```python</span><br><span class="line">		weekday = &#123;<span class="string">'Mon'</span>: <span class="number">1</span>, <span class="string">'Tue'</span>: <span class="number">2</span>, <span class="string">'Wed'</span>: <span class="number">3</span>&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> isinstance(weekday, Iterable):</span><br><span class="line">			<span class="keyword">for</span> w <span class="keyword">in</span> weekday:</span><br><span class="line">				print(w)</span><br></pre></td></tr></table></figure>
<p>isinstance(…, Iterable) 判断一个数据类型是否可迭代<br>一般可以可迭代对象是 集合数据类型（如 list、tuple、dict、set、str等），他们都是Iterable类型。</p>
<h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><p>顾名思义，就是一个创建list的方式，<br>通过这种方式创建list比较便捷</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">'XYZ'</span> <span class="keyword">if</span> x != <span class="string">'B'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实上面那个等价于下面</span></span><br><span class="line"></span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'ABC'</span>:</span><br><span class="line">	<span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">'XYZ'</span>:</span><br><span class="line">		<span class="keyword">if</span> x != <span class="string">'B'</span>:</span><br><span class="line">			L.append(x+y)</span><br></pre></td></tr></table></figure>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>针对于列表容量有限的缺陷，<br>生成器就是一边循环一边计算。<br>与列表生成式的区别是，列表生成时最外层是 []，而生成器最外层是 ()<br>而且，得到的generator，需要不停next得到下一个元素。（一般会通过for循环来迭代获取）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = (x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">'XYZ'</span> <span class="keyword">if</span> x != <span class="string">'B'</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> g:</span><br><span class="line">	print(v)</span><br></pre></td></tr></table></figure>
<p>可以作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列。<br>Iterator类型主要就两种，一种就是这个生成器，还有就是含yield的generator function</p>
<h2 id="关于函数式编程-（-lambda、map、reduce、filter、-装饰器）"><a href="#关于函数式编程-（-lambda、map、reduce、filter、-装饰器）" class="headerlink" title="关于函数式编程 （ lambda、map、reduce、filter、 装饰器）"></a>关于函数式编程 （ lambda、map、reduce、filter、 装饰器）</h2><h3 id="lambda-arg1-arg2-arg3-…-expression"><a href="#lambda-arg1-arg2-arg3-…-expression" class="headerlink" title="lambda [arg1 [, arg2, arg3, …]]: expression"></a>lambda [arg1 [, arg2, arg3, …]]: expression</h3><p>也叫匿名函数，通过它可以非常方便快捷的定义使用一个函数。<br>具体效果，下面会给出。</p>
<h3 id="map-func-seq1-seq2…"><a href="#map-func-seq1-seq2…" class="headerlink" title="map(func, seq1[, seq2…])"></a>map(func, seq1[, seq2…])</h3><p>将func作用于seq中的每一个元素，并用一个列表给出返回值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> x * x</span><br><span class="line">m = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># m 将会是一个列表 [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>
<p>其实，用lambda更方便简洁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = map(<span class="keyword">lambda</span> x: x*x, range(<span class="number">1</span>, <span class="number">6</span>))</span><br></pre></td></tr></table></figure>
<h3 id="reduce-func-seq-init"><a href="#reduce-func-seq-init" class="headerlink" title="reduce(func, seq[, init])"></a>reduce(func, seq[, init])</h3><p>这是一个二元操作函数，它用来将一个集合中所有数据进行从前到后的二元操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fuctools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">specialAdd</span><span class="params">(x, y)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> x*<span class="number">10</span> + y</span><br><span class="line">val = reduce(specialAdd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># val将会是一个数字 12345</span></span><br></pre></td></tr></table></figure>
<p>reduce要提前导入，<br>当然，也可以用lambda</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">val = reduce(<span class="keyword">lambda</span> x, y: x*<span class="number">10</span> + y, range(<span class="number">1</span>, <span class="number">6</span>))</span><br></pre></td></tr></table></figure>
<h3 id="filter-func-seq"><a href="#filter-func-seq" class="headerlink" title="filter(func, seq)"></a>filter(func, seq)</h3><p>可以当做过滤器，将集合中的每个数都传入函数，根据函数返回的bool变量来决定是否留下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bigger_than_five</span><span class="params">(n)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> n &gt; <span class="number">5</span></span><br><span class="line">f = list(filter(bigger_than_five, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]))</span><br><span class="line"><span class="comment"># f 将会是一个列表 [6, 7, 8]</span></span><br><span class="line"></span><br><span class="line">f2 = list(filter(<span class="keyword">lambda</span> n: n &gt; <span class="number">5</span>, range(<span class="number">3</span>, <span class="number">9</span>)))</span><br></pre></td></tr></table></figure>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器的作用就像它名字一样，给函数以装饰，做一个更大一范围的修饰。<br>比如，有A、B、C三个果汁工厂，现在要在每瓶果汁上印一个小商标。<br>我们可以在每个工厂内建立一个流水线来印商标，<br>也可以专门建立一个工厂D来印商标。<br>装饰器，就像后者，工厂D。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myLog</span><span class="params">(func)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">		print(<span class="string">'--- this is my log'</span>)</span><br><span class="line">		<span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">	<span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@myLog</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">()</span>:</span></span><br><span class="line">	print(<span class="string">'\n\ndemo is running\n\n'</span>)</span><br><span class="line"></span><br><span class="line">demo()</span><br></pre></td></tr></table></figure>
<p>注意要加语法糖 @装饰器函数<br>本装饰器的作用是在函数调用前输出一段log。</p>
<p>如果想让装饰器函数带参数，那就要进行三层嵌套。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myLog</span><span class="params">(logText)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">			print(logText)</span><br><span class="line">			<span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">		<span class="keyword">return</span> wrapper</span><br><span class="line">	<span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@myLog("hello log")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">()</span>:</span></span><br><span class="line">	print(<span class="string">'\n\ndemo is running\n\n'</span>)</span><br><span class="line"></span><br><span class="line">demo()</span><br></pre></td></tr></table></figure>
<p>但是，这里的函数名已经发生了更改，demo名称其实已经发生了更改，<br>demo.__name__ 是 wrapper<br>可以通过加<br>wrapper.__name__ = func.__name__<br>来改回来，<br>但是，过于繁琐，python提供了更好的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myLog</span><span class="params">(logText)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">		@functools.wraps(func)</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">			print(logText)</span><br><span class="line">			<span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">		<span class="keyword">return</span> wrapper</span><br><span class="line">	<span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@myLog("hello log")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">()</span>:</span></span><br><span class="line">	print(<span class="string">'\n\ndemo is running\n\n'</span>)</span><br><span class="line"></span><br><span class="line">demo()</span><br><span class="line">print(demo.__name__)</span><br></pre></td></tr></table></figure>
<h2 id="关于面向对象编程"><a href="#关于面向对象编程" class="headerlink" title="关于面向对象编程"></a>关于面向对象编程</h2><p>python中是有类这个结构的。<br>还有一些命名规则：<br>变量名以 _  开头，代表私有变量（非强制）<br>变量名以 __ 开头，代表私有变量 （强制）<br>变量名以 __ 开头，并且以 __ 结尾，代表特殊变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">		self.__name = name</span><br><span class="line">		self.age = age</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(<span class="string">'Person Eating...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(<span class="string">'Student Eating...'</span>)</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">study</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(<span class="string">'Student Study...'</span>)</span><br></pre></td></tr></table></figure>
<p>也可以对实例进行一些属性的绑定，当然，不会对类造成影响。<br>当然也可以对类进行方法绑定，其所有的实例均受影响</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_height</span><span class="params">(self, height)</span>:</span></span><br><span class="line">	self.height = height</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">	name = <span class="string">'tree'</span></span><br><span class="line"></span><br><span class="line">p = Person()</span><br><span class="line">print(<span class="string">'p name is: '</span>, p.name)</span><br><span class="line">print(<span class="string">'person name is: '</span>, Person.name)</span><br><span class="line"></span><br><span class="line">p.age = <span class="number">20</span></span><br><span class="line">print(<span class="string">'p age is: '</span>, p.age)</span><br><span class="line">print(<span class="string">'person age is: '</span>, Person.age</span><br><span class="line"></span><br><span class="line">Person.set_height = set_height</span><br><span class="line">p.set_height(<span class="number">180</span>)</span><br><span class="line">print(p.height)</span><br></pre></td></tr></table></figure>
<p>最后，可以通过在类内设置一些函数来使类更加完善:</p>
<ul>
<li>__init__<br>初始化方法</li>
<li>__slots__<br>设定允许绑定的变量名（子类会继承父类）</li>
<li>__len__<br>让类可以作用于len函数，设定计算类大小的方法</li>
<li>__str__ 与 __repr__<br>都是用来当 print实例对象时 显示出来的字符串。<br>__str__是给用户看的，__repr__是给开发者看的（但一般都一样）</li>
<li>__iter__ 与 __next__<br>可以让类作用于 for…in 循环</li>
<li>__getitem__<br>可以像list一样实现按照下标取元素</li>
<li>__getattr__<br>预设某属性默认值</li>
<li>__call__<br>实现在实例本身的调用方法。</li>
<li>装饰器实现get/set方法        </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">	@property</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">	    <span class="keyword">return</span> self._age</span><br><span class="line"><span class="meta">	@age.setter</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, value)</span>:</span></span><br><span class="line">	    self._age = value</span><br></pre></td></tr></table></figure>
<p><br></p>
<h1 id="归纳"><a href="#归纳" class="headerlink" title="归纳"></a>归纳</h1><p>python的一些基础东西，基本就这些了。<br>接下来，就可以去做一些东西来边练手边加深理解。<br>最后，<br>工具是死的，<br>人是活得，<br>不要局限自己，<br>放飞思维，<br>大胆去做。</p>
<p><br><br><br><br><br></p>
<hr>
<p>参考：<br>着重推荐： <a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000</a><br><a href="http://www.pythoner.com/46.html" target="_blank" rel="noopener">http://www.pythoner.com/46.html</a></p>
]]></content>
      <tags>
        <tag>跟着学</tag>
      </tags>
  </entry>
  <entry>
    <title>python dictionary &amp; lua table</title>
    <url>/2018/05/28/python%20dictionary%20&amp;%20lua%20table/</url>
    <content><![CDATA[<p>python dictionary 与 lua table</p>
<a id="more"></a>
<p><br></p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>公司前端的技术栈是 C++ &amp; lua &amp; python, C++、lua做业务开发，python做工具。<br>lua特别好用的东西就是load, 将某些数据（一般是excel）转成lua的table存储，用的时候直接load进来。<br>但是，有些数据，并不是excel转过来的，通过多个excel来组成。</p>
<p>例如：<br>描述: 一个卡牌游戏，肯定有一张卡牌表，在表中我可以知道每张卡牌属于哪个职业。</p>
<p>Question: 在游戏中，我想知道某职业所有卡牌，怎么办呢?<br>我需要遍历这个卡牌表，然后把相应职业的卡牌筛选出来。<br>但是，这个方法随着卡牌库的增加，所花费的时间也不断增加，早晚会出事呀。<br>当然，可以通过各种人为规定，算法设计来加快速度。<br>可是，都没有根本去解决问题。<br>回过头来，可以发现，当我们有了这张卡牌表，我就可以知道某职业都有哪些牌。<br>这就是像卡牌表一样，不需要在游戏中动态去生成，直接可以本地存储静态的一个职业对应卡牌的表。<br>这样，即使生成这张表再慢，也不会消耗游戏运行中的时间和性能。</p>
<p><br></p>
<h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>现在目标很明确了，我要把n个表，根据需求组合拼装成1个表。<br>麻烦的是，表的生成这些东西，我们都已经做成脚本，交给策划生成了。<br>这个东西，肯定也需要交给策划进行。<br>不可能让策划打完表以后，程序再去执行一遍lua脚本。<br>（PS：这种东西一定要规避掉，一定要学会自动化，工具化。不要把我们的时间浪费在这些可以自动化、工具化的东西上。）</p>
<p>所以，目前状况是：<br>语言：python<br>输入：n张lua表<br>输出：1张lua表<br>逻辑：一系列插入、查找、遍历等</p>
<p>中间的逻辑就不用多说了，python的dict 和 lua的table用法也挺像的。<br>主要处理两个问题：</p>
<ol>
<li>将lua table 转换成 python dict</li>
<li>将python dict 转换成 lua table</li>
</ol>
<h2 id="大概思路"><a href="#大概思路" class="headerlink" title="大概思路"></a>大概思路</h2><p>在动手前，肯定要看有没有好的现成的轮子。重复造轮子还是不要了吧，不一定造的比人家好呢。<br>经过一番查找，发现了 slpp[ <a href="https://github.com/SirAnthony/slpp" target="_blank" rel="noopener">https://github.com/SirAnthony/slpp</a> ]<br>它可以实现lua table 和 python dict之间的转换。<br>但是，它是python2.x版本。<br>然后，在推送请求上看到，有人已经做了python3.x版本。 slpp-23[ <a href="https://github.com/IlyaSkriblovsky/slpp-23" target="_blank" rel="noopener">https://github.com/IlyaSkriblovsky/slpp-23</a> ]</p>
<h2 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h2><p>大概的方向差不多了，剩下的就是符合我所需要的格式。<br>因为，我的文件格式是这样的:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> xx_xx = &#123;</span><br><span class="line">	[<span class="number">1</span>] = &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;,</span><br><span class="line">	[<span class="number">2</span>] = &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;,</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> xx_xx</span><br></pre></td></tr></table></figure>
<p>对于输入要求，还简单一些：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    描述:</span></span><br><span class="line"><span class="string">        将lua的table转成python的dict</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        table_file_name - string</span></span><br><span class="line"><span class="string">            文件名（需要加后缀）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">        dict格式的table</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertLuaTableToPythonDict</span><span class="params">(table_file_name)</span>:</span></span><br><span class="line">    content = <span class="string">""</span></span><br><span class="line">    <span class="keyword">with</span> open(table_file_name, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line"></span><br><span class="line">    content = content[content.find(<span class="string">'&#123;'</span>) : content.rfind(<span class="string">'&#125;'</span>)+<span class="number">1</span>]</span><br><span class="line">    content = lua.decode(content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure>
<p>但是输出，就不能用 lua.encode 了，因为它输出东西是这样子的：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line">	&#123;</span><br><span class="line">			z = <span class="number">335</span>,</span><br><span class="line">			x = <span class="number">1322</span>,</span><br><span class="line">			cityId = <span class="number">2</span>,</span><br><span class="line">			id = <span class="number">4</span></span><br><span class="line">		&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">			z = <span class="number">140</span>,</span><br><span class="line">			x = <span class="number">3396</span>,</span><br><span class="line">			cityId = <span class="number">4</span>,</span><br><span class="line">			id = <span class="number">3</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">&#123;</span><br><span class="line">	&#123;</span><br><span class="line">			z = <span class="number">267.9</span>,</span><br><span class="line">			x = <span class="number">2639.4</span>,</span><br><span class="line">			cityId = <span class="number">3</span>,</span><br><span class="line">			id = <span class="number">3</span></span><br><span class="line">		&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">			z = <span class="number">-1.2</span>,</span><br><span class="line">			x = <span class="number">2006</span>,</span><br><span class="line">			cityId = <span class="number">1</span>,</span><br><span class="line">			id = <span class="number">8</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">&#123;</span><br><span class="line">	&#123;</span><br><span class="line">			cityId = <span class="number">5</span>,</span><br><span class="line">			id = <span class="number">6</span></span><br><span class="line">		&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">			cityId = <span class="number">2</span>,</span><br><span class="line">			id = <span class="number">5</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">&#123;</span><br><span class="line">	&#123;</span><br><span class="line">			z = <span class="number">122</span>,</span><br><span class="line">			x = <span class="number">968</span>,</span><br><span class="line">			cityId = <span class="number">5</span>,</span><br><span class="line">			id = <span class="number">6</span></span><br><span class="line">		&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">			cityId = <span class="number">1</span>,</span><br><span class="line">			id = <span class="number">5</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">&#123;</span><br><span class="line">	&#123;</span><br><span class="line">			cityId = <span class="number">4</span>,</span><br><span class="line">			id = <span class="number">5</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">&#123;</span><br><span class="line">		info = 	&#123;</span><br><span class="line">			<span class="number">123</span> = <span class="number">123</span>,</span><br><span class="line">			age = <span class="number">98</span>,</span><br><span class="line">			sex = <span class="string">"man"</span>,</span><br><span class="line">			hobby = <span class="string">"basketball"</span>,</span><br><span class="line">			other = 		&#123;</span><br><span class="line">				addr = <span class="string">"China"</span>,</span><br><span class="line">				id_card = <span class="string">"1234567890abc"</span></span><br><span class="line">			&#125;,</span><br><span class="line">			name = <span class="string">"ltree98"</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="number">2</span> = <span class="string">"hello ltree98"</span>,</span><br><span class="line">		id = <span class="string">"12345"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没错，它的格式就是这样的，包括对齐。<br>只能说能用。<br>我想了一下，发现我需要的输出格式其实很简单，递归的输出就行。<br>我也懒得改它的源码了，直接手撸了一个。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据递归深度输出 制表符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outPutTab</span><span class="params">(depth, outputHandler)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, depth):</span><br><span class="line">        outputHandler.write(<span class="string">'\t'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字典递归转化输出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RecursiveSerachDict</span><span class="params">(depth, dic, outputHandler)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> key, val <span class="keyword">in</span> dic.items():</span><br><span class="line">        <span class="comment"># output key</span></span><br><span class="line">        outPutTab(depth, outputHandler)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isinstance(key, Number):   </span><br><span class="line">            outputHandler.write(<span class="string">'[%s] = '</span> % str(key))</span><br><span class="line">        <span class="keyword">elif</span> isinstance(key, str):</span><br><span class="line">            outputHandler.write(<span class="string">'%s = '</span> % key)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># output val</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(val, dict):</span><br><span class="line">            outputHandler.write(<span class="string">'&#123;\n'</span>)</span><br><span class="line">            RecursiveSerachDict(depth+<span class="number">1</span>, val, outputHandler)</span><br><span class="line">            outPutTab(depth, outputHandler)</span><br><span class="line">            outputHandler.write(<span class="string">'&#125;,'</span>)</span><br><span class="line">        <span class="keyword">elif</span> isinstance(val, Number):</span><br><span class="line">            outputHandler.write(<span class="string">'%s,'</span> % str(val))</span><br><span class="line">        <span class="keyword">elif</span> isinstance(val, str):</span><br><span class="line">            outputHandler.write(<span class="string">'\'%s\','</span> % val)</span><br><span class="line"></span><br><span class="line">        outputHandler.write(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字典写入lua</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_dict_lua</span><span class="params">(dict_tmp, table_name, file_path)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(type(dict_tmp) != dict):</span><br><span class="line">        print(<span class="string">"ERROR: only parse dict type!"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    table_file_path = os.path.join(file_path, <span class="string">'%s.lua'</span> % table_name)</span><br><span class="line">    outputHandler = codecs.open(table_file_path, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    outputHandler.write(<span class="string">'\nlocal %s = &#123;\n'</span> % table_name)</span><br><span class="line"></span><br><span class="line">    RecursiveSerachDict(<span class="number">1</span>, dict_tmp, outputHandler)</span><br><span class="line"></span><br><span class="line">    outputHandler.write(<span class="string">'&#125;\n'</span>)</span><br><span class="line">    outputHandler.write(<span class="string">'\nreturn %s\n\n'</span> % table_name)</span><br><span class="line">    outputHandler.close()</span><br></pre></td></tr></table></figure>
<p>我的输出：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> dict_portal_group = &#123;</span><br><span class="line">	[<span class="number">1</span>] = &#123;</span><br><span class="line">		[<span class="number">1</span>] = &#123;</span><br><span class="line">			z = <span class="number">335</span>,</span><br><span class="line">			x = <span class="number">1322</span>,</span><br><span class="line">			cityId = <span class="number">2</span>,</span><br><span class="line">			id = <span class="number">4</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">		[<span class="number">2</span>] = &#123;</span><br><span class="line">			z = <span class="number">140</span>,</span><br><span class="line">			x = <span class="number">3396</span>,</span><br><span class="line">			cityId = <span class="number">4</span>,</span><br><span class="line">			id = <span class="number">3</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	[<span class="number">2</span>] = &#123;</span><br><span class="line">		[<span class="number">1</span>] = &#123;</span><br><span class="line">			z = <span class="number">267.9</span>,</span><br><span class="line">			x = <span class="number">2639.4</span>,</span><br><span class="line">			cityId = <span class="number">3</span>,</span><br><span class="line">			id = <span class="number">3</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">		[<span class="number">2</span>] = &#123;</span><br><span class="line">			z = <span class="number">-1.2</span>,</span><br><span class="line">			x = <span class="number">2006</span>,</span><br><span class="line">			cityId = <span class="number">1</span>,</span><br><span class="line">			id = <span class="number">8</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	[<span class="number">3</span>] = &#123;</span><br><span class="line">		[<span class="number">1</span>] = &#123;</span><br><span class="line">			cityId = <span class="number">5</span>,</span><br><span class="line">			id = <span class="number">6</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">		[<span class="number">2</span>] = &#123;</span><br><span class="line">			cityId = <span class="number">2</span>,</span><br><span class="line">			id = <span class="number">5</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	[<span class="number">4</span>] = &#123;</span><br><span class="line">		[<span class="number">1</span>] = &#123;</span><br><span class="line">			z = <span class="number">122</span>,</span><br><span class="line">			x = <span class="number">968</span>,</span><br><span class="line">			cityId = <span class="number">5</span>,</span><br><span class="line">			id = <span class="number">6</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">		[<span class="number">2</span>] = &#123;</span><br><span class="line">			cityId = <span class="number">1</span>,</span><br><span class="line">			id = <span class="number">5</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	[<span class="number">5</span>] = &#123;</span><br><span class="line">		[<span class="number">1</span>] = &#123;</span><br><span class="line">			cityId = <span class="number">4</span>,</span><br><span class="line">			id = <span class="number">5</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	[<span class="number">6</span>] = &#123;</span><br><span class="line">		info = &#123;</span><br><span class="line">			[<span class="number">123</span>] = <span class="number">123</span>,</span><br><span class="line">			age = <span class="number">98</span>,</span><br><span class="line">			sex = <span class="string">'man'</span>,</span><br><span class="line">			hobby = <span class="string">'basketball'</span>,</span><br><span class="line">			other = &#123;</span><br><span class="line">				addr = <span class="string">'China'</span>,</span><br><span class="line">				id_card = <span class="string">'1234567890abc'</span>,</span><br><span class="line">			&#125;,</span><br><span class="line">			name = <span class="string">'ltree98'</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">		[<span class="number">2</span>] = <span class="string">'hello ltree98'</span>,</span><br><span class="line">		id = <span class="string">'12345'</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dict_portal_group</span><br></pre></td></tr></table></figure>
<p>嗯，大概就是这样了。</p>
<p><br></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>首先，就要遵循一个思路，<strong>静态的数据结构尽量不要再游戏过程中动态生成</strong>。<br>然后，前端要负责的东西太多了，<strong>尽量要把这些东西工具化、脚本化</strong>。<br>最后，<strong>代码不止能用，还要能看</strong>。</p>
]]></content>
      <tags>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>《10x程序员工作法》学习笔记</title>
    <url>/2020/09/13/%E3%80%8A10x%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B7%A5%E4%BD%9C%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>程序员的三大美德：懒惰、急躁、傲慢</p>
<ul>
<li>懒惰，是一种品质，它会使你花很大力气去规避过度的精力消耗，敦促你写出节省体力的程序，别人也能很好地利用，你还会为此写出完善的文档，以免别人来问问题。</li>
<li>急躁，是计算机偷懒时，你会感到的一种愤怒。它会促使你写出超越预期的程序，而不只是响应需求。</li>
<li>傲慢，极度自信，写出（或维护）别人挑不出毛病的程序。</li>
</ul>
<a id="more"></a>
<p><br></p>
<p><br></p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本文是在 <strong>极客时间</strong> APP 学习 <strong>郑晔</strong> 老师专栏 《10x程序员工作法》的学习笔记。</p>
<p><br></p>
<p><br></p>
<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>概念：</p>
<ul>
<li>本质复杂度 &amp; 偶然复杂度</li>
<li>本质复杂度就是解决一个问题时，无论怎么做都必须要做的事，而偶然复杂度是因为选用的做事方法不当，而导致要多做的事。</li>
</ul>
<p>现象</p>
<ul>
<li>大部分程序员忙碌解决的问题，都不是程序问题，而是由偶然复杂度导致的问题。</li>
</ul>
<p>目的</p>
<ul>
<li>如何减少偶然复杂度引发的问题，让软件开发工作有序、高效地进行。</li>
</ul>
<p>实践</p>
<ul>
<li>以终为始</li>
<li>任务分解</li>
<li>沟通反馈</li>
<li>自动化</li>
</ul>
<p><em>明确现状</em></p>
<ul>
<li><em>我现在在哪（或者说技术水平）？以此确定现状！</em></li>
<li><em>我要到哪去（或者说技术水平）？以此确定目标！</em></li>
<li><em>我如何到那（或者说技术水平）？以此确定实现路径！</em></li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="以终为始"><a href="#以终为始" class="headerlink" title="以终为始"></a>以终为始</h2><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li>DoD，确定好完成的定义，减少团队内部的理解不一致</li>
<li>用户故事，细化出有价值的需求</li>
<li>持续集成，通过尽早集成，减少改动量，降低集成的难度</li>
<li>精益创业，减少过度开发不确定性产品带来的浪费</li>
<li>迭代0，在项目开始之前，做好一些基础准备</li>
<li>任何事物都要经过两次创造：<ul>
<li>第一次是在头脑中创造，也就是智力上的。</li>
<li>第二次是付诸实践，也就是实际的构建。</li>
</ul>
</li>
</ul>
<h3 id="实战指南"><a href="#实战指南" class="headerlink" title="实战指南"></a>实战指南</h3><p>遇到需求或任务，倒着想，先推演，明确“终”</p>
<ul>
<li>明确完成的标准</li>
<li>明确验收的标准</li>
<li>弄清楚所有待做的需求的原因</li>
<li>扩展自己的角色，不仅限于“程序员”</li>
<li>尽量用可度量的数字衡量所做的工作</li>
</ul>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul>
<li>作为程序员，可以管理上级<ul>
<li>管理上级的预期，把看到的问题暴露出来</li>
<li>帮助上级丰富知识，细化分支</li>
<li>说出自己的想法，而非压抑</li>
</ul>
</li>
<li>拿老板说事，可以到老板面前澄清<ul>
<li>一般来说老板要求的是方向，而不是细节；要排除产品经理畏于老板而强迫下游无脑实现的需求。</li>
</ul>
</li>
<li>对抄袭的需求，先明确要抄什么，而不是无脑照抄</li>
<li>分清楚需求和技术，各自做好各自的事情</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h2><h3 id="最佳实践-1"><a href="#最佳实践-1" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li>艾森豪威尔矩阵（Eisenhower Matrix）<ul>
<li>将事情按照 重要 和 紧急 程度进行划分，成四个象限</li>
<li>重要且紧急的事情要立即做；重要但不紧急的事情应该是重点投入精力的地方；紧急但不重要的事情，可以委托别人做；不重要且不紧急的事情，尽量少做</li>
</ul>
</li>
<li>最小可行产品<ul>
<li>“刚刚好”满足客户需求的产品</li>
<li>在实践中，用最小的代价找到一条可行的路径</li>
</ul>
</li>
</ul>
<h3 id="实战指南-1"><a href="#实战指南-1" class="headerlink" title="实战指南"></a>实战指南</h3><ul>
<li>分而治之，是人类解决问题的基本手段</li>
<li>任务分解，分解到可以进行的微操作<ul>
<li>事前思考，减少遗漏</li>
<li>事中被打断，可迅速恢复</li>
</ul>
</li>
<li>应该编写可测试的代码</li>
</ul>
<h3 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h3><ul>
<li>对不了解技术的任务，先要去了解技术，然后再做任务分解</li>
<li>通过一次技术Spike，学习新技术<ul>
<li>Spike，指轻轻的刺，程度弱于调研</li>
<li>Spike的作用在于消除不确定性，让需求方知道这里要用到一项团队内没有人懂的技术，需要花时间弄清楚</li>
<li>Spike，针对使用新技术所关注的点进行快速调试、验证</li>
<li>Spike用的原型代码，应该抛弃，不可作为实际应用的代码</li>
</ul>
</li>
<li>分清目标与现状，用目标作为方向，指导现状的改变</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="沟通反馈"><a href="#沟通反馈" class="headerlink" title="沟通反馈"></a>沟通反馈</h2><h3 id="最佳实践-2"><a href="#最佳实践-2" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li>看板<ul>
<li>可视化的任务</li>
<li>明确任务大纲及进程</li>
</ul>
</li>
<li>持续集成<ul>
<li>做好持续集成的关键是 快速反馈</li>
<li>本地检查过后再提交</li>
</ul>
</li>
<li>回顾&amp;复盘<ul>
<li>枚举关注点</li>
<li>选出重点</li>
<li>深入讨论</li>
<li>列出行动项</li>
<li>找到负责人</li>
</ul>
</li>
<li>编写代码的进阶路径（非底层）<ol>
<li>编写可以运行的代码</li>
<li>编写符合代码规范的代码</li>
<li>编写人可以理解的代码</li>
<li>用业务语言写代码<ul>
<li>贴近实际应用现场，例如起名字贴近实际应用业务而非代码中面向实现的名字</li>
<li>DDD 领域驱动设计</li>
</ul>
</li>
</ol>
</li>
<li>会议是一种 <strong>重量级</strong> 的沟通方式<ul>
<li>若非必要，不要开会</li>
<li>减少参会人数</li>
<li>尽量采用 <strong>轻量级</strong> 的沟通方式 —— 面对面沟通</li>
</ul>
</li>
<li>聆听用户声音<ul>
<li>能做自己用户，做自己用户</li>
<li>能接近用户，接近用户</li>
<li>没有用户，创造用户</li>
</ul>
</li>
<li>Fail Fast<ul>
<li>尽早暴露出错误，不要隐瞒，容错</li>
</ul>
</li>
</ul>
<h3 id="实战指南-2"><a href="#实战指南-2" class="headerlink" title="实战指南"></a>实战指南</h3><ul>
<li>回顾会议是一个常见的复盘实践，是一个团队自我改善的前提。<ul>
<li>分类方式<ul>
<li>主题分类1<ul>
<li>做得好的</li>
<li>做的欠佳的</li>
<li>问题或建议</li>
</ul>
</li>
<li>主题分类2（海星图）<ul>
<li>继续保持</li>
<li>开始做</li>
<li>停止做</li>
<li>多做一些</li>
<li>少做一些</li>
</ul>
</li>
</ul>
</li>
<li>会议重点：<ul>
<li>写事实，不要写感受<ul>
<li>事实就是明摆在那里的东西，而感受无法衡量</li>
</ul>
</li>
<li>重点关注可改进的部分，按照优先级讨论（一般只挑出最重要的几个）</li>
<li>通过多个为什么，一步步找到根因</li>
<li>尝试着找出解决方案，一系列行动项；所有的行动项都是可检查的，可验证实现的内容</li>
<li>验证行动项的完成情况</li>
</ul>
</li>
</ul>
</li>
<li>多输出，让知识更有结构<ul>
<li>金字塔原理，从中心论点到分论点再到论据<ul>
<li>结论先行（一次表达只支持一个思想，且出现在开头）</li>
<li>以上统下（任一层次上的思想都必须是下一层思想的总结概括）</li>
<li>归类分组（每组中的思想都必须属于同一范畴）</li>
<li>逻辑递进（每组中的思想都必须按照逻辑顺序排列）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="扩展-2"><a href="#扩展-2" class="headerlink" title="扩展"></a>扩展</h3><ul>
<li>安全性检查，是回顾会议的前提条件<ul>
<li>暴露问题，是改进的前提条件</li>
<li>营造畅所欲言的环境，让“领导”暂时回避</li>
</ul>
</li>
<li>在信息获取上，国内外程序员差别不大，开拓视野，改善工作习惯，是国内程序员亟需提高的</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><h3 id="最佳实践-3"><a href="#最佳实践-3" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li><p>持续交付</p>
<ul>
<li>将生产部署纳入开发的考量</li>
<li>持续交付的基础设施通常包含持续集成环境、测试环境、预生产环境和生产环境</li>
<li>构建流水线保证到了下游的交付物一定是通过上游验证的</li>
<li>随着Docker的诞生，交付由发布包变成了Docker镜像</li>
</ul>
</li>
<li><p>微服务</p>
<ul>
<li>做好微服务的前提是划分好限界上下文</li>
<li>微服务的第一步，不要划分微服务</li>
</ul>
</li>
<li><p>程序员的三大美德：懒惰、急躁、傲慢</p>
<ul>
<li>懒惰，是一种品质，它会使你花很大力气去规避过度的精力消耗，敦促你写出节省体力的程序，别人也能很好地利用，你还会为此写出完善的文档，以免别人来问问题。</li>
<li>急躁，是计算机偷懒时，你会感到的一种愤怒。它会促使你写出超越预期的程序，而不只是响应需求。</li>
<li>傲慢，极度自信，写出（或维护）别人挑不出毛病的程序。</li>
</ul>
</li>
</ul>
<h3 id="实战指南-3"><a href="#实战指南-3" class="headerlink" title="实战指南"></a>实战指南</h3><ul>
<li>谨慎地将工作自动化，将工作过程自动化</li>
<li>采用简单的技术解决问题，直到问题变复杂</li>
<li>软件设计最基础的原则是 高内聚、低耦合</li>
<li>小心NIH综合症（Not Invented Here Syndrome）<ul>
<li>因为那个东西不是我做的，可能存在各种问题，非要自己做出一套新的</li>
</ul>
</li>
</ul>
<h3 id="扩展-3"><a href="#扩展-3" class="headerlink" title="扩展"></a>扩展</h3><ul>
<li>AB测试，用一个软件的多个版本验证想法</li>
<li>熟练使用快捷键</li>
<li>有价值的事情不局限于事情本身。做自动化很重要，写代码很重要。但根据现有情况判断是否需要自动化，是否需要写代码也很重要。有的放矢，任务分解，权衡跟设计是一件很艺术的事情。</li>
<li>分而治之是解决复杂问题的一大利器。持续交互就像重构中小步快走，都能保证大工程的稳步前进。同时由于单元小了，所以也灵活了，持续交付可以结合最小产品的理念，以小成本做test，收集数据后，及时调整产品发展方向。</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="综合运用"><a href="#综合运用" class="headerlink" title="综合运用"></a>综合运用</h2><h3 id="实战指南-4"><a href="#实战指南-4" class="headerlink" title="实战指南"></a>实战指南</h3><ul>
<li>“学习区”学习模型<ul>
<li>舒适区，舒适而缺乏成长</li>
<li>恐慌区，超出能力范围</li>
<li>学习区，有难度而可以达成</li>
<li>在学习区练习才能得到足够的成长</li>
</ul>
</li>
<li>T型人才，一专多能<ul>
<li>知识的广度</li>
<li>专业技能的深度</li>
</ul>
</li>
<li>面对新工作，从全面了解了解开始<ul>
<li>业务：做什么</li>
<li>技术：怎么做</li>
<li>团队运作：怎么与人协作</li>
<li>由大到小，由内及外地了解工作</li>
</ul>
</li>
<li>面对遗留系统，稳扎稳打，小步前行<ul>
<li>基础理念<ul>
<li>烂代码只是现象，要了解根因</li>
<li>能重构，先重构，大规模改造是迫不得已的选择</li>
<li>小步前行</li>
</ul>
</li>
<li>实际操作<ul>
<li>构建测试防护网</li>
<li>将大系统分解成小模块，逐步替换</li>
<li>新旧模块并存，由分发模块调度</li>
<li>建立好领域模型</li>
<li>寻找行业对于系统构建的最新理解</li>
</ul>
</li>
</ul>
</li>
<li>程序员的职业发展<ul>
<li>程序员的焦虑来自于对未来的不确定性，这种不确定性是一个特定时代加上特定行业的产物<ul>
<li>快速发展的中国经济</li>
<li>程序员在中国是一个新兴职业</li>
</ul>
</li>
<li>成为行业专家，制定高目标</li>
<li>向大师学习，开拓视野</li>
<li>找到好的问题，和高水平的人一起工作</li>
</ul>
</li>
</ul>
<h3 id="扩展-4"><a href="#扩展-4" class="headerlink" title="扩展"></a>扩展</h3><ul>
<li>Lead by Example</li>
<li>外部系统应该用接口隔离，这种做法体现了接口隔离原则，也是防腐层概念的体现</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<p>参考：</p>
<ul>
<li>极客时间 《10x程序员工作法》</li>
</ul>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《三体》读感</title>
    <url>/2017/02/13/%E3%80%8A%E4%B8%89%E4%BD%93%E3%80%8B%E8%AF%BB%E6%84%9F/</url>
    <content><![CDATA[<p>《三体》 第一部，读感</p>
<a id="more"></a>
<p><br></p>
<p>这是我看的第一部科幻小说，<br>正如同事所言: 起点那么高，也不怕扯到裆= =..<br>但是，自小阅历无数网络鸦片小说的我，历经各种玄幻校园修真异世穿越等毒害，当然不至于败倒在此。</p>
<p><br></p>
<p>我知道这本书还是因为电影《超体》，当时好像挺乱。<br>我看过电影，也看完了这本书第一部，<br>个人感觉这两者好像没大有啥关系呀？如果同为科幻类也算关系的话，那它们倒还是有点儿关系的。</p>
<p><br></p>
<p>第一部看完，还好，没有上来就一堆理论压死我。<br>最开始台球问题的启蒙，瞬间就打开了我的思维。<br>后面看到汪淼面对各种离奇的事物的恐慌，当时还有些不理解，<br>后来才明白，这大概就是敬畏吧，无知的人才无所畏惧，知道的越多，就越敬畏。<br>当然，这里面还是有一些理论术语什么的，还是不懂。<br>但也没有去苛求，也没有去深究，<br>才不管死亡倒计时的原理呢？别耽误我往后看！（傲娇小脸 ┗|｀O′|┛ ）</p>
<p><br></p>
<p>整本书看完，<br>印象最深刻的还是那个三体游戏以及它背后的三体文明，<br>乱纪元与恒纪元的交替，<br>文明一次次出现，一次次毁灭，<br>但不变的是它们的目标，为了生存。<br>为了生存，一次次脱水；<br>为了生存，不断追求纪元规律；<br>但是，找到规律后发现，自己的星球随时可能灰飞烟灭。<br>于是，为了生存，它们前往地球。<br>但是，怕到了地球，自己文明被压制，被地球文明毁灭，所以要压制地球文明。<br>一切都是为了生存。<br>但是，生存下去后呢？<br>大概就是地球如今的模样，陷入内斗了。<br>这时，会不会又有其他的文明来替代呢？</p>
<p><br></p>
<p>最后，就是这本书的后记：<br>如果存在外星文明，那么宇宙中有共同的道德标准吗？<br>我翻来覆去的想，还是觉得不会有。<br>（本来想了一堆，但是还是不写了，太负面太消极，我自己消极消极就够了..)</p>
<p><br></p>
<p>最后的最后：<br>    我们都只是虫子而已。</p>
<p><br></p>
<p>期待拜读后两部作品。</p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《REWORK》读记</title>
    <url>/2016/11/20/%E3%80%8AREWORK%E3%80%8B%E8%AF%BB%E8%AE%B0/</url>
    <content><![CDATA[<p>Jason Friend 与 David Heinemeier Hansson 的 《REWORK》</p>
<a id="more"></a>
<p><br></p>
<p>好喜欢这种结构的书籍，<br>每段都不是很长，<br>很多段之间没有特别强大的关联性，<br>特别适合在坐公交、坐地铁时候看一看。</p>
<p>这本书感觉就像是给准备创业的人的一个个小TIP，<br>作者把他们创业中遇到的想到的总结起来，供后人参考。<br>还有，这本书的插图，真是赞的很。</p>
<p>这其中，我最喜欢的一小段，<br>就是 —— Tone is in your fingers<br>你的思想，你的东西，通过改变工具是变不了的。</p>
<p>作者之后也发布了另一部新作 《REMOTE》，<br>评价好像不是很好。<br>但是，还是要看一看的。</p>
<p>最最后，这本书中文名叫 —— 重来<br>额…好吧。</p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《代码的整洁之道》读记</title>
    <url>/2016/10/13/%E3%80%8A%E4%BB%A3%E7%A0%81%E7%9A%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E8%AF%BB%E8%AE%B0/</url>
    <content><![CDATA[<p>读这本书之前做了一些功课，很多人反映，书是一本好书，无奈作者废话太多。。。<br>刚开始，我是不信的，但自己读下来才发现，古人诚不欺我啊。<br>来划一下重点吧，写的这些或者是作者所描述的重点，或者是我感触比较深的东西。</p>
<p><strong>Later equals never！</strong><br><strong>稍后等于永不！</strong></p>
<a id="more"></a>
<p><br></p>
<h1 id="章节小记"><a href="#章节小记" class="headerlink" title="章节小记"></a>章节小记</h1><h2 id="第一章、关于整洁的代码"><a href="#第一章、关于整洁的代码" class="headerlink" title="第一章、关于整洁的代码"></a>第一章、关于整洁的代码</h2><ul>
<li>代码的逻辑应该直截了当，让缺陷难以隐藏；尽量去减少依赖关系，从而便于维护；依据某种分层战略完善错误处理代码；性能调到最优，避免他人污染。</li>
<li>糟糕的代码会引发混乱，别人修改糟糕的代码时，往往会越改越烂。</li>
<li>每个函数、每个类、每个模块 都全神贯注去解决一件事</li>
<li>代码应该通过其字面表达含义，因为不同的语言导致并非所有必需信息均可通过代码自身清晰表达。</li>
<li>重要顺序：         <ul>
<li>能通过所有测试        </li>
<li>没有重复代码         </li>
<li>体现系统中的全部设计理念         </li>
<li>包括尽量少的实体</li>
</ul>
</li>
</ul>
<p><br></p>
<h2 id="第二章、关于命名"><a href="#第二章、关于命名" class="headerlink" title="第二章、关于命名"></a>第二章、关于命名</h2><ul>
<li>名副其实，见名知意</li>
<li>使用可以读的出来的、可以被搜索的名称</li>
<li>匈牙利命名法、去掉成员前缀</li>
<li>类名、对象名 应该是名词或名词短语；    方法名应该是动词或动词短语</li>
<li>不要抖机灵，每个概念对应一个词，不用双关语（add、insert）</li>
<li>分离解决方案领域和问题领域的概念，与所涉问题领域更为贴近的代码，应当采用源自问题领域的名称</li>
<li>添加有意义的语境</li>
</ul>
<p><br></p>
<h2 id="第三章、关于函数"><a href="#第三章、关于函数" class="headerlink" title="第三章、关于函数"></a>第三章、关于函数</h2><ul>
<li>函数的第一规则是短小，第二条规则是更短小！</li>
<li>第一章节有提到过的： 每个函数尽量只做一件事。</li>
<li>自顶向下阅读代码，向下规则</li>
<li>函数参数，最理想为零，其次单参、双参、三参…（除非有足够特殊的理由，不要三参数+）</li>
<li>不要向函数传入bool，因为这叫要求该函数不止做一件事</li>
<li>不要有副作用，比如让你洗个苹果，你别洗完了然后吃了它。</li>
<li>普遍而言，应避免使用输出参数。</li>
<li>分隔指令与询问，要么让它干什么，要么让它回答什么。</li>
</ul>
<p><br></p>
<h2 id="第四章、关于注释-（别给糟糕的代码加注释，重新写吧！）"><a href="#第四章、关于注释-（别给糟糕的代码加注释，重新写吧！）" class="headerlink" title="第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）"></a>第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）</h2><ul>
<li>代码会一直被维护更新，但是注释不一定。</li>
<li>注释不能改变根本问题，它不能优化糟糕的代码。</li>
<li>值得写的注释：       <ul>
<li>版权及著作权声明等        </li>
<li>对你的意图的解释        </li>
<li>警示        </li>
<li>TODO注释，为以后编写查找方便</li>
</ul>
</li>
<li>废注释：        <ul>
<li>没有规范化，过于局部的注释（需要纵览全文，才能知晓其意）        </li>
<li>多余的注释（ getMaxNumber(num1, num2) ,还需要写这个函数是干啥的吗？）        </li>
<li>误导性注释        </li>
<li>循规式注释（例如：要求每个函数都要像API文档一样写一套注释来说明函数作用，参数意义。）        </li>
<li>日志式注释（之前不是说光维护代码，不维护注释吗？现在我维护注释，而且把每次修改的时间、内容都加上。有那时间干啥不好，100行的文件，80行注释日志？）        </li>
<li>归属与署名        </li>
<li>注释掉的代码（除了注释的人，其他人都不敢删的东西）        </li>
<li>信息过多，无条理</li>
</ul>
</li>
</ul>
<p><br></p>
<h2 id="第五章、关于格式-代码的格式是你代码的普通话，别让他说方言"><a href="#第五章、关于格式-代码的格式是你代码的普通话，别让他说方言" class="headerlink" title="第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)"></a>第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)</h2><ul>
<li>用空白行来区分你的模块</li>
<li>关系应该密切的东西：        <ul>
<li>变量声明，应该尽可能的靠近其使用位置        </li>
<li>实体变量，应该在类的顶部声明        </li>
<li>相关函数，函数A调用了函数B，应该让A和B放到一起，A尽可能的放在B的上面        </li>
<li>概念相关，概念相关的代码 应该放在一起，相关性与距离成正比</li>
</ul>
</li>
<li>尽量让代码行短小，最好以80个字符为上限，但最多不要超过120</li>
<li>水平方向上的区隔：        <ul>
<li>赋值操作周围加上空格        </li>
<li>不在函数名和左圆括号之间加空格        </li>
<li>逗号后加空格       </li>
<li>加减周围加空格，优先级高的乘除周围不加空格；当然，如果只有优先级相同的运算符，还是可以在周围加空格的</li>
</ul>
</li>
</ul>
<p><br></p>
<h2 id="第六章、-关于对象与数据结构"><a href="#第六章、-关于对象与数据结构" class="headerlink" title="第六章、 关于对象与数据结构"></a>第六章、 关于对象与数据结构</h2><ul>
<li>不要将类内变量设置为私有，然后又添加赋值器和取值器，将它公之于众</li>
<li>对象与数据结构之间的二分原理：        <ul>
<li>过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数，        </li>
<li>面向对象代码便于在不改动既有函数的前提下添加新类<br>反过来说就是：        </li>
<li>过程代码难以添加新数据结构，因为必须修改所有函数        </li>
<li>面向对象代码难以添加新函数，因为必须修改所有类</li>
</ul>
</li>
<li>Demeter律，模块不应了解它所操作对象的内部情形</li>
<li>最为精炼的数据结构，是一个只有公共变量、没有函数的类</li>
</ul>
<p><br></p>
<h2 id="第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）"><a href="#第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）" class="headerlink" title="第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）"></a>第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）</h2><ul>
<li>使用异常处理而非返回错误码</li>
<li>先写出 try-catch-finally语句</li>
<li>给出异常发生的环境说明，方便定位</li>
<li>依调用者需要定义异常类</li>
<li>不要返回、传递NULL值</li>
</ul>
<p><br></p>
<h2 id="第八章、关于边界（将其他代码整合到自己代码中）"><a href="#第八章、关于边界（将其他代码整合到自己代码中）" class="headerlink" title="第八章、关于边界（将其他代码整合到自己代码中）"></a>第八章、关于边界（将其他代码整合到自己代码中）</h2><ul>
<li>使用类似Map的边界接口，就把它保留在类或近亲类中；避免从公共API中返回边界接口，或将边界接口作为参数传递给公共API。</li>
<li>学习性测试很有必要</li>
</ul>
<p><br></p>
<h2 id="第九章、关于单元测试"><a href="#第九章、关于单元测试" class="headerlink" title="第九章、关于单元测试"></a>第九章、关于单元测试</h2><ul>
<li>TDD（测试驱动开发）三定律：        <ul>
<li>在编写不能通过的单元测试前，不可编写生产代码        </li>
<li>只可编写刚好无法通过的单元测试，不能编译也算不通过        </li>
<li>只可编写刚好足以通过当前失败测试的生产代码</li>
</ul>
</li>
<li>脏测试 等同于 没测试</li>
<li>测试代码与生产代码一样重要，它需要被思考、被设计和被照料，它该像生产代码一样保持整洁。</li>
<li>整洁的测试的要素     - 可读性！！！</li>
<li>整洁测试的五条规则     - FIRST        <ul>
<li>F：Fast，测试应该能够快速的运行。        </li>
<li>I：Independent，测试应该相互独立。        </li>
<li>R：Repeatable，测试应该可以在任何环境中重复通过。        </li>
<li>S：Self-Validating，测试应该有布尔值输出。        </li>
<li>T：Timely，测试应及时编写。</li>
</ul>
</li>
</ul>
<p><br></p>
<h2 id="第十章、关于类"><a href="#第十章、关于类" class="headerlink" title="第十章、关于类"></a>第十章、关于类</h2><ul>
<li>类应该由一组变量列表开始，公共静态常量优先于私有静态变量</li>
<li>类应该通函数一样要短小</li>
<li>类或模块应有且只有一条加以修改的理由</li>
<li>单一全责：系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个全责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为</li>
<li>内聚：类应该只有少量实体变量</li>
<li>既然修改会一直持续，那么就更应该对类加以组织，以降低修改的风险</li>
<li>类应当依赖于抽象而不是依赖于具体细节</li>
</ul>
<p><br></p>
<h2 id="第十一章、关于系统"><a href="#第十一章、关于系统" class="headerlink" title="第十一章、关于系统"></a>第十一章、关于系统</h2><ul>
<li>软件系统应将起始过程与之后的运行时逻辑分离开。    就比如我做一个玩家信息面板，在起始过程，需要创建很多Text、Image来存储玩家一些状态信息及玩家的形象。    但是，我用这个界面的时候，只需要改动里面的值、或者切换形象。<br>这时，就可以有两个函数，init来负责起始过程的创建；refresh来负责更新玩家的状态。（当然不能把所有具体实现都放在一个函数里，每个函数负责一个小模块是必要的）</li>
<li>软件系统与物理系统可以类比，它们的架构都可以递增式地增长，只要我们持续将关注面恰当的切分。</li>
<li>最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯Java(或其他语言）对象实现。不同领域之间用最不具有亲还行的方面或类方面工具整合起来。</li>
</ul>
<p><br></p>
<h2 id="第十二章、关于迭代"><a href="#第十二章、关于迭代" class="headerlink" title="第十二章、关于迭代"></a>第十二章、关于迭代</h2><ul>
<li>Kent Beck关于简单设计的四条规则    <ul>
<li>运行所有测试    </li>
<li>不可重复    </li>
<li>表达了程序员的意图    </li>
<li>尽可能减少类和方法的数量<br>以上规则按其重要程度排列</li>
</ul>
</li>
<li>遵循有关编写测试并持续运行测试的简单、明确的规则，系统就会更贴近OO低耦合度、高内聚度的目标。编写测试引致更好的设计。</li>
<li>测试消除了对清理代码就会破坏代码的恐惧，所以可以放心的去重构。</li>
<li>重复是良好系统设计的大敌，它代表着额外工作、额外风险和额外且不必要的复杂度。</li>
<li>增强表达力方法：    <ul>
<li>选用好的名称    </li>
<li>保持函数和类的尺寸短小    </li>
<li>采用标准命名法    </li>
<li>编写良好的单元测试    </li>
<li>最重要的就是去尝试去做</li>
</ul>
</li>
<li>尽可能减少类和方法的数量，这条规则优先级是最低的，要让步于测试、消除重复和增强表达力。</li>
</ul>
<p><br></p>
<h2 id="第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）"><a href="#第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）" class="headerlink" title="第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）"></a>第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）</h2><ul>
<li>并发是一种解耦策略，它将<strong>目的</strong>和<strong>时机</strong>分解开，而在单线程中，两者紧密耦合。</li>
<li>解耦目的与时机可以显著的改进程序的<strong>吞吐量</strong>和<strong>结构</strong></li>
<li>一些迷思与误解    <ul>
<li>并发总能改进系能。    并发有时能改进性能，但只在多个线程或处理器之间能分享大量等待时间的时候管用。    </li>
<li>编写并发程序无需修改设计。    并发算法的设计有可能与单线程系统的设计极不相同，解耦目的与时机往往对系统结构产生巨大的影响。    </li>
<li>在采用Web或EJB容器的时候，理解并发问题并不重要。    只有了解容器的运作，才可以对其产生的并发问题更好的解决。</li>
</ul>
</li>
<li>关于并发编程的中肯理解    <ul>
<li>并发会在性能和编写额外代码上增加一些开销    </li>
<li>正确的并发是复杂的，即便对于简单的问题也是如此<br>-并发缺陷并非总能重现，所以常被看做偶发事件而忽略，未被当做真的缺陷看待   </li>
<li>并发常常需要对设计策略的根本性修改</li>
</ul>
</li>
<li>防御并发代码问题的原则与技巧    <ul>
<li>单一权责原则（SRP)<br>分离并发相关代码与其他代码    </li>
<li>限制数据作用域<br>谨记数据封装，严格限制对可能被共享的数据的访问    </li>
<li>使用数据复本    从多个线程收集所有复本的结果，并在单个线程中合并这些结果    </li>
<li>线程应尽可能的独立    尝试将数据分解到可被独立线程（可能在不同的处理器上）操作的独立子集</li>
</ul>
</li>
<li>一些基础定义    <ul>
<li>限定资源<br>并发环境中有着固定尺寸或数量的资源。    </li>
<li>互斥<br>每一时刻仅有一个线程能访问共享数据或共享资源。    </li>
<li>线程饥饿<br>一个或一组线程在很长时间内或永久被禁止。    </li>
<li>死锁<br>两个或多个线程互相等待执行结束。    </li>
<li>活锁<br>执行次序一致的线程，每个都想要起步，但发现其他线程已开始。</li>
</ul>
</li>
<li>一些执行模型    <ul>
<li>生产者-消费者模型<br>一个或多个生产者线程创建某些工作，并置于缓存或队列中。一个或多个消费者线程从队列中获取并完成这些工作。生产者和消费者之间的队列是一种限定资源。    </li>
<li>读者-作者模型<br>当存在一个主要为读者线程提供信息源，但只偶尔被作者线程更新的共享资源，吞吐量就会是个问题。增加吞吐量，会导致线程饥饿和过时信息的累计。更新会影响吞吐量。协调读者线程，不去读作者线程正在更新的信息（反之亦然），这是一个辛苦的平衡工作。作者线程倾向于长期锁定许多读者线程，从而导致吞吐量问题。    </li>
<li>经典的哲学家    一群哲学家环坐在圆桌旁。每个哲学家的左手边放了一把叉子。桌面中央摆着一大碗意大利面。每个哲学家在吃饭的时候都要拿起叉子吃饭。但除非手上有两把叉子，否则没法进食。如果左边或右边的哲学家已经取用一把叉子，中间这位就需要等到别人吃完，放回叉子。每位哲学家吃完后，就将两把叉子放回桌面，直到下次吃饭。</li>
</ul>
</li>
<li>避免使用一个共享对象的多个方法。当不得不使用时，写代码需要注意的方法。    <ul>
<li>基于客户端的锁定<br>客户端代码在调用第一个方法前锁定服务端，确保锁的范围覆盖了调用最后一个方法的代码。    </li>
<li>基于服务端的锁定<br>在服务端创建锁定服务端的方法，调用所有方法，然后解锁。让客户端调用新方法。    </li>
<li>适配服务端<br>创建执行锁定的中间层。这是一种基于服务端锁定的例子，但不修改原始服务端代码。</li>
</ul>
</li>
<li>尽可能减小同步区域</li>
<li>尽早考虑关闭问题，尽早令其工作正常</li>
<li>编写测试，测试线程代码<br>关于测试代码的建议    <ul>
<li>将伪失败看做可能的线程问题    </li>
<li>先使非线程代码可工作    </li>
<li>编写可插拔的线程代码    </li>
<li>编写可调整的线程代码    </li>
<li>运行多于处理器数量的线程    </li>
<li>在不同平台上运行    </li>
<li>调整代码并强迫错误发生</li>
</ul>
</li>
</ul>
<p><br></p>
<h2 id="第十四章、关于逐步改进"><a href="#第十四章、关于逐步改进" class="headerlink" title="第十四章、关于逐步改进"></a>第十四章、关于逐步改进</h2><ul>
<li>要编写整洁代码，必须先写肮脏代码，然后清理它。<br>所以，不要害怕写的肮脏，只要去清理，就可以写出整洁的代码。<br>但是，一定要去<strong>清理它</strong>！</li>
<li>在改进程序过程中，要保持系统始终可以运行</li>
<li>进度可以重订，需求可以重新定义，团队动态可以修正，但糟糕的代码只是一直腐败发酵，无情的拖后腿</li>
</ul>
<p><br></p>
<h2 id="第十七章、味道与启发"><a href="#第十七章、味道与启发" class="headerlink" title="第十七章、味道与启发"></a>第十七章、味道与启发</h2><ul>
<li>注释    <ul>
<li>不恰当的信息<br>让注释传达本该更好地在源代码控制系统、问题追踪系统或任何其他记录系统中保存的信息，是不恰当的。    </li>
<li>废弃的注释<br>过时、无关或不正确的注释就是废弃的注释。    </li>
<li>冗余注释<br>如果描述的是某种充分自我描述了的东西，那么注释就是多余的。    </li>
<li>糟糕的注释<br>值得编写的注释，也值得好好写。不要画蛇添足，要保持整洁。    </li>
<li>注释掉的代码<br>看到注释掉的代码，就删除它！<br>源代码控制系统还会记得他，让注释的人回去找。<br>什么？不用源代码控制系统？<br>好吧，你已经不需要读这本书了。</li>
</ul>
</li>
<li>环境    <ul>
<li>需要多步才能实现的构建<br>构建系统应该是单步的小操作。<br>不应该从源代码控制系统中一点点签出代码；<br>不应该需要一系列神秘指令或环境依赖脚本来构建单个元素；<br>不应该四处寻找额外小JAR、XML文件和其他杂物；<br>应该能用单个命令签出系统，并用单个指令构建它。    </li>
<li>需要多步才能做到的测试<br>应该能发出单个指令就可以运行全部单元测试。</li>
</ul>
</li>
<li>函数    <ul>
<li>过多的参数<br>函数的参数量应该少，三个以上绝对不可容忍。    </li>
<li>输出参数<br>输出参数违反直觉，读者期望参数用于输入而非输出。    </li>
<li>标识参数<br>布尔值参数等同于宣告该函数做了不知一件事，应该消灭。    </li>
<li>死函数<br>永不被调用的方法应该被丢弃。<br>不要怕删除，源代码控制系统会帮你记住它。</li>
</ul>
</li>
<li><p>一般性问题    </p>
<ul>
<li>一个源文件中存在多种语言<br>理想的源文件包括且只包括一种语言，<br>现实中，应该尽力减少源文件中额外语言的数量和范围。    </li>
<li>明显的行为未被实现<br>遵循”最小惊异原则”，函数或类应该实现其他程序员有理由期待的行为。    </li>
<li>不正确的边界行为<br>不要让代码只是能工作，应该追索每种边界条件，并编写测试。    </li>
<li>忽视安全<br>关闭某些编译器警告，可能有助于构建；但更存在无穷无尽的调试风险。    </li>
<li>重复<br>本书最重要的规则之一<br>尽可能找到并消除重复。    </li>
<li>在错误的抽象层级上的代码<br>创建分离较高层级一般性概念与较低层级细节概念的抽象模型。    </li>
<li>基类依赖于派生类<br>将概念分解到基类和派生类的最普遍的原因是较高层级基类概念可以不依赖于较低层级派生类概念。    </li>
<li>信息过多<br>设计良好的模块有着非常小的接口，让你事半功倍。<br>设计低劣的模块有着广阔、深入的接口，让你事倍功半。<br>设计良好的接口并不提供许多需要依靠的函数，所以耦合度也较低。<br>设计低劣的接口提供大量必须调用的函数，耦合度较高。    </li>
<li><p>死代码<br>死代码就是不执行的代码，可以在        </p>
<ul>
<li>不会发生的条件语句中        </li>
<li>从不抛出异常的try语句的catch块中        </li>
<li>在永久不会发生的switch/case条件中 </li>
</ul>
<p>找到这些代码。<br>然后，埋葬它！    </p>
</li>
<li>垂直分隔<br>变量和函数应该在被靠近使用的地方定义。<br>私有函数应该刚好在其首次被使用的位置下面定义。    </li>
<li>前后不一致<br>最小惊异原则，小心选择约定，一旦选中，就应该持续的遵循。    </li>
<li>使用解释性变量名、函数名、类名    </li>
<li>把逻辑依赖改为物理依赖<br>依赖者模块不应对被依赖者模块有假定，应该明确的询问候着全部信息。    </li>
<li>用多态替代 if/else 或 switch/case    </li>
<li>用命名常量替代魔术数    </li>
<li>封装条件、边界    </li>
<li>函数只做一件事</li>
</ul>
</li>
<li>关于类    <ul>
<li>import package.*;  比80行的导入语句好看多了     </li>
<li>不要继承常量</li>
</ul>
</li>
<li>名称    <ul>
<li>采用描述性的名称    </li>
<li>名称应与抽象层级相符    </li>
<li>尽可能用标准命名法    </li>
<li>无歧义的名称    </li>
<li>为较大作用范围选用较长名称    </li>
<li>避免编码    </li>
<li>名称应该说明副作用</li>
</ul>
</li>
<li>测试    <ul>
<li>多测试    </li>
<li>使用覆盖率工具    </li>
<li>别略过小测试    </li>
<li>被忽略的测试就是对不确定事物的疑问    </li>
<li>测试边界条件    </li>
<li>全面测试相近的缺陷    </li>
<li>测试应该快速</li>
</ul>
</li>
</ul>
<p><br><br><br></p>
<h1 id="本书总结"><a href="#本书总结" class="headerlink" title="本书总结"></a>本书总结</h1><p>终于把这本书啃完了。<br>虽然作者比较啰嗦点，但是收获还是很大的。<br>书中提到的，有些已经做到了；<br>但有些不仅没做到，还是反面教材。<br>多规范一下自己的代码，毕竟对于我们来说，代码的清晰度、整洁度还是很重要的。<br>代码总要给别人看的，不要让自己的代码羞以示人。</p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《天才在左, 疯子在右》读记</title>
    <url>/2017/07/30/%E3%80%8A%E5%A4%A9%E6%89%8D%E5%9C%A8%E5%B7%A6%EF%BC%8C%E7%96%AF%E5%AD%90%E5%9C%A8%E5%8F%B3%E3%80%8B%E8%AF%BB%E8%AE%B0/</url>
    <content><![CDATA[<p>想看到真正的世界，<br>就要<br>用天的眼睛去看天，<br>用云的眼睛去看云，<br>用风的眼睛去看风，<br>用花草树木的眼睛去看花草树木，<br>用石头的眼睛看石头，<br>用大海的眼睛去看大海，<br>用动物的眼睛去看动物，<br>用人的眼睛去看人。 </p>
<a id="more"></a>
<p><br></p>
<h1 id="读感"><a href="#读感" class="headerlink" title="读感"></a>读感</h1><p>最早看到这本书，是在亚马逊2016年度畅销榜单中。<br>然后看了下简介，是介绍作者接触采访”非常态人群”，整理出来的。<br>看完介绍，就感觉，应该会有点意思，然后读了这本书；<br>结果，没用了三天，就读完了(上下班路上及午休间隙)。</p>
<p>在阅读这本书期间，及刚读完的时候，感觉真的很棒，非常棒。<br>但是，过了一段时间再审视一下，感觉有些怪。<br>在阅读的过程中，越看越像小说一般，每一章精彩绝伦，引人入胜。<br>或许是为了发行，作者对采访内容有修饰；或许是作者发挥过多，导致文章少了些真实。</p>
<p>再说说，里面的一些章节，<br>给我印象最深的一个是[大风]，尤其最后那一句 ———— 如果那是只有灵魂才能感受到的大风…<br>读完这一句，头皮都有点发麻了。</p>
<p>最后，这本书，<br>给我感觉还是观点与想象的结合，<br>观点依旧是它们的观点，<br>但，内容和文章，就不一定有这么的…</p>
<p><br><br><br></p>
<h1 id="文中片段"><a href="#文中片段" class="headerlink" title="文中片段"></a>文中片段</h1><p>跨越时间地看，我们是一个很长很长的虫子怪物，从床上延伸到大街上，延伸到学校，延伸到公司，延伸到商场，延伸到好多地方。因为我们的动作在每个时间段都是不同的，所以跨越时间来看，我们都是一条条虫子。从某一个时间段开始，到某一个时间段结束。<br>———— [四维虫子]</p>
<p><br></p>
<p>指尖的戒指不再闪亮<br>婚纱在衣柜早已尘封<br>我们的容颜都已慢慢地苍老<br>但那份心情，却依旧没有改变<br>感谢你带给我的每一天<br>正是因为你<br>我才有勇气说<br>“永远, 永远”<br>———— [永远, 永远]</p>
<p><br></p>
<p>想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛看石头，用大海的眼睛去看大海，用动物的眼睛去看动物，用人的眼睛去看人。<br>———— [真正的世界]</p>
<p><br></p>
<p>每当我想起这位患者，除了那些离奇的偷取时间者，好像还能看到她认真吃东西的样子——我从未见过有人那么认真的吃东西。每一口，每一次都是那么谨慎仔细的态度，仿佛整个世界都不存在了，存在的只是自己和手中的那条巧克力，以及嘴里那慢慢融化的味道。<br>———— [偷取时间]</p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《我们仨》读记</title>
    <url>/2017/05/30/%E3%80%8A%E6%88%91%E4%BB%AC%E4%BB%A8%E3%80%8B%E8%AF%BB%E8%AE%B0/</url>
    <content><![CDATA[<p>很多东西，想做，能做，却又做不到。</p>
<a id="more"></a>
<p><br></p>
<p>这本书，本来是为了给女朋友培养读书兴趣而买的。<br>但是，发现，好像不是她的菜（虽然，她磕磕绊绊的也读完了）。<br>我也就每天临睡前读一些，慢慢也读完了。</p>
<p><br></p>
<p>《我们仨》是杨绛老师在失去自己唯一女儿与丈夫后，写的一篇回忆录。<br>总共三部分：</p>
<ul>
<li>我们俩老了</li>
<li>我们仨失散了</li>
<li>我一个人思念我们仨<br>前两部分，用一个”万里长梦”来委婉的表达自己所经历的这些。<br>最后一部分，回忆这些年来的一切。</li>
</ul>
<p><br></p>
<p>每次拿起这本书，再浮躁的心都会平静下来，慢慢的看，慢慢的感受，慢慢的品。<br>其实我对这一家并没有多少了解，只是隐约记得她们的名气很大。<br>通过这本书，感受到的就是一个老人，仔细的，缓慢的回忆这一切；所用的文字、语句没有过于粉饰，很朴素，很淡然；所写的情节，详则多叙，略则少言，不空洞，很流畅。<br>有几段文字，我挺喜欢的：</p>
<ol>
<li><p>我疑疑惑惑地在古驿道上一脚一脚走。柳树一年四季变化最勤。秋风刚刚一吹，柳叶就开始黄落，随着一阵一阵风，落下一批又一批叶子，冬天都变成光秃秃的寒柳。春风还没有吹，柳条上已经发芽，远看着已有绿意；柳树在春风里，就飘荡着嫩绿的长条。然后蒙蒙飞絮，要飞上一两个月。飞絮还没有飞完，柳树都已绿叶成荫。然后又一片片黄落，又变成光秃秃的寒柳。我在古驿道上，一脚一脚的，走了一年多。</p>
</li>
<li><p>看动物吃东西很有趣，狮子喂肉之前，得把同笼的分开，因为狮子见了肉就不顾夫妻情分。猪类动物吃花生，连皮带壳；熊吐出壳带皮吃；猴子剥了壳还捻去皮。可是大象食肠粗，饲养员喂大象，大团的粮食、整只的苹果、整条的萝卜、连皮的香蕉，都一口吞之。可是它自己进食却很精细；吃稻草，先从大捆稻草中拈出一小束，拍打干净，筑筑整齐，才送入口中。我们断不定最聪明的是灵活的猴子还是笨重的大象。我们爱大象。</p>
</li>
</ol>
<p><br></p>
<p>最喜欢的还有书前后的书信，现在都是微信QQ的时代，看到这些书信，真的别有一番风趣。</p>
<p><br></p>
<p>“我们仨其实是最平凡不过的。我们这个家，很朴素；我们三个人，很单纯。我们与世无求，与人无争，只求相聚在一起，相守在一起，各自做力所能及的事。”<br>但是，这种最朴素最平凡的家，也是最令人羡慕的。<br>即使，想去做，并且能做到，却又做不到的。</p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《掌控习惯》 读记</title>
    <url>/2020/06/26/%E3%80%8A%E6%8E%8C%E6%8E%A7%E4%B9%A0%E6%83%AF%E3%80%8B%E8%AF%BB%E8%AE%B0/</url>
    <content><![CDATA[<p>欲望负责点火，快乐保持烈火持续燃烧。想要和喜欢是行为的两大驱动力。</p>
<a id="more"></a>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="读感"><a href="#读感" class="headerlink" title="读感"></a>读感</h1><p>习惯的力量是很大的，这本书介绍如何掌控这个力量。</p>
<p>首先，培养习惯的四步模型： 提示 -&gt; 渴求 -&gt; 反应 -&gt; 奖励。</p>
<p>提示触发渴求，渴求激发反应，而反应则提供满足渴求的奖励，并最终与提示相关联。这四个步骤一起形成了一个神经反馈回路，并最终养成自然而然的习惯，由此构成完整的习惯循环。</p>
<p>培养习惯，不仅是定制一个目标，更应该专注于落实行动。拆解行动为很小的可行单元，保证频率而非时长，不断练习。</p>
<p>培养习惯的简单法则：</p>
<ul>
<li>让它显而易见<ul>
<li>让想养成习惯的提示显而易见，让想戒除习惯的坏处提示显而易见</li>
</ul>
</li>
<li>让它有吸引力<ul>
<li>人脑进化为优先考虑即时奖励而不是延迟奖励</li>
</ul>
</li>
<li>让它简便易行<ul>
<li>两分钟原则：开始培养一种新习惯时，它所用时间不应超过两分钟</li>
<li>注重环境培养</li>
</ul>
</li>
<li>让它令人愉悦<ul>
<li>无论是针对想养成的习惯还是想戒除的习惯，都可以从好处与坏处两方面下手</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="读记"><a href="#读记" class="headerlink" title="读记"></a>读记</h1><p>习惯是一种固定程序或定期实施的行为，且在许多情况下，是自动执行的</p>
<p>培养习惯的四步模型：</p>
<ul>
<li>提示</li>
<li>渴求</li>
<li>反应</li>
<li>奖励</li>
</ul>
<h2 id="微习惯的惊人力量"><a href="#微习惯的惊人力量" class="headerlink" title="微习惯的惊人力量"></a>微习惯的惊人力量</h2><ul>
<li>“边际收益的聚合”战略，其基本理念就是在所做的每一件事上寻求哪怕是极细微的进步</li>
<li>习惯是自我提高的复利</li>
<li>得到的结果是衡量习惯的滞后指标；净资产是衡量财务习惯的滞后指标；体重是衡量饮食习惯的滞后指标；生活环境的杂乱是衡量整理内务习惯的滞后指标。所得到的就是日复一日、年复一年积行成习的结果</li>
<li>忘记目标，专注于体系<ul>
<li>不代表目标完全无用。目标的意义在于确定大方向，但体系会促进你的进步。加入你为目标绞尽脑汁，却对体系设计关注不足的话，就会出现一些问题</li>
<li>当爱上过程而不是结果时，不必等待容许自己享受快乐的那一刻的到来。只要创建的体系在正常运行，就会在整个过程中感受到快乐。一个体系取得成功的方式有多种，而不仅仅是最初想象的那一种</li>
</ul>
</li>
<li><strong>如果想要更好的结果，就不要再追求设定或拔高目标，转而全力落实体系</strong></li>
</ul>
<h2 id="习惯如何塑造身份（反之亦然）"><a href="#习惯如何塑造身份（反之亦然）" class="headerlink" title="习惯如何塑造身份（反之亦然）"></a>习惯如何塑造身份（反之亦然）</h2><ul>
<li>改变习惯之举颇具挑战性，在于：<ul>
<li>没有找对试图改变的东西</li>
<li>试图以错误的方式改变习惯</li>
</ul>
</li>
<li>内在激励的终极形式是习惯与身份融为一体。说我是想要这样的那种人是一回事，而说我本身就是这种人则是另外一回事</li>
<li>改变身份的两步进程：<ol>
<li>决定想成为哪类人</li>
<li>用小赢证明给自己看</li>
</ol>
</li>
<li>变化有三个层次：结果变化、过程变化、身份变化<ul>
<li>改变习惯的最有效方法不是关注想要达到的目标，而是想要成为谁</li>
<li>身份来自习惯，每个行动都是在投票给想成为人</li>
<li>想要做到最好，需要持续编辑信念，升级和扩展身份</li>
<li>习惯至关重要的真正原因不是因为它们能带来更好的结果（尽管它们能做到这一点），而是因为它们能改变对自己抱有的信念</li>
</ul>
</li>
</ul>
<h2 id="培养良好习惯的方法"><a href="#培养良好习惯的方法" class="headerlink" title="培养良好习惯的方法"></a>培养良好习惯的方法</h2><ul>
<li>动物的学习过程：<strong>导致结果满意的行为往往会得以重复，而产生不愉快结果的行为得以重复的概率较低</strong></li>
<li>只有让生活的基本要素变得更容易，才能创造自由思考和创造力所需的精神空间</li>
<li>总的来说，提示触发渴求，渴求激发反应，而反应则提供满足渴求的奖励，并最终与提示相关联。这四个步骤一起形成了一个神经反馈回路，并最终养成自然而然的习惯，由此构成完整的习惯循环</li>
<li>如果设定的每个目标都违背人性，那注定会失败</li>
<li>习惯是一种行为，因为重复的次数已经足够多，便可以自然而然的出现</li>
<li>习惯的最终目的是用尽可能少的精力和努力来解决生活中的问题</li>
<li><strong>培养良好习惯的简单规则</strong><ul>
<li><strong>让它显而易见</strong></li>
<li><strong>让它有吸引力</strong></li>
<li><strong>让它简便易行</strong></li>
<li><strong>让它令人愉悦</strong></li>
</ul>
</li>
</ul>
<h2 id="看着不对劲儿的那个人"><a href="#看着不对劲儿的那个人" class="headerlink" title="看着不对劲儿的那个人"></a>看着不对劲儿的那个人</h2><ul>
<li>有了足够的联系，你的大脑会不假思索地拾取预测特定结果的提示</li>
<li>改掉不良习惯的第一步是对它们保持警觉</li>
<li>习惯叠加是一种策略，可以用来将新习惯与当前习惯整合</li>
<li>习惯叠加的公式是：继[当前习惯]之后，我将进行[新习惯]</li>
</ul>
<h2 id="原动力被高估，环境往往更重要"><a href="#原动力被高估，环境往往更重要" class="headerlink" title="原动力被高估，环境往往更重要"></a>原动力被高估，环境往往更重要</h2><ul>
<li>环境是塑造人类行为的无形之手。尽管我们有独特的个性，但在特定环境条件下，某些行为往往会反复出现</li>
<li>我们喜欢认为一切尽在自己掌控之中。事实上，<strong>每天采取的许多行动并不是由有目的的驱动和选择决定的，而是因为最得心应手</strong></li>
<li>每个习惯都是由提示引发的，我们更有可能注意到显眼的提示</li>
<li>如果想让习惯成为生活中的重要组成部分，就让提示成为生活环境中的重要组成部分</li>
<li>让习惯不再与单一的触发因素相关联，而是与这种行为周围的整个环境相关联。情境变成了提示</li>
<li>在新的环境中培养新的习惯更容易，因为不会受到旧习惯相关联的提示的干扰</li>
</ul>
<h2 id="自我控制的秘密"><a href="#自我控制的秘密" class="headerlink" title="自我控制的秘密"></a>自我控制的秘密</h2><ul>
<li>自我控制能力强的人通常最不需要它。加入不需要经常自我克制的话，做起来就会更容易。所以，毅力、勇气和意志力是取得成功的要素，但是增强这些品质的途径不是期望成为一个自律的人，而是创造一个有纪律的环境</li>
<li>更可靠的方法是从源头上改掉坏习惯。消除坏习惯最实用的方法之一是避免接触引起它的提示</li>
<li>自我控制只是权宜之计，而非长远良策。也许能抵抗一两次诱惑，但是不可能每次都能铆足了劲儿，克服强烈的欲望。与其每当想正确行事时要诉诸新的意志力，不如把精力花在优化所处的环境上。这就是自我控制的奥秘，<strong>让良好习惯的提示显而易见，让不良习惯的提示脱离视线</strong></li>
</ul>
<h2 id="让习惯不可抗拒"><a href="#让习惯不可抗拒" class="headerlink" title="让习惯不可抗拒"></a>让习惯不可抗拒</h2><ul>
<li>所有习惯共有的生物特征指标：多巴胺浓度</li>
<li>机会越有吸引力，养成习惯的可能性就越大</li>
<li>正是对奖励的期待，而不是奖励本身，促使我们采取行动。预期越高，多巴胺峰值越大</li>
<li>喜好绑定是让习惯更具吸引力的一种方式。具体做法就是将你喜欢的高频动作与需要的低频动作搭配在一起</li>
</ul>
<h2 id="习惯形成中亲友所起的作用"><a href="#习惯形成中亲友所起的作用" class="headerlink" title="习惯形成中亲友所起的作用"></a>习惯形成中亲友所起的作用</h2><ul>
<li>我们尤其注重模仿三个群体的习惯：<ul>
<li>亲近的人</li>
<li>群体中的多数人</li>
<li>有权势的人</li>
</ul>
</li>
<li>培养好习惯最有效的方式之一是加入一种文化，在这种文化中，所偏爱的行为被认定为是正常行为。当看到别人每天都这样做时，会觉得培养新习惯似乎不难。</li>
<li>每个群体都对其成员施加巨大压力，要求他们服从集体规范。与在争论中占上风、显得自己很聪明或凡事都追根究底相比，个体被集体接受的好处肯定更多。<strong>大多数时候，我们宁愿跟众人一起犯错，也不愿特立独行坚持真理</strong></li>
</ul>
<h2 id="渴望来自哪里"><a href="#渴望来自哪里" class="headerlink" title="渴望来自哪里"></a>渴望来自哪里</h2><ul>
<li>有许多不同的方法来满足相同的潜在动机。一个人可能会通过吸烟来缓解情绪。另一个人通过跑步减轻焦虑。你目前的习惯不一定是解决面临问题的最佳方式；它们只是掌握的方法。一旦把一个解决方案和所需要解决的问题联系起来，就会不断地反复加以应用</li>
<li>每种行为都有表层的渴求和更深层的动机</li>
<li>习惯的原因实际上是之前的预测，这种预测会产生一种感觉</li>
<li>强调避免坏习惯所带来的好处，让坏习惯不再有吸引力</li>
<li>将习惯与积极的感受相关联，习惯就有了吸引力；反之，则没有吸引力。在开始培养难度较大的习惯之前，先做些喜欢的事情来创造一种激励仪式</li>
</ul>
<h2 id="慢步前行，但绝不后退"><a href="#慢步前行，但绝不后退" class="headerlink" title="慢步前行，但绝不后退"></a>慢步前行，但绝不后退</h2><ul>
<li>酝酿与行动的区别。酝酿意味着在计划、策划和学习；这些都是好东西，但它们不会产生结果</li>
<li>如果想要掌握一种习惯，关键是从重复开始，无须力求完美，不必描画出新习惯的每一个特征，只需要不断练习，只需要关注次数</li>
<li><strong>习惯是基于频率而不是时长形成的</strong></li>
</ul>
<h2 id="最省力法则"><a href="#最省力法则" class="headerlink" title="最省力法则"></a>最省力法则</h2><ul>
<li><strong>传统智慧认为动机是习惯转变的关键。也许真是这样，就是说假如真的想要，就真的会去做。但事实是，我们真正的动机是贪图安逸，怎么省事就怎么做</strong></li>
<li>图省事才是一个聪明而非愚蠢的策略</li>
<li>习惯坚持起来越难——你和你想要的的最终状态之间的阻力就越大。这就是为什么要让习惯变得简单至极，只有这样才能让你即使不喜欢它，也会坚持做。如果能让好习惯简便易行，就越有可能坚持下去</li>
<li>简便易行的说法不仅仅是做容易的事，主旨是尽可能确保可以毫不费力地去做具有长期回报的事</li>
</ul>
<h2 id="怎样利用两分钟规则停止拖延"><a href="#怎样利用两分钟规则停止拖延" class="headerlink" title="怎样利用两分钟规则停止拖延"></a>怎样利用两分钟规则停止拖延</h2><ul>
<li>不要指望从一开始就培养一种完美的习惯，要脚踏实地，连续不断地做些简单的事。必须先标准化，然后才能优化</li>
<li>习惯可以在几秒钟内完成，但会持续影响接下来几分钟或几个小时的行为</li>
<li>许多习惯发生在决定性时刻，每时每刻的选择就像岔路口，你的选择最终会导致卓有成效或一事无成的一天</li>
<li><strong>两分钟规则制定：当你开始培养一种新习惯时，它所用时间不应超过两分钟</strong></li>
</ul>
<h2 id="行为转变的基本准则"><a href="#行为转变的基本准则" class="headerlink" title="行为转变的基本准则"></a>行为转变的基本准则</h2><ul>
<li>在训练延迟满足的过程中，凡是长远地看能带给你回报的事，你可以给它添加一点即时快乐；凡是不能的，可以添加一点即时痛苦</li>
<li><strong>人脑进化为优先考虑即时奖励而不是延迟奖励</strong></li>
<li>行为转变的基本准则：重复有即时回报的行为，避免受即时惩罚的动作</li>
</ul>
<h2 id="怎样保持你的习惯"><a href="#怎样保持你的习惯" class="headerlink" title="怎样保持你的习惯"></a>怎样保持你的习惯</h2><ul>
<li>习惯追踪具有三方面的功效：<ul>
<li>创建视觉提示，提醒你采取行动</li>
<li>内在激励机制，因为你清楚地看到了你的进步轨迹，并且不想失去它</li>
<li>当记录下又一项成功的习惯实例时，你都会享受到满足感</li>
</ul>
</li>
<li><strong>只要有可能，测量应该自动化</strong></li>
<li>习惯叠加+习惯追踪的方式是：在[当前习惯之后]，我将[追踪我的习惯]</li>
<li><strong>绝不错过习惯两次</strong>。如果错过了一天，试着尽快恢复固有的做事节奏</li>
</ul>
<h2 id="揭秘天才"><a href="#揭秘天才" class="headerlink" title="揭秘天才"></a>揭秘天才</h2><ul>
<li>最大化成功概率的秘诀是选择合适的经济领域，这适用于体育和商业，同样也适用于习惯的转变。如果习惯与天性和能力一致，它更容易培养，你也更乐意保持</li>
<li>接受并承认一个事实：<strong>人天生具有不同的能力</strong></li>
<li>基因不容易改变，这意味着它们在有利的环境中提供了强大的优势，但在不利的环境中又暴露出严重的劣势</li>
<li>你是否适合一项任务的标志不在于你是否喜欢它，而在于你是否能比大多数人更容易承受这项任务带来的痛苦。当别人觉得痛苦不堪时，你却能自得其乐？伤害别人多于伤害你的事，就是你生来就适合做的事</li>
<li>习惯选择正确，进步易如反掌；习惯选择错误，生活步步维艰</li>
</ul>
<h2 id="金发女孩准则：如何在生活和工作中保持充沛动力"><a href="#金发女孩准则：如何在生活和工作中保持充沛动力" class="headerlink" title="金发女孩准则：如何在生活和工作中保持充沛动力"></a>金发女孩准则：如何在生活和工作中保持充沛动力</h2><ul>
<li>大家公认保持动力和达到欲望的途径之一，就是去做：难易程度刚刚好的事</li>
<li><strong>人们在处理其能力可及的事务时积极性最高</strong></li>
</ul>
<h2 id="培养好习惯的负面影响"><a href="#培养好习惯的负面影响" class="headerlink" title="培养好习惯的负面影响"></a>培养好习惯的负面影响</h2><ul>
<li>习惯动作 + 刻意练习 = 精通</li>
<li>反思和回顾有助于长期改善所有习惯，因为它让你认清自己的不足，并帮助你考虑可能的改善途径。没有反思，我们会为自己的行为寻找理由、借口，进行自我欺骗。我们会因缺乏这样一种程序而无法确定与以往相比表现的更好还是更差</li>
<li>缺乏自我意识是毒药，反思和回顾是解药</li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li>致力于微小、可持续、不懈的改进</li>
<li>好奇心总比头脑灵活好。积极性和好奇心比头脑灵活更重要，因为前者会导致行动。头脑灵活永远不会独自产生结果，因为它不会让你采取行动。促使行为的是欲望，而不是智力。<strong>做任何事情的诀窍是首先培养对它的渴望</strong></li>
<li>满意 = 喜欢 - 想要</li>
<li>欲望负责点火，快乐保持烈火持续燃烧。想要和喜欢是行为的两大驱动力。</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《时间简史》读感</title>
    <url>/2017/03/14/%E3%80%8A%E6%97%B6%E9%97%B4%E7%AE%80%E5%8F%B2%E3%80%8B%E8%AF%BB%E6%84%9F/</url>
    <content><![CDATA[<p>《时间简史》 读感</p>
<p>如果不进行外加干涉,事物总是倾向于增加它的无序度。</p>
<a id="more"></a>
<p><br></p>
<p>这段时间，读了一下霍金的《时间简史》。<br>这本书把我带入了一个新的世界的感觉。<br>前半段，带我温习了一下高中及大学的物理（PS：这里好想吐槽，之前学物理，就是告诉你一个定理、公式，去背去做题，根本不去想为什么，或许，这就是我学的那么吃力的原因吧。）<br>后面，直接就是之前没有接触过的，几乎没有认知的领域了。</p>
<p><br></p>
<p>给我印象最深刻的几个部分：</p>
<ol>
<li>CPT守恒。通过P守恒、CP守恒到CPT守恒，可以拓展到很多东西。</li>
<li>时间箭头。热力学时间箭头、心理学时间箭头、宇宙学时间箭头。尤其是热力学时间箭头，就是由有序到无序的过程，熵在不断增加的过程。</li>
<li>时空维度。曾经我一度困扰，四维空间以上的五维空间是什么样子呢？后来才知道，说四维空间，好像不是很合适，应该是三维+一维，三个空间维度加一个时间维度。<br>然后，剩下的维度是我们之上，还是我们之下呢？（也就是说我们在五维空间内，还是四维就包含了五维呢？）反正，根据M理论，宇宙由三维可见空间维+一维时间维+七维不可见空间维构成。</li>
<li>不确定性原理。人们永远不能同时准确知道粒子的位置和速度；对其中一个知道的越精确，则对另一个就知道的越不准确。</li>
<li>人择原理。我们之所以看到宇宙是这个样子，只是因为如果它不是这样，我们就不会在这里去观察它。</li>
</ol>
<p><br></p>
<p>这本书看完以后，真如醍醐灌顶。<br>理顺了之前既得已知的知识，扩展了后面的知识，虽然，没有细究（也不必细究），但是有了一个了解。<br>对于物之上，物之下，更深层的了解，开拓了视野。</p>
<p><br></p>
<p>最后，<br>在相对论中并没有一个唯一的绝对时间，<br>每个人都有自己的时间测度，这依赖于他在何处并如何运动。<br>与自己最相近的，应该是反我（任何粒子都有会和它湮灭的反粒子,也可能存在由反粒子构成的整个反世界和反人）<br>然而，如果你遇到了反自身，注意不要握手！<br>否则，你们两人都会在一个巨大的闪光中消失殆尽。</p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《生死疲劳》读感</title>
    <url>/2016/07/25/%E3%80%8A%E7%94%9F%E6%AD%BB%E7%96%B2%E5%8A%B3%E3%80%8B%E8%AF%BB%E6%84%9F/</url>
    <content><![CDATA[<p>莫言的《生死疲劳》读感</p>
<a id="more"></a>
<p>经同事推荐，<br>拜读了一下莫言的《生死疲劳》，<br>按他的话：莫言获得诺贝尔文学奖，还是有他独到之处的，应该读一下他的文章。</p>
<p><br></p>
<p>这本书，一是从大局上，中国农村从1950年到2000年间50年的变化，每一次的转世都是代表每个时代的特点，非常有标志性。<br>二是从个人上，带着怨恨的人是无法转世为人的，西门闹那么深的仇怨，也被这一次次的转世磨没了脾性，从刚转世为驴的驴折腾，到最后为蓝千岁时，平静的叙述这一切。<br>其实，不光是主人公西门闹，读者也饱受煎熬，读者也随着西门闹一起，一次次转世，一次次的经历着他所经历的一切。</p>
<p><br></p>
<p>驴、牛、猪、狗 这四个中（猴 和 蓝千岁 的部分太少，主要是这四个），最不甘而且有人性的要属驴，<br>正如其名——驴折腾，可是真能折腾，<br>作为第一个顺序的动物，西门闹的怨恨还是很强的，<br>不爽于自己为驴，不爽于蓝脸为己主，不爽于蓝脸与迎春的结合，等等。<br>但，到了牛这里，牛犟劲，<br>这犟劲的态度，不单指西门闹的不妥协，不服从，<br>也配着蓝脸的单干行为的犟，即使到最后，<br>被一鞭一鞭抽死，也不妥协。<br>转世为猪这部分，则开始天马行空，这部分我读着最费力的部分，<br>一是本书读到这里，已经经历两世，有些疲劳了，<br>二是，这部分有些太扯了，总让我跳戏。<br>转世为狗，已经是一个新的开始了，<br>无论是西门闹，还是读者也快到极限了，<br>所以，狗精神这部分，西门闹已经完全适应了为动物，<br>不像为驴时，还有着人性，其实，在为猪时，他就已经有些忘却自己的人性了。</p>
<p><br></p>
<p>遗憾的是，这本书，有些虎头蛇尾。<br>后面很多东西，都能感觉的出来很仓促，<br>尤其是到猴子和蓝千岁这两部分，跟前面比都少的贫瘠了。<br>还有，最后，这些人死的…<br>让我感觉回到了余华的《活着》的最后部分，<br>只不过，《活着》中，一人一牛，在那田野中耕种着；<br>而《生死疲劳》里，是那蓝千岁在一排长满杂草的墓前唏嘘着。</p>
<p><br></p>
<p>噢，还有一点。<br>本书中，男女关系，有些乱的我头晕…</p>
<p><br></p>
<p>总之，莫先生的文笔还是很强的，那些细节的描写，都不需要多想，就能有幅画面在眼前。<br>有很多，让我想拍大腿叫好的语句。<br>对了，还有，本书内的莫言，是最让我跳戏的东西。</p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《白夜行》 读感</title>
    <url>/2019/01/16/%E3%80%8A%E7%99%BD%E5%A4%9C%E8%A1%8C%E3%80%8B%E8%AF%BB%E6%84%9F/</url>
    <content><![CDATA[<p>“我的天空里没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么亮眼，但对我来说已经足够。凭借着这份光，我便能把黑夜当成白天。我从来就没有太阳，所以不怕失去。”</p>
<a id="more"></a>
<p><br><br><br></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>东野圭吾迄今为止口碑最好的长篇杰作。<br>我读的第一本东野圭吾的书，虽然刚开始很不适应这种类型，然后被大量日本名绕晕；但是，马上就进入了状态；尤其是到后面，几乎一口气读完。<br>这本书讲述了20年前的一个案件引发出的一个惊天故事，中间也穿插了这20年间各个相关角色的不同阶段的故事。<br>书里有着太多太多的东西：各式爱情、各种手段、无法直视的人性，纠缠不清的命运，无法见光的救赎…</p>
<p><br><br><br></p>
<h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>怎么说呢，豆瓣里短评热度最高的是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">看完这本觉得再也不会看东野圭吾了。</span><br><span class="line">							————Asa</span><br></pre></td></tr></table></figure>
<p>当我看完的时候，久久没有合上书，作者留下了太多东西给我去想，去发挥，去思考。<br>然后，我又重重的合上了这本书。<br>————不管如何，一切都已经结束了。</p>
<h3 id="雪穗"><a href="#雪穗" class="headerlink" title="雪穗"></a>雪穗</h3><p>看过这本书的人，必然回想的一个问题 桐原和雪穗 之间，是什么？</p>
<ul>
<li>是爱吗？好像不是。</li>
<li>是亲情吗？好像也不是。</li>
<li>是书中所说互利共生的关系吗？更不像。<br>那这到底是什么呢？</li>
</ul>
<p>我有点以恶度人，是雪穗单纯的利用，利用桐原对他的爱。<br>不仅是之后，所有这一切的受益人都是她，再到之前，为什么死的人是桐原的父亲，真的只是巧合吗？<br>我的依据是：</p>
<pre><code>1. 雪穗的目前西本文代让雪穗从事这个，不是第一次第二次了，为什么会这么异常的到了工厂，而且恰巧被桐原尾随
2. 桐原的幼年和雪穗一样是孤独的，尤其是对家里的事情，此时的友情更显珍贵。
3. 之后对西本文代的处理，也太从容且迅速，完全不像是一个小孩该有的能力，既然她能想到处理文代，那么之前事情也应该能策划到。
</code></pre><p>我是还没有读到最后，就感觉幕后的大BOSS是雪穗，然后读到最后，却又很讶异，作者为何这么处理。表面上直接写她面无表情，写她一次都没回头，但更像是在辩解她对桐原的爱。或许，她也在挣扎，哪怕到最后一刻，依旧在挣扎吧。</p>
<p><br></p>
<h3 id="桐原"><a href="#桐原" class="headerlink" title="桐原"></a>桐原</h3><p>然后，就是对桐原的看法，桐原真的就没有了选择吗？真的就没有发现雪穗对他的真实感觉吗？<br>对雪穗来说，她还有一个替代太阳的东西，但是桐原呢？他一直在黑夜踽踽独行，只有一个点点星光在指引，若隐若现的点点星光。<br>但是，桐原为什么没有放弃，没有退出，而依旧走到最后，并且牺牲自己，达成最终使命了呢？<br>有些路，一旦踏上就没法回头；<br>有些人，一旦爱上就不想后路。</p>
<p><br><br><br></p>
<h1 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h1><h3 id="全书读完，脑子中只剩下这一个片段了"><a href="#全书读完，脑子中只剩下这一个片段了" class="headerlink" title="全书读完，脑子中只剩下这一个片段了"></a>全书读完，脑子中只剩下这一个片段了</h3><p>有东西扎在桐原胸口，由于鲜血涌出难以辨识，但笹垣一看便知。那是桐原视若珍宝的剪刀，那把改变他人生的剪刀！<br>…<br>感觉到有人，笹垣抬起头来。雪穗就站在身边，如雪般白皙的脸庞俯向桐原。<br>“这个人······是谁？”笹垣看着她的眼睛。<br>雪穗像人偶般面无表情。她答道：“我不知道。雇佣临时工都由店长全权负责。”<br>…<br>笹垣脚步蹒跚地走出警察们的圈子。之间雪穗正沿扶梯上楼，她的背影犹如白色的影子。<br>她一次都没有回头。</p>
<p><br><br><br><br><br></p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《能力陷阱》读感</title>
    <url>/2020/05/10/%E3%80%8A%E8%83%BD%E5%8A%9B%E9%99%B7%E9%98%B1%E3%80%8B%E8%AF%BB%E6%84%9F/</url>
    <content><![CDATA[<p>避免能力陷阱</p>
<a id="more"></a>
<p><br><br><br></p>
<h1 id="读因"><a href="#读因" class="headerlink" title="读因"></a>读因</h1><p>为什么读这本书呢？</p>
<p>广义上来说，是看了榜单前列的书籍推荐，没错，就是那种 “2019最畅销的书” 那种榜单。</p>
<p>然后，看到简介：</p>
<ul>
<li>我们很乐于去做那些我们擅长的事，于是就会一直去做，最终就使得我们会一直擅长那些事。做得越多，就越擅长，越擅长就越愿意去做。这样的一个循环能让我们在这方面获得更多的经验，但却容易陷入能力陷阱，在其他方面无法突破。每个人都要特别警惕这种能力陷阱，避免把大量时间花在日常琐事上。如果你想要的获得更多更好的发展，就要从日常琐事中解脱出来，转变到进行更多策略性思考、在日常工作外建立人际关系网络、提升影响力等能够给你持续带来价值的工作上，这样你才能在各领域获得更好的发展。    （《能力陷阱》——埃米尼亚·伊贝拉）</li>
</ul>
<p>以前得到的都是那种：做自己擅长的事，扬长避短的观念。</p>
<p>这本书是提倡，在某方面达到一定阶段后，就可以换个方向继续探索，而不是继续在此钻研，去寻求能带来价值的工作上。</p>
<p>对于对传统秉承的观念看法提出异议的内容，我向来还是比较关注的，时代在变化，很多东西会随着时代变迁而过时，有些会留下来；但并不代表那些是真理，不会过时，除非是那种模棱两可的话术。</p>
<p>我关注这些异议的内容，关注它的针对的观点，关注它反对的内容，关注它适用的场景；就如同看一场辩论会，不可这可不是辩论，是一个新兴观点对传统观点的驳击。</p>
<p>但是也能通过这种特殊的辩论，更清晰的理清双方的观点，适用性，从而去吸收两者的优质内容。</p>
<p><br><br><br><br><br></p>
<h1 id="读感"><a href="#读感" class="headerlink" title="读感"></a>读感</h1><p>这本书，我整体感悟，分为两部分。</p>
<h2 id="避免能力陷阱"><a href="#避免能力陷阱" class="headerlink" title="避免能力陷阱"></a>避免能力陷阱</h2><p>为什么会出现能力陷阱呢？</p>
<p>因为大家都喜欢做自己所擅长的事，去做擅长的事，在做的时候有把握，做完后有更大概率获得成功，继而得到成就感。这是一个非常圆满的闭环鼓励机制，像一个永动机一样推动着去做擅长的事情。</p>
<p>老话说，扬长避短，不就应该就发扬自己长处，避开自己的短处吗？这个观点，是要我们避短克长？</p>
<p>我的理解是，首先，避短，不代表逃避，也有克服的含义，可以理解成直面自己的短处，去克服它；其次，在一个方向展现能力后，要换方向，换的那个方向不一定是“短”，也可能更“长”。</p>
<p>其实，归根结底，是因为时代的发展，对专才的重视度下降。</p>
<p>就如同书中的例子：</p>
<ul>
<li>尽管和之前相比，杰夫没有什么失误，但是他的老板现在希望能看到杰夫有更强的领导能力，而杰夫的表现并没有很出色，所以老板不确定他是否有能力担任更高的职位。    （《能力陷阱》）</li>
</ul>
<p>因为杰夫在专业领域达到了一定成就，老板认可，于是提拔他；但是到下一个阶段，所看重的能力不仅仅是之前关注的部分，可能更关注领导力，但是杰夫可能没有意会到，依然注重原来的方向，甚至更加重视。</p>
<p>这个看起来很简单，但实际生活中却常常出现。</p>
<p>很多开发者，因为业务能力出众，受到提拔，提高职级；但是，在受到提拔后，回报的方式只有更努力的去工作。但是，在职级变更后，所负责的内容，依旧是原来那些吗？每个职级对应的职责是不一样的，一般的项目组，会写明不同职级所对应的期望及工作内容，及下一个职级的期望及内容。</p>
<p>那么，为什么，很多开发者会选择更努力工作来回报呢？当然是因为——擅长。职级提升了，工作职责中需要统筹规划功能等，这多麻烦啊，还要去沟通，去争论，不如全给我，我自己一个人都做了，更能显示出自己的能力。在擅长的事情上更加精进，对于其他方面视若无睹。</p>
<p>但是，对于领导层看到这个情况，交给4个人，两个周的内容；最后是1个人3个周解决；的确这个人能力有目共睹，但是时间上延期了1个周，另外3个人的3个周工时白费。这是期望看到的结果吗？</p>
<p>所以，我认为的能力陷阱产生的原因是：<strong>随着时代的发展，相较以往大工厂的战斗模式，小团队攻坚成为主流；因此专才的重要性降低，领导层更加重视下属多方面能力的均值；但是，大部分人更喜欢在自己所擅长的方向上拓展进步。</strong></p>
<p>那，怎么解决呢？</p>
<p><strong>想法 + 过程 + 你本人 = 成功的转变</strong></p>
<p><br><br><br></p>
<h2 id="先行动，后思考"><a href="#先行动，后思考" class="headerlink" title="先行动，后思考"></a>先行动，后思考</h2><p>以前一直灌输的思想是 三思而后行，但是面对的环境不同，采取不同的策略。</p>
<p>这里主要指的是要做出一个转变，面对未知的一个策略，就如同那句话：弄清楚想要成为什么样的人是改变中最后一件要做的事情，而不是第一件。</p>
<p>这个也配合着书中提倡的策略：想成为什么样的人，先按照那个样子去做。然后，通过做的过程才能发现种种选择与挑战，进而反思整理，总结经验，按照自己的既定目标去选择。</p>
<p>如果我们不先迈出这一步，而是一直用以前的经验去想未知的探索，很难得到有用的信息。</p>
<p>多实践，多探索，多反思，总结经验，不断进步。</p>
<p>在生活中，也有类似的东西，最明显的就如同升职加薪。</p>
<p>在我之前的《聊聊自己》这篇文章中所说的，先做到自己期许的样子，先迈出这一步，而不是等到公司给你晋升再去做，给公司一个晋升你的理由。</p>
<p>如同那段话：</p>
<ul>
<li>优秀的人都是为自己打工，和公司一起成长，相互借力，才能找到自己的价值。无论公司怎么发展，个人能力最终是沉淀到了自己的身上，这远比你浪费时间和摸鱼更好。    （卖桃者说 - 人生一大误区：做到80%就已经不错了）</li>
</ul>
<p><br><br><br><br><br></p>
<h1 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h1><ul>
<li>我们很乐于去做那些我们擅长的事，于是就会一直去做，最终就使得我们会一直擅长那些事。做得越多，就越擅长，越擅长就越愿意去做。这样的一个循环能让我们在这方面获得更多的经验。而它就像是毒品一样，我们被它深深吸引，因此我们的快乐和自信都来源于它。它还会让我们产生误区，让我们相信我们擅长的事就是最有价值的且重要的事，所以值得我们花时间去做。    （能力陷阱）</li>
</ul>
<ul>
<li>“像水一样”，是指不要仅仅局限在一个形象里，要能适应新的环境，在新的环境里塑造一个新的自我形象（例如，把水倒进杯子里，它就是杯子的形状；把水倒进瓶子里，它就是瓶子的形状）。    （为什么人要像水一样）</li>
</ul>
<ul>
<li>弄清楚你想要的成为什么样的领导者是改变中最后一件需要做的事，而不是第一件。    （ 照食谱做菜并不能让你成为一个好厨师）</li>
</ul>
<ul>
<li>“向前展望时你不能把点点滴滴的经历联系在一起，只有在向后回顾时才能发现它们之间的联系。”    （过去的经历有用吗）</li>
</ul>
<ul>
<li>以下是我所摘录的他所得到的几点发现：· 没有什么是原创的  · 你只可能做的与你身边的事（或人）一样好  · 不要等到你完全认识了自己才开始做事  · 模仿你的榜样    （扩展你的自我概念）</li>
</ul>
<ul>
<li>你应该从哪儿开始做起呢？本书的核心观点是，成为一名优秀领导者的唯一办法就是要先表现的像一个领导者。行动，即改变你的做事方法，重建并利用你的人际关系网络以及改变展现自己的方式，能够提升你的外在表现力，刷新你对领导力的理解，还能改变促使你继续前进的动力。    （总结行动起来！）</li>
</ul>
<ul>
<li>从发现转变时机到转变能为你带来越来越多的好处之间是一个持续增长的过程，这个过程并不是你想象中那样径直地发展。所有的逻辑理论都告诉我们，转变过程很少会出现你所期望的持续向前进步，甚至可能不显露出有所进步，总是在不断地向前又后退，但是如果有一天，你在这条路上学到了足够多的东西，前进的势头就会一直保持下去。    （过程和结果，哪个重要）</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《穷爸爸富爸爸》 读记</title>
    <url>/2020/06/21/%E3%80%8A%E7%A9%B7%E7%88%B8%E7%88%B8%E5%AF%8C%E7%88%B8%E7%88%B8%E3%80%8B%E8%AF%BB%E8%AE%B0/</url>
    <content><![CDATA[<p>当我还是孩子时，我的爸爸告诉我日本人注重三种力量：剑、宝石和镜子</p>
<ul>
<li>剑象征着武器的力量</li>
<li>宝石象征着金钱的力量（记住黄金规则：有黄金的人制定规则）</li>
<li>镜子象征着自知的力量（日本人认为自知是三种力量中最宝贵的）</li>
</ul>
<a id="more"></a>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="读因"><a href="#读因" class="headerlink" title="读因"></a>读因</h1><p>“理财” 这两个字越来越常被提及，“炒股”、“基金”、“定投” 等词汇，不断涌现到面前。在时代的浪潮中，学会利用这个潮流去冲浪，而不是逆流而上被淹没。面对这个锋利的武器，通过学习了解，让它成为披荆斩棘的利器，而不是头顶悬着的刑具。</p>
<p>随着年龄的增长，慢慢的发现，有两门学科，很有意思：物理 &amp; 经济。</p>
<p>学习物理知识，了解自然万物，从微观到宏观，它的本质，它的发展，它的未来。但是，这些都是客观性的存在。现实生活中，很多东西都不是它本来的样子，都浮有一层幻象。</p>
<p>学习经济知识，可以了解这个幻象。其实这个幻象，就是在于在本质的基础上加了一个X因素 —— 人；虽是简单的一个因素，却复杂至极，但经济知识却可以解释这复杂至极的幻象。</p>
<p>我想更好的了解这个世界，更好的了解这些幻象的原因，从而辅助我做出相对来说更有利的决策。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="读感"><a href="#读感" class="headerlink" title="读感"></a>读感</h1><p>读完这本书，印象最深刻的几个点吧</p>
<ul>
<li><p>我的一个爸爸总是习惯说“我可付不起”，而另一个爸爸则禁止我们说这样的话，他坚持让我这样说“我怎样才能付得起？”这两句话，一句是陈述句，另一句是疑问句。</p>
</li>
<li><p>停止责备我，不要认为是我的问题。如果你认为是我的问题，你就会想改变我；如果你认为问题在你那儿，你就会改变自己，学习一些东西让自己变得更聪明。</p>
</li>
<li>21世纪的文盲不是那些不能读和不能写的人，而是那些不能学习、忘记、再学习的人。</li>
<li>工人付出最大的努力以免于解雇，而雇主提供最低工资以防止工人辞职</li>
</ul>
<p>先正三观，再做事。</p>
<p>遇到问题，</p>
<p>首先是要去解决它，哪怕真的无法解决，也要根据目的，尽量的达到效果。做不到100分，就以90分的目标去努力，最重点就是不要放弃。</p>
<p>然后就是从自身出发来解决，先想自己能控制的东西，看能否解决；再想如何优化，通过别人的帮助是否能更快速更低成本的解决。</p>
<p>最后就是终身学习，一定要明确自己的目的，不是为了赚取工资，不是为了提高工资，所学所做的一切都是垫脚石，这些可以是阶段性的目标，但不要做终身目标。</p>
<p>然后就是，印证我之前观点的：</p>
<ul>
<li>专业的事交给专业的人</li>
<li>先给予，后索取</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><ul>
<li><p>我的一个爸爸总是习惯说“我可付不起”，而另一个爸爸则禁止我们说这样的话，他坚持让我这样说“我怎样才能付得起？”这两句话，一句是陈述句，另一句是疑问句。</p>
</li>
<li><p>贫穷和破产的区别是：破产是暂时的，而贫穷是永久的。</p>
</li>
</ul>
<h2 id="富人不为钱工作"><a href="#富人不为钱工作" class="headerlink" title="富人不为钱工作"></a>富人不为钱工作</h2><ul>
<li><p>生活中的很多事情是我们无法控制的。我学会了专注于我所能控制的：我自己。如果事情必须改变，首先要改变的就是我自己。</p>
</li>
<li><p>穷人和中产阶级为钱而工作。富人让钱为他工作。</p>
</li>
<li><p>停止责备我，不要认为是我的问题。如果你认为是我的问题，你就会想改变我；如果你认为问题在你那儿，你就会改变自己，学习一些东西让自己变得更聪明。</p>
</li>
</ul>
<h2 id="为什么要教授财务知识"><a href="#为什么要教授财务知识" class="headerlink" title="为什么要教授财务知识"></a>为什么要教授财务知识</h2><ul>
<li><p>富人获得资产，而穷人和中产阶级获得负债，只不过他们以为那些负债就是资产。</p>
</li>
<li><p>资产是能把钱放进我口袋里的东西。负债是把钱从我口袋里取走的东西。</p>
</li>
<li><p>21世纪的文盲不是那些不能读和不能写的人，而是那些不能学习、忘记、再学习的人。</p>
</li>
<li><p>当我还是孩子时，我的爸爸告诉我日本人注重三种力量：剑、宝石和镜子</p>
<ul>
<li>剑象征着武器的力量</li>
<li>宝石象征着金钱的力量（记住黄金规则：有黄金的人制定规则）</li>
<li>镜子象征着自知的力量（日本人认为自知是三种力量中最宝贵的）</li>
</ul>
</li>
<li>重要的不是你挣了多少钱，而是你能留下多少钱，以及能够留住多久。</li>
<li>只有知识才能解决问题并创造财富，那些不是靠财务知识挣来的钱也不会长久。如果你要去建造帝国大厦，你要做的第一件事就是挖个深坑，打牢地基。如果你只是想在郊区盖个小屋，你只须用混凝土打15厘米厚的地基就够了。大多数人在努力致富时，总是试图在15厘米厚的混凝土上建造帝国大厦。</li>
</ul>
<h2 id="税收的历史和公司的力量"><a href="#税收的历史和公司的力量" class="headerlink" title="税收的历史和公司的力量"></a>税收的历史和公司的力量</h2><ul>
<li>如果你为钱工作，你就把力量给了你的老板；如果让钱为你工作，你就能控制这种力量。</li>
<li>如果你对法律一无所知，就很容易被欺负；如果你了解法律，你就有还击的机会。</li>
<li>财商是由4个方面的专门知识构成的：<ol>
<li><strong>会计就是财务知识或解读数字的能力。</strong>这需要左脑来处理，是细节的部分。财务知识能帮助你读懂财务报表，还能让你辨别一项生意的优势和劣势。</li>
<li><strong>投资是钱生钱的科学。</strong>投资涉及策略和方案，这要右脑来做，是属于创造的部分。</li>
<li><strong>了解市场是供给与需求的科学。</strong></li>
<li><strong>法律</strong>。利用一个具有会计、投资和市场运营的企业会使你的财富实现爆炸性地增长。了解减税优惠政策和公司法的人会比雇员和小业主更快的致富。</li>
</ol>
</li>
</ul>
<h2 id="富人的投资"><a href="#富人的投资" class="headerlink" title="富人的投资"></a>富人的投资</h2><ul>
<li>限制自己的选择机会等于固守陈旧的观念。</li>
<li>如果你清楚自己在做什么，就不是在赌博；如果你把钱投进一笔交易然后只是祈祷，才是在赌博。在任何一项投资中，成功的办法都是运用你的技术知识、智慧以及对于这个游戏的热爱来减少意外、降低风险。</li>
<li>提升3种主要技能：<ol>
<li>如何找到别人错失的机会</li>
<li>如何筹集资金</li>
<li>如何把精明的人组织起来并雇用他们为你工作</li>
<li>风险无处不在，要学会驾驭风险，别总想回避风险。</li>
</ol>
</li>
</ul>
<h2 id="学会不为钱工作"><a href="#学会不为钱工作" class="headerlink" title="学会不为钱工作"></a>学会不为钱工作</h2><ul>
<li>对于受过良好教育的爸爸来说，工作的稳定就是一切；而对于富爸爸来说，不断学习才是一切</li>
<li>工人付出最大的努力以免于解雇，而雇主提供最低工资以防止工人辞职</li>
<li>世界上导出都是有才华的穷人。在很多情况下，他们贫穷、财务困难或者只能挣到地狱他们应得的薪水，不是因为他们已知的东西而是因为他们未知的东西。他们只将注意力集中在提高做汉堡的技能上，却不注意提高销售和配送汉堡的技能。也许麦当劳不能做出最好的汉堡，但他们能在做出一般的汉堡的前提下，做到最好的销售和配送工作。</li>
<li>成功所必须的管理技能包括：<ol>
<li>对现金流的管理</li>
<li>对系统的管理</li>
<li>对人员的管理</li>
</ol>
</li>
</ul>
<h2 id="克服困难"><a href="#克服困难" class="headerlink" title="克服困难"></a>克服困难</h2><ul>
<li>“愤世者永远不会成功。”“未经证实的的怀疑和恐惧会使人们成为愤世嫉俗者。愤世者抱怨现实，而成功者分析现实。”抱怨蒙蔽人的头脑，而分析使人心明眼亮。</li>
<li>掌握财务知识的人有时候还是无法积累丰厚的资产项，主要原因有：<ol>
<li>恐惧</li>
<li>愤世嫉俗</li>
<li>懒惰</li>
<li>不良习惯</li>
<li>自负</li>
</ol>
</li>
<li>对大多数人来说，他们在财务上不成功是因为对他们而言亏钱所造成的的痛苦远远大于致富所带来的的乐趣。富爸爸直到失败只会使他更强大，更精明。他并不愿意亏钱，但他清楚自己是什么样的人，知道该怎样去面对损失。他接受了损失，然后将它变成盈利。</li>
</ul>
<h2 id="开始行动"><a href="#开始行动" class="headerlink" title="开始行动"></a>开始行动</h2><ul>
<li>他坚持给专业人士优厚的报酬，而我也运用了这一策略。今天，我聘请身价不菲的律师、会计师、房地产经纪人和股票经纪人为我工作。为什么要这样做呢？因为我认为，如果他们是专业人才，他们的服务就会为我创造财富，而他们创造的财富越多，我挣到的钱也就越多。</li>
<li>人事管理是最重要的管理技能之一。许多人只会管理不如自己聪明的人或是能力不如自己的人。许多中层管理人员一直停留在中层，就是因为他们只知道如何与职位低于自己的人一起工作，却不善于和比自己职位高的人一起工作。真正的技能是在某些技术领域能够管理比你更聪明的人并给他们提供优厚的待遇。</li>
<li>如果我可以给你提供一种新思路，那一定是这个思路：当你感到手头“有点紧”或是想得到什么时，首先要想到给予，只有先“予”，你才能在将来取得丰厚的回报，无论金钱、微笑、爱情还是友谊都是如此。我知道人们常把给予放在最后，但事实证明勇于付出对我总是大有裨益。我相信互惠互利的原则，我想要得到就要付出。我想要钱，所以我给别人钱，然后我又成倍的收回钱；我想做销售，所以我帮助其他人卖东西，这样我的东西也卖出去了；我需要签约做生意，所以我会尽我所能去帮助其他人得到合约，就像变魔术一样，我要的合约也到手了。“上帝不需要得到，但人类需要付出”。</li>
</ul>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><ul>
<li><p>在会计领域里，有三种不同的收入：</p>
<ol>
<li>劳动性收入</li>
<li>投资组合收入</li>
<li>被动收入</li>
</ol>
</li>
<li><p>变富有的关键是拥有尽快将劳动性收入转换成被动收入或投资组合收入的能力</p>
</li>
<li><p>上天赐予我们每个人两样伟大的礼物：思想和时间。你可以运用这两样礼物去做你愿意做的事情。每一美元钞票到了你的手中，你，且只有你，才有权决定自己的前途。</p>
<ul>
<li>愚蠢地用掉它，你就选择了贫困</li>
<li>把钱用在负债项上，你就会成为中产阶级</li>
<li>投资于你的头脑，学习如何获取资产，富有将成为你的目标和你的未来。</li>
</ul>
<p>选择只能由你做出。每一天，面对每一美元，你都在做出自己是成为一个富人、穷人还是中产阶级的选择。</p>
</li>
<li><p>劳动性的税赋最高，而被动收入的税赋最低。富爸爸会说：“政府从你努力工作所得的收入中收的税比拟的金钱为你努力工作所得的收入所征收的税还高。”</p>
</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《设计模式之美》学习笔记</title>
    <url>/2020/09/20/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>时光不语，静等花开。</p>
<p>当你的能力撑不起你的野心的时候，当你感到怀才不遇的时候，当你迷茫找不着方向的时候，你只需要努力、坚持，再努力、再坚持，慢慢地，你就会变得越来越强大，方向就会变得越来越清晰，机会就会越来越青睐你。</p>
<a id="more"></a>
<p><br></p>
<p><br></p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本文是在 <strong>极客时间</strong> APP 学习 <strong>王争</strong> 老师专栏 《设计模式之美》的学习笔记。</p>
<p><br></p>
<p><br></p>
<h1 id="1-开篇词-amp-设计模式导读"><a href="#1-开篇词-amp-设计模式导读" class="headerlink" title="1. 开篇词 &amp; 设计模式导读"></a>1. 开篇词 &amp; 设计模式导读</h1><h2 id="为什么要学设计模式？"><a href="#为什么要学设计模式？" class="headerlink" title="为什么要学设计模式？"></a>为什么要学设计模式？</h2><ul>
<li>数据结构与算法是为了写出高效的代码；设计模式为了写出高质量的代码</li>
<li>写代码是程序员的看家本领，要做更优秀的人，要写出“好用”的代码，而不仅仅是“能用”的代码</li>
<li>当熟练掌握编写高质量代码的技巧、方法和理论后，写烂代码和好代码的时间基本相同</li>
<li>项目的代码质量可能因为各种原因有所妥协，但起码要了解高质量代码的样子，具备写出高质量代码的能力</li>
<li>让读源码、学框架事半功倍</li>
<li>应对面试，职级进阶、招聘人员、带领新手</li>
</ul>
<h2 id="如何评价代码质量的高低？"><a href="#如何评价代码质量的高低？" class="headerlink" title="如何评价代码质量的高低？"></a>如何评价代码质量的高低？</h2><ul>
<li><strong>可维护性</strong><ul>
<li>是否能够在 不破坏原有代码设计、不引入新BUG的情况下，快速的修改或添加代码</li>
</ul>
</li>
<li><strong>可读性</strong><ul>
<li>“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”  —— Martin Fowler</li>
<li>代码是否符合编码规范、命名是否达意、注释是否详尽、函数是否长短合适、模块划分是否清晰、是否高内聚低耦合等</li>
</ul>
</li>
<li><strong>可扩展性</strong><ul>
<li>在不修改或少量修改原有代码的情况下，通过扩展的方式添加新的功能代码</li>
</ul>
</li>
<li>灵活性<ul>
<li>一段代码是否易扩展、易复用 或者 易使用</li>
</ul>
</li>
<li>简洁性<ul>
<li>尽量保持代码简单、逻辑清晰。是否易读、易维护</li>
<li>思从深而行从简，真正的高手能云淡风轻地用最简单的方法解决最复杂的问题。</li>
</ul>
</li>
<li>可复用性<ul>
<li>尽量减少重复代码的编写，复用已有的代码</li>
</ul>
</li>
<li>可测试性<ul>
<li>是否易写单元测试</li>
</ul>
</li>
</ul>
<h2 id="面向对象、设计原则、设计模式、编程规范、重构-这五者之间的关系？"><a href="#面向对象、设计原则、设计模式、编程规范、重构-这五者之间的关系？" class="headerlink" title="面向对象、设计原则、设计模式、编程规范、重构 这五者之间的关系？"></a>面向对象、设计原则、设计模式、编程规范、重构 这五者之间的关系？</h2><p>这五者都是保持或提高代码质量的方法论，本质上都是服务于编写高质量的代码。</p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>主流的编程范式或编程风格有三种：</p>
<ul>
<li>面向过程</li>
<li>面向对象</li>
<li>函数式编程</li>
</ul>
<p>其中，面向对象是目前最主流的；大部分流行的编程语言都是面向对象编程语言，大部分项目都是基于面向对象风格开发。</p>
<p>通过 面向对象的四大特性：封装、抽象、继承、多态，可以实现很多复杂的设计思路，是很多设计原则、设计模式编码实现的基础。</p>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>设计原则是指导我们代码设计的一些经验总结。</p>
<p>这些原则听起来都比较抽象，定义描述都比较模糊，不同的人会有不同的解读。所以，不能单纯地去死记硬背，要掌握每一种设计原则的初衷，了解设计原则用于解决哪些问题，应用于哪些场景，从而在实际项目中灵活恰当的使用这些原则。</p>
<p>常用的设计原则：</p>
<ul>
<li><strong>SOLID原则</strong><ul>
<li>SRP 单一职责原则</li>
<li>OCP 开闭原则</li>
<li>LSP 里氏替换原则</li>
<li>ISP 接口隔离原则</li>
<li>DIP 依赖倒置原则</li>
</ul>
</li>
<li>DRY原则</li>
<li>KISS原则</li>
<li>YAGNI原则</li>
<li>LOD原则</li>
</ul>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。大部分设计模式要解决的都是代码的可扩展性问题。</p>
<p>经典的设计模式有23种。随着编程语言的演进，一些设计模式也随之过时，甚至成了反模式，一些则被内置在编程语言中，另外还有一些新的设计模式诞生。</p>
<p>经典的23种设计模式，可以分为三大类：</p>
<ul>
<li>创建型<ul>
<li>常用：<ul>
<li>单例模式</li>
<li>工厂模式</li>
<li>建造者模式</li>
</ul>
</li>
<li>不常用：<ul>
<li>原型模式</li>
</ul>
</li>
</ul>
</li>
<li>结构型<ul>
<li>常用：<ul>
<li>代理模式</li>
<li>桥接模式</li>
<li>装饰者模式</li>
<li>适配器模式</li>
</ul>
</li>
<li>不常用：<ul>
<li>门面模式</li>
<li>组合模式</li>
<li>享元模式</li>
</ul>
</li>
</ul>
</li>
<li>行为型<ul>
<li>常用：<ul>
<li>观察者模式</li>
<li>模板模式</li>
<li>策略模式</li>
<li>职责链模式</li>
<li>迭代器模式</li>
<li>状态模式</li>
</ul>
</li>
<li>不常用：<ul>
<li>访问者模式</li>
<li>备忘录模式</li>
<li>命令模式</li>
<li>解释器模式</li>
<li>中介模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h3><p>编程规范主要解决的是代码的可读性问题。相对于其他的更注重于代码的细节。基本的编程规范有 如何给变量、类、函数命名，如何写代码注释，如何写函数 等等。</p>
<h3 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h3><p>只要软件在不停的迭代，就没有一劳永逸的设计。随着需求的变化，代码的不停堆砌，原有的设计必定会存在各种问题。针对这些问题，就有必要进行代码的重构。重构是软件开发中非常重要的一个环节。持续重构是保持代码质量不下降的有效手段，能有效避免代码腐化到无可救药的地步。</p>
<p>重构的工具就是前面讲到的 面向对象设计思想、设计原则、设计模式、编码规范。</p>
<p>对于重构，要了解：</p>
<ul>
<li>重构的目的、对象、时机、方法</li>
<li>保证重构不出错的技术手段：单元测试和代码的可测试性</li>
<li>两种不同规模的重构<ul>
<li>大重构，大规模高层次</li>
<li>小重构，小规模低层次</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="2-设计原则与思想：面向对象"><a href="#2-设计原则与思想：面向对象" class="headerlink" title="2. 设计原则与思想：面向对象"></a>2. 设计原则与思想：面向对象</h1><h2 id="封装、抽象、继承、多态分别可以解决哪些编程问题？"><a href="#封装、抽象、继承、多态分别可以解决哪些编程问题？" class="headerlink" title="封装、抽象、继承、多态分别可以解决哪些编程问题？"></a>封装、抽象、继承、多态分别可以解决哪些编程问题？</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装特性，也叫做信息隐藏或者数据访问保护。</p>
<p>类通过暴露有限的访问接口，授权外部仅能通过类提供的方式（或者叫函数）来访问内部信息或者数据。它需要编程语言提供权限访问控制语法来支持。</p>
<p>通过封装特性，一方面保护数据不被随意修改，提高代码的可维护性；另一方面仅暴露有限的必要接口，提高类的易用性。</p>
<h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><p>抽象可以通过接口类或者抽象类来实现，并不需要特殊的语法机制来支持。</p>
<p>通过抽象特性，一方面提高代码的可扩展性、可维护性，修改实现不需要改变定义，减少代码的改动范围；另一方面，也是处理复杂系统的有效手段，能有效地过滤掉不必要关注的信息。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承特性需要编程语言提供特殊的语法机制来支持。</p>
<p>主要解决代码复用的问题，但过度使用继承，继承层次过深过复杂，会导致代码可读性，可维护性变差。</p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多条特性需要编程语言提供特殊的语法机制来实现，比如继承、接口类、duck-typing。</p>
<p>多态特性能提高代码的可扩展性和复用性，是很多设计模式、设计原则、编程技巧的代码实现基础。</p>
<h2 id="面向对象相比面向过程有哪些优势？"><a href="#面向对象相比面向过程有哪些优势？" class="headerlink" title="面向对象相比面向过程有哪些优势？"></a>面向对象相比面向过程有哪些优势？</h2><h3 id="什么是面向过程编程与面向过程编程语言"><a href="#什么是面向过程编程与面向过程编程语言" class="headerlink" title="什么是面向过程编程与面向过程编程语言"></a>什么是面向过程编程与面向过程编程语言</h3><p>面向对象：</p>
<ul>
<li><p>面向对象编程是一种编程范式或编程风格。它以类或对象作为组织代码的基本单元，并将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石。</p>
</li>
<li><p>面向对象编程语言是支持类或对象的语法机制，并有线程的语法机制，能方便地实现面向对象编程四大特性的编程语言。</p>
</li>
</ul>
<p>面向过程：</p>
<ul>
<li>面向过程编程也是一种编程范式或编程风格。它以过程（可以理解为方法、函数、操作）作为组织代码的基本单元，以数据（可以理解为成员变量、属性）与方法相分离为最主要特点。面向过程风格是一种流程化的编程风格，通过拼接一组顺序执行的方法来操作数据完成一项功能。</li>
<li>面向过程编程语言首先是一种编程语言。它最大的特点是不支持类和对象两个语法概念，不支持丰富的面向对象编程的特性，仅支持面向过程编程。</li>
</ul>
<h3 id="面向对象编程相比面向过程编程的优势"><a href="#面向对象编程相比面向过程编程的优势" class="headerlink" title="面向对象编程相比面向过程编程的优势"></a>面向对象编程相比面向过程编程的优势</h3><ol>
<li>面向对象编程更加能够应对大规模复杂程序的开发</li>
<li>面向对象编程风格的代码更易复用、易扩展、易维护</li>
<li>面向对象编程语言更加人性化、更加高级、更加智能</li>
</ol>
<h2 id="看似面向对象的代码，实际上是面向过程？"><a href="#看似面向对象的代码，实际上是面向过程？" class="headerlink" title="看似面向对象的代码，实际上是面向过程？"></a>看似面向对象的代码，实际上是面向过程？</h2><h3 id="什么样的代码设计是面向过程的？"><a href="#什么样的代码设计是面向过程的？" class="headerlink" title="什么样的代码设计是面向过程的？"></a>什么样的代码设计是面向过程的？</h3><ol>
<li>滥用 getter、setter 方法，所有成员变量都设置getter、setter方法。</li>
<li>滥用全局变量和全局方法</li>
<li>定义数据和方法分离的类</li>
</ol>
<h3 id="为什么容易写出面向过程风格代码？"><a href="#为什么容易写出面向过程风格代码？" class="headerlink" title="为什么容易写出面向过程风格代码？"></a>为什么容易写出面向过程风格代码？</h3><ul>
<li><p>面向过程风格，符合人类思考习惯：先做什么，后做什么，一步步顺序执行一系列操作。</p>
</li>
<li><p>面向对象编程要比面向过程编程难一些。在面向对象编程中，类的设计需要技巧及经验。</p>
</li>
</ul>
<h3 id="面向过程编程已无用武之地？"><a href="#面向过程编程已无用武之地？" class="headerlink" title="面向过程编程已无用武之地？"></a>面向过程编程已无用武之地？</h3><ul>
<li>如果开发的是微小程序 或 以算法为主、数据为辅的数据处理相关代码，脚本式的面向过程编程风格更适合。</li>
<li>面向过程实际上是面向对象编程的基础，先做好面向过程，再去做好面向对象。</li>
<li>无论使用哪种风格代码，最终目的是写出 易维护、易读、易复用、易扩展的高质量代码；只要能避免面向过程编程风格的一些弊端，控制好它的副作用，在掌控范围内为我们所用，就无须避讳在面向对象编程中写面向过程风格的代码。</li>
</ul>
<h2 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h2><p>在面向对象编程中，抽象类和接口时两个经常被用到的语法概念，是面向对象四大特性，以及很多设计模式，设计思想，设计原则编程实现的基础。例如，可以使用接口来实现面向对象的抽象特性、多态特性和基于接口而非实现的设计原则，使用抽象类来实现面向对象的继承特性和模板设计模式等等。</p>
<h3 id="定义（what）"><a href="#定义（what）" class="headerlink" title="定义（what）"></a>定义（what）</h3><p>抽象类：</p>
<ul>
<li>不允许被实例化，只能被继承。</li>
<li>可以包含属性和方法。其中方法可以包含代码实现也可不包含，不包含代码实现的方法叫抽象方法。</li>
<li>子类继承抽象类，必须实现抽象类种所有抽象方法。</li>
</ul>
<p>接口：</p>
<ul>
<li>接口不能包含属性</li>
<li>接口只能声明方法，方法不能包含代码实现。</li>
<li>类实现接口的时候，必须实现接口中声明的所有方法。</li>
</ul>
<p>区别：</p>
<ul>
<li>抽象类表示 is-a 关系，接口表示 has-a 关系</li>
</ul>
<h3 id="解决什么问题（why）"><a href="#解决什么问题（why）" class="headerlink" title="解决什么问题（why）"></a>解决什么问题（why）</h3><p>抽象类主要解决代码复用问题，而且在实现面向对象的多态特性时更加优雅便捷。</p>
<p>接口主要解决设计中的解耦，它是对行为的一种抽象，调用者只需要关注接口而非具体实现。</p>
<h3 id="如何区分使用（how）"><a href="#如何区分使用（how）" class="headerlink" title="如何区分使用（how）"></a>如何区分使用（how）</h3><p>同定义种的区别，如果要实现 is-a 关系的设计，使用抽象类；如果要实现 has-a 关系的设计，使用接口。</p>
<p>从类的继承层次上来看，抽象类是一种自下而上的设计思路，先有子类的代码重复，然后再抽象成上层的父类；接口正好相反，是一种自上而下的设计思路，一般先设计接口，再去考虑具体的实现。</p>
<h3 id="基于接口而非实现编程"><a href="#基于接口而非实现编程" class="headerlink" title="基于接口而非实现编程"></a>基于接口而非实现编程</h3><p>原因？</p>
<ul>
<li>越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。好的代码设计，不仅能应对当下的需求，而且在将来需求发生变化的时候，仍然能够在不破坏原有代码设计的情况下灵活应对。</li>
</ul>
<p>如何做？</p>
<ul>
<li>函数的命名不能暴露任何实现细节。</li>
<li>封装具体的实现细节。</li>
<li>为实现类定义抽象的接口。</li>
</ul>
<h3 id="多用组合少用继承"><a href="#多用组合少用继承" class="headerlink" title="多用组合少用继承"></a>多用组合少用继承</h3><p>为什么不推荐使用继承？</p>
<ul>
<li>继承可以解决代码复用问题。但是继承层次过深、过复杂，会影响到代码的可读性和可维护性。</li>
</ul>
<p>为什么不用组合完全替换继承？</p>
<ul>
<li>继承改写组合要做更细粒度的类的拆分，因此要定义更多的类和接口，更复杂且维护成本更高。</li>
</ul>
<p>组合如何代替继承？</p>
<ul>
<li>继承主要有三个作用：表示 is-a 关系，支持多态特性，代码复用。</li>
<li>使用 组合、接口、委托 三种技术手段来代替继承，并且避免它产生的问题。<ul>
<li>通过组合和接口的 has-a 关系，可以替代继承的 is-a 关系。</li>
<li>通过接口可以替代继承的多态特性。</li>
<li>通过组合和委托可以实现代码复用。</li>
</ul>
</li>
</ul>
<p>如何合理使用组合与继承？</p>
<ul>
<li>如果类之间的继承结构稳定（不会轻易改变），继承层次比较浅（最多有两层继承关系），继承关系不复杂，就可以大胆的使用继承。反之，系统越不稳定，继承层次越深，继承关系越复杂，就尽量使用组合来替代继承。</li>
<li>某些设计模式会固定使用继承或者组合。</li>
</ul>
<h2 id="实战：-MVC-amp-DDD"><a href="#实战：-MVC-amp-DDD" class="headerlink" title="实战： MVC &amp; DDD"></a>实战： MVC &amp; DDD</h2><h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><p>什么是MVC？什么是DDD？</p>
<ul>
<li><p>MVC架构将整个项目分为三层：展示层（View）、逻辑层（Controller）、数据层（Model）。</p>
<p>它是一种软件设计典范，三层分离的方法组织代码，将业务逻辑聚集到一起，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。</p>
</li>
<li><p>DDD，即领域驱动设计，主要用来指导如何解耦业务系统，划分业务模块，定义业务领域及其交互。</p>
</li>
</ul>
<p>什么是贫血模型？什么是充血模型？</p>
<ul>
<li>贫血模型；存在只包含数据，不包含业务逻辑的类。贫血模型将数据与操作分离，破坏了面向对象的封装特性，是典型的面向过程的编程风格。</li>
<li>充血模型；相对于贫血模型，所有的类都包含数据和对应的业务逻辑。</li>
</ul>
<p>基于贫血模型的传统开发模式既然违反OOP，那又为什么流行？</p>
<ol>
<li>充血模型的设计相对于贫血模型更有难度。大部分情况下系统业务比较简单，用贫血模型就足以应付；即使设计好充血模型，由于业务逻辑不多，表现出的样子和贫血模型差不多，没有太大意义。</li>
<li>思维固化，转型有成本。基于贫血模型的传统开发模式经历了很多年，已经深入人心，并且没有出过大的差错，在这种情况下进行转型，没有太大收益，成本却很大。</li>
</ol>
<p>什么情况下我们应该考虑使用基于充血模型的DDD开发模式？</p>
<ul>
<li>业务复杂的系统开发适合使用DDD开发模式。越复杂的系统，对代码的复用性、易维护性要求越高，就应该花费更多的时间和精力在前期设计上。基于充血模型的DDD开发模式，需要前期做大量的业务调研、领域模型设计，因此更加适合复杂系统的开发。</li>
</ul>
<h2 id="实战：面向对象开发"><a href="#实战：面向对象开发" class="headerlink" title="实战：面向对象开发"></a>实战：面向对象开发</h2><p>面向对象开发的三个环节：</p>
<ol>
<li>面向对象分析（OOA）</li>
<li>面向对象设计（OOD）</li>
<li>面向对象编程（OOP）</li>
</ol>
<h3 id="面向对象分析"><a href="#面向对象分析" class="headerlink" title="面向对象分析"></a>面向对象分析</h3><p>需求分析的整个过程，从最粗糙、最模糊的需求开始，通过“提出问题-解决问题”的方式，循序渐进的优化，最后得到一个足够清晰、可落地的需求描述。</p>
<p>明确需求：</p>
<p>将笼统的需求细化到足够清晰、可执行。通过 沟通、挖掘、分析、假设、梳理，搞清楚具体的需求有哪些，哪些是现在要做的，哪些是未来可能要做的，哪些是不用考虑做的。</p>
<p>具体分析：</p>
<ol>
<li>基础分析<ul>
<li>从最简单的方案想起，再去优化。（先实现，再优化）</li>
</ul>
</li>
<li>分析优化（有多轮）<ul>
<li>不断探寻优化点，判断优化的成本收益比而是否要做。</li>
</ul>
</li>
<li>最终确定需求<ul>
<li>确定需求，可用文本或者时序图、流程图等描述。</li>
</ul>
</li>
</ol>
<h3 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h3><p>面向对象分析的产物是详细的需求描述。面向对象设计的产出是类。</p>
<p>在这一环节，将描述转化为具体的类的设计，可以分为下面几部分：</p>
<ol>
<li>划分职责进而识别出有哪些类</li>
<li>定义类及其属性和方法</li>
<li>定义类与类之间的交互关系</li>
<li>将类组装起来并提供执行入口</li>
</ol>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="3-设计原则与思想：设计原则"><a href="#3-设计原则与思想：设计原则" class="headerlink" title="3. 设计原则与思想：设计原则"></a>3. 设计原则与思想：设计原则</h1><h2 id="SOLID原则"><a href="#SOLID原则" class="headerlink" title="SOLID原则"></a>SOLID原则</h2><p>SOLID 原则：</p>
<ul>
<li>S，Single Responsibility Principle（SRP），单一职责原则</li>
<li>O，Open Closed Principle（OCP），开闭原则</li>
<li>L，Liskov Substitution Principle（LSP），里氏替换原则</li>
<li>I，Interface Segregation Principle（ISP），接口隔离原则</li>
<li>D，Dependency Inversion Principle（DIP），依赖反转原则</li>
</ul>
<h3 id="单一职责原则（SRP，Single-Responsibility-Principle）"><a href="#单一职责原则（SRP，Single-Responsibility-Principle）" class="headerlink" title="单一职责原则（SRP，Single Responsibility Principle）"></a>单一职责原则（SRP，Single Responsibility Principle）</h3><p>描述：</p>
<ul>
<li>A class or moudle should have a single reponsibility.</li>
</ul>
<p>重点：</p>
<ul>
<li>类或模块的职责是否单一<ul>
<li>判定标准：<ul>
<li>类中代码行数、函数或属性过多</li>
<li>类依赖的其他类过多，或依赖类的其他类过多</li>
<li>私有方法过多</li>
<li>难以给类起合适的名字</li>
<li>类中大量的方法都是集中操作类中的某几个属性</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>应用：</p>
<ul>
<li>先实现一个粗粒度的类，满足业务需求。随着业务发展，粗粒度的类越来越庞大，代码越来越多时，对粗粒度类进行重构，拆分成几个更细粒度的类，进行持续重构。</li>
</ul>
<h3 id="开闭原则（OCP，Open-Closed-Principle）"><a href="#开闭原则（OCP，Open-Closed-Principle）" class="headerlink" title="开闭原则（OCP，Open Closed Principle）"></a>开闭原则（OCP，Open Closed Principle）</h3><p>描述：</p>
<ul>
<li>Software entities(modules, classes, functions, etc.) should be open for extension, but closed for modification.</li>
</ul>
<p>重点：</p>
<ul>
<li>对扩展开放，对修改关闭<ul>
<li>认识：添加一个新的功能，应该是通过在已有代码基础上扩展代码，而非修改已有代码的方式来完成。但并不代表完全杜绝修改，而是以最小的代价来完成新功能的开发。同样的代码改动，在粗粒度中可能认定为“修改”，在细粒度中，可能认定为“扩展”。</li>
</ul>
</li>
</ul>
<p>应用：</p>
<ul>
<li>在编写代码时，时刻具备扩展意识、抽象意识、封装意识。充分理解需求的原因及变更方向，事先留好扩展点。</li>
</ul>
<h3 id="里氏替换原则（LSP，Liskov-Substitution-Principle）"><a href="#里氏替换原则（LSP，Liskov-Substitution-Principle）" class="headerlink" title="里氏替换原则（LSP，Liskov Substitution Principle）"></a>里氏替换原则（LSP，Liskov Substitution Principle）</h3><p>描述：</p>
<ul>
<li>If S is a subtype of T, then objects of type T may be replaced with objects of type S, without breaking the program. (1986, Barbara Liskov 提出)</li>
<li>Functions that use pointers of references to base classes must be able to use objects of derived classes without knowing it.(1996, Robert Martin 重述)</li>
</ul>
<p>重点：</p>
<ul>
<li>子类的设计要保证在替换父类的时候，不改变原有程序的逻辑以及不破坏原有程序的正确性<ul>
<li>三种典型违背情况<ul>
<li>子类违背父类声明要实现的功能</li>
<li>子类违背父类对输入、输出、异常的约定</li>
<li>子类违背父类注释中所罗列的任何特殊说明</li>
</ul>
</li>
<li>与多态的区别<ul>
<li>多态是面向对象编程中的一大特性，也是面向对象编程语言的一种语法，是一种代码实现思路。</li>
<li>里氏替换是一种设计原则，用来指导继承关系中子类的设计方法：子类的设计要保证在替换父类的时候，不改变原有程序的逻辑及不破坏原有程序的正确性。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>应用：</p>
<ul>
<li>父类定义了函数的的“约定”，子类可以变函数的内部实现逻辑，但不能改变函数原有的“约定”。<ul>
<li>这里的“约定”包括：<ul>
<li>函数声明要实现的功能</li>
<li>对输入、输出、异常的约定</li>
<li>注释中所罗列的任何特殊说明</li>
<li>等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="接口隔离原则（ISP，Interface-Segregation-Principle）"><a href="#接口隔离原则（ISP，Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（ISP，Interface Segregation Principle）"></a>接口隔离原则（ISP，Interface Segregation Principle）</h3><p>描述：</p>
<ul>
<li>Clients should not be forced to depend upon interfaces that they do not use.</li>
</ul>
<p>重点：</p>
<ul>
<li>对接口的三种理解<ul>
<li>一组接口集合：如果部分接口只被部分调用者使用，就需要将这部分接口隔离出来，单独给这部分调用者使用，而不强迫其他调用者也依赖这部分不会被用到的接口。</li>
<li>单个API接口或函数：如果部分调用者只需要函数中的部分功能，就需要把函数拆分成粒度更细的多个函数，让调用者只依赖它需要的细粒度函数。</li>
<li>OOP中的接口：需要将接口的设计单一化，不要让接口的实现类和调用者依赖不需要的接口函数。</li>
</ul>
</li>
<li>与单一职责原则的区别<ul>
<li>单一职责原则是对模块、类、接口的设计。</li>
<li>接口隔离原则一方面更侧重于接口的设计，另一方面提供了一种判断接口的职责是否单一的标准。<ul>
<li>标准：通过调用者如何使用接口来间接地判定，如果调用者只使用部分接口或接口的部分功能，那接口的设计就不够职责单一。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>应用：</p>
<ul>
<li>根据对接口的不同理解，进行不同的设计。</li>
</ul>
<h3 id="依赖反转原则（DIP，Dependency-Inversion-Principle）"><a href="#依赖反转原则（DIP，Dependency-Inversion-Principle）" class="headerlink" title="依赖反转原则（DIP，Dependency Inversion Principle）"></a>依赖反转原则（DIP，Dependency Inversion Principle）</h3><p>描述：</p>
<ul>
<li>High-level modules shouldn’t depend on low-level modules.Both modules should depend on abstractions.In addition, abstractions shouldn’t depend on details.Details depend on abstractions.</li>
</ul>
<p>重点：</p>
<ul>
<li>控制反转：一种指导框架层面设计的思想。从程序员自己控制整个程序执行的流程，通过使用框架，实现框架来控制整个程序执行流程。（控制权从程序员“反转”给了框架）</li>
<li>依赖注入：一种编程技巧。不通过new的方式在类内创建依赖类的对象，而是将依赖的类对象在外部创建好之后，通过构造函数、函数参数等方式传递（或注入）给类来使用。</li>
<li>依赖注入框架：通过依赖注入框架提供的扩展点，简单配置所有需要的类及其类与类之间依赖关系，就可以实现由框架来自动创建对象、管理对象的生命周期、依赖注入等原本需要程序员来做的事情。</li>
</ul>
<p>应用：</p>
<ul>
<li>Tomcat</li>
</ul>
<p><br></p>
<h2 id="KISS原则-与-YAGNI原则"><a href="#KISS原则-与-YAGNI原则" class="headerlink" title="KISS原则 与 YAGNI原则"></a>KISS原则 与 YAGNI原则</h2><h3 id="KISS原则"><a href="#KISS原则" class="headerlink" title="KISS原则"></a>KISS原则</h3><p>KISS原则：(几个版本）</p>
<ul>
<li>Keep It Simple and Stupid</li>
<li>Keep It Short and Simple</li>
<li>Keep It Simple and Straightforward</li>
</ul>
<p>大概都可以翻译为：尽量保持简单。</p>
<p>KISS原则是保持代码可读性和可维护性的重要手段。</p>
<p>如何写出满足KISS原则的代码？</p>
<ul>
<li>不要使用同事可能不懂的技术来实现代码。比如正则表达式，一些语言中的高级语法等</li>
<li>不要重复造轮子，要善于使用已经有的工具类库。</li>
<li>不要过度优化。不要过度使用一些奇技淫巧（比如，位运算代替算数运算、复杂的条件语句代替 if-else、使用一些过于底层的函数等）来优化代码，牺牲代码的可读性。</li>
<li>KISS原则要综合考虑 逻辑复杂度、实现难度、代码可读性、代码行数等；本身复杂的问题，用复杂的方法解决，并不违背KISS原则。同样的代码，在某个业务场景下满足KISS原则，换一个应用场景可能就不满足了。</li>
</ul>
<h3 id="YAGNI原则"><a href="#YAGNI原则" class="headerlink" title="YAGNI原则"></a>YAGNI原则</h3><p>YAGNI原则：</p>
<ul>
<li>You Ain’t Gonna Need It</li>
</ul>
<p>核心思想：不要做过度设计</p>
<h3 id="两者关系"><a href="#两者关系" class="headerlink" title="两者关系"></a>两者关系</h3><p>KISS &amp; YAGNI：</p>
<ul>
<li>KISS原则是保持代码可读性与可维护性的重要手段。主要讲 “如何做” 的问题（尽量保持简单）。</li>
<li>YAGNI原则核心思想是不要做过度设计。主要讲 “要不要做” 的问题（当前不需要的就不要做）。</li>
</ul>
<p><br></p>
<h2 id="DRY原则"><a href="#DRY原则" class="headerlink" title="DRY原则"></a>DRY原则</h2><p>DRY原则</p>
<ul>
<li>Don’t Repeat Yourself</li>
</ul>
<p>三种代码重复：</p>
<ul>
<li>实现逻辑重复</li>
<li>功能语义重复</li>
<li>代码执行重复</li>
</ul>
<p>违反原则情况：</p>
<ul>
<li>实现逻辑重复、功能语义不重复；不违反DRY原则</li>
<li>实现逻辑不重复、功能语义重复；违反DRY原则</li>
<li>代码执行重复；违反DRY原则</li>
</ul>
<p>代码复用性（Code Reusability） &amp; 代码复用（Code Resue） &amp; DRY原则</p>
<ul>
<li>定义：<ul>
<li>代码复用性：一种特性或能力，在编写代码的时候，尽量保证代码可被复用。</li>
<li>代码复用：一种行为，在开发新功能的时候，尽量复用已经存在的代码。</li>
<li>DRY原则：一条原则，不要写重复的代码</li>
</ul>
</li>
<li>区别：<ul>
<li>“不重复” 并不代表 “可复用”</li>
<li>“复用” 和 “可复用性” 关注的角度不同</li>
</ul>
</li>
</ul>
<p>如何提高代码复用性：</p>
<ul>
<li>减少代码耦合</li>
<li>满足单一职责原则</li>
<li>模块化</li>
<li>业务与非业务逻辑分离</li>
<li>通用代码下沉</li>
<li>继承、多态、抽象、封装</li>
<li>应用模板等设计模式</li>
</ul>
<p>Rule of Three 原则：</p>
<ul>
<li>第一次编写代码的时候，不考虑复用性；第二次遇到复用场景的时候，再进行重构使其复用。</li>
</ul>
<p><br></p>
<h2 id="迪米特法则（LOD-Law-of-Demeter）"><a href="#迪米特法则（LOD-Law-of-Demeter）" class="headerlink" title="迪米特法则（LOD, Law of Demeter）"></a>迪米特法则（LOD, Law of Demeter）</h2><p>迪米特法则（Law of Demeter，The Least Knowledge Principle）</p>
<ul>
<li>Each unit should have only limited knowledge about other units: only units “closely” related to the current unit.Or: Each unit should only talk to its friends; Don’t talk to strangers.</li>
</ul>
<p>迪米特法则可以帮助实现代码 “高内聚、松耦合”，从而有效的提高代码的可读性与可维护性，缩小功能改动导致的代码改动范围。</p>
<p>高内聚、松耦合：</p>
<ul>
<li>一个设计思想，能够有效的提高代码可读性与可维护性。“高内聚” 用来指导类本身的设计，“松耦合”用来指导类与类之间依赖关系的设计。</li>
<li>高内聚，指相近的功能应该放在同一个类中，不想近的功能不要放在同一个类中。相近的功能往往会被同时修改，放到同一个类中，修改会比较集中。</li>
<li>松耦合，指类与类之间的依赖关系简单清晰。两个类有依赖关系，一个类的代码改动也不会或很少导致依赖类的代码改动。</li>
</ul>
<p>如何理解 迪米特法则：</p>
<ul>
<li>不该有直接依赖关系的类之间，不要有依赖</li>
<li>有依赖关系的类之间，尽量只依赖必要的接口</li>
<li>迪米特法则是希望减少类之间的耦合，让类越独立越好</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="4-设计原则与思想：规范与重构"><a href="#4-设计原则与思想：规范与重构" class="headerlink" title="4. 设计原则与思想：规范与重构"></a>4. 设计原则与思想：规范与重构</h1><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p><strong>很多技术问题本身就不是单纯靠技术来解决的，更重要的是要有这种认知和意识。</strong></p>
<h3 id="Why-重构的目的"><a href="#Why-重构的目的" class="headerlink" title="Why - 重构的目的"></a>Why - 重构的目的</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重构是一种对软件内部结构的改善，目的是在不改变软件的可见行为的情况下，使其更易理解，修改成本更低。</span><br><span class="line"></span><br><span class="line">																				—— Martin Fowler</span><br></pre></td></tr></table></figure>
<p>重点：</p>
<ul>
<li><strong>重构不改变外部的可见行为</strong></li>
</ul>
<p>进一步理解：</p>
<ul>
<li>在保持功能不变的前提下，利用设计思想、原则、模式、编程规范等理论来优化代码，修改设计上的不足，提高代码质量。</li>
<li>重构对工程师本身的技术成长有重要意义。<ul>
<li>初级工程师在维护代码</li>
<li>中级工程师在设计代码</li>
<li>高级工程师在重构代码</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="What-重构的对象"><a href="#What-重构的对象" class="headerlink" title="What - 重构的对象"></a>What - 重构的对象</h3><p>根据重构的规模，可以分为：</p>
<ul>
<li>大型重构：大规模、高层次的重构<ul>
<li>对象：对顶层代码设计的重构，包括：系统、模块、代码结构、类与类之间的关系</li>
<li>手段：更多的利用 设计思想、原则、模式；比如：分层、模块化、解耦、抽象可复用组件</li>
<li>影响：涉及代码改动多，影响面大，难度大，耗时长，风险大</li>
</ul>
</li>
<li>小型重构：小规模、低层次的重构<ul>
<li>对象：对代码细节的重构，包括：类、函数、变量等</li>
<li>手段：更多的利用编码规范；比如：规范命名、规范注释、消除超大类或函数、提取重复代码</li>
<li>影响：修改集中，比较简单，可操作性强，耗时短，风险小</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="When-重构的时机"><a href="#When-重构的时机" class="headerlink" title="When - 重构的时机"></a>When - 重构的时机</h3><p>两个不要：</p>
<ul>
<li>不要等到代码烂到一定程度，再去重构</li>
<li>不要花尽心思去构思完美设计，避免以后的重构</li>
</ul>
<p>要有 <strong>持续重构意识</strong></p>
<ul>
<li>正确的看待代码质量和重构</li>
<li>代码质量总会因各种原因下降，代码总会存在不完美，避免开发初期的过度设计</li>
</ul>
<p><br></p>
<h3 id="How-重构的方法"><a href="#How-重构的方法" class="headerlink" title="How - 重构的方法"></a>How - 重构的方法</h3><p>针对大型重构</p>
<ul>
<li>有组织、有计划的进行，分阶段地小步快跑，时刻让代码处于可运行的状态</li>
</ul>
<p>针对小型重构</p>
<ul>
<li>看个人意愿，随时随地都可以去做</li>
</ul>
<h4 id="重构技巧之-代码的可测试性"><a href="#重构技巧之-代码的可测试性" class="headerlink" title="重构技巧之 代码的可测试性"></a>重构技巧之 代码的可测试性</h4><p>代码的可测试性就是针对代码编写单元测试的难易程度。</p>
<p>依赖注入是编写可测试性代码的最有效手段。</p>
<p>常见的测试不友好的代码类型：（Anti-Patterns）</p>
<ul>
<li>代码中包含未决行为逻辑</li>
<li>滥用可变全局变量</li>
<li>滥用静态方法</li>
<li>使用复杂的继承关系</li>
<li>高度耦合的代码</li>
</ul>
<h4 id="重构技巧之-单元测试"><a href="#重构技巧之-单元测试" class="headerlink" title="重构技巧之 单元测试"></a>重构技巧之 单元测试</h4><p>单元测试是保证代码质量最有效的两个手段之一（单元测试 &amp; Code Review）</p>
<p>为什么要写单元测试：</p>
<ol>
<li>能有效地帮助发现代码中的bug</li>
<li>能帮助发现代码设计上的问题</li>
<li>是对集成测试的有力补充</li>
<li>写单元测试的过程本身就是代码重构的过程</li>
<li>阅读单元测试能帮助快速熟悉代码</li>
<li>单元测试是TDD(Test-Driven Development 测试驱动开发)可落地执行的改进方案</li>
</ol>
<p>树立编写单元测试的正确认知：</p>
<ul>
<li>编写单元测试尽管繁琐，但并不是太耗时</li>
<li>可以稍微放低对单元测试代码质量的要求</li>
<li>覆盖率作为衡量单元测试质量的唯一标准是不合理的</li>
<li>单元测试不要依赖被测试代码的具体实现逻辑</li>
<li>单元测试框架无法测试，多半是因为代码的可测试性不够好</li>
</ul>
<p>为何一般难以落地执行：</p>
<ul>
<li>写单元测试比较繁琐，技术挑战不大，程序员意愿低</li>
<li>很多研发偏向：快、糙、猛，容易因为开发进度紧，导致单元测试的执行虎头蛇尾</li>
<li>团队没有建立对单元测试正确的认知</li>
</ul>
<h4 id="重构技巧之-解耦"><a href="#重构技巧之-解耦" class="headerlink" title="重构技巧之 解耦"></a>重构技巧之 解耦</h4><p>大型重构最有效的一个手段</p>
<p>解耦的重要性</p>
<ul>
<li>过于复杂的代码往往在可读性、可维护性上都不友好。解耦保证代码松耦合、高内聚，是控制代码复杂度的有效手段。</li>
</ul>
<p>判断是否需要解耦：</p>
<ul>
<li>看修改代码是否要牵一发而动全身</li>
<li>根据模块之间、类之间的依赖关系图的复杂度</li>
</ul>
<p>如何解耦：</p>
<ul>
<li>封装与抽象</li>
<li>添加中间层</li>
<li>模块化</li>
<li>设计思想与原则<ul>
<li>单一职责</li>
<li>基于接口而非实现编程</li>
<li>依赖注入</li>
<li>多用组合少用继承</li>
<li>迪米特法则</li>
</ul>
</li>
<li>设计模式<ul>
<li>观察者模式</li>
</ul>
</li>
</ul>
<h4 id="20条编码规范"><a href="#20条编码规范" class="headerlink" title="20条编码规范"></a>20条编码规范</h4><p><strong>最重要的的一点：统一编码规范！！</strong></p>
<h5 id="命名与注释（Naming-and-Comments）"><a href="#命名与注释（Naming-and-Comments）" class="headerlink" title="命名与注释（Naming and Comments）"></a>命名与注释（Naming and Comments）</h5><ul>
<li><strong>命名的长度</strong>：命名的关键是能准确达意。对于不同作用域的命名，可以适当地选择不同长度。作用域小的变量（比如临时变量），可以适当地短一些的命名方式。除此之外，命名中也可以使用一些耳熟能详的缩写。</li>
<li><strong>简化命名</strong>：可以借助类的信息来简化属性、函数的命名，利用函数的信息来简化函数参数的命名。</li>
<li><strong>命名需可读、可搜索</strong>：不要使用生僻的、不好读的英文单词来命名。除此之外，命名要符合项目的统一规范。</li>
<li><strong>接口与抽象类的命名</strong>：<ul>
<li>接口有两种方式命名，一种是在接口中带前缀“I”，另一种是在接口的实现类中带后缀“Impl”。</li>
<li>抽象类的命名，也有两种方式，一种是带上前缀“Abstract”，另一种是不带前缀。</li>
<li>无论采用哪种，关键是要在项目中统一</li>
</ul>
</li>
<li><strong>注释的目的</strong>：注释目的是让代码更容易看懂。只要符合这个要求，就可以将它写到注释里。注释的内容主要包含三个方面：做什么、为什么、怎么做。对于一些复杂的类与接口，可能还需要写明 如何用。</li>
<li><strong>注释的数量</strong>：注释本身有一定的维护成本，所以并非越多越好。类和函数一定要写注释，而且要写的尽可能全面、详细，而函数内部的注释要相对少一些，一般都是靠好的命名、提炼函数、解释性变量、总结性注释来提高代码可读性。</li>
</ul>
<h5 id="代码风格（Code-Style）"><a href="#代码风格（Code-Style）" class="headerlink" title="代码风格（Code Style）"></a>代码风格（Code Style）</h5><ul>
<li><strong>函数、类的大小</strong>：函数的代码尽量不要超过一屏幕的大小，例如50行。</li>
<li><strong>一行代码长度</strong>：一行代码尽量不要超过IDE显示的宽度，也不要太小。</li>
<li><strong>善用空行分割单元块</strong>：对于比较长的函数，为了让逻辑更加清晰，可以使用空行来分割各个代码块。</li>
<li><strong>缩进大小</strong>：四格缩进与两格缩进，尽量使用两格缩进，可以节省空间，特别是在代码嵌套层次比较深的情况下。尽量不要使用tab键缩进。</li>
<li><strong>大括号是否另起一行</strong>：推荐大括号放到跟上一条语句同行的风格，可以节省代码行数。</li>
<li><strong>类中成员的排列顺序</strong>：依赖类按照字母序从小到大排列。类中先写成员变量，后写函数。成员变量之间或函数之间，先写静态成员变量或函数，后写普通变量或函数，并且按照作用域大小依次排列。</li>
</ul>
<h5 id="编程技巧（Coding-Tips）"><a href="#编程技巧（Coding-Tips）" class="headerlink" title="编程技巧（Coding Tips）"></a>编程技巧（Coding Tips）</h5><ul>
<li>将复杂的逻辑提炼拆分成函数和类</li>
<li>通过拆分多个函数或将参数封装为对象的方式，来处理参数过多的情况</li>
<li>函数中不要使用参数来做代码执行逻辑的控制</li>
<li>函数涉及要职责单一</li>
<li>移除过深的嵌套层次，方法包括：<ul>
<li>去除多余的 if 或 else 语句</li>
<li>使用 continue、break、return 关键字，提前退出嵌套</li>
<li>调整执行顺序来减少嵌套</li>
<li>将部分嵌套逻辑抽象成函数</li>
</ul>
</li>
<li>用字面常量取代魔法数</li>
<li>用解释性变量来解释复杂表达式，以此提高代码可读性</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="5-设计模式与范式"><a href="#5-设计模式与范式" class="headerlink" title="5. 设计模式与范式"></a>5. 设计模式与范式</h1><p>设计模式主要做的事情就是解耦：</p>
<ul>
<li>创建型模式<ul>
<li>解决：<ul>
<li>对象的创建问题，封装复杂的创建过程</li>
</ul>
</li>
<li>方式：<ul>
<li>将 创建代码 和 使用代码 解耦</li>
</ul>
</li>
<li>包含：<ul>
<li>单例模式</li>
<li>工厂模式</li>
<li>建造者模式</li>
<li>原型模式</li>
</ul>
</li>
</ul>
</li>
<li>结构型模式，<ul>
<li>解决：<ul>
<li>类或对象的组合问题</li>
</ul>
</li>
<li>方式：<ul>
<li>将 不同功能的代码 解耦</li>
</ul>
</li>
<li>包含：<ul>
<li>代理模式</li>
<li>桥接模式</li>
<li>装饰器模式</li>
<li>适配器模式</li>
<li>门面模式</li>
<li>组合模式</li>
<li>享元模式</li>
</ul>
</li>
</ul>
</li>
<li>行为型模式，<ul>
<li>解决：<ul>
<li>类或对象之间的交互问题</li>
</ul>
</li>
<li>方式：<ul>
<li>将 不同的行为代码 解耦</li>
</ul>
</li>
<li>包含：<ul>
<li>观察者模式</li>
<li>模板模式</li>
<li>策略模式</li>
<li>职责链模式</li>
<li>迭代器模式</li>
<li>状态模式</li>
<li>访问者模式</li>
<li>备忘录模式</li>
<li>命令模式</li>
<li>解释器模式</li>
<li>中介模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h2><p>创建型模式主要解决对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码。</p>
<ul>
<li>单例模式用来创建全局唯一的对象</li>
<li>工厂模式用来创建不同但相关类型的对象（继承同一父类或接口的一组子类），由给定的参数来决定创建哪种类型对象</li>
<li>建造者模式用来创建复杂对象，可通过设置不同的可选参数，“定制化”地创建不同的对象</li>
<li>原型模式针对创建成本比较大的对象，利用已有对象进行复制的方式创建，以达到节省创建时间的目的</li>
</ul>
<p><br></p>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>概念：</p>
<ul>
<li>一个类只允许创建一个对象（或实例）</li>
</ul>
<p>应用场景：</p>
<ul>
<li>处理资源访问冲突<ul>
<li>主要解决多线程时的冲突</li>
<li>其他解决方法还有：分布式锁、并发队列等</li>
<li>相对来说，单例模式方案更加简单</li>
</ul>
</li>
<li>表示全局唯一类</li>
</ul>
<p>实现重点：</p>
<ul>
<li>构造函数需要是private访问权限，避免外部通过new创建实例</li>
<li>考虑对象创建时的线程安全问题</li>
<li>考虑是否支持延迟加载</li>
<li>考虑 getInstance() 性能是否高（是否加锁）</li>
</ul>
<p>实现方案：</p>
<ol>
<li><p>饿汉式</p>
<ul>
<li><p>方式：在类加载的时候，instance 静态实例就已经创建并初始化好。</p>
</li>
<li><p>缺点：不支持延迟加载，若占用资源多或初始化时间长，提前初始化会浪费资源。</p>
</li>
</ul>
</li>
<li><p>懒汉式</p>
<ul>
<li><p>方式：在调用的时候，判断是否存在，并加锁创建实例</p>
</li>
<li><p>缺点：由于加锁，导致 getInstance() 性能低。若频繁使用，会导致性能瓶颈</p>
</li>
</ul>
</li>
<li><p>双重检测</p>
<ul>
<li>方式：在instanc被创建后，加类级别的锁，避免再次加锁</li>
<li>缺点：有可能因为指令重排序导致其他问题</li>
</ul>
</li>
<li><p>静态内部类</p>
</li>
<li><p>枚举</p>
</li>
</ol>
<p>存在的问题：</p>
<ul>
<li>单例对OOP特性的支持不友好</li>
<li>单例会隐藏类之间的依赖关系</li>
<li>单例对代码的扩展性不友好</li>
<li>单例对代码的可测试性不友好</li>
<li>单例不支持有参数的构造函数</li>
</ul>
<p>替代方案：</p>
<ul>
<li>用静态方法来实现</li>
<li>通过工厂模式、IOC容器来保证，由程序员来保证</li>
</ul>
<p>其他：</p>
<ul>
<li>如何理解单例模式的唯一性<ul>
<li>单例类中对象的唯一性的作用范围是“进程唯一”的。</li>
<li>“进程唯一”指的是进程为内唯一，进程间不唯一（即 线程内唯一，线程间也唯一）</li>
<li>“线程唯一”指的是线程内唯一，线程间不唯一</li>
<li>“集群唯一”指的是进程内唯一、进程间也唯一</li>
</ul>
</li>
</ul>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>概念：</p>
<ul>
<li>可以分为 简单工厂、工厂方法、抽象工厂。（简单工厂模式可看作是工厂方法模式的一种特例）</li>
<li>解耦对象的创建与使用</li>
</ul>
<p>应用场景：</p>
<ul>
<li>当创建逻辑比较复杂，是个”大工程“的时候，可以考虑使用工厂模式，封装对象的创建过程，将对象的创建和使用分离。</li>
<li>第一种情况：类似规则配置解析，代码中存在 if-else 分支判断，动态地根据不同的类型创建不同的对象。将这一大坨 if-else 创建对象的代码分离出来，放到工厂类中。</li>
<li>第二种情况：尽管不需要根据不同的类型创建不同的对象，但是单个对象本身的创建过程比较复杂，比如前面提到的要组合其他类的对象，做各种初始化操作。此时，也可以考虑使用工厂模式，将对象的创建过程封装到工厂类中。</li>
</ul>
<p>实现重点：</p>
<ul>
<li>封装变化：创建逻辑有可能变化，封装成工厂类之后，创建逻辑的变更对调用者透明。</li>
<li>代码复用：创建代码抽离到独立的工厂类之后可以复用。</li>
<li>隔离复杂性：封装复杂的创建逻辑，调用者无需了解如何创建对象。</li>
<li>控制复杂度：将创建代码抽离出来，让原本的函数或类职责更单一，代码更简洁。</li>
</ul>
<p>DI容器：（依赖注入容器  Dependency Injection COntainer）</p>
<ul>
<li>DI容器在一些软件开发中已经成为了标配，比如 Spring IOC、Google Guice。</li>
<li>实现逻辑主要包括：<ul>
<li>配置文件解析</li>
<li>对象创建</li>
<li>对象的生命周期管理</li>
</ul>
</li>
</ul>
<h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>概念：</p>
<ul>
<li>如果一个类中有很多属性，为了避免构造函数的参数列表过长，影响代码的可读性和易用性，可以通过构造函数配合set的方法解决。但是若存在下面情况任意一种，需考虑使用建造者模式：<ul>
<li>必填属性很多，通过set方法设置，但是校验必填属性的逻辑无处安放</li>
<li>类的属性之间有一定的依赖关系或约束条件。依赖关系或约束条件的校验逻辑无处安放</li>
<li>创建不可变对象，不能暴露set方法，无法通过set方法赋值</li>
</ul>
</li>
</ul>
<p>与工厂模式的区别：</p>
<ul>
<li>工厂模式是用来创建不同但是相关类型的对象（继承同一父类或者接口的一组子类），有给定的参数来决定创建哪种类型的对象。</li>
<li>建造者模式是用来创建一种类型的复杂对象，可以通过设置不同的可选参数，“定制化”的创建不同的对象。</li>
</ul>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>概念:</p>
<ul>
<li>如果对象的创建成本比较大，而同一个类的不同对象之间差别不大时，可以利用对已有对象（原型）进行复制（或叫拷贝）的方式来创建新对象，以达到节省创建时间的目的。</li>
</ul>
<p>实现方法：</p>
<ul>
<li>深拷贝。深拷贝得到的是一份完完全全独立的对象。</li>
<li>浅拷贝。浅拷贝指挥复制对象中基本数据类型数据和引用对象的内存地址，不会递归地复制引用对象，以及引用对象的对象</li>
<li>深拷贝更加耗时，耗空间。</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h2><p>结构型模式主要总结一些类或对象组合在一起的经典结构；这些结构可以解决特定应用场景的问题。</p>
<p><br></p>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>概念：</p>
<ul>
<li>在不改变原始类（或叫被代理类）代码的情况下，通过引入代理类来给原始类附加功能</li>
</ul>
<p>应用场景：</p>
<ul>
<li>业务系统的非功能性需求开发。如：监控、统计、鉴权、限流、事务、幂等、日志。将附加功能与业务功能解耦，放到代理类中统一处理，程序员只需要关注业务方面开发。</li>
<li>在RPC、缓存中的应用。</li>
</ul>
<p>实现方式：</p>
<ul>
<li>静态代理类，针对每个类都创建一个代理类。但每个代理类中的代码都存在像模板式的“重复”代码，增加了维护成本和开发成本。</li>
<li>动态代理类，不事先为每个原始类编写代理类，而是在运行时动态地创建原始类对应的代理类，然后在系统中用给代理类替换掉原始类。</li>
</ul>
<h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>概念：</p>
<ul>
<li>将抽象与实现解耦，让它们可以独立变化<ul>
<li>此处“抽象”并非“抽象类”或“接口”，而是被“抽象”出来的一套“类库”，它只包含骨架代码，真正的业务逻辑需要委派给定义中的“实现”来完成。而定义中的“实现”，也并非“接口的实现类”，而是一套独立的“类库”。“抽象”和“实现”独立开发，通过对象之间的组合关系，组装在一起</li>
</ul>
</li>
<li>一个类存在两个（或多个）独立变化的维度，通过组合的方式，让这两个（或多个）维度可以独立进行扩展</li>
</ul>
<h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>概念：</p>
<ul>
<li>解决继承关系过于复杂的问题，通过组合替代继承。主要作用是给原始类添加增强功能。</li>
</ul>
<p>其他：</p>
<ul>
<li>装饰器类和原始类继承同样的父类，这样可以对原始类“嵌套”多个装饰器类</li>
<li>装饰器类是对功能的增强，这也是装饰器模式应用场景的重要特点</li>
</ul>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>概念：</p>
<ul>
<li>将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作</li>
</ul>
<p>应用场景：</p>
<ul>
<li>封装有缺陷的接口设计</li>
<li>统一多个类的接口设计</li>
<li>替换依赖的外部系统</li>
<li>兼容老版本接口</li>
<li>适配不同格式的数据</li>
</ul>
<p>代理、桥接、装饰器、适配器 四种模式的区别：</p>
<ul>
<li>共性：代理、桥接、装饰器、适配器，这四种模式都是比较常用的结构型设计模式。代码结构非常相似，都可以成为Wrapper模式，也就是通过Wrapper类二次封装原始类</li>
<li>不同：<ul>
<li>代理模式，在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非加强功能，这是与装饰器模式的最大不同</li>
<li>桥接模式，目的是将接口部分和实现部分分离，从而让它们较为容易且相对独立的改变</li>
<li>装饰器模式，在不改变原始类接口的情况下，对原始类功能进行增强，并且支持多个装饰器的嵌套使用</li>
<li>适配器模式，是一种事后的补救策略，适配器提供跟原始类不同的接口，而代理模式、装饰器模式都提供相同的接口</li>
</ul>
</li>
</ul>
<h3 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h3><p>概念：</p>
<ul>
<li>门面模式为子系统提供一组统一的接口，定义一组高层接口让子系统更易用</li>
</ul>
<p>应用场景：</p>
<ul>
<li>解决易用性的问题</li>
<li>解决性能问题</li>
<li>解决分布式事务问题</li>
</ul>
<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>概念：</p>
<ul>
<li>将一组对象组织成树形结构，以表示一种“部分-整体”的层次结构。组合让代码使用者可以统一单个对象和组合对象的处理逻辑。</li>
</ul>
<h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>概念：</p>
<ul>
<li>享元模式意图是复用对象，节省内存，前提是享元对象是不可变对象</li>
<li>当一个系统中存在大量重复对象的时候，如果这些重复对象是不可变对象，可以利用享元模式将对象设计成享元，在内存中只保留一份实例，供多出代码引用。这样可减少内存中对象的数量，起到节省内存的目的。</li>
<li>不可变对象是指，一旦通过构造函数初始化完成之后，它的状态（对象的成员变量或属性）就不会再被修改</li>
</ul>
<p>实现：</p>
<ul>
<li>通过工厂模式，在工厂类中，通过一个Map或者List来缓存已经创建好的享元对象，以达到复用的目的。</li>
</ul>
<p>享元模式与单例模式的区别：</p>
<ul>
<li>单例模式中一个类只能创建一个对象。单例模式的设计意图是限制对象个数。</li>
<li>享元模式中，一个类可以创建多个对象，每个对象被多出代码引用共享（实际上，有些类似于多例）。享元模式的设计意图是对象复用，节省内存。</li>
</ul>
<p>享元模式与缓存的区别：</p>
<ul>
<li>享元模式的实现中，通过工厂类来“缓存”已创建好的对象。此处缓存即为存储。</li>
<li>平时所说的缓存，主要是为了提高访问效率，而非复用。</li>
</ul>
<p>享元模式与对象池的区别：</p>
<ul>
<li>池化技术的复用可以理解为“重复使用”，主要目的是节省时间。</li>
<li>享元模式中的复用可以理解为“共享使用”，主要目的是节省空间。</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h2><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>概念：</p>
<ul>
<li>在对象之间定义一个一对多的依赖，当一个对象状态改变的时候，所有依赖的对象都会自动收到通知。</li>
<li>通常来说，被依赖的对象叫做 被观察者（Obserable），依赖的对象叫做 观察者（Observer）</li>
<li>解耦观察者与被观察者</li>
</ul>
<p>实现：</p>
<ul>
<li>同步阻塞是最经典的实现方式，主要为了代码解耦</li>
<li>异步非阻塞，除了能实现代码解耦，还可以提高代码的执行效率</li>
<li>进程间的观察者模式解耦更加彻底，一般是基于消息队列来实现</li>
</ul>
<h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><p>概念：</p>
<ul>
<li>模板方法模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。模板方法模式可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些步骤。</li>
<li>此处的“算法”，可以理解为广义上的 “业务逻辑”，并不是特指数据结构与算法中的“算法”</li>
</ul>
<p>作用：</p>
<ul>
<li>复用<ul>
<li>所有的子类可以复用父类中提供的模板方法的代码</li>
</ul>
</li>
<li>扩展<ul>
<li>并非代码的扩展性，而是指框架的扩展性</li>
<li>框架通过模板模式提供功能扩展点，让框架用户在不修改框架源码情况下，基于扩展点定制化框架的功能</li>
</ul>
</li>
</ul>
<p>模板模式 与 回调：</p>
<ul>
<li>回调简介<ul>
<li>概念：相对于普通的函数来说，回调是一种双向调用关系。A类事先注册某个函数1到B类，A类在调用B类函数2的时候，B类反过来调用A类注册给它的函数1。这里的函数1叫做 回调函数。A调用B，B反过来又调用A，这种调用机制叫做 回调。</li>
<li>分类：回调可以分为同步回调与异步回调（或叫做延迟回调）。同步回调指在函数返回之前执行回调函数；异步回调指函数返回之后执行回调函数。</li>
</ul>
</li>
<li>区别：<ul>
<li>从应用场景上来看，同步回调与模板模式几乎一致，都是在一个大的算法骨架中，自由替换其中某个步骤，起到代码复用与扩展的目的；而异步回调跟模板模式有较大的区别，更像是观察者模式</li>
<li>从代码实现上来看，回调和模板模式完全不同。回调基于组合关系来实现，把一个对象传递给另一个对象，是一种对象之间的关系；模板模式基于继承关系来实现，子类重写父类的抽象方法，是一种类之间的关系。</li>
</ul>
</li>
<li>组合优于继承，回调相对于模板模式会更加灵活<ul>
<li>对于只支持单继承的语言，基于模板模式编写的子类，已经继承了一个父类，不在具有继承能力</li>
<li>回调可以使用匿名类来创建回调对象，可以不用事先定义类；而模板模式针对不同的实现都要定义不同的子类</li>
<li>如果某个类中定义了多个模板方法，每个方法都有相对应的抽象方法，那即便我们只用到其中的一个模板方法，子类也必须实现所有的抽象方法；而回调就更加灵活，只需要往用到的模板方法中注入回调对象即可。</li>
</ul>
</li>
</ul>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>概念：</p>
<ul>
<li>定义一族算法类，将每个算法分别封装起来，让它们可以互相替换。策略模式可以使算法的变化独立于使用它们的客户端代码（调用者）。</li>
<li>策略模式用于解耦策略类的定义、创建、使用<ul>
<li>策略类的定义，包含一个策略接口和一组实现这个接口的类。因为所有的策略类都实现相同的接口，所以，客户端代码基于接口而非实现编程，可以灵活地替换不同的策略。</li>
<li>策略类的创建，在使用的时候，一般会通过类型来判断创建哪个策略类使用。为了封装创建逻辑，需要对客户端代码屏蔽创建细节，可以把根据类型创建策略的逻辑抽离出来，放到工厂类中。</li>
<li>策略类的使用，策略模式可以包含一组可选策略，客户端代码可以在运行时动态确定使用哪组策略。</li>
</ul>
</li>
</ul>
<p>应用：</p>
<ul>
<li>移出 if-else 分支判断<ul>
<li>实际上是使用策略工厂类，借助 查表法，根据类型查表替代根据类型分支判断</li>
</ul>
</li>
</ul>
<p>策略模式与工厂模式区别</p>
<ul>
<li>工厂模式<ul>
<li>目的是创建不同且相关的对象</li>
<li>侧重于 创建对象</li>
<li>实现方式上通过父类或者接口</li>
<li>一般创建对象应该是现实世界中某种事物的映射，有它自己的属性与方法</li>
</ul>
</li>
<li>策略模式<ul>
<li>目的是实现方便地替换不同的算法类</li>
<li>侧重于算法（行为）实现</li>
<li>实现方式上通过接口</li>
<li>创建对象对行为的抽象而非对对象的抽象，一般没有属于自己的属性</li>
</ul>
</li>
</ul>
<p>其他：</p>
<ul>
<li>一提到策略模式，有人就认为它的作用是避免if-else分支判断逻辑。实际上这是很片面的。策略模式的主要作用是解耦策略的定义、创建与使用，控制代码的复杂度，让每个部分都不至于过于复杂、代码量过多。除此之外，对于复杂的代码来说，策略模式还能让其满足开闭原则，添加新策略的时候，最小化集中化代码改动，减少引入bug的风险。</li>
<li>实际上，设计原则和思想比设计模式更加普适和重要。掌握了代码的设计原则和思想，我们能更清楚的了解，为什么要用某种设计模式，就能更恰到好处地应用设计模式。</li>
</ul>
<h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><p>概念：</p>
<ul>
<li>将请求的发送和接收解耦，让多个接收对象都有机会处理这个请求。将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个接收对象能够处理它为止。</li>
<li>标准的职责链模式，依次执行，有可处理的或异常就终止；变体职责链模式，顺序执行，不终止。</li>
<li>实现上可通过链表或者数组</li>
</ul>
<p>应用：</p>
<ul>
<li>应对代码的复杂性。将大块代码逻辑拆分成函数，将大类拆分成小类。</li>
<li>让代码满足开闭原则，提高可扩展性。</li>
<li>具体应用场景：开发框架的过滤器与拦截器功能</li>
</ul>
<h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>有限状态机（Finite State Machine  FSM）：</p>
<ul>
<li>概念：状态机由三部分组成 状态（State）、事件（Event）/ 转移条件（Transition Condition）、动作（Action）。事件触发状态的转移及动作的执行，不过动作不是必须的，也可能只转移状态，不执行动作。</li>
<li>实现方式：<ul>
<li>分支逻辑法，参照状态转移图，将每一个状态转移，原模原样的直译成代码。这样编写会有大量的 if-else 或 switch-case 分支判断逻辑。局限在于可维护性差，无法实现复杂的状态机。</li>
<li>查表法，参照状态转移图，构建二维表。一般以第一维度表示当前状态，第二维度表示事件，值表示当前状态经过事件之后，转移到的新状态及要执行的动作。相对于分支逻辑法，查表法更清晰，可读性与可维护性更好。局限在于只能实现执行简单的动作逻辑。</li>
<li>状态模式，将事件触发的状态转移和动作执行，拆分到不同状态类中。局限在于引入非常多的状态类，若状态比较多，维护复杂度高。</li>
</ul>
</li>
</ul>
<p>应用：</p>
<ul>
<li>像游戏这种比较复杂的状态机，优先推荐查表法，状态模式会引入非常多的状态类，会导致代码比较难以维护。像电商下单、外卖下单这种类型状态机，状态并不多，状态转移也简单，但事件触发执行的动作包含的业务逻辑可能会比较复杂，更推荐使用状态模式来实现。</li>
</ul>
<h3 id="迭代器模式-游标模式"><a href="#迭代器模式-游标模式" class="headerlink" title="迭代器模式/游标模式"></a>迭代器模式/游标模式</h3><p>概念：</p>
<ul>
<li>用来遍历集合对象（/容器/聚合对象），实际上就是包含一组对象的对象，例如 数组、链表、树、图、跳表。迭代器模式将集合对象的遍历操作从集合类中拆分出来，放到迭代器类中，让两者的职责更单一。</li>
<li>一个完整的迭代器涉及 容器 和 容器迭代器 两部分。为了基于接口而非实现编程的目的，容器又包含容器接口、容器实现类，迭代器又包含 迭代器接口、迭代器实现类。</li>
</ul>
<p>实现方式：</p>
<ul>
<li>迭代器中需要定义 hasNext 、currentItem 、next 三个最基本的方法。待遍历的容器对象通过依赖注入传递到迭代器类中，容器通过 iterator 方法来创建迭代器。</li>
</ul>
<p>优势/作用：</p>
<ul>
<li>封装集合内部复杂的数据结构，开发者不需要了解如何遍历，直接使用容器提供的迭代器即可。</li>
<li>将集合对象的遍历操作从集合类中拆分出来，放到迭代器类中，让两者的职责更单一。</li>
<li>让添加新的遍历算法更加容易，更符合开闭原则。</li>
<li>因为迭代器都实现自相同的接口，在开发中，基于接口而非实现编程，替换迭代器类也更加容易。</li>
</ul>
<p>其他：</p>
<ul>
<li>在通过迭代器来遍历集合元素的同时，增删集合中的元素，有可能会导致某个元素被重复遍历或遍历不到，也有可能正常遍历，这种行为称为 结果不可预期行为 或者 未决行为。<strong>未决行为比出错更加可怕，很难debug</strong> 。为了避免这种行为发生，一般会在遍历时不允许增删元素，或者在遍历后让遍历报错，通知尽快修改（fail-fast 解决方式）。</li>
<li>如何实现“快照”功能的迭代器<ul>
<li>快照：指为容器创建迭代器的时候，相当于给容器拍了一张快照（Snapshot）。之后增删容器中的元素，快照中的元素并不会做相应的改动，而迭代器遍历的对象是快照而非容器，避免在使用迭代器遍历的过程中，增删容器中的元素导致的不可预期的结果或报错。</li>
<li>方案一：在迭代器类中定义一个成员变量来存储快照。每当创建迭代器的时候，都拷贝一份容器中的元素到快照中，后续的遍历操作都基于这个迭代器自己持有的快照来进行。<ul>
<li>缺点是内存消耗很高，如果一个容器中同时有多个迭代器，就会存在多个重复的快照，但对于浅拷贝类型的语言，相对还好一些。</li>
</ul>
</li>
<li>方案二：在容器中，为每个元素保存两个时间戳，一个是添加时间戳，一个是删除时间戳。在删除的时候通过设置删除时间戳为最大值的方式标记删除而非真正删除。同时，每个迭代器也保存一个迭代器创建时间戳。当使用迭代器来遍历容器的时候，只有容器内元素满足 元素添加时间戳 &lt; 迭代器创建时间戳 &lt; 元素删除时间戳，才属于这个迭代器的快照。<ul>
<li>缺点是底层依赖数组的数据结构，原本可以支持快速的随机访问，现在由于删除并非真正的删除，导致不支持快速的随机访问。（可以存两个数组，一个支持标记删除，来实现快照遍历功能；一个不支持标记删除，用来支持随机访问）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p>概念：</p>
<ul>
<li>允许一个或多个操作应用到一组对象上，解耦操作和对象本身</li>
</ul>
<p>应用：</p>
<ul>
<li>访问者模式针对一组类型不同的对象。尽管这组对象类型不同但它们继承相同的父类或者实现相同的接口。在不同的应用场景下，需要对这组对象进行一系列不相关的业务操作，为了避免不断添加功能导致类不断膨胀，职责越来越不单一，以及避免频繁地添加功能导致频繁代码修改，因此使用访问者模式，将对象与操作解耦，将这些业务操作抽离出来，定义在独立细分的访问者类中。</li>
</ul>
<p>其他：</p>
<ul>
<li>访问者模式，主要难点在代码实现。代码实现复杂的原因是，函数重载在大部分面向对象编程语言中是静态绑定的。也就是说，调用类的哪个重载函数，是在编译期间，由参数的声明类型决定的，而非运行时，根据参数的实际类型决定的。</li>
<li>项目中应用这种模式，会导致代码的可读性比较差。除非不得已，不要使用。</li>
<li>关于 Single Dispatch 与 Double Dispatch<ul>
<li>Single Dispatch，指的是执行哪个对象的方法，根据对象的运行时类型来决定；执行对象的哪个方法，根据方法参数的编译时类型来决定。</li>
<li>Double Dispatch，指的是执行哪个对象的方法，根据对象的运行时类型来决定；执行对象的哪个方法，根据方法参数的运行时类型来决定</li>
<li>具体到编程语言的语法机制，Single Dispatch 和 Double Dispatch 跟多态和函数重载直接相关。当前主流的面向对象编程语言都只支持 Single Dispatch，不支持 Double Dispatch。</li>
</ul>
</li>
</ul>
<h3 id="备忘录模式-快照模式"><a href="#备忘录模式-快照模式" class="headerlink" title="备忘录模式/快照模式"></a>备忘录模式/快照模式</h3><p>概念：</p>
<ul>
<li>在不违背封装原则的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便之后恢复对象为先前的状态。</li>
<li>两部分内容：一是在存储副本以便后期恢复；另一部分是在不违背封装原则的前提下，进行对象的备份和恢复。</li>
</ul>
<p>应用：</p>
<ul>
<li>用来防丢失、撤销、恢复等。相对于备份来说，备忘录模式更侧重于代码的设计和实现，备份更侧重架构设计或产品设计。</li>
</ul>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>概念：</p>
<ul>
<li>命令模式将请求（命令）封装为一个对象，这样可以使用不同的请求参数化其他对象（将不同请求依赖植入到其他对象），并且能够支持请求（命令）的排队执行、记录日志、撤销等（附加控制）功能。</li>
<li>落实到编码实现，命令模式用到最核心的实现手段，就是将函数封装成对象。在大部分编程语言中，函数是没办法作为参数传递给其他函数的，也没法赋值给变量。借助命令模式，将函数封装成对象，可以实现把函数像对象一样使用。</li>
</ul>
<p>应用：</p>
<ul>
<li>把函数封装成对象，对象就可以存储下来，方便控制执行。用来控制命令的执行，比如，异步、延迟、排队执行命令、撤销重做命令、存储命令、给命令记录日志等等。</li>
</ul>
<h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><p>概念：</p>
<ul>
<li>解释器模式为某个语言定义它的用法（或者叫文法）表示，并定义一个解释器用来处理这个语法。</li>
<li>这里的“语言”不仅仅指平时所说的中、英、日、法等各种语言。从广义上来讲，只要是能承载信息的载体，都可以称为“语言”，比如，古代的结绳记事、盲文、哑语、摩斯密码等。</li>
</ul>
<p>应用：</p>
<ul>
<li>解释器模式代码实现比较灵活，没有固定的模板。代码实现的核心思想，就是将语法解析的工作拆分到各个小类中，以此来避免大而全的解析类。一般的做法是，将语法规则拆分一些小的独立的单元，然后对每个单元进行解析，最终合并为对整个语法规则的解析。</li>
</ul>
<h3 id="中介模式"><a href="#中介模式" class="headerlink" title="中介模式"></a>中介模式</h3><p>概念：</p>
<ul>
<li>中介模式定义了一个单独的（中介）对象，来封装一组对象之间的交互。将这组对象之间的交互委派给与中介对象交互，来避免对象之间的直接交互。</li>
<li>中介模式的设计思想类似于中间层，通过引入中介这个中间层，将一组对象之间的交互关系（或者说依赖关系）从多对多（网状关系）转换为一对多（星状关系）。最小化对象之间的交互关系，降低代码复杂度，提高代码可读性和可维护性。</li>
</ul>
<p>中介模式 VS 观察者模式：</p>
<ul>
<li><p>简介：</p>
<ul>
<li>观察者模式有多种实现方式，观察者需要被注册到被观察者中，被观察者状态更新需要调用观察者update方法。但是，在跨进程的实现方式中，可以利用消息队列实现彻底解耦，观察者和被观察者都只需要跟消息队列交互，观察者完全不知道被观察者的存在，被观察者也完全不知道观察者的存在。</li>
<li>中介模式也是解耦对象之间的交互，所有参与者都只与中介进行交互。</li>
</ul>
</li>
<li><p>区别：</p>
<ul>
<li>在观察者模式中，尽管一个参与者既是观察者，同时也可以是被观察者，但是，大部分情况下，交互关系往往都是单向的，一个参与者要么是观察者，要么是被观察者，不会兼具两种身份。也就是说，在观察者模式的应用场景中，参与者之间的交互关系比较有调理。</li>
<li>中介模式中，只有当参与者之间的交互关系错综复杂，维护成本很高的时候才考虑使用中介模式。因为中介模式的应用汇带来一定的副作用，它有可能产生大而复杂的“上帝类”。</li>
</ul>
</li>
<li><p>应用：</p>
<ul>
<li>参与者之间交互比较有条例，一般是单向，要么观察者，要么被观察者，使用观察者模式。</li>
<li>如果一个参与者状态改变，其他参与者执行的操作有一定先后顺序要求，此时使用中介类。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《象与骑象人》读记</title>
    <url>/2021/01/23/%E3%80%8A%E8%B1%A1%E4%B8%8E%E9%AA%91%E8%B1%A1%E4%BA%BA%E3%80%8B%E8%AF%BB%E8%AE%B0/</url>
    <content><![CDATA[<p>人类的理性其实非常依赖于复杂的情感，只有当充满情绪的大脑运作顺畅时，理性才得以运转。</p>
<p>只有理性与情感携手合作，人类才会表现出聪慧的行为。</p>
<a id="more"></a>
<p><br></p>
<h1 id="读因"><a href="#读因" class="headerlink" title="读因"></a>读因</h1><h2 id="书"><a href="#书" class="headerlink" title="书"></a>书</h2><p>《象与骑象人》是一本心理学的书，主要讲述在人的心中，有一半是桀骜不驯的感性大象，另一半则是理智的骑象人。我们常常陷于理性与非理性的战争中，这种征战不仅影响我们的生活、决策，也在不断削弱我们的幸福感。我们该如何积极地、理性地去寻找幸福。</p>
<p>这本书受到很多知名人士及重量级媒体推荐，是完善积极心理学领域的经典著作。</p>
<h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>作者乔纳森·海特是积极心理学的先锋派领袖之一，获得过很多奖项，也曾被《展望》杂志评为“世界顶级思想家”。</p>
<p>他在TED演讲过两次：</p>
<ul>
<li>宗教信仰,进化论以及自我超越的狂喜<ul>
<li><em>主要讲述人类下一阶段进化的可能性方向。目前是仅作为一个独立个体，以自己利益为目标进行社会活动；下一阶应是加入一个组织中，为组织的目标进行社会活动。这个组织可以是宗教，集团等等，但重要的是，是以组织的共同利益为目标而非个人。（此处仅仅是我个人理解，并不代表作者观点，也不代表我自己观点）</em></li>
</ul>
</li>
<li>为什么共同利益来自于共同威胁<ul>
<li><em>主要就是讲述为什么共同利益来自于共同威胁，若面临的威胁单方面的，就无法让另一方为了共同的利益而做出牺牲。</em></li>
</ul>
</li>
</ul>
<p><em>关于积极心理学：</em></p>
<ul>
<li><em>积极心理学是相对于之前的消极心理学。之前对于心里学问题是当疾病处理，根据病对症下药，在于修补，治疗；而积极心理学，是注重人的优点长处进行导向，在于建设，预防。</em></li>
<li><em>让我想起来《黄帝内经》中提出的 “上工治未病，中工治欲病，下工治已病。”</em></li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="读感"><a href="#读感" class="headerlink" title="读感"></a>读感</h1><p>这本书副标题叫做 追求幸福的假设，通过阐述象与骑象人两个角色的定位，关系来指引如何处理这两者的关系，从而追求幸福。象代表我们内心感觉、本能反应、情绪与直觉，大部分情况下都是不自主的进行，可以称作自动化处理系统；骑象人代表我们有意识的思考控制后的理性抉择，可以称作控制化处理系统。</p>
<p>这两者的关系是互补的，象充满活力但头脑简单，骑象人成熟睿智但精力有限，我们生活中的大部分简单的事情需要由象来完成，骑象人只需要负责处理一些少量复杂的逻辑。两者缺一不可，历史上也通过很多实验证明了这点。</p>
<p><strong>象与骑象人</strong>之间的冲突主要有三方面：</p>
<ol>
<li>无能的意志力<ul>
<li>单靠意志力，控制系统很难打败自动化系统。</li>
</ul>
</li>
<li>心理干扰<ul>
<li>反弹效应，越不让怎么样反而越不容易做到。</li>
</ul>
</li>
<li>冠冕堂皇的理由<ul>
<li>很多行为都是由大象来做，当需要解释时，骑象人会站在大象一方，拼命解释。</li>
</ul>
</li>
</ol>
<p>此外，象的自动化行为刻印在人的骨子里，它的力量非常强大，骑象人几乎不可能掌控象或代替象，只能去引导去建设；而象也不可能一直随心所欲，唯有协作，互惠共赢。</p>
<p><strong>什么是幸福</strong>？</p>
<ul>
<li>进展原则：朝着目标前进比达成目标要幸福</li>
<li>适应原则：人对现况的判断是以比自己现已适应的更好或更坏为基准</li>
</ul>
<p>幸福的方程式：</p>
<p>H(幸福持久度) = S(天生遗传的幸福范围) + C(生活条件) + V(自己可以控制的因素)</p>
<ul>
<li>H - 幸福持久度：</li>
<li>S - 天生遗传的幸福范围</li>
<li>C - 生活条件：指我们无法改变的事实，例如种族、性别、年龄及残障等</li>
<li>V - 自己可以控制的因素：指我们能改变的事实，例如财富、婚姻状况、居住地等</li>
</ul>
<p><em>积极心理学的挑战，就在于如何以科学的方法找出，到底是哪些C和V，可将H提升到我们的幸福可能范围的上限。</em></p>
<p><strong>追求正确的幸福</strong>：</p>
<ul>
<li>放纵感官的活动，例如吃冰淇淋<ul>
<li>效益并不持久，感官享乐当下感觉很强烈，但很快会消退，当事人事后不会因此而多长智慧或变得更强，反而会引诱人沉溺于其中，让人远离对自己更有益的活动。</li>
</ul>
</li>
<li>增强满足感的活动，例如听演讲、表达善意和感激（心流体验）<ul>
<li>满足感会不断鞭策我们，挑战我们的极限，逼迫我们使劲全力发挥潜能。</li>
</ul>
</li>
</ul>
<p><strong>怎样获得自我提升感</strong>：</p>
<ul>
<li>见证美德<ul>
<li>当我们从他人身上感受到勇敢、慈爱等美德时，就会放下防备心，并感受到幸福。</li>
</ul>
</li>
<li>寻求敬畏感<ul>
<li>当人类面对比自己宏大许多的事物时就会从心底产生敬畏。（景观景象，思想观念，社会地位等）</li>
<li>人类以分裂的自我在体验人生，往往被互相冲突的欲望搞得支离破碎，但敬畏感反而可以让人类产生完整、平和的感觉。</li>
<li><em>这也是作者认为的宗教产生的重要基础</em></li>
</ul>
</li>
<li>融入群体<ul>
<li>人类是群体性的社会动物，融入集体不但满足人类需要与他人建立联系的需求，也让我们可以脱离自我，融入集体，实现更高的目标。</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h1><p>左脑的语言中枢非常擅长编出各种解释，但却不知道行为背后的真正原因。</p>
<p>道德判断也一样。两人对某事的意见相左时，其实是感觉在先，后来再来编理由反驳对方。就蒜你驳倒对方，难道对方就会改变心意，接受你的论调吗？当然不会，因为你驳倒的，并非对方真正的立场，他的立场是在他有了判断之后才临时编出来的。</p>
<p>发生在这个世界上的事情，只有通过我们自己对事件的诠释才能影响到我们，所以只要我们能控制自己对事件的诠释，就能控制自己的世界。</p>
<p>除非你觉得悲惨，否则没有什么是悲惨的；同理，除非你知足常乐，否则没有什么事能让你快乐。</p>
<p>以基因为导向、为了家族的生存愿意牺牲自我。动物愿意冒着生命危险来保护自己孩子的安全：在进化的生存竞赛中，唯一“制胜”之道就是让你身上的基因一代一代传递下去。</p>
<p>炫耀性消费是一种零和游戏：个人借由自己地位的提升来贬低别人。</p>
<p>选择的悖论：有了选择，反而让我们更不快乐，但是我们却很重视选择，而且处心积虑地要让自己有所选择。</p>
<p>如果你希望你的小孩健康成长、独立自主，那么你应该去拥抱、去搂、去哄、去爱他们。只要给他们一个安全堡垒，他们就能靠自己的力量去探索、征服这个世界。爱能克服恐惧，《圣经·新约》里有一段话描述的很好：“爱里没有惧怕，完全的爱可以驱除惧怕。”</p>
<p>英国哲学家边沁指出，所有立法的最后目标就是人的利益。所得利益越大，效果越好。边沁为功利主义之父，功利主义的教条就是，所有决策（包括立法及个人）的目标都是追求最大利益（效用），但由谁获益，功利主义者并不在意。</p>
<p>邪恶最大的成因是：自尊心太强及道德理想主义。</p>
<p>本手册目的不在教导孩子该做什么，不该做什么，以及为什么，而是要教孩子如何思考，好让他们自己决定该做什么，不该做什么，以及为什么。</p>
<p>对人和善，饮食不要太油腻，常看好书，多走路，要跟不同国籍及信仰的人和平共处。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<p>关联：</p>
<ul>
<li><a href="https://v.youku.com/v_show/id_XMjA5NDM2NzM0NA==" target="_blank" rel="noopener">乔纳森·海特: 宗教信仰,进化论以及自我超越的狂喜</a></li>
<li><a href="https://v.youku.com/v_show/id_XODAxNDk3NDg0.html?from=s1.8-2-1.1" target="_blank" rel="noopener">乔纳森·海特: 为什么共同利益来自于共同威胁</a></li>
</ul>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《解忧杂货铺》读感</title>
    <url>/2019/01/05/%E3%80%8A%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E9%93%BA%E3%80%8B%E8%AF%BB%E6%84%9F/</url>
    <content><![CDATA[<p>很多人都如同迷途的羔羊，通常他们手上有着地图，却没有去看，或者不知道自己目前的位置。</p>
<a id="more"></a>
<p><br></p>
<h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><p>我是先看的中国翻拍的电影，冲着董子健看的，后看的书。</p>
<p>当时看电影的时候，感觉还可以，剧情不错，后来看完书发现，呃…算了，不谈电影了。</p>
<p>之前有读过东野圭吾的另一本著作——《白夜行》，两本书在设计上都是这种推理性质的感觉，不同独立却又藕断丝连的片段在被某个主线牵引，并且最终在某刻相聚。</p>
<p>全书，主要就是在解惑。最直接来看是翔太、敦也、幸平三人解决多位过去向解忧杂货铺投递信件人的问题；三人在解其他人问题时又向杂货铺老板浪矢雄治解决自己的难题；而浪矢雄治也通过大家信件的反馈来解开自己内心的困惑。</p>
<p>其实，正如我最喜欢的书中的一个观点就是——很多时候，我们往往都知道答案，但是没有勇气，或者没有信心踏出那一步，需要他人来推你一把。</p>
<p>还好，这本书不像《白夜行》那样，是一个好的结局，大家都解开了自己的疑惑，可以“相信自己，无悔的去燃烧自己的人生。”</p>
<p><br><br><br></p>
<h1 id="依旧是几个我喜欢的片段"><a href="#依旧是几个我喜欢的片段" class="headerlink" title="依旧是几个我喜欢的片段"></a>依旧是几个我喜欢的片段</h1><h2 id="月兔"><a href="#月兔" class="headerlink" title="月兔"></a>月兔</h2><p>“我比任何人都爱你，想要永远和你在一起。如果我放弃比赛就能让你好起来，我会毫不犹豫地放弃。但如果不是这样，我希望坚持我的梦想。因为一直以来追寻着梦想，我才活出了自我，而你喜欢的也正是这样的我。我没有一刻忘记过你，但请让我追逐梦想吧。”</p>
<p><br></p>
<h2 id="克郎"><a href="#克郎" class="headerlink" title="克郎"></a>克郎</h2><p>“不用担心，我没事。喂，克郎，你听好了。”健夫躺在床上，目光严肃地望着他，“我也好，鱼松也好，都还没脆弱到需要你照顾的程度。所以你不要想这些有的没的，再去全力打拼一次，在东京奋战一场。就算最后打了败仗也无所谓，至少你留下了自己的足迹。做不到这点，你就不要回来。明白了吧？”</p>
<p>…</p>
<p>如果真如信上所说，爸，我也算是留下了足迹了吧？虽然我打了一场败仗。</p>
<p><br></p>
<h2 id="浪矢雄治"><a href="#浪矢雄治" class="headerlink" title="浪矢雄治"></a>浪矢雄治</h2><p>“不管是骚扰还是恶作剧，写这些信给浪矢杂货店的人，和普通的咨询者在本质上是一样的。他们都是内心破了个洞，重要的东西正从那个破洞逐渐流失。证据就是，这样的人也一定会来拿回信，他会来查看牛奶箱。因为他很想知道，浪矢爷爷会怎样回复自己的信。你想想看，就算是瞎编的烦恼，要一口气想出三十个也不简单。既然费了那么多心思，怎么可能不想知道答案？所以我不但要写回信，而且要好好思考后再写。人的心声是绝对不能无视的。”</p>
<p>“…很多时候，咨询的人心里已经有了答案，来咨询只是想确认自己的决定是对的。所以有些人读过回信后，会再次写信过来，大概就是因为回答的内容和他的想法不一样吧。”</p>
<p><br></p>
<h2 id="最后一封信"><a href="#最后一封信" class="headerlink" title="最后一封信"></a>最后一封信</h2><p>地图是一张白纸，这当然很伤脑筋。任何人都会不知所措。</p>
<p>可是换个角度来看，正因为是一张白纸，才可以随心所欲地描绘地图。一切全在你自己。对你来说，一切都是自由的，在你面前是无限的可能。这可是很棒的事啊。我衷心祈祷你可以相信自己，无悔地燃烧自己的人生。</p>
<p><br><br><br><br><br></p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《追风筝的人》 读记</title>
    <url>/2018/12/23/%E3%80%8A%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BA%E3%80%8B%E8%AF%BB%E6%84%9F/</url>
    <content><![CDATA[<p>为你，千千万万遍。</p>
<a id="more"></a>
<p><br><br><br></p>
<h1 id="相识"><a href="#相识" class="headerlink" title="相识"></a>相识</h1><p>一个阳光明媚的下午，我走过那家街角的书店，老旧的书店是一位老奶奶在照看的，但是，今天书店前的摇椅上没有见到像往常一样晒太阳的那位老奶奶；反而是一个，正在用一个鸡毛掸子，费力的清扫着门框上沿的灰尘，她一边尽力的踮起脚尖，以便触及更深处的区域，一边捂住口鼻，以免灰尘的侵袭；她那及肩的长发挡住大部分了刺眼的阳光，也有少部分光线穿过她的发丝，但那些莽撞的光线都被暖去了棱角，变得温和起来。这时，她注意到了我，双目对视，只一刹那，我便慌不择路，随手指着店前那整整齐齐的书中一本，“我要一本这个…嗯…《追风筝的人》”…</p>
<p>显然，都看出来是编的了，而且，这么俗套。</p>
<p>随手写写嘛，然后越写越发现好难呀！而且，太老套了！！</p>
<p>为什么 下午永远是阳光明媚的呢？为什么书店一定要在街角呢！而且 旧书店+老奶奶+青春活力的孙女，快赶上肯德基或者麦当劳（噢，现在叫金拱门）的 汉堡+薯条+可乐 套餐了（而且更像是儿童套餐。。。）</p>
<p>哦，对了，这次这本书可没这么俗套，这个作者的文笔，怎么说不知道（我哪有资格说人家文笔好坏呀。。。），但是译者的文笔，真是惊艳了我。</p>
<p>那么，我和这本书到底是怎么相识的呢？</p>
<p>那是一个满200-120的凑单列表里，它恰好排第一个。</p>
<p><br><br><br></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这本书讲了个什么事呢？</p>
<p>一句话来概括，就是：</p>
<p>一个非常敬重自己的父亲的富家少爷发现自己视为表面兄弟的仆人竟然是自己亲兄弟后，踏上救赎自己父亲，更是救赎自己的路。</p>
<p>作者的文笔真是好，虽然我读的译文，道理上来说，翻译都翻译的这么好了，原文应该也差不到哪去了呀。</p>
<p>本书有很多战争和宗教的东西，战争的东西，理解起来不难，就是宗教部分，不能让我感同身受。我对宗教的理解不是很多，但是书中有很多关系，作者想表达的东西都和宗教相关。所以，我就特意去补习了一下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">伊斯兰教是世界三大宗教之一（基督教、伊斯兰教、佛教），他（她）们认为宇宙间只有一个主宰——“安拉”，并且遵循着《古兰经》的教义。伊斯兰教主要分为逊尼和什叶两大派系，其中逊尼派被认为是主流派别。本书的主人主人公即逊尼派，哈桑为什叶派。两大派系主要分别在于穆圣继承人的合法性上，什叶派认为只有穆圣的女婿兼堂弟阿里及其直系后裔才是合法的继承人，而逊尼派认为哈里发只是信徒的领袖，穆圣的宗教领导人的身份的继承者，无论是谁，只要信仰虔诚，都可以担任哈里发（即安拉使者的继承人）。</span><br></pre></td></tr></table></figure>
<p>宗教这个东西，怎么说呢，算了，不说了，还是崇尚个人自由，我从不认为强迫别人的行为是一个好的行为，当然，可以通过自己的行动感化他人，但绝对不是强迫他人，我相信任何宗教的教义上，对此处的观点也是一致的。</p>
<p>本书，由风筝开始，引出我、哈桑、父亲 这几个关键人物，两条线路我和哈桑的羁绊及我和父亲的羁绊。</p>
<p>然后，在风筝节到达高潮时候，转入下一个剧情我对于哈桑的内疚，而引发的逃避（赶走哈桑）。</p>
<p>在我终于“得逞”后，进入中转部分，我与父亲在美国的日子及我的爱情史（这块我觉得好无聊）。</p>
<p>然后，在我爱情圆满，父亲逝世，生活平静时，转入最终剧情对话 —— 父亲那不为人知的一面，从而引发最终剧情，寻找哈桑，历经磨难，将索拉博带到美国。</p>
<p>最后，打开索拉博的内心，且于风筝结束。</p>
<p><br><br><br></p>
<h1 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h1><p>这本书情节跌宕起伏，书名叫追风筝的人，由风筝开始，于风筝结束，风筝大会的流程就是本书的目录：</p>
<p>先是自己准备风筝 -&gt; 放风筝，把其他人都干掉 -&gt; 剪掉风筝线 -&gt; 追回那个从空中掉下来的风筝。</p>
<p>书中我的转变真的是很大，从最开始的弱不禁风，从文不武，尤其是与父亲的对称，更加显出我的文气。但是之后呢？独身前往阿富汗，寻找索拉博，之后脾脏破裂、牙齿脱落、肺被刺穿、眼眶裂开。这些变化是一点点发生的，所以在读的时候，并不突兀，但是回头首尾对比，相差甚远。</p>
<p>我总结的这本书想表达的三个东西 —— 宗教、战争、救赎。</p>
<p><br><br><br></p>
<h1 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h1><ul>
<li>哈桑形象</li>
</ul>
<p>我依然能记得哈桑坐在树上的模样，阳光穿过叶子，照着他那浑圆的脸庞。他的脸很像木头刻成的中国娃娃，鼻子大而扁平，双眼眯斜如同竹叶，眼珠在不同光线下会显现出金色、绿色，甚至是宝石蓝。我依然能看到他长得比较低的小耳朵，还有突出的下吧，肉乎乎的，看起来像是一团后来才加上去的附属物。他的嘴唇从中间裂开，兴许是那个制作中国娃娃的工匠手中的工具不慎滑落，又或者是由于他的疲倦和心不在焉。</p>
<ul>
<li>爸爸形象</li>
</ul>
<p>有一次拉辛汗管爸爸叫“飓风先生”，这随后变成远近闻名的绰号。这个绰号可是名副其实。爸爸是典型的普什图人，身材高大，孔武有力，留着浓密的小胡子，卷曲的棕色头发甚是好看，跟他本人一样不羁；他双手强壮，似乎能将柳树连根拔起；并且，就像拉辛汗经常说的那样，黑色的眼珠一瞪，会“让魔鬼跪地求饶”。爸爸身高近两米，每当他出席宴会，总是像太阳吸引向日葵那样，把注意力引到自己身上。</p>
<ul>
<li>哈桑受辱</li>
</ul>
<p>小巷堆满了破铜烂铁，废弃的自行车轮胎、标签剥落的玻璃瓶子、卷边的杂志、发黄的报纸，所有这些，散落在一堆砖头和水泥板间。墙边有个锈蚀的铁火炉，炉洞像血盆大口般张开。但在那些垃圾之间，有两件东西让我无法移开目光：一件是蓝风筝，倚在墙边，紧邻铁炉；另一件是哈桑的棕色灯芯绒裤，丢在那堆碎砖块上面。</p>
<ul>
<li>我的决定</li>
</ul>
<p>“还手啊！”我咆哮着。哈桑看看胸前的污渍，又看看我。<br>“起来！打我！”我说。哈桑站起来了，但他只是站在那，露出茫然失措的表情，好比一个男人，刚才还在海滩愉快地散步，此刻却被浪花卷到大洋中间。<br>我又扔出一个石榴，这次打在他的肩膀上，果汁染上他的脸。“还手！”我大喊，“还手，你这个该死的家伙！”我希望他还击。我希望他满足我的愿望，好好惩罚我，这样我晚上就能睡着了。也许到时事情就会回到我们以前那个样子。但哈桑纹丝不动，任由我一次又一次扔他。“你是个懦夫！”我说，“你什么都不是，只是个该死的懦夫！”<br>我不知道自己击中他多少次。我所知道的是，当我终于停下来，筋疲力尽，气喘吁吁，哈桑浑身血红，仿佛被一队士兵射击过那样。我双足跪倒，疲累不堪，垂头丧气。<br>然后哈桑捡起一个石榴。他朝我走来，将它掰开，在额头上磨碎。“那么，”他哽咽着，红色的石榴汁如同鲜血一样从他脸上滴下来。“你满意了吧？你觉得好受了吗？”他转过身，朝山下走去。<br>我任由泪水决堤，跪在地上，身体前后摇晃。“我该拿你怎么办，哈桑？我该拿你怎么办？”但等到泪痕风干，我脚步沉重的走回家，我找到了答案。</p>
<ul>
<li>哈桑之死</li>
</ul>
<p>…哈桑又抗议.所以他们将他拉到街上······<br>“不。” 我喘气说。<br>“······下令他跪下······”<br>“不！天啦，不。”<br>“······朝他后脑开枪。”<br>“不。”<br>“······法莎娜尖叫着跑出来，扑打他们······”<br>“不。”<br>“······也杀了她。自我防卫，他们后来宣称······”<br>但我所能做的，只是一次又一次地低声说着：“不。不。不。”</p>
<p><br></p>
<hr>
<p>For you, a thousand times over.</p>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《非暴力沟通》 读记</title>
    <url>/2019/11/05/%E3%80%8A%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A%E3%80%8B%E8%AF%BB%E8%AE%B0/</url>
    <content><![CDATA[<p>生活永远等待人们以一己之身去领略生命的美和神奇。</p>
<a id="more"></a>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="读因"><a href="#读因" class="headerlink" title="读因"></a>读因</h1><p>无论工作与生活，沟通都是很重要的一件事。</p>
<p>但是，现在生活节奏越来越快，信息越来越多，导致沟通困难，进而引发各种矛盾发生，导致各种“暴力”，影响身心健康。</p>
<p>希望通过这本书，更了解沟通这件事，从而使得生活工作更加顺利。</p>
<p>如同本文所言：</p>
<ul>
<li>让尊重、理解、欣赏、感激、慈悲和友情，而非自私自利、贪婪、憎恨、偏见、怀疑和敌意，来主导生活。</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="读感"><a href="#读感" class="headerlink" title="读感"></a>读感</h1><p>我主要学习到两点：</p>
<ul>
<li>说：诚实地表达自己的感受，将自己的请求直接了当的说出来，不要让人揣测，不要让人误解。</li>
<li>听：关切的倾听别人的感受，读取到他人的请求</li>
</ul>
<p>可以先按照下面的套路去实践，千万不要反感套路，学习很多东西，都是要先学习套路，然后慢慢大成，发展为随心所欲不逾矩的境界。但也不要过于遵循套路，可以因为根据套路的实践有效果而开心，但不要骄傲自满。</p>
<p>不要忘记我们的目的：让尊重、理解、欣赏、感激、慈悲和友情，而非自私自利、贪婪、憎恨、偏见、怀疑和敌意，来主导生活。</p>
<h2 id="非暴力沟通模式（套路）"><a href="#非暴力沟通模式（套路）" class="headerlink" title="非暴力沟通模式（套路）"></a>非暴力沟通模式（套路）</h2><ol>
<li><p>诚实地表达自己，而不批评、指责</p>
<ol>
<li><p>观察</p>
<p>我所观察（看、听、回忆、想）到的有助于（或无助于）我的福祉的具体行为</p>
<p><em>当我（看、听、想到我看到的/听到的）……</em></p>
</li>
<li><p>感受</p>
<p>对于这些行为，我有什么样的感受（情感而非思想）</p>
<p><em>我感到……</em></p>
</li>
<li><p>需要</p>
<p>什么样的需要或价值（而非偏好或某种具体的行为）导致我那样的感受</p>
<p><em>因为我需要/看重……</em></p>
</li>
<li><p>请求</p>
<p>清楚地请求（而非命令）那些能丰富我生命的具体行为</p>
<p><em>你是否愿意……</em></p>
</li>
</ol>
</li>
<li><p>关切的倾听他人，而不解读为批评或指责</p>
<ol>
<li><p>观察</p>
<p>你所观察（看、听、回忆、想）到的有助于（或无助于）你的福祉的具体行为</p>
<p><em>当你（看、听、想到你看到的/听到的）……</em></p>
</li>
<li><p>感受</p>
<p>对于这些行为，你有什么样的感受（是情感而非思想）</p>
<p><em>你感到…..吗？</em></p>
</li>
<li><p>需要</p>
<p>什么样的需要或价值（而非偏好或某种具体的行为）导致你那样的感受</p>
<p><em>因为你需要/看重……</em></p>
</li>
<li><p>请求</p>
<p>关切地倾听那些能丰富你生命的具体请求，而不解读为命令</p>
<p><em>所以，你想……</em></p>
</li>
</ol>
</li>
</ol>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="读记"><a href="#读记" class="headerlink" title="读记"></a>读记</h1><h2 id="译序"><a href="#译序" class="headerlink" title="译序"></a>译序</h2><p>我很希望这本书能帮助更多的人安静下来。使用暴力的人其实是因为他们的内心的宁静遭到了破坏，所以他们才会用暴力的方式维护或寻求心灵的和平。</p>
<p>非暴力沟通提醒我们人性是相通的——虽然每个人的价值观和生活方式或许不同，但作为人却有共同的感受和需要。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>让尊重、理解、欣赏、感激、慈悲和友情，而非自私自利、贪婪、憎恨、偏见、怀疑和敌意，来主导生活。人们常说：这是一个弱肉强食的世界，为了生存，我们必须不择手段。这个观点，请恕我无法统一。</p>
<h2 id="第一章-让爱融入生活"><a href="#第一章-让爱融入生活" class="headerlink" title="第一章 让爱融入生活"></a>第一章 让爱融入生活</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>也许我们并不认为自己的谈话方式是“暴力”的，但我们的语言确实常常引发自己和他人的痛苦。</p>
<h3 id="人生的抉择"><a href="#人生的抉择" class="headerlink" title="人生的抉择"></a>人生的抉择</h3><p>非暴力沟通的基础是一些沟通方式——即使在逆境中，它们也能使人乐于互助。它的目的正是提醒我们借助已有的知识，让爱融入生活。</p>
<p>非暴力沟通知道我们转变谈话和聆听的方式。我们不再条件反射式地反应，而是去明了自己的观察、感受和愿望，有意识地使用语言。我们既诚实、清晰地表达自己，又尊重与倾听他人。</p>
<p>运用非暴力沟通聆听彼此心灵深处的需要，我们将以全新的眼光看待人际关系。</p>
<p>非暴力沟通的四个要素：1.观察  2.感受  3.需要  4.请求</p>
<h3 id="非暴力沟通的要素"><a href="#非暴力沟通的要素" class="headerlink" title="非暴力沟通的要素"></a>非暴力沟通的要素</h3><p>非暴力沟通的过程：</p>
<ul>
<li>什么是我的观察</li>
<li>我的感受如何</li>
<li>哪些需要（或价值、愿望等）导致那样的感受</li>
<li>为了改善生活，我的请求是什么</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>非暴力沟通提醒我们专注于彼此的观察、感受、需要和请求。它鼓励倾听，培育尊重与爱，使我们情意相通，乐于互助。</p>
<h2 id="第二章-是什么蒙蔽了爱"><a href="#第二章-是什么蒙蔽了爱" class="headerlink" title="第二章 是什么蒙蔽了爱"></a>第二章 是什么蒙蔽了爱</h2><h3 id="道德评判"><a href="#道德评判" class="headerlink" title="道德评判"></a>道德评判</h3><p>道德评判是用道德标准来评判人，如果一个人的行为不符合我们的价值观，那他就被看作是不道德或邪恶的。</p>
<p>对他人的评价实际上反映了我们的需要和价值观。</p>
<p>分类和评判提倡的是暴力。</p>
<p>暴力的根源来源于人们忽视彼此的感受与需要，而将冲突归咎于对方——至少大部分暴力的根源都是如此。</p>
<p>比较也是一种评判。</p>
<p>我们可以用负责任的语言代替回避责任的语言。</p>
<p>我们无法强迫他人按我们的期待生活。</p>
<p>认为“某人应当受到惩罚”使我们难以体会到心中的爱。</p>
<p>人们越是习惯于评定是非，他们也就越倾向于追随权威，来获得正确和错误的标准。一旦专注于自身的感受和需要，我们就不再是好奴隶和好属下。</p>
<p>人天生热爱生命，乐于互助。可是，异化的沟通方式使我们难以体会到心中的爱。道德评判就是其中的一种，它将不符合我们价值观的人看作是不道德的或邪恶的。进行比较也是一种评判，它会懵逼对人对己的爱意。异化的沟通方式还淡化了我们对自己的思想、情感和行为的责任意识。此外，强人所难也会造成心灵的隔阂。</p>
<h2 id="第三章-区分观察和评论"><a href="#第三章-区分观察和评论" class="headerlink" title="第三章 区分观察和评论"></a>第三章 区分观察和评论</h2><p>不区分观察和评论，人们将倾向于听到批评。</p>
<p>不带评论的观察室人类智力的最高形式。</p>
<p>非暴力沟通的第一个要素是观察。将观察和评论混为一谈，别人就会倾向于听到批评，并反驳我们。非暴力沟通是动态的语言，不主张绝对化的结论。它提倡在特定的时间和情景中进行观察，并清楚地描述观察结果。</p>
<h3 id="面具"><a href="#面具" class="headerlink" title="面具"></a>面具</h3><p>总是一副面具</p>
<p>由纤细白皙的手举着</p>
<p>挡在脸前</p>
<p>拿轻轻举着面具的手腕</p>
<p>十分灵巧</p>
<p>虽然有时</p>
<p>有点颤抖</p>
<p>指尖抖动</p>
<p>但总是</p>
<p>能把面具举好。</p>
<p>年复一年我不禁好奇</p>
<p>但不敢问</p>
<p>终于</p>
<p>无意中</p>
<p>看到了面具的背后</p>
<p>却</p>
<p>什么也没有</p>
<p>她没有脸</p>
<p>她已成了</p>
<p>优雅地</p>
<p>举着面具的手</p>
<h2 id="第四章-体会和表达感受"><a href="#第四章-体会和表达感受" class="headerlink" title="第四章 体会和表达感受"></a>第四章 体会和表达感受</h2><p>示弱有助于解决冲突。</p>
<p>区分感受和自我评价。</p>
<p>区分感受和判断</p>
<p>非暴力沟通的第二个要素是感受。通过建立表达感受的词汇表，我们可以更清楚地表达感受，从而使沟通更为顺畅。在表达感受时，示弱有助于解决冲突。此外，非暴力沟通还对表达具体感受的词语与陈述想法、评论以及观点的词语做了区分。</p>
<h2 id="第五章-感受的根源"><a href="#第五章-感受的根源" class="headerlink" title="第五章 感受的根源"></a>第五章 感受的根源</h2><p>别人的行为可能会刺激我们，但并不是我们感受的根源。</p>
<p>听到不中听的话的四种选择：</p>
<ol>
<li>责备自己</li>
<li>指责他人</li>
<li>体会自己的感受和需要</li>
<li>体会他人的感受和需要</li>
</ol>
<p>如果我们通过批评来提出主张，人们的反应常常是申辩或反击。反之，如果我们直接说出需要，其他人就较有可能作出积极的回应。</p>
<p>非暴力沟通把需要看作是有助于生命健康成长的要素，而不是某种具体的行为。一种要素是否被当做需要，关键在于它能否促进生命的健康成长。</p>
<p>对于大多数人来说，个人成长一般会经历三个阶段：</p>
<ol>
<li><p>第一阶段：情感的奴隶</p>
<p>在这个阶段，我们相信自己需要为他人负责——让他人快乐是我们的义务。如果别人不高兴，我们就会感到不安，觉得自己有责任做点什么。此时，我们特别容易把亲人看作是负担。</p>
<p><strong>我们认为自己又义务使他人快乐。</strong></p>
</li>
<li><p>第二阶段：面目可憎</p>
<p>在这个阶段，我们发现，为他人的情绪负责，牺牲自己迎合他人，代价实在很大。想到日子过得这么憋屈，我们可能会很恼怒。此时，如果遭遇他人的痛苦，我们可能就会无动于衷：“这是你自己的问题！和我有什么关系？！”虽然不再愿意为他人负责，但我们还心存疑虑。因此，我们的态度也就显得生硬。</p>
<p><strong>我们拒绝考虑他人的感受和需要</strong></p>
</li>
<li><p>第三阶段：生活的主人</p>
<p>在这个阶段，我们乐于互助。我们帮助他人，是出于爱，而不是出于恐惧、内疚或惭愧。那是自由而快乐的行为。此时，我们意识到，虽然我们对自己的意愿、感受和行动负有完全的责任，但无法对他人负责。我们还发现，人与人相互依存，损人无法真正利己。非暴力沟通正是想帮助我们既表达自己，又关心他人。</p>
<p><strong>虽然我们对自己的意愿、感受和行动负有完全的责任，但无法为他人负责。与此同时，我们还认识到，我们无法牺牲他人来满足自己的需要。</strong></p>
</li>
</ol>
<h2 id="第六章-请求帮助"><a href="#第六章-请求帮助" class="headerlink" title="第六章 请求帮助"></a>第六章 请求帮助</h2><p>如果我只是提醒自己要避免什么，而不清楚自己可以做什么，会有怎样的后果。</p>
<p>我们提出的请求越具体越好。如果我们的意思含糊不清，别人就难以了解我们到底想要什么。</p>
<p>抽象的语言无助于深化自我认识。在使用抽象的而语言表达愿望时，我们一般不会提及我们可以做的事情。</p>
<p>当对方给予反馈，表达我们的感激。如果对方不愿反馈，倾听他的感受和需要。</p>
<p>如何区分命令和请求：请求没有得到满足时，提出请求的人如果批评和指责，那就是命令；如果想利用对方的内疚来达到目的，也是命令。</p>
<p>非暴力沟通的目的：如果我们只是想改变别人，以使他们的行动符合我们的利益，那么非暴力沟通并不是适当的工具。非暴力沟通是用来帮助我们在诚实和倾听的基础上与人联系。使用非暴力沟通时，我们希望人们的改变和行动是出于对生命的爱。一旦人们相信我们看重彼此的感情，并能兼顾双方的需要，那么，他们也就会相信我们所表达的愿望时请求而非命令。</p>
<p><strong>非暴力沟通的目的不是为了改变他人来迎合我们。相反，非暴力沟通重视每个人的需要，它的目的是帮助我们在诚实和倾听的基础上与人联系。</strong></p>
<h2 id="第七章-用全身心倾听"><a href="#第七章-用全身心倾听" class="headerlink" title="第七章 用全身心倾听"></a>第七章 用全身心倾听</h2><p>分析妨碍了倾听</p>
<p>不论别人说什么，我们只听到他们此时此刻的 观察、感受、需要 和 请求。</p>
<p>询问前，先表达我们的感受和需要。</p>
<p>有时，我们认为自己收到了指责，实际上，那些话是他人表达需要和请求的方式。如果意识到这一点，我们就不会认为自己的人格受到了伤害。反之，如果一心分析自己或对方的过错，我们就会认为自己被贬低了。</p>
<p>当对方得到充分的倾听：我们将会体会到气氛变得轻松；他会停止谈话。</p>
<p>你越是留意自己内心的声音，就越能听到别人的声音。</p>
<p>当我们痛苦得无法倾听他人时，我们需要：</p>
<ol>
<li>体会自己的感受和需要</li>
<li>大声地提出请求</li>
<li>换一个环境</li>
</ol>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>当他人遭遇不幸时，我们常常急于提建议，安慰，或表达我们的态度和感受。为了倾听他人，我们需要先放下已有的想法和判断，全心全意地体会对方。倾听他人有助于对他人的理解和接纳。</p>
<h2 id="第八章-倾听的力量"><a href="#第八章-倾听的力量" class="headerlink" title="第八章 倾听的力量"></a>第八章 倾听的力量</h2><p>我们越是倾听他人的语言背后的感受和需要，就越不怕与他们坦诚地沟通。我们最不愿意示弱的时候往往是因为担心失去控制想显得强硬的时候。</p>
<p>在一个生气的人面前，需要倾听，永远不要用‘不过’ ‘可是’ ‘但是’ 之类的词语。</p>
<p>倾听亲人也许极为困难。</p>
<p>当别人说“不”的时候，我们常常会认为他们是在拒绝我们。有时，我们甚至还会觉得自己受到了伤害。然而，如果我们能够体会他人的感受和需要，我们也许就会发现是什么使他们无法答应我们的请求。</p>
<p>说的人更希望对方打断，而不是假装在听。</p>
<p>倾听有赖于我们体会他人的能力。</p>
<p>倾听是我们用于面对自己的弱点。它还可以帮助我们预防潜在的暴力，使谈话生动有趣，并了解“不！”和沉默所反映的感受和需要。一次又一次，我见证了，倾听帮助人们治愈心灵的创伤。</p>
<h2 id="第九章-爱自己"><a href="#第九章-爱自己" class="headerlink" title="第九章 爱自己"></a>第九章 爱自己</h2><p>非暴力沟通最重要的应用也许是培养对自己的爱。</p>
<p>我们的改变是出于对生命的爱，而不是出于羞愧或内疚这些具有负面影响的心理。</p>
<p>自责是尚未满足的需要的可悲表达。</p>
<p>非暴力沟通的忧伤：当我们的行为无法满足自身的需要，我们体会着人生的悲哀和内心的渴望。</p>
<p>非暴力沟通鼓励我们直面人生的苦难：在遇到挫折时，充分体会人生的悲哀和内心的渴望。是的，感到遗憾是难免的。但它能帮助我们从经历中学习，而无需责备自己。我们意识到过去的行为违背了自己的需要及价值观，并允许这种觉察引发的情感充分流淌。一旦专注于尚未满足的需要，我们就会考虑如何满足它。反之，如果用咳咳的语言指责自己，我们不仅难以找到解决的办法，而且容易陷于自我惩罚的痛苦中。</p>
<p>非暴力沟通的自我宽恕：感到遗憾时，我们试图了解过去的行为所要满足的需要。</p>
<p>人的行为总是服务于自身的需要及价值观——不论它是否能够实现目的，也不论我们事后是感到庆幸还是遗憾。</p>
<p>爱惜自己的关键之一是同时包容那两个不同的“我”：一方面包容对过去的某种行为感到后悔的“我”，另一方面包容采取那种行为的“我”。非暴力沟通的忧伤及自我宽恕为个人的学习和成长创造了条件。只要对自己的需要保持清醒的认识，我们就能建设性地满足它们。</p>
<p>当我们拥抱自己的各个方面，并理解它们所反映的需要及价值观，我们活在对自己深深的爱中。</p>
<p>让我们的行动基于对生命的爱，而非恐惧、内疚、羞愧或义务。</p>
<p>不论你选择做什么，了解自己为什么要那样做。</p>
<p>为了钱、他人的赞同，以及出于恐惧、羞愧或内疚的心理，你做了哪些事情？想一想你为这些事情付出的代价。</p>
<p>最危险的行为也许是“因为别人的要求”我们不得不做。</p>
<p>非暴力沟通最重要的应用也许在于培育对自己的爱。当我们的表现不完美时，我们可以通过体会忧伤和自我宽恕，来看清个人成长的方向，以及避免自我惩罚。评价自己的行为时，我们专注于尚未满足的需要；这样，我们就不再依赖羞愧、内疚、恼怒或沮丧的心理来寻求改变，而让爱主导我们的学习和成长。</p>
<p>同时，在日常生活中，我们主动根据需要和价值观来选择生活。我们的行为不再是为了履行职责、获得回报、逃避惩罚或避免感到内疚和羞愧。通过深入理解我们的行为的动机，并用“选择做”来取代“不得不”，我们的生活将变得和谐并充满欢乐。</p>
<h2 id="第十章-充分表达愤怒"><a href="#第十章-充分表达愤怒" class="headerlink" title="第十章 充分表达愤怒"></a>第十章 充分表达愤怒</h2><p>非暴力沟通不主张忽视或压抑愤怒，它认为，通过深入地了解愤怒，我们可以充分表达内心的渴望。</p>
<p>生气的原因在于我们的想法——对他人的评判和指责。</p>
<p>希望他人因为内疚发生改变，就是将刺激和原因混为一谈。</p>
<p>愤怒是我们的思维方式造成的。它的核心是尚未满足的需要。</p>
<p>愤怒驱使我们去惩罚他人。</p>
<p>当我们意识到自己的需要，愤怒就转变为服务需要的情感。</p>
<p>听到不中听的话时，我们想起那四种选择：</p>
<ol>
<li>责备自己</li>
<li>指责他人</li>
<li>体会自己的感受和需要</li>
<li>体会他人的感受和需要</li>
</ol>
<p>表达愤怒的步骤：</p>
<ol>
<li>停下来，呼吸</li>
<li>留意我们的指责</li>
<li>体会我们的需要</li>
<li>表达感受和尚未满足的需求</li>
</ol>
<p>越是能够倾听他人，也越有机会被倾听。</p>
<p>在大多数的情况下，在表达自己之前，我们需要先倾听他人。如果对方还处于某种情绪中，他们就很难静下心来体会我们的感受和需要。一旦我们用心倾听他们，并表达我们的理解，在得到倾听和理解之后，他们一般也就会开始留意我们的感受和需要。</p>
<p>一旦意识到他人的感受和需要，我们就会发现彼此相同的人性。</p>
<p>留意头脑中出现的暴力想法，而不评判它们。</p>
<p>只要人们认为自己受到了指责，他们就很难体会到别人的痛苦。</p>
<p>练习把每一个指责都转化为尚未满足的需要。</p>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>在生气时，批评和指责他人都无法真正传达我们的心声。如果想充分表达愤怒，我们就不能归咎于他人，而把注意力放在自己的感受和需要上。与批评和指责他人相比，直接说出我们的需要更又可能使我们的愿望得到满足。</p>
<p>表达愤怒的四个步骤：</p>
<ol>
<li>停下来，除了呼吸，什么都别做</li>
<li>想一想是什么想法使我们生气了</li>
<li>体会自己的需要</li>
<li>表达感受和尚未满足的需要。</li>
</ol>
<p>有时，在第三步和第四步之间，我们需要先倾听他人。在得到倾听和理解之后，他们也就可以静下心来体会我们的感受和需要。</p>
<h2 id="第十一章-运用强制力避免伤害"><a href="#第十一章-运用强制力避免伤害" class="headerlink" title="第十一章 运用强制力避免伤害"></a>第十一章 运用强制力避免伤害</h2><p>使用防卫性的强制力，是为了保护自己或他人，而不是为了惩罚、羞辱或谴责他人。</p>
<p>在使用防卫性强制力时，我们把注意里放在了自己和他人的需要上，而不评价对方及其行为。</p>
<p>当我们为了回避惩罚去做事情时，我们可能会忽视事情本身的价值，而陷于对失败的忧虑。</p>
<p>惩罚的局限性：我希望它基于怎样的原因去做我想要他做的事情？</p>
<h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>在有些情形中，我们没有机会和他人交流，这时，我们也许需要使用强制力来保护自己和他人。我们这样做，是为了避免伤害，而不是为了惩罚他人。如果我们威胁他人或实施惩罚，人们常常会产生敌意和抵触心理。这样，彼此的关系将会疏远。同时，惩罚还可能使人忽视事情本身的意义，而把注意力放在不服从的后果上。如果我们试图通过惩罚来使人们认识自己的需要，那么，我们很可能适得其反。</p>
<h2 id="第十二章-重获生活的热情"><a href="#第十二章-重获生活的热情" class="headerlink" title="第十二章 重获生活的热情"></a>第十二章 重获生活的热情</h2><p>对于大多数人来说，倾听和表达自己的需要并不容易。一般来说，我们的文化倾向于把个人需要看作是消极的、具有破坏性的。如果一个人公开表达自己的需要，就很可能被看作是自私的。</p>
<p>专注于我们想要做的，而不是追究错在哪里。</p>
<p>如果以苛刻的态度对人对己，我们的心情也好不到哪里去。通过运用非暴力沟通，我们不再试图分析自己或他人有什么毛病，而是用心去了解我们的需要，这样，我们的内心就会逐渐变得平和。</p>
<p>体会自己的感受和需要可以释放压力。</p>
<p>体会他人的感受和需要也可以释放压力。</p>
<h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><p>在情绪低落的时候，我们也许会怨天尤人。然而，如果我们以苛刻的态度对人对己，我们的心情也好不到哪里去。通过运用非暴力沟通，我们不再试图分析自己或他人有什么毛病，而是用心去了解我们的需要，这样，我们的内心将逐渐变得平和。一旦我们发现自己心底深处的愿望，并采取积极的行动，我们将会重获生活的热情。</p>
<h2 id="第十三章-表达感激"><a href="#第十三章-表达感激" class="headerlink" title="第十三章 表达感激"></a>第十三章 表达感激</h2><p>用非暴力沟通的方式表达感激时，我们只是为了庆祝他人的行为提升了我们的生活品质，而不是想得到任何回报。</p>
<p>用非暴力沟通表达感激的三个部分：</p>
<ol>
<li>对方做了什么事情使我们的生活得到了改善</li>
<li>我们有哪些需要得到了满足</li>
<li>我们的心情怎么样</li>
</ol>
<h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><p>在赞扬他人时，我们很少揭示内心活动，而把自己放在了裁判的位置。赞扬也常常被人用来实现个人目的。非暴力沟通鼓励我们充分表达感激。在表达感激时，我们说出：</p>
<ol>
<li>对我们有益的行为</li>
<li>我们的那些需要得到了满足</li>
<li>我们的需要得到满足后，我们是什么样的心情</li>
</ol>
<p>当别人以这样的方式表达对我们的感激时，我们可以与对方一起庆祝生命的美 —— 既不自大，也不假谦虚。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<ul>
<li>扩展阅读：<ul>
<li>TED 《如何缓解压力》</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>《高效表达》 笔记</title>
    <url>/2020/02/23/%E3%80%8A%E9%AB%98%E6%95%88%E8%A1%A8%E8%BE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>在接触或学习一门课程，必定会经历几个阶段：学套路 - 熟套路 - 无套路。<br>本文就是讲述如何去进行高效表达，学习表达的套路，学好套路练熟它，进而做到“手中无剑，心中有剑”的大师境界。</p>
<a id="more"></a>
<p><br></p>
<p>沟通，是人们分享信息、思想和情感的任何过程。这种过程不仅包含口语言和书面语言，也包含形体语言、个人的习气和方式、物质环境等——赋予信息含义的任何东西。</p>
<p>现在越来越多的东西傻瓜化，效率的瓶颈转化为人与人之间沟通的不足，沟通可以分为两部分：</p>
<ul>
<li>一是表达内容，将自己的想法说的更容易吸收理解</li>
<li>二是倾听内容，充分理解对方的想法</li>
</ul>
<p>在接触或学习一门课程，必定会经历几个阶段：学套路 - 熟套路 - 无套路。</p>
<p>本文就是讲述如何去进行高效表达，学习表达的套路，学好套路练熟它，进而做到“手中无剑，心中有剑”的大师境界。</p>
<p><br></p>
<p>本文是学习圈外课程《高效表达》的笔记。</p>
<p><br></p>
<p><br></p>
<h1 id="高效表达的框架"><a href="#高效表达的框架" class="headerlink" title="高效表达的框架"></a>高效表达的框架</h1><p>高效表达的三大步骤：</p>
<ol>
<li><p>定主题</p>
</li>
<li><p>搭架子</p>
</li>
<li><p>填素材</p>
</li>
</ol>
<h2 id="定主题，让人秒懂你的想法"><a href="#定主题，让人秒懂你的想法" class="headerlink" title="定主题，让人秒懂你的想法"></a>定主题，让人秒懂你的想法</h2><p>核心：<strong>表达必须要有主题，这与说多少信息无关。</strong>一个主题应该是你对所讨论内容持有的观点或想法，并且，要在一开始就明确这个主题。</p>
<p>无法做到核心主题的两大障碍：</p>
<ol>
<li>不知道什么是“主题”，大部分时候说的其实是无效主题</li>
<li>不清楚表达的目的，没有从目的出发来组织表达</li>
</ol>
<p>如何明确表达目的：</p>
<ol>
<li>定义清楚汇报的对象</li>
<li>站在对方的角度思考，对方所关心的内容</li>
<li>明确汇报要达到的效果</li>
</ol>
<p><br></p>
<p><br></p>
<h2 id="搭架子，快速整理表达思路"><a href="#搭架子，快速整理表达思路" class="headerlink" title="搭架子，快速整理表达思路"></a>搭架子，快速整理表达思路</h2><h3 id="为什么需要整理表达思路"><a href="#为什么需要整理表达思路" class="headerlink" title="为什么需要整理表达思路?"></a>为什么需要整理表达思路?</h3><ul>
<li><p>人类大脑的习惯：</p>
<ul>
<li>归纳主题</li>
<li>归类分组</li>
</ul>
</li>
<li><p>表达会低效，是因为信息的无序堆叠。</p>
</li>
<li><p>表达会混乱，是因为思维的混乱；思维的混乱，是因为缺乏结构。</p>
</li>
</ul>
<p><br></p>
<h3 id="常见的表达结构"><a href="#常见的表达结构" class="headerlink" title="常见的表达结构"></a>常见的表达结构</h3><p>3种职场最常见的表达结构：</p>
<ul>
<li>时间轴结构</li>
<li>解决问题结构</li>
<li>FAB结构</li>
</ul>
<h4 id="时间轴结构"><a href="#时间轴结构" class="headerlink" title="时间轴结构"></a>时间轴结构</h4><p>方法：</p>
<ul>
<li>以时间顺序来开展内容。</li>
<li>以事件发展顺序来开展内容。</li>
<li>基础结构：过去-现在-未来</li>
</ul>
<p>适用性：</p>
<ul>
<li><p>适合在身处压力环境，思路还没有打开时使用</p>
</li>
<li><p>汇报工作进度</p>
</li>
<li>谈新项目的设想</li>
</ul>
<h4 id="解决问题结构"><a href="#解决问题结构" class="headerlink" title="解决问题结构"></a>解决问题结构</h4><p>方法：</p>
<ul>
<li>问题-原因-解决方案（也就是 what-why-how）</li>
</ul>
<p>适用性：</p>
<ul>
<li>回答客户/老板提出的问题</li>
</ul>
<h4 id="FAB结构"><a href="#FAB结构" class="headerlink" title="FAB结构"></a>FAB结构</h4><p>方法：</p>
<ul>
<li>属性-优势-利益（feature-advantage-benefit）</li>
</ul>
<p>适用性:</p>
<ul>
<li>销售物品</li>
<li>自我介绍</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="填素材，让发言更具说服力"><a href="#填素材，让发言更具说服力" class="headerlink" title="填素材，让发言更具说服力"></a>填素材，让发言更具说服力</h2><p>前提：</p>
<ul>
<li>明确表达时间；根据时间的多少来决定故事的长短，甚至有无。</li>
</ul>
<p>素材：</p>
<ul>
<li>数据</li>
<li>故事</li>
</ul>
<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>为什么要使用数据：</p>
<ul>
<li><p>比起抽象的形容词，具体的数据会让表达更加精准，也让人感觉你更专业。</p>
</li>
<li><p>但是，数据本身并没有意义，数据给人的感觉才有意义。</p>
</li>
</ul>
<p>数据帮助表达所要遵循的基本原则：</p>
<ul>
<li>数据要筛选<ul>
<li>原因：过多的数据不仅影响表达的流畅度，也因信息密度过大而影响听众的理解。</li>
<li>解决：根据表达的目的，留下最有价值、最有力的关键数据。<ul>
<li>技巧：代表结果的数据往往比较重要</li>
</ul>
</li>
</ul>
</li>
<li>数据要解释<ul>
<li>原因：听众不能很快理解所说的数字传达的意思，甚至会造成理解偏差</li>
<li>解决：解释所使用的数据含义。<ul>
<li>技巧：对比、类比、换算</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h3><p>世界上所有的故事都包括三个最基本的要素：冲突、行动、结局。</p>
<p>原因：</p>
<ul>
<li>将要表达的内容用“故事”的形式呈现，能达到很好的说服效果</li>
</ul>
<p>遵循的原则：</p>
<ul>
<li>不要离奇夸张</li>
<li>满足三要素：冲突、行动、解决。</li>
<li>故事的核心是冲突，只有点明冲突，才能让别人意识到问题的严重性，进而配合你的工作。</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="临时汇报：老板只有3分钟，如何汇报又少又好？"><a href="#临时汇报：老板只有3分钟，如何汇报又少又好？" class="headerlink" title="临时汇报：老板只有3分钟，如何汇报又少又好？"></a>临时汇报：老板只有3分钟，如何汇报又少又好？</h2><p>在时间紧迫下，讲重点、讲结论、讲老板最想知道的内容。并且：</p>
<ul>
<li><p>根据老板的风格灵活调整汇报策略。</p>
</li>
<li><p>根据老板的反应，调整汇报的节凑。</p>
</li>
</ul>
<p>最后，<strong>工作汇报是一次自己影响老板的机会，而不是应付老板的差事。</strong>因为管理者时间有限，不要再汇报时过分陷入细节，而要根据目的，讲重点，有条理。</p>
<p>汇报类型：</p>
<ul>
<li>汇报进度</li>
<li>汇报成果</li>
<li>汇报困难</li>
</ul>
<h3 id="汇报进度"><a href="#汇报进度" class="headerlink" title="汇报进度"></a>汇报进度</h3><p>目的：</p>
<ul>
<li>告知对方进度如何。</li>
</ul>
<p>期望：</p>
<ul>
<li>让老板有“掌控感”，否则会像等外卖一样，感到焦虑。</li>
</ul>
<p>注意：</p>
<ul>
<li>汇报是重要的工作职责之一。就算老板没有强硬规定你何时汇报，也要在一些关键节点找他谈谈，让他看到你积极主动的姿态。</li>
</ul>
<h3 id="汇报成果"><a href="#汇报成果" class="headerlink" title="汇报成果"></a>汇报成果</h3><p>目的：</p>
<ul>
<li>在一个项目或一个任务结束后，进行成果汇报。</li>
</ul>
<p>期望：</p>
<ul>
<li>让老板感觉到项目的不易，与你的优秀；从而留下深刻的印象。</li>
</ul>
<p>注意：</p>
<ul>
<li>不要通过把所有做过的事情讲一边来凸显最终结果的不易。</li>
<li>使用关键数据和故事，可以考虑辅助图表呈现，让信息更易理解更有冲击力。<ul>
<li>数据是理性呈现，故事是感性打动，理性与感性的结合，才易留下深刻音响</li>
</ul>
</li>
</ul>
<h3 id="汇报困难"><a href="#汇报困难" class="headerlink" title="汇报困难"></a>汇报困难</h3><p>目的：</p>
<ul>
<li>讲述遇到的困难，申请资源与帮助。</li>
</ul>
<p>期望：</p>
<ul>
<li>获得资源与帮助的同时得到老板的理解而不是显示自己的无能。</li>
</ul>
<p>注意：</p>
<ul>
<li>职场不是学校，老板不是老师，我更不是一个被考评的学生。工作中遇到困难是必然的，老板的作用就是提供资源，帮助你把事情做好。</li>
<li>千万不要直接带着问题去汇报，正确的方式是要带着解决方案去汇报。最好多带几个解决方案，让老板做选择题而不是填空题或者判断题。</li>
<li>汇报困难的表达公式是：问题 - 原因 - 解决方案选项 - 各选项利弊分析</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="回应质疑：遭遇突然提问，怎么回答才能滴水不漏"><a href="#回应质疑：遭遇突然提问，怎么回答才能滴水不漏" class="headerlink" title="回应质疑：遭遇突然提问，怎么回答才能滴水不漏"></a>回应质疑：遭遇突然提问，怎么回答才能滴水不漏</h2><p>利用 <strong>关键的5秒钟</strong> ，思考：</p>
<ol>
<li><p>认可对方的提问</p>
</li>
<li><p>澄清对方的问题</p>
</li>
</ol>
<p>益处：</p>
<ol>
<li>对方感受到尊重，便于把氛围营造成对话而不是对抗</li>
<li>搞清楚提问的人到底想知道什么，确保和对方在谈论同一件事情</li>
<li>为自己赢得整理思路的时间，提升回答的质量</li>
</ol>
<h3 id="认可对方的提问"><a href="#认可对方的提问" class="headerlink" title="认可对方的提问"></a>认可对方的提问</h3><p>认可，是对情绪和事实的接纳。</p>
<p>避免让对方产生不舒服的感觉，比如使用“这是个好问题” 等回复。</p>
<p>三个方面：</p>
<ul>
<li>认可提问者<ul>
<li>谢谢你提出这个问题，我想其他人或许也有同样的疑问…</li>
<li>感谢你对我们的产品这么关注…</li>
</ul>
</li>
<li>认可事实<ul>
<li>正如你提到的…</li>
</ul>
</li>
<li>认可感受<ul>
<li>看得出xx问题让你不太满意…</li>
</ul>
</li>
</ul>
<h3 id="澄清对方的问题"><a href="#澄清对方的问题" class="headerlink" title="澄清对方的问题"></a>澄清对方的问题</h3><p>认可之后，要做的是澄清，进一步确认对方的问题。</p>
<p>使用高效表达公式（定主题 + 搭架子 + 填素材），快速构思一个结构化的表达。</p>
<p><br></p>
<p><br></p>
<h2 id="会议发言：跨团队沟通，怎样让对方接受你的方案"><a href="#会议发言：跨团队沟通，怎样让对方接受你的方案" class="headerlink" title="会议发言：跨团队沟通，怎样让对方接受你的方案"></a>会议发言：跨团队沟通，怎样让对方接受你的方案</h2><p>为什么跨团队合作和沟通困难？</p>
<ul>
<li>各个部门的优先级事项不同</li>
<li>各方的理解存在偏差</li>
</ul>
<p>如何解决沟通困难问题？</p>
<ol>
<li>明确职场跨团队沟通的原则：<strong>谁痛谁负责，谁痛谁解决</strong></li>
<li>要在会议的一开始就明确地陈述你的想法<ul>
<li>为什么；为什么部门间需要合作推进某件事情的发生</li>
<li>做什么；希望参与的各部门在项目中分别做点什么</li>
<li>有什么好处；推荐这件事对各个部门有什么好处</li>
<li>马上行动；马上大家可以完成的行动</li>
</ul>
</li>
</ol>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<p>参考资料：</p>
<ul>
<li>圈外《高效表达》</li>
</ul>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>看着读</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么要搞这个？</title>
    <url>/2016/07/20/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%90%9E%E8%BF%99%E4%B8%AA%EF%BC%9F/</url>
    <content><![CDATA[<p>折腾啥呀？！！</p>
<a id="more"></a>
<p><br></p>
<p>为什么要搞这个东西呢？<br>已经不写博文好长时间了，<br>起因是到了大四，离开学校，一人奔赴帝都找工作，没有多少时间，（一个字，懒）<br>之后，就是刚入职，要学习新的东西，没空出时间，（还是一个字，懒）<br>等可以应付了以后，懒癌开始犯了，（已经找不出借口了）<br>后来…后来就毕业了，又忙毕业…<br>拖着，拖着，到了现在。</p>
<p><br></p>
<p>想着，毕业了，<br>该有个新的开始了，<br>本来想做个个人网站，结果发现，好麻烦啊o(╯□╰)o…<br>精力实在有限（还是懒呗..）<br>忽然发现了这个，<br>简约的风格，便捷的部署，还不用我去维护它，<br>毅然，上了这辆车。</p>
<p><br></p>
<p>最重要的是，<br>搞这个东西，<br>看起来是屌屌的呀。<br>而且，年轻人，就是该多折腾折腾嘛。</p>
]]></content>
      <tags>
        <tag>抽空写</tag>
      </tags>
  </entry>
  <entry>
    <title>两点间的旋转角度</title>
    <url>/2019/01/13/%E4%B8%A4%E7%82%B9%E9%97%B4%E7%9A%84%E6%97%8B%E8%BD%AC%E8%A7%92%E5%BA%A6/</url>
    <content><![CDATA[<p>做需求的时候，需要计算两点间的旋转角度，顺便整理了一下。</p>
<a id="more"></a>
<p><br></p>
<h1 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>用正切函数 tanα = y / x, 正切函数定义域并非是R，所以需要特殊处理 pi/2+k(k为整数集合)<br><br></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>以point1为原点生成坐标系，</li>
<li>先处理坐标轴上的点</li>
<li>再处理各象限上的点<br><br><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2></li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">​    describe:</span></span><br><span class="line"><span class="comment">​        获取point2相对于point1的夹角，</span></span><br><span class="line"><span class="comment">​        x轴正向为0度的，顺时针/逆时针 角度</span></span><br><span class="line"><span class="comment">​    [point1]: cc.p</span></span><br><span class="line"><span class="comment">​        源点，默认(0, 0)</span></span><br><span class="line"><span class="comment">​    point2: cc.p</span></span><br><span class="line"><span class="comment">​        目标点</span></span><br><span class="line"><span class="comment">​    [isClockWise]: boolean</span></span><br><span class="line"><span class="comment">​       是否是顺时针，默认false</span></span><br><span class="line"><span class="comment">​    return: float</span></span><br><span class="line"><span class="comment">​       float - 角度</span></span><br><span class="line"><span class="comment">​   ]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPointAngle</span><span class="params">(point1, point2, isClockWise)</span></span></span><br><span class="line">​   point1 = point1 <span class="keyword">or</span> &#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125;</span><br><span class="line">​   isClockWise = isClockWise <span class="keyword">or</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> point2.y == point1.y <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> point2.x &gt;= point1.x <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">180</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> point2.x == point1.x <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> point2.y &gt; point1.y <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> isClockWise <span class="keyword">and</span> <span class="number">90</span> <span class="keyword">or</span> <span class="number">270</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> isClockWise <span class="keyword">and</span> <span class="number">270</span> <span class="keyword">or</span> <span class="number">90</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">​       <span class="keyword">local</span> dertaX, dertaY = point2.x - point1.x, point2.y - point1.y</span><br><span class="line">​       <span class="keyword">local</span> <span class="built_in">rad</span> = <span class="built_in">math</span>.<span class="built_in">atan</span>(dertaY / dertaX)</span><br><span class="line">​       <span class="keyword">local</span> angle = <span class="built_in">math</span>.<span class="built_in">deg</span>(<span class="built_in">rad</span>) </span><br><span class="line"></span><br><span class="line">        <span class="comment">-- first quadrant</span></span><br><span class="line">        <span class="keyword">if</span> point2.x &gt; point1.x <span class="keyword">and</span> point2.y &gt; point1.y <span class="keyword">then</span></span><br><span class="line">            angle = isClockWise <span class="keyword">and</span> angle <span class="keyword">or</span> (<span class="number">360</span> - angle)</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- second quadrant</span></span><br><span class="line">        <span class="keyword">elseif</span> point2.x &lt; point1.x <span class="keyword">and</span> point2.y &gt; point1.y <span class="keyword">then</span>   </span><br><span class="line">            angle = isClockWise <span class="keyword">and</span> (<span class="number">180</span> + angle) <span class="keyword">or</span> (<span class="number">180</span> - angle)</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- third quadrant</span></span><br><span class="line">        <span class="keyword">elseif</span> point2.x &lt; point1.x <span class="keyword">and</span> point2.y &lt; point1.y <span class="keyword">then</span>     </span><br><span class="line">            angle = isClockWise <span class="keyword">and</span> (<span class="number">180</span> + angle) <span class="keyword">or</span> (<span class="number">180</span> - angle)</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- fourth quadrant</span></span><br><span class="line">        <span class="keyword">elseif</span> point2.x &gt; point1.x <span class="keyword">and</span> point2.y &lt; point1.y <span class="keyword">then</span></span><br><span class="line">            angle = isClockWise <span class="keyword">and</span> (<span class="number">360</span> + angle) <span class="keyword">or</span> (-angle)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> angle</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><br><br><br><br><br></p>
<h1 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>用反正切函数处理，反正切函数定义域为R，但是值域为(-pi/2, pi/2)<br><br></p>
<h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>计算出角度， (-pi/2, pi/2)</li>
<li>求出实际角度<br><br></li>
</ol>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">​    describe:</span></span><br><span class="line"><span class="comment">​        获取point2相对于point1的夹角，</span></span><br><span class="line"><span class="comment">​        x轴正向为0度的，顺时针/逆时针 角度</span></span><br><span class="line"><span class="comment">​    [point1]: cc.p</span></span><br><span class="line"><span class="comment">​        源点，默认(0, 0)</span></span><br><span class="line"><span class="comment">​    point2: cc.p</span></span><br><span class="line"><span class="comment">​        目标点</span></span><br><span class="line"><span class="comment">​    [isClockWise]: boolean</span></span><br><span class="line"><span class="comment">​       是否是顺时针，默认false</span></span><br><span class="line"><span class="comment">​    return: float</span></span><br><span class="line"><span class="comment">​       float - 角度</span></span><br><span class="line"><span class="comment">​   ]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPointAngle</span><span class="params">(point1, point2, isClockWise)</span></span></span><br><span class="line">​    point1 = point1 <span class="keyword">or</span> &#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125;</span><br><span class="line">​    isClockWise = isClockWise <span class="keyword">or</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">local</span> dertaX, dertaY = point2.x - point1.x, point2.y - point1.y</span><br><span class="line">​    <span class="keyword">local</span> <span class="built_in">rad</span> = <span class="built_in">math</span>.<span class="built_in">atan2</span>(dertaY, dertaX)</span><br><span class="line">​    <span class="keyword">local</span> angle = <span class="built_in">math</span>.<span class="built_in">deg</span>(<span class="built_in">rad</span>) </span><br><span class="line">​    <span class="keyword">if</span> <span class="keyword">not</span> isClockWise <span class="keyword">then</span></span><br><span class="line">​        angle = <span class="number">360</span> - angle</span><br><span class="line">​        angle = (angle &gt;= <span class="number">360</span>) <span class="keyword">and</span> (angle - <span class="number">360</span>) <span class="keyword">or</span> angle</span><br><span class="line">​    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> angle</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><br><br><br><br><br></p>
]]></content>
      <tags>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>关于功能开发的感想</title>
    <url>/2018/11/20/%E5%85%B3%E4%BA%8E%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91%E7%9A%84%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<p>在公司做了一个功能开发流程的总结，顺便也分享一下自己的想法。</p>
<a id="more"></a>
<p><br></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个文档目的是 <strong>明确业务功能开发流程，进而提高团队协作效率</strong>。</p>
<p>（从此，做出好游戏，席卷人民币，迎娶白富美，走上人生的巅峰，想想还有点小激动呢…）</p>
<p>在产品研发中，客户端是很核心的一个部分，我们是策划、服务器、美术、测试、用户之间的纽带。作为有担当的核心部分，当然要对自己的产出进行把关。这并不是一个舍己为人的行为，而是一个互惠互利的举措。</p>
<p>马云爸爸的3Win理论：客户Win（团队效率Win），合作伙伴Win（策划、服务器Win），自己Win。</p>
<p>这些我们都做到了，怎么能不成功！</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h1><h2 id="1-开发阶段"><a href="#1-开发阶段" class="headerlink" title="1. 开发阶段"></a>1. 开发阶段</h2><ul>
<li><p>原则：</p>
<ul>
<li><p>与策划定表结构或与服务器定接口，是一个 <strong>讨价还价</strong> 的过程，<strong>一定要进行协商，切忌某一方一言堂</strong>。</p>
</li>
<li><p>开发过程中，对于文档细节的疑问，哪怕是一丁点，也要与策划再三确认，不要嫌麻烦，因为现在不改，以后也是你改，而且花的时间更长。</p>
</li>
<li><p>如果在此过程由需求改动，一定要 <strong>确保策划落实到文档</strong> 上，避免之后不必要的麻烦。</p>
</li>
<li><p>我们可以提供自己的建议，但是最终解释权归策划所有。这句话不仅针对客户端，同样也对服务器有效，也就是说，如果与服务器有争论，可以让策划知晓双方观点及利弊情况，然后由他仲裁。</p>
</li>
<li>总之，策划就是一个双刃剑，我们要学会如何减少自己的伤害，更要充分加以利用。</li>
</ul>
</li>
<li><p>流程：</p>
<ol>
<li><p>与 策划及服务器 商定表结构</p>
<ul>
<li><p>表中字段的加减要慎重，不要随意。</p>
<p>一个表的字段数量一定要控制，必要时可以作表的扩展，不要所有东西都放一个表里。把表当成函数，不要所有逻辑全写在一个函数中，也不要有过多的小函数</p>
</li>
<li><p>表中数据的存储，也需要考虑到后期的维护。</p>
<ul>
<li><em>比如之前做过一个装备强化表，策划要求每个强化等级对应一条数据，前期装备少，强化等级低，表很小，可越维护越大，造成后续加载效率极低的问题</em></li>
</ul>
</li>
<li><p>设计表的过程中，尽可能多的让策划采用公式来设计数据，可以大大减少数据量</p>
<ul>
<li><em>之前那个强化表，最多的时候有几万条数据，后来改成公式不到100条</em></li>
</ul>
</li>
<li><p>如果涉及到其他表中的字段修改，<strong>一定要跟该表的功能负责客户端一起讨论</strong></p>
</li>
</ul>
</li>
<li><p>与服务器商定协议接口，必要时可让策划参与</p>
<ul>
<li><p>由于客户端和服务器表是共用的。</p>
<p><strong>尽量</strong> 让表中的某个字段只由一方读取，比如客户端读了A字段，服务器就不需要读了；如果服务器读了A字段，客户端就不读了，让服务器发过来。</p>
<p>避免混合数据造成查错困扰。</p>
</li>
<li><p>如果某字段服务器不用来维护，只是进行 <strong>验证判断</strong> 或 <strong>发放奖励</strong> ，则可以客户端自己读取。</p>
</li>
</ul>
</li>
<li><p>规划方案制定XMind，先设计后开发</p>
</li>
<li><p>客户端开发</p>
<p><em>如果此时需要测试数据，可以按照约定的格式，自己写一些简单数据。切忌等待表或服务器做完再去开发</em> 。</p>
</li>
</ol>
</li>
<li><p>建议</p>
<p>客户端在开发阶段需要的做一些自测数据，建议利用好Cache，做一些model，model是ui和数据（服务器和策划表）之间的中间键，它是我们客户端自己整理的数据集合。有利于之后功能的迭代。<em>具体怎么弄，欢迎大家去找司伟伟讲解</em></p>
</li>
</ul>
<p><br></p>
<h2 id="2-自测阶段"><a href="#2-自测阶段" class="headerlink" title="2. 自测阶段"></a>2. 自测阶段</h2><ul>
<li><p>原则：</p>
<p>我们做的是一个产品，需要保证自己产品的 <strong>基本质量</strong>。此处我们多迈了一小步，但是会给团队效率提升一大步。</p>
</li>
<li><p>流程：</p>
<ol>
<li><p>要求策划出 <strong>正式数据（或近似于正式数据的测试数据）</strong></p>
</li>
<li><p>用 <strong>策划数据</strong> 与服务器对接</p>
</li>
<li><p>根据策划文档与策划数据，进行正常功能所需的流程</p>
<ul>
<li><strong>保证功能全程不崩溃</strong> </li>
<li>所有与服务器交互，正常执行且显示正确</li>
<li>界面显示无异常情况（即使是由于策划数据导致，也要 <strong>告知策划</strong> ，让其改正）</li>
</ul>
</li>
<li><p>将问题整理（应该分为三部分  策划、服务器、客户端），并提交相应人修改</p>
</li>
<li><p>若有客户端、服务器、策划的修改，待修改完，到 步骤3；</p>
<p>若无修改，或者 <strong>只剩下策划的修改，且策划要求可以直接进入反馈阶段</strong> ，可以进入反馈阶段</p>
</li>
</ol>
</li>
</ul>
<p><br></p>
<h2 id="3-反馈阶段"><a href="#3-反馈阶段" class="headerlink" title="3. 反馈阶段"></a>3. 反馈阶段</h2><ul>
<li><p>原则：</p>
<ul>
<li><p>理论上讲，由于自测阶段存在，改动会比较少。一般是策划发现玩法与想象不符造成的额外修改，这些修改，需要根据改动规模进行协商。</p>
</li>
<li><p>如果在此过程由需求改动，一定要 <strong>确保策划落实到文档</strong> 上，避免之后不必要的麻烦。</p>
</li>
</ul>
</li>
<li><p>流程：</p>
<ol>
<li><p>提交策划进行测试</p>
</li>
<li><p>策划反馈（一般是以彩虹表形式）</p>
</li>
<li><p>若有反馈，则修改反馈，到 步骤1；</p>
<p>若无反馈，则继续</p>
</li>
</ol>
</li>
</ul>
<p><br></p>
<h2 id="4-收尾阶段"><a href="#4-收尾阶段" class="headerlink" title="4. 收尾阶段"></a>4. 收尾阶段</h2><ul>
<li><p>原则：</p>
<p>整理XMind是一个好习惯，好记性不如烂笔头。趁热打铁，把整体设计、思路都记录，方便以后理解修改，绝对是不损人很利己的行为。</p>
<p>至于XMind的规范…再说吧</p>
</li>
<li><p>流程：</p>
<ol>
<li>整理XMind    </li>
<li>关于重构 <ul>
<li>尽量避免重构，重构对于客户端、策划、测试的成本都比较高。一旦重构，<strong>必须</strong> 告知策划，进行测试</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>瞎分析</tag>
      </tags>
  </entry>
  <entry>
    <title>删除文件名中的空格</title>
    <url>/2016/11/02/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%AD%E7%9A%84%E7%A9%BA%E6%A0%BC/</url>
    <content><![CDATA[<p>用lua、python3来删除文件名中的空格</p>
<a id="more"></a>
<p><br></p>
<p>工作不认真，<br>目录下的文件名有空格，<br>遇到这种就很烦躁呀，<br>算了，<br>还是搞个脚本解决下吧。</p>
<p><br><br>做的很简单，<br>处理的是<strong>当前目录</strong>下所有文件的文件名，<br>通过<strong>替换字符串</strong>的方式将空格替换了。</p>
<p><br></p>
<p>环境：MAC</p>
<p><br></p>
<ul>
<li>lua方法</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> files = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> all = <span class="built_in">io</span>.<span class="built_in">popen</span>(<span class="string">"ls "</span>)</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> all:<span class="built_in">lines</span>() <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">find</span>(filename, <span class="string">' '</span>) <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">local</span> newName = <span class="built_in">string</span>.<span class="built_in">gsub</span>(filename, <span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">		<span class="built_in">os</span>.<span class="built_in">rename</span>(filename, newName)</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<ul>
<li>python3方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> parent, dirnames, filenames <span class="keyword">in</span> os.walk(os.getcwd()):</span><br><span class="line">	<span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">		os.rename(os.path.join(parent, filename), os.path.join(parent, filename.replace(<span class="string">' '</span>, <span class="string">''</span>)))</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>千分位格式化数字</title>
    <url>/2018/09/02/%E5%8D%83%E5%88%86%E4%BD%8D%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<p>stirng.gsub &amp; 正则<br>千分位格式化数字</p>
<a id="more"></a>
<p><br></p>
<h1 id="1-聊聊"><a href="#1-聊聊" class="headerlink" title="1.聊聊"></a>1.聊聊</h1><p>接到了个需求：<br>    千分位格式化数字，可能有小数点。<br>比如：<br>    1234567 -&gt; 1,234,567<br>    1234567.8901 -&gt; 1,234,567.8901</p>
<p>最后效果就是小数点左边的部分，每三个数字加一个逗号。</p>
<p>实现：</p>
<ul>
<li>最直接的肯定就是用字符串截取，先找到小数点，分割成两部分；再把前半部分3个为一组分开，再重新带上逗号拼接。</li>
<li>也可以用 正则 + 字符串替换。通过模式匹配，从头开始每三个数字后加一个逗号，不断替换直到最后或小数点位置。<br>第一种方法通俗易懂简单明了，但是麻烦；第二种代码相对简(xiu)洁(ji)一些。</li>
</ul>
<p><br><br><br></p>
<h1 id="2-用到的东西"><a href="#2-用到的东西" class="headerlink" title="2.用到的东西"></a>2.用到的东西</h1><h2 id="character-class"><a href="#character-class" class="headerlink" title="character class"></a>character class</h2><p>字符类，用于表示字符的集合。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x: （这里 x 不能是 魔法字符 ^$()%.[]*+-? 中的一员） 表示字符 x 自身。</span><br><span class="line">.: （一个点）可表示任何字符。</span><br><span class="line">%a: 表示任何字母。</span><br><span class="line">%c: 表示任何控制字符。</span><br><span class="line">%d: 表示任何数字。</span><br><span class="line">%g: 表示任何除空白符外的可打印字符。</span><br><span class="line">%l: 表示所有小写字母。</span><br><span class="line">%p: 表示所有标点符号。</span><br><span class="line">%s: 表示所有空白字符。</span><br><span class="line">%u: 表示所有大写字母。</span><br><span class="line">%w: 表示所有字母及数字。</span><br><span class="line">%x: 表示所有 16 进制数字符号。</span><br><span class="line">%x: （这里的 x 是任意非字母或数字的字符） 表示字符 x。 这是对魔法字符转义的标准方法。 所有非字母或数字的字符 （包括所有标点，也包括非魔法字符） 都可以用前置一个 &apos;%&apos; 放在模式串中表示自身。</span><br><span class="line">[set]: 表示 set　中所有字符的联合。 可以以 &apos;-&apos; 连接，升序书写范围两端的字符来表示一个范围的字符集。 上面提到的 %x 形式也可以在 set 中使用 表示其中的一个元素。 其它出现在 set 中的字符则代表它们自己。 例如，[%w_] （或 [_%w]） 表示所有的字母数字加下划线）， [0-7] 表示 8 进制数字， [0-7%l%-]　表示 8 进制数字加小写字母与 &apos;-&apos; 字符。</span><br><span class="line">交叉使用类和范围的行为未定义。 因此，像 [%a-z] 或 [a-%%] 这样的模式串没有意义。</span><br><span class="line">[^set]: 表示 set 的补集， 其中 set 如上面的解释。</span><br><span class="line">所有单个字母表示的类别（%a，%c，等）， 若将其字母改为大写，均表示对应的补集。 例如，%S 表示所有非空格的字符。</span><br></pre></td></tr></table></figure>
<p><br></p>
<h2 id="pattern-item（模式条目）"><a href="#pattern-item（模式条目）" class="headerlink" title="pattern item（模式条目）"></a>pattern item（模式条目）</h2><p>模式条目可以是：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单个字符类匹配该类别中任意单个字符</span><br><span class="line">单个字符类跟一个 &apos;*&apos;， 将匹配零或多个该类的字符。 这个条目总是匹配尽可能长的串；</span><br><span class="line">单个字符类跟一个 &apos;+&apos;， 将匹配一或更多个该类的字符。 这个条目总是匹配尽可能长的串；</span><br><span class="line">单个字符类跟一个 &apos;-&apos;， 将匹配零或更多个该类的字符。 和 &apos;*&apos; 不同，这个条目总是匹配尽可能短的串；</span><br><span class="line">单个字符类跟一个 &apos;?&apos;， 将匹配零或一个该类的字符。 只要有可能，它会匹配一个；</span><br><span class="line">%n， 这里的 n 可以从 1 到 9； 这个条目匹配一个等于 n 号捕获物（后面有描述）的子串。</span><br><span class="line">%bxy， 这里的 x 和 y 是两个明确的字符； 这个条目匹配以 x 开始 y 结束， 且其中 x 和 y 保持 平衡 的字符串。 意思是，如果从左到右读这个字符串，对每次读到一个 x 就 +1 ，读到一个 y 就 -1， 最终结束处的那个 y 是第一个记数到 0 的 y。 举个例子，条目 %b() 可以匹配到括号平衡的表达式。</span><br><span class="line">%f[set]， 指 边境模式； 这个条目会匹配到一个位于 set 内某个字符之前的一个空串， 且这个位置的前一个字符不属于 set 。 集合 set 的含义如前面所述。 匹配出的那个空串之开始和结束点的计算就看成该处有个字符 &apos;\0&apos; 一样。</span><br></pre></td></tr></table></figure></p>
<p><br></p>
<h2 id="pattern（模式）"><a href="#pattern（模式）" class="headerlink" title="pattern（模式）"></a>pattern（模式）</h2><p>指一个模式条目的序列。<br>在模式最前面加上符号 ‘^’ 表示从字符串的开始处做匹配。<br>在模式最后加上符号 ‘$’ 表示匹配到字符串的结尾。<br>如果 ‘^’ 和 ‘$’ 出现在其它位置，它们均没有特殊含义，只表示自身。</p>
<p><br></p>
<h2 id="capture（捕获）"><a href="#capture（捕获）" class="headerlink" title="capture（捕获）"></a>capture（捕获）</h2><p>模式可以在内部用小括号括起来（表示一个子模式），这些子模式称为 捕获物。<br>当匹配成功时，由捕获物匹配到的字符串中的子串被保存起来用于之后用途。<br>捕获物由它们左括号的次序来编号。<br>ext: 空的捕获() 将捕获到当前字符串的位置（一个数字）；例如，”()%a%d()” 作用到 “ltree98” 上，将产生两个捕获物: 5和7。</p>
<p><br></p>
<h2 id="string-gsub"><a href="#string-gsub" class="headerlink" title="string.gsub"></a>string.gsub</h2><p>string.gsub (目标串, 匹配串, 替换串 [, 替换次数])</p>
<p>返回一个经过替换串替换后的目标串的副本及替换次数。<br>如果替换串是string则直接用替换串替换匹配串即可。当里面字符存在’%’时，则代表调用捕获子串，捕获子串序列在1-9，0代表全部，%%代表%字符。<br>如果替换串是table类型，在每次匹配调用，并用第一个捕获子串来作为table的key值查询。<br>如果替换串是function类型，在每次匹配调用，并将所有子串按顺序作为函数参数。<br>任何情况下，如果匹配串没有捕获子串，那么整个匹配串作为捕获子串继续执行。<br>如果table或者function返回的是</p>
<ul>
<li>string类型，直接用</li>
<li>number类型，直接用</li>
<li>false，不替换</li>
<li>nil，不替换</li>
<li>其他，报错</li>
</ul>
<p><br><br><br></p>
<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatnumberthousands</span><span class="params">(num)</span></span></span><br><span class="line">    <span class="keyword">local</span> formatted = <span class="built_in">tostring</span>(num)</span><br><span class="line">    <span class="keyword">local</span> k</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">        formatted, k = <span class="built_in">string</span>.<span class="built_in">gsub</span>(formatted, <span class="string">"^(-?%d+)(%d%d%d)"</span>, <span class="string">'%1,%2'</span>)</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> formatted</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><br><br><br><br><br></p>
<hr>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li>Lua5.3官方文档 <a href="https://www.lua.org/manual/5.3/manual.html" target="_blank" rel="noopener">https://www.lua.org/manual/5.3/manual.html</a></li>
</ul>
]]></content>
      <tags>
        <tag>跟着学</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法之美1_数组&amp;链表</title>
    <url>/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E1_%E6%95%B0%E7%BB%84&amp;%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>数据结构与算法之美1_数组&amp;链表</p>
<a id="more"></a>
<p><br></p>
<hr>
<p>本系列文章，算是《极客时间》的《数据结构与算法之美》专栏的读书笔记。</p>
<p>只是一些个人心得与练习，想要得到更详细更好更系统的学习，请去 极客时间APP订阅专栏。</p>
<p>跟着专栏学了好久，也该有点成果不是；</p>
<p>正好趁着最后的几篇练习章节，把之前学到的，做个笔记总结一下。</p>
<hr>
<p>笔记列表：</p>
<ul>
<li><a href="http://www.lt-tree.com/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E1_%E6%95%B0%E7%BB%84&amp;%E9%93%BE%E8%A1%A8/" target="_blank" rel="noopener">数组&amp;链表</a></li>
<li><a href="http://www.lt-tree.com/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E2_%E6%A0%88&amp;%E9%98%9F%E5%88%97&amp;%E9%80%92%E5%BD%92/" target="_blank" rel="noopener">栈&amp;队列&amp;递归</a></li>
<li><a href="http://www.lt-tree.com/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E3_%E6%8E%92%E5%BA%8F&amp;%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/" target="_blank" rel="noopener">排序&amp;二分查找</a></li>
</ul>
<hr>
<p><br><br><br></p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>数组是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p>
<ul>
<li>线性表 &amp; 非线性表<ul>
<li>线性表：数组、链表、队列、栈等</li>
<li>非线性表：二叉树、堆、图等</li>
</ul>
</li>
<li>连续的内存空间</li>
<li>相同的数据类型</li>
</ul>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>快速的随机访问与低效的插入删除。</p>
<ul>
<li><p>快速的随机访问：根据下标随机访问 </p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[i](地址) = base(首地址) + i(下标) * data_type_size(数组每个元素大小)</span><br></pre></td></tr></table></figure>
</li>
<li><p><em>随机访问复杂度为O(1)，查找的复杂度大于等于O(logn)  (在排好序情况下，用二分查找的复杂度)</em></p>
</li>
</ul>
</li>
<li>低效的插入与删除<ul>
<li>插入：数组大小为n，将一个数据插入到第k个位置，需要将k~n位置数据均向后移动一位，平均时间复杂度为O(n)。<ul>
<li><em>对于无序数组，可以将第k位置数据放到最后，然后将数据放到第k位置，来避免大规模的数据搬移</em></li>
</ul>
</li>
<li>删除：数组大小为n，将第k个位置数据删除，需要将k~n位置数据均向前移动一位，平均时间复杂度为O(n)。<ul>
<li><em>对于数据连续性要求低的情况，可以将多个删除操作集中到一次进行，被删除的数据标记删除，新数据从数组尾部扩展，直到数组没有空间，将标记删除的数据一次性清除，其余数据一次性前移相应位数</em></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h4 id="数组越界问题"><a href="#数组越界问题" class="headerlink" title="数组越界问题"></a>数组越界问题</h4><p>访问数组其实就是访问连续的内存，只要所访问的内存地址是可用的，那么这个访问就成立。因此，对于没有规定数组越界时编译器应该如何处理的语言中，会出现难以排查的BUG。但是，也有很多语言，自己会做一些越界检查，并抛出错误或异常。</p>
<h4 id="容器与数组的选择"><a href="#容器与数组的选择" class="headerlink" title="容器与数组的选择"></a>容器与数组的选择</h4><ul>
<li><p>一些容器</p>
<ul>
<li>对于Java的ArrayList，它的优势是将很多数组操作细节进行了封装，并且支持了<strong>动态扩容</strong>（动态扩容：在超出给数组分配的空间上限时，会重新申请1.5倍数组空间，并将数据迁移过去）。但是，由于扩容比较耗时，最好还是在创建ArrayList时指定数据大小。</li>
<li>对于C++ STL的 vector，可以获取长度，可以在末尾增加元素，可以确定长度节省空间，支持了动态扩容（扩容倍数与编译器相关，为1.5倍或2倍，具体为什么是成倍扩容而非固定步长扩容，为什么是1.5倍/2倍，而不是其他倍数，可参考资料[<a href="https://blog.csdn.net/yangshiziping/article/details/52550291]]）" target="_blank" rel="noopener">https://blog.csdn.net/yangshiziping/article/details/52550291]]）</a></li>
<li>对于C++11新增的 std::array，它介于内置的array与vector之间。对于内置array，它提供更好的数据访问机制，可以自动释放内存，更安全，提供更好的遍历机制，提供判空、初始化所有成员方法、swap机制等，更容易使用；对于vector而言，它使用了静态存储区，效率高，但不支持改变容器大小操作即不支持动态扩容；使用std:array必须指定元素类型，指定容器大小。</li>
</ul>
</li>
<li><p>如何选择</p>
<ul>
<li>对于业务开发，直接使用容器，省时省力。</li>
<li>对于底层开发，需要将性能优化到极致，此时使用数组优于容器。</li>
</ul>
</li>
</ul>
<p><br></p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</p>
<ul>
<li>链表由一系列结点组成，结点可以在运行时动态生成</li>
<li>每个结点包含两部分：<ul>
<li>存储数据元素的数据域</li>
<li>存储下一个结点地址的指针域</li>
</ul>
</li>
</ul>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>链表中，有两个特殊节点：头结点、尾结点。</p>
<p>头结点记录链表的基地址，通过头结点可以遍历整条链表。</p>
<p>尾结点指针域指向空地址NULL，表示这是链表上最后一个结点。</p>
<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><p>单链表和循环链表中，任意结点的指针域只有一个，就是指向下一个结点。但是在双向链表中，指针域有两个，一个指向前一个结点，可以找到前驱节点，一个指向下一个结点，可以找到后继节点。</p>
<p>正因为两个指针域，使得双向链表操作更加灵活，在插入、删除等操作更加简单、高效。</p>
<h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p>一个特殊的单链表，区别在于循环链表的尾结点指针域不指向空地址，而是指向链表的头结点，从而首尾相连。</p>
<p>循环链表在处理环形结构特点数据时，会更好更简洁。</p>
<h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><p>与数组相反，高效的插入删除、低效的随机访问。</p>
<ul>
<li>但是在实际的软件开发中，不能仅仅利用复杂度分析就决定使用哪个数据结构来存储数据。</li>
<li>数组简单易用，在实现上使用的是连续的内存空间，借助于CPU的缓存机制，预读数组数据，可以使得访问效率更高。</li>
<li>链表在内存中并不是连续存储，无法充分利用CPU的缓存机制，无法做到有效的预读数据。</li>
<li>数组的缺点是大小固定。一旦声明，就需要占用整块连续内存空间，声明数组过大，容易导致内存不足；但是声明数组过小，当需要拷贝迁移数据，又很耗时。链表相对于此的优势就显现出来了。</li>
<li>链表的缺点还有：相对于数据，还需要额外存储指针域，多耗费一些存储空间；如果进行频繁的插入、删除操作，将会导致频繁内存申请、释放，容易造成内存碎片。</li>
</ul>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><h4 id="理解指针、引用的含义"><a href="#理解指针、引用的含义" class="headerlink" title="理解指针、引用的含义"></a>理解指针、引用的含义</h4><p>将某个变量赋值给指针，实际上是将该变量的地址赋值给指针，反过来说，指针中存储了这个变量的内存地址，该地址指向这个变量，通过指针可以找到这个变量。</p>
<h4 id="警惕指针丢失和内存泄漏"><a href="#警惕指针丢失和内存泄漏" class="headerlink" title="警惕指针丢失和内存泄漏"></a>警惕指针丢失和内存泄漏</h4><ul>
<li><p>插入结点时，一定要注意操作顺序</p>
<ul>
<li>链表结构为 a-&gt;b-&gt;c-&gt;d，将z插入到b与c之间<ol>
<li>将z的后继指针指向c</li>
<li>将b的后继指针指向z</li>
</ol>
</li>
</ul>
</li>
<li><p>删除链表结点时，记得手动释放内存空间</p>
<ul>
<li>对于自动管理内存的语言就无需顾虑了</li>
</ul>
</li>
</ul>
<h4 id="利用哨兵简化实现难度"><a href="#利用哨兵简化实现难度" class="headerlink" title="利用哨兵简化实现难度"></a>利用哨兵简化实现难度</h4><p>针对链表的插入第一个结点和删除最后一个结点情况特殊处理，会使得代码繁琐、易出错。</p>
<p>可以引入一个不带数据的哨兵结点，在头部，指向链表的第一个结点。</p>
<h4 id="重点留意边界条件处理"><a href="#重点留意边界条件处理" class="headerlink" title="重点留意边界条件处理"></a>重点留意边界条件处理</h4><p>注意下列情况，代码能否正常工作</p>
<ul>
<li>链表为空</li>
<li>链表只含一个结点</li>
<li>链表只包含两个结点</li>
<li>处理头结点和尾结点</li>
</ul>
<h4 id="举例-amp-画图"><a href="#举例-amp-画图" class="headerlink" title="举例&amp;画图"></a>举例&amp;画图</h4><p>好记性不如烂笔头，多举例、多画图，加深印象，充分理解。</p>
<h4 id="多写多练，没有捷径"><a href="#多写多练，没有捷径" class="headerlink" title="多写多练，没有捷径"></a>多写多练，没有捷径</h4><p>常见链表操作</p>
<ul>
<li>单链表反转</li>
<li>链表中环的检测</li>
<li>两个有序的链表合并</li>
<li>删除链表倒数第n个结点</li>
<li>求链表的中间结点</li>
</ul>
<p><br></p>
<p><br></p>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h2><h3 id="必知必会"><a href="#必知必会" class="headerlink" title="必知必会"></a>必知必会</h3><ul>
<li><p>实现一个支持动态扩容的数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (size &lt; total) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--) &#123;</span><br><span class="line">				data[i] = data[i - <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			data[index] = value;</span><br><span class="line">			++size;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>  &#123;</span><br><span class="line">			<span class="comment">// 扩容</span></span><br><span class="line">			<span class="keyword">int</span> *temp = <span class="keyword">new</span> <span class="keyword">int</span>[total * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">				temp[i] = data[i];</span><br><span class="line">			&#125;</span><br><span class="line">			temp[index] = value;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = index + <span class="number">1</span>; i &lt;= total + <span class="number">1</span>; i++) &#123;</span><br><span class="line">				temp[i] = data[i - <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">delete</span>[] data;</span><br><span class="line">			data = temp;</span><br><span class="line">			total *= <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; data[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> *<span class="title">getData</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> total = <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">int</span> *data = <span class="keyword">new</span> <span class="keyword">int</span>[total + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现一个大小固定的有序数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (size &gt;= total)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		++size;</span><br><span class="line">		<span class="keyword">int</span> i = size;</span><br><span class="line">		<span class="keyword">for</span> ( ; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (data[i<span class="number">-1</span>] &lt;= value)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			data[i] = data[i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		data[i] = value;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; data[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> *<span class="title">getData</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> total = <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">int</span> *data = <span class="keyword">new</span> <span class="keyword">int</span>[total + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现两个有序数组合并为一个有序数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeArray</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> aLen, <span class="keyword">int</span> b[], <span class="keyword">int</span> bLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> totalLen = aLen + bLen;</span><br><span class="line">    --aLen;</span><br><span class="line">    --bLen;</span><br><span class="line">    --totalLen;</span><br><span class="line">    <span class="keyword">while</span>(aLen &gt;= <span class="number">0</span> &amp;&amp; bLen &gt;= <span class="number">0</span>)	&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[aLen] &gt;= b[bLen])	&#123;</span><br><span class="line">            a[totalLen--] = a[aLen--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>	&#123;</span><br><span class="line">            a[totalLen--] = b[bLen--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(bLen &gt;= <span class="number">0</span>)	&#123;</span><br><span class="line">        a[totalLen--] = b[bLen--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h3><ul>
<li><p><a href="https://blog.csdn.net/lttree/article/details/70217538" target="_blank" rel="noopener">15_3Sum</a></p>
</li>
<li><p><a href="https://blog.csdn.net/lttree/article/details/77826724" target="_blank" rel="noopener">41_First Missing Positive</a></p>
</li>
<li><p><a href="https://blog.csdn.net/lttree/article/details/88652834" target="_blank" rel="noopener">169_Majority Element</a></p>
</li>
</ul>
<p><br></p>
<h2 id="链表-1"><a href="#链表-1" class="headerlink" title="链表"></a>链表</h2><h3 id="必知必会-1"><a href="#必知必会-1" class="headerlink" title="必知必会"></a>必知必会</h3><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><ul>
<li><p>单链表结点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	ListNode* next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>双向链表结点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DoubleSideListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    ListNode* pre;</span><br><span class="line">    ListNode* next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="单链表的反转"><a href="#单链表的反转" class="headerlink" title="单链表的反转"></a>单链表的反转</h4><ul>
<li><p>三个哨兵</p>
</li>
<li><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseSingleList</span><span class="params">(ListNode* <span class="built_in">list</span>)</span>	</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode* head = <span class="built_in">list</span>;</span><br><span class="line">    ListNode* temp1 = <span class="built_in">list</span>;</span><br><span class="line">    ListNode* temp2;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">while</span>(temp1 != <span class="literal">nullptr</span> &amp;&amp; temp1-&gt;next != <span class="literal">nullptr</span>)	&#123;</span><br><span class="line">    	temp2 = temp1-&gt;next;</span><br><span class="line">    	temp1-&gt;next = temp2-&gt;next;</span><br><span class="line">    	temp2-&gt;next = head;</span><br><span class="line">    	head = temp2;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="链表中环的检测"><a href="#链表中环的检测" class="headerlink" title="链表中环的检测"></a>链表中环的检测</h4><ul>
<li><p>快慢指针</p>
</li>
<li><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">haveLoop</span><span class="params">(ListNode* <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode* slow = <span class="built_in">list</span>;</span><br><span class="line">    ListNode* fast = <span class="built_in">list</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>)	&#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(slow == fast)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="两个有序的链表合并"><a href="#两个有序的链表合并" class="headerlink" title="两个有序的链表合并"></a>两个有序的链表合并</h4><ul>
<li><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">mergeSortedLists</span><span class="params">(ListNode* list1, ListNode* list2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ListNode* <span class="built_in">list</span> = <span class="keyword">new</span> ListNode();</span><br><span class="line">	ListNode* head = <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (list1 != <span class="literal">nullptr</span> <span class="keyword">or</span> list2 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (list1 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			<span class="built_in">list</span>-&gt;next = list2;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (list2 == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			<span class="built_in">list</span>-&gt;next = list1;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (list1-&gt;data &lt; list2-&gt;data) &#123;</span><br><span class="line">				<span class="built_in">list</span>-&gt;next = list1;</span><br><span class="line">				list1 = list1-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>  &#123;</span><br><span class="line">				<span class="built_in">list</span>-&gt;next = list2;</span><br><span class="line">				list2 = list2-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="删除链表中倒数第n个结点"><a href="#删除链表中倒数第n个结点" class="headerlink" title="删除链表中倒数第n个结点"></a>删除链表中倒数第n个结点</h4><ul>
<li><p>和快慢指针差不多，相聚n个结点距离，快指针到尾部就代表慢指针是第n个节点</p>
</li>
<li><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">deleteReciprocalNode</span><span class="params">(ListNode* <span class="built_in">list</span>, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line">	ListNode* aimNode = <span class="built_in">list</span>;</span><br><span class="line">	ListNode* afterNode = <span class="built_in">list</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(afterNode-&gt;next != <span class="literal">nullptr</span>)	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			afterNode = afterNode-&gt;next;</span><br><span class="line">			--n;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			aimNode = aimNode-&gt;next;</span><br><span class="line">			afterNode = afterNode-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">		ListNode* deleteNode = aimNode-&gt;next;</span><br><span class="line">		aimNode-&gt;next = deleteNode-&gt;next;</span><br><span class="line">		<span class="keyword">delete</span>(deleteNode);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="求链表的中间结点"><a href="#求链表的中间结点" class="headerlink" title="求链表的中间结点"></a>求链表的中间结点</h4><ul>
<li><p>依旧是快慢指针，慢指针一次移1，快指针一次移2</p>
</li>
<li><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ListNode* slow = <span class="built_in">list</span>;</span><br><span class="line">	ListNode* fast = <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		slow = slow-&gt;next;</span><br><span class="line">		fast = fast-&gt;next-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="单链表、循环链表、双向链表的增删操作"><a href="#单链表、循环链表、双向链表的增删操作" class="headerlink" title="单链表、循环链表、双向链表的增删操作"></a>单链表、循环链表、双向链表的增删操作</h4><ul>
<li><p>单链表</p>
</li>
<li><p>循环链表</p>
</li>
<li><p>双向链表</p>
</li>
</ul>
<h3 id="LeetCode练习题"><a href="#LeetCode练习题" class="headerlink" title="LeetCode练习题"></a>LeetCode练习题</h3><ul>
<li><p><a href="https://blog.csdn.net/lttree/article/details/71313665" target="_blank" rel="noopener">23_Merge k Sorted Lists</a></p>
</li>
<li><p><a href="https://blog.csdn.net/lttree/article/details/88652868" target="_blank" rel="noopener">141_Linked List Cycle</a></p>
</li>
</ul>
<p><br><br><br><br><br></p>
]]></content>
      <tags>
        <tag>跟着学</tag>
      </tags>
  </entry>
  <entry>
    <title>内部分享这件事</title>
    <url>/2019/07/12/%E5%86%85%E9%83%A8%E5%88%86%E4%BA%AB%E8%BF%99%E4%BB%B6%E4%BA%8B/</url>
    <content><![CDATA[<p>关于内部分享的，所想所做</p>
<a id="more"></a>
<p><br></p>
<h1 id="一家之言"><a href="#一家之言" class="headerlink" title="一家之言"></a>一家之言</h1><p>虽然，大多人奋斗的最终目的都是财务自由。</p>
<p>但是，越来越多的年轻人，更不仅限于此，能“站着”把钱挣了，为什么要“坐“着呢？</p>
<p>甚至，随着成本不同，宁可少赚一些，也要“站着”。</p>
<p><br></p>
<p>回到“正”题，</p>
<p>以前工作的时候，特别羡慕那些有内部分享的公司；但是，一直也没有加入到过这样的团队。</p>
<p>既然没有，那就自己来，</p>
<p>以前我没得选，现在我想做个分享。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="付诸行动"><a href="#付诸行动" class="headerlink" title="付诸行动"></a>付诸行动</h1><p>真正要做这个东西，不是那么简单的。</p>
<p>在公司，做任何东西，都是看成本与收益的，很多事情不可能像想象的那么简单；而且，既然做就做好，不要形式化表面化。</p>
<p><br></p>
<h2 id="成本与收益"><a href="#成本与收益" class="headerlink" title="成本与收益"></a>成本与收益</h2><p>分享涉及到的人员的成本收益以及主程的成本收益都要考虑到。</p>
<h3 id="管理者"><a href="#管理者" class="headerlink" title="管理者"></a>管理者</h3><p>做任何活动，当然都要经过管理者的把关与认同。</p>
<p>需要做的就是证明，分享这件事收益是大于成本的，对于收益比高的东西，管理者是很难不去赞同你做的。</p>
<p>成本：</p>
<ul>
<li>功能进度上的影响</li>
<li>管理上的时间支出</li>
<li>激励及鼓励项支出（可选项）</li>
</ul>
<p>其中，功能进度上的影响，可以由调整内部分享的时间来进行把控及限制。</p>
<p>但是，做分享，一定程度上会耽误功能开发进度</p>
<p>收益，由以下几个方面：</p>
<ul>
<li>培养良好的技术氛围</li>
<li>扩宽团队视野</li>
<li>提高团队技术</li>
</ul>
<p>当然，还会有很多隐性收益。</p>
<h3 id="参加者"><a href="#参加者" class="headerlink" title="参加者"></a>参加者</h3><p>参加分享的人，主要可以分为两种，分享的人 和 听的人。</p>
<p>对于分享的人，</p>
<p>成本：</p>
<ul>
<li>花费时间筹备，影响功能进度（中等）</li>
</ul>
<p>收益：</p>
<ul>
<li>锻炼对已获得知识的总结、提炼能力</li>
<li>锻炼表达能力，沟通能力</li>
<li>检验并优化实现功能</li>
</ul>
<p>对于其他人，</p>
<p>成本：</p>
<ul>
<li>花费时间参加，影响功能进度（轻微）</li>
</ul>
<p>收益：</p>
<ul>
<li>获取新的知识，对当前项目加深理解</li>
<li>锻炼表达能力，沟通能力</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="流程与规范"><a href="#流程与规范" class="headerlink" title="流程与规范"></a>流程与规范</h2><p>把内部分享当做一个玩法，</p>
<p>有三个职业：</p>
<ul>
<li>守卫者（1人）<ul>
<li>分享的负责人，前期可由主程担任，之后期望团队各个成员轮值</li>
<li>职责：<ul>
<li>分享前，与分享者沟通协调分享主题，确立大纲及大概时间</li>
<li>分享期，沟通协调 会议室，确保使用工具（分享材料、工具等），把控分享流程及时间</li>
<li>分享后，统计整理反馈给分享者，整理分享内容存档</li>
</ul>
</li>
</ul>
</li>
<li>分享者（n人）<ul>
<li>职责：确定分享内容，并准备好分享材料，流程大纲以PPT效果最好，辅助以 XMind、代码片段截图、效果视频等。</li>
</ul>
</li>
<li>聆听者（n人）<ul>
<li>职责：对分享者分享内容吸收讨论，做好反馈，帮助分享者更进一步。</li>
</ul>
</li>
</ul>
<p>分享期的流程为：</p>
<ul>
<li>准备<ul>
<li>所有人准备好 笔/本</li>
<li>分享者准备好分享材料提前交付守卫者</li>
<li>守卫者联系好会议室等</li>
</ul>
</li>
<li>开始<ul>
<li>守卫者 明确分享流程及规则</li>
<li>分享者 进行分享<ul>
<li>期间非重大问题，先记录下来，禁止打断</li>
</ul>
</li>
<li>分享者 进行答疑<ul>
<li>守卫者把控方向及时间，避免跑偏及超时</li>
<li>对于大争论，可暂时记录，并约定好下次讨论时间</li>
</ul>
</li>
</ul>
</li>
<li>结束<ul>
<li>守卫者收集聆听者的反馈，整理给分享者</li>
<li>守卫者将分享材料、答疑期间重要问题 等，收档存储</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="重点与难点"><a href="#重点与难点" class="headerlink" title="重点与难点"></a>重点与难点</h2><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>不止是内部分享，还有很多会议，难以开展，主要问题就是时间。</p>
<p>由于时间无法确定，导致效率低下，阻碍功能开发进度（开会一开一下午，谁受得了呀）。</p>
<p>但是，很多时候，并不是真的需要花费那么多时间。</p>
<p>内部分享会议主要由两部分组成： 分享时间 + 答疑时间。</p>
<p>分享时间能做好预估，答疑时间，也可以做限制，对于大的问题，讨论大概，并存档延后处理，不一定非要一次解决完所有问题。</p>
<p>所以，保证每次分享的时间，让大家都明确要花多少时间来做这件事，保证分享高效的进行，是很重要的一点。</p>
<p>目前，由于近期项目组业务繁忙，暂定的时间是 双周一次，每次根据内容把控在1-2小时。</p>
<h3 id="分享内容"><a href="#分享内容" class="headerlink" title="分享内容"></a>分享内容</h3><p>分享的还有一个大的问题，就是不知道分享什么。</p>
<p>感觉分享难的，大家听不懂；分享简单的，又觉得不值得。</p>
<p>但是，其实分享方向很多的，大方向来讲，可以分为三种：</p>
<ul>
<li>模块功能的实现方法</li>
<li>模块功能的优化方向</li>
<li>外延分享</li>
</ul>
<p>对已实现模块功能进行剖析，也便于CodeReview，也便于发现一些模块的性能瓶颈等。</p>
<p>优化方向的讨论，便于发现不同的角度及方案。</p>
<p>外延分享也是必须的，不能仅限于当前业务，但是一定要与业务有所关联，并且不能太深。</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>很多人觉得，分享应该是大家都轻轻松松的去进行，目的是让大家都理解，没必要有太多规矩，让大家拘谨。</p>
<p>首先，我是很认同这个目的，让大家有所收获，理解分享者的内容。</p>
<p>但是，无规矩不成方圆，为了我们分享的高效执行，还是要有一些基本的规矩的，比如分享者先分享再答疑，可以避免很多问题，再如，把控分享时间，也可以避免插科打诨等影响分享的收益。</p>
<p>这里，我自己本人的观点就是，高效的收益来源于完善且准确执行的制度。</p>
<h3 id="反馈与存档"><a href="#反馈与存档" class="headerlink" title="反馈与存档"></a>反馈与存档</h3><p>反馈是对于分享者的另一份收益，也要保障好。</p>
<p>分享会议，最难的还是做分享的人，为了激励大家对担任分享者的积极性，一定要保障好分享者利益。</p>
<p>存档是对于整个分享的一个总结，每个团队，都应该有自己的底蕴与积淀，这些分享日志就可以作为积淀的一部分。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="磕磕绊绊"><a href="#磕磕绊绊" class="headerlink" title="磕磕绊绊"></a>磕磕绊绊</h1><p>到目前为止，也实施了一段时间，过程也是磕磕绊绊。</p>
<p>此处也列一些遇到的问题，有些有解决，有些没有解决，都可以讨论一下。</p>
<h2 id="时间冲突"><a href="#时间冲突" class="headerlink" title="时间冲突"></a>时间冲突</h2><p>有时会出现，准备开分享会的时候，人员不齐的情况。</p>
<p>由于分享希望让所有成员都有所收获，并且团队人员不是很多，所以，就会推迟分享时间。</p>
<p>最主要的问题，还是在于会议室不足（需要大的且有投影仪的会议室），所以无法准确预估会议室空缺时间，之后解决方法就是分析各团队占用的时间，找个相对冷门时间开分享会议，降低冲突概率。</p>
<h2 id="功能冲突"><a href="#功能冲突" class="headerlink" title="功能冲突"></a>功能冲突</h2><p>还有一个问题就是，分享者时间和功能研发冲突了。</p>
<p>尽管已经提前2个周进行沟通，但是业务繁忙的时候，的确没有时间去整理（大家对分享质量要求还是很上心的）。</p>
<p>这个解决方案，目前也是延迟分享，但是，不能影响之后的分享进行。</p>
<p>比如，分享时间表：</p>
<ul>
<li>第一期，时间：第一周</li>
<li>第二期，时间：第三周</li>
<li>第三期，时间：第五周</li>
<li>…</li>
</ul>
<p>第一期时间延迟，首先改为第二周开始</p>
<p>第一期时间再次延迟，将第一期时间放在第二期之后</p>
<ul>
<li>第二期，时间：第三周</li>
<li>第一期，时间：第五周</li>
<li>第三期，时间：第七周</li>
<li>…</li>
</ul>
<p>所以，需要提前通知两期分享者准备，需要提前一个月告诉分享者时间，开始准备分享。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>很多团队，尤其是游戏团队，感觉都不重视这方面。</p>
<p>一是现在很多都在抢时间上线，哪有时间管你自己提升。</p>
<p>二是都想着上线后，就开始做；赚钱后，就开始做；等等…</p>
<p>其实，现在年轻人，不像以前了；</p>
<p>相对于提升工作的幸福感，可能比工资上收入多那么一点更重要</p>
<p>（毕竟，多那些钱，也改变不了什么，为什么要在工作中委屈自己呢）</p>
<p>最后的最后，一切这些都离不开管理者的支持，没有管理者支持与理解，设计再好再多，也是枉然。</p>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>瞎分析</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法之美2_栈&amp;队列&amp;递归</title>
    <url>/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E2_%E6%A0%88&amp;%E9%98%9F%E5%88%97&amp;%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<p>数据结构与算法之美2_栈&amp;队列&amp;递归</p>
<a id="more"></a>
<p><br></p>
<hr>
<p>本系列文章，算是《极客时间》的《数据结构与算法之美》专栏的读书笔记。</p>
<p>只是一些个人心得与练习，想要得到更详细更好更系统的学习，请去 极客时间APP订阅专栏。</p>
<p>跟着专栏学了好久，也该有点成果不是；</p>
<p>正好趁着最后的几篇练习章节，把之前学到的，做个笔记总结一下。</p>
<hr>
<p>笔记列表</p>
<ul>
<li><a href="http://www.lt-tree.com/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E1_%E6%95%B0%E7%BB%84&amp;%E9%93%BE%E8%A1%A8/" target="_blank" rel="noopener">数组&amp;链表</a></li>
<li><a href="http://www.lt-tree.com/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E2_%E6%A0%88&amp;%E9%98%9F%E5%88%97&amp;%E9%80%92%E5%BD%92/" target="_blank" rel="noopener">栈&amp;队列&amp;递归</a></li>
<li><a href="http://www.lt-tree.com/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E3_%E6%8E%92%E5%BA%8F&amp;%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/" target="_blank" rel="noopener">排序&amp;二分查找</a></li>
</ul>
<hr>
<p><br></p>
<p><br></p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>栈是一种操作受限的线性表数据结构，只允许在一端插入和删除数据。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>先进后出，后进先出</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li><p>顺序栈</p>
</li>
<li><p>链式栈</p>
</li>
</ul>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li>函数调用</li>
<li>表达式求值</li>
<li>括号匹配</li>
</ul>
<p><br></p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>队列是一种操作受限的线性表数据结构，允许在两端插入和删除数据。</p>
<h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><p>先进先出，后进后出</p>
<h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><ul>
<li>顺序队列</li>
<li>链式队列</li>
</ul>
<h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><ul>
<li>循环队列<ul>
<li>判断循环队列为空：head == tail</li>
<li>判断循环队列为满：(tail+1)%n == head</li>
</ul>
</li>
<li>阻塞队列<ul>
<li>在队列为空的时候，获取数据操作被阻塞，直到队列中有数据才能获取数据，再返回。</li>
<li>在队列为满的时候，插入数据操作被阻塞，直到队列中有空间才能插入数据，再返回。</li>
</ul>
</li>
<li>并发队列<ul>
<li>线程安全的队列。</li>
<li>最简单的方法就是在插入数据、获取数据处加锁。</li>
</ul>
</li>
</ul>
<p><br></p>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>递归是程序调用自身的编程技巧。</p>
<h3 id="递归需要满足的三个条件"><a href="#递归需要满足的三个条件" class="headerlink" title="递归需要满足的三个条件"></a>递归需要满足的三个条件</h3><ol>
<li>一个问题的解可以分解为几个子问题的解</li>
<li>这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</li>
<li>存在递归终止条件</li>
</ol>
<h3 id="如何解"><a href="#如何解" class="headerlink" title="如何解"></a>如何解</h3><p>关键在于找到如何将大问题分解为小问题的规律，并基于此写出递推公式，找到终止条件。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>警惕堆栈溢出<ul>
<li>通过限制最大深度来做限制</li>
</ul>
</li>
<li>警惕重复计算<ul>
<li>每次计算前查看是否计算过，将计算过得值存储。</li>
</ul>
</li>
<li>在函数调用数量达时，时间效率会很高</li>
<li>因为防止重复计算，空间复杂度也不是O(1)</li>
</ul>
<p><br></p>
<p><br></p>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h2><h3 id="必知必会"><a href="#必知必会" class="headerlink" title="必知必会"></a>必知必会</h3><ul>
<li>用数组实现一个顺序栈</li>
<li>用链表实现一个链式栈</li>
<li>编程模拟实现浏览器的前进、后退功能</li>
</ul>
<h3 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h3><ul>
<li><a href="https://blog.csdn.net/lttree/article/details/70833353" target="_blank" rel="noopener">20_Valid Parentheses</a></li>
<li><a href="https://blog.csdn.net/lttree/article/details/72891801" target="_blank" rel="noopener">32_Longest Valid Parentheses</a></li>
<li><a href="https://blog.csdn.net/lttree/article/details/88653307" target="_blank" rel="noopener">150_Evaluate Reverse Polish Notation</a></li>
</ul>
<p><br></p>
<h2 id="队列-1"><a href="#队列-1" class="headerlink" title="队列"></a>队列</h2><h3 id="必知必会-1"><a href="#必知必会-1" class="headerlink" title="必知必会"></a>必知必会</h3><ul>
<li>用数组实现一个顺序队列</li>
<li>用链表实现一个链式队列</li>
<li>实现一个循环队列</li>
</ul>
<h3 id="LeetCode-1"><a href="#LeetCode-1" class="headerlink" title="LeetCode"></a>LeetCode</h3><ul>
<li><a href="https://blog.csdn.net/lttree/article/details/88938342" target="_blank" rel="noopener">239_Sliding Window Maximum</a></li>
<li><a href="https://blog.csdn.net/lttree/article/details/88938363" target="_blank" rel="noopener">641_Design Circular Deque</a></li>
</ul>
<p><br></p>
<h2 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h2><h3 id="必知必会-2"><a href="#必知必会-2" class="headerlink" title="必知必会"></a>必知必会</h3><ul>
<li>编程实现斐波那契数列求值 f(n) = f(n-1) + f(n-2)</li>
<li>编程实现求阶乘 n!</li>
<li>编程实现一组数据结合的全排列</li>
</ul>
<h3 id="LeetCode-2"><a href="#LeetCode-2" class="headerlink" title="LeetCode"></a>LeetCode</h3><ul>
<li><a href="https://blog.csdn.net/lttree/article/details/88653590" target="_blank" rel="noopener">70_Climbing Stairs</a></li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>跟着学</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法之美3_排序&amp;二分查找</title>
    <url>/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E3_%E6%8E%92%E5%BA%8F&amp;%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<p>数据结构与算法之美3_排序&amp;二分查找</p>
<a id="more"></a>
<p><br></p>
<hr>
<p>本系列文章，算是《极客时间》的《数据结构与算法之美》专栏的读书笔记。</p>
<p>只是一些个人心得与练习，想要得到更详细更好更系统的学习，请去 极客时间APP订阅专栏。</p>
<p>跟着专栏学了好久，也该有点成果不是；</p>
<p>正好趁着最后的几篇练习章节，把之前学到的，做个笔记总结一下。</p>
<hr>
<p>笔记列表</p>
<ul>
<li><a href="http://www.lt-tree.com/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E1_%E6%95%B0%E7%BB%84&amp;%E9%93%BE%E8%A1%A8/" target="_blank" rel="noopener">数组&amp;链表</a></li>
<li><a href="http://www.lt-tree.com/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E2_%E6%A0%88&amp;%E9%98%9F%E5%88%97&amp;%E9%80%92%E5%BD%92/" target="_blank" rel="noopener">栈&amp;队列&amp;递归</a></li>
<li><a href="http://www.lt-tree.com/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E3_%E6%8E%92%E5%BA%8F&amp;%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/" target="_blank" rel="noopener">排序&amp;二分查找</a></li>
</ul>
<hr>
<p><br></p>
<p><br></p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="分析标准"><a href="#分析标准" class="headerlink" title="分析标准"></a>分析标准</h3><h4 id="执行效率（时间复杂度）"><a href="#执行效率（时间复杂度）" class="headerlink" title="执行效率（时间复杂度）"></a>执行效率（时间复杂度）</h4><ul>
<li>最好情况、最坏情况、平均情况的 时间复杂度</li>
<li>时间复杂度的 系数、常数、低阶</li>
<li>比较次数 与 交换（或移动）次数</li>
</ul>
<h4 id="内存消耗（空间复杂度）"><a href="#内存消耗（空间复杂度）" class="headerlink" title="内存消耗（空间复杂度）"></a>内存消耗（空间复杂度）</h4><ul>
<li>是否原地排序（空间复杂度O(1)）</li>
</ul>
<h4 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h4><ul>
<li>稳定排序算法可以保持两个相同数值的对象，在排序之后的前后顺序不变。</li>
</ul>
<h4 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h4><p>在计算 执行效率 的时候，如果用概率论的方法定量分析平均时间复杂度，设计的数学推理和计算会比较复杂，专栏作者使用了一些概念来辅助分析</p>
<h5 id="有序度"><a href="#有序度" class="headerlink" title="有序度"></a>有序度</h5><p>有序度指数组中具有有序关系的元素对个数。</p>
<p>比如 4,7,2,1,9,3 数据中，有序度为 7，有序元素对为 (4, 7), (4, 9), (7, 9), (2, 9), (2, 3), (1, 9), (1, 3)</p>
<h5 id="逆序度"><a href="#逆序度" class="headerlink" title="逆序度"></a>逆序度</h5><p>逆序度指数组中具有逆序关系的元素对个数</p>
<p>比如 4, 7, 2, 1, 9, 3 数据中，逆序度为 8, 逆序元素对为 (4, 2), (4, 1), (4, 3), (7, 2), (7, 1), (7, 3), (2, 1), (9, 3)</p>
<p><br></p>
<h3 id="经典排序算法"><a href="#经典排序算法" class="headerlink" title="经典排序算法"></a>经典排序算法</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>不断遍历被排序数列，每次只操作相邻的两个元素，将两者比较，按照大小关系决定是否交换位置。</p>
<p>冒泡排序有两种操作，元素的比较 与 元素的交换。</p>
<h5 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*arr 待排序数组；n 待排序数组长度*/</span><br><span class="line">for i:=0 to n-1 do</span><br><span class="line">    isFinish := true</span><br><span class="line">    for j:=0 to n-i do</span><br><span class="line">        if arr[j] &lt; arr[j+1] then </span><br><span class="line">        	swap arr[j] with arr[j+1]</span><br><span class="line">            isFinish := false</span><br><span class="line">    end</span><br><span class="line">            </span><br><span class="line">    if isFinish then exit</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><h6 id="执行效率"><a href="#执行效率" class="headerlink" title="执行效率"></a>执行效率</h6><ul>
<li><p>最好的情况，数组为顺序排列。需要执行 1 次冒泡操作，时间复杂度为 O(1)</p>
</li>
<li><p>最坏的情况，数组为逆序排列。需要执行 n 次冒泡操作，时间复杂度为 O(n^2)</p>
</li>
<li><p>平均的情况，取最好和最坏的中间值，(1 + n*(n - 1)/2)/2 = 1/2 + n*(n- 1)/4 = n*(n - 1)/4，时间复杂度为 O(n^2)</p>
</li>
</ul>
<h6 id="内存消耗"><a href="#内存消耗" class="headerlink" title="内存消耗"></a>内存消耗</h6><p>冒泡排序比较并交换相邻元素，只需要常量级的临时空间，空间复杂度为 O(1)，所以 <strong>是原地排序</strong> 算法。</p>
<h6 id="稳定性-1"><a href="#稳定性-1" class="headerlink" title="稳定性"></a>稳定性</h6><p>冒泡排序在比较时，可以设定相邻元素大小相等时不交换，因此相同大小的数据顺序在排序前后不会改变顺序，所以是 <strong>稳定</strong> 的排序算法。</p>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><h5 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h5><p>数组可以分为两个区间，已排序区间 与 未排序区间；不断取未排序区间的元素插入到已排序区间的合适位置。</p>
<p>插入排序有两种操作，元素的比较 与 元素的移动。</p>
<h5 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*arr 待排序数组；n 待排序数组长度*/</span><br><span class="line">for i:=1 to n-1 do</span><br><span class="line">	waitInsert := arr[i]</span><br><span class="line">	j := i-1</span><br><span class="line">	while j ≥ 0 do</span><br><span class="line">		if arr[j] &gt; waitInsert </span><br><span class="line">			then arr[j+1] := arr[j]</span><br><span class="line">			else exit</span><br><span class="line">		j := j-1</span><br><span class="line">	end</span><br><span class="line">	</span><br><span class="line">	arr[j+1] := waitInsert</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><h6 id="执行效率-1"><a href="#执行效率-1" class="headerlink" title="执行效率"></a>执行效率</h6><p>最好的情况，数组为逆序排列，不需要元素移动，比较一个数据即可插入元素，进行 n 次比较，时间复杂度为 O(n)。</p>
<p>最坏的情况，数组为顺序排列，每次都要与每个已排序区间元素比较并移动每个元素，时间复杂度为 O(n^2)。</p>
<p>平均的情况，每次插入操作都相当于在数组中插入一个数据，在数据中插入一个数据的平均时间复杂度为O(n)，循环执行n次插入操作，所以时间复杂度为 O(n^2)。</p>
<h6 id="内存消耗-1"><a href="#内存消耗-1" class="headerlink" title="内存消耗"></a>内存消耗</h6><p>插入排序时，不需要额外的存储空间，空间复杂度为 O(1) ，所以 <strong>是原地排序</strong> 算法。</p>
<h6 id="稳定性-2"><a href="#稳定性-2" class="headerlink" title="稳定性"></a>稳定性</h6><p>插入排序时，可以选择将后面出现的元素，插入到前面出现元素的后面，从而保证原有顺序不变，所以是 <strong>稳定</strong> 的排序算法。</p>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><h5 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h5><p>选择排序也分为已排序区间与未排序区间，每次选择未排序区间最小的元素，放到已排序区间最后位置。</p>
<p>选择排序只有一种操作，比较元素。</p>
<h5 id="伪代码-2"><a href="#伪代码-2" class="headerlink" title="伪代码"></a>伪代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*arr 待排序数组；n 待排序数组长度*/</span><br><span class="line">for i:=0 to n-2 do</span><br><span class="line">	minIndex := i</span><br><span class="line">	for j:=i+1 to n-1 do</span><br><span class="line">		if arr[minIndex] &gt; arr[j] then </span><br><span class="line">			minIndex := j</span><br><span class="line">	end</span><br><span class="line">	</span><br><span class="line">	if minIndex ≠ i then </span><br><span class="line">		swap arr[i] with arr[minIndex]</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><h6 id="执行效率-2"><a href="#执行效率-2" class="headerlink" title="执行效率"></a>执行效率</h6><p>选择排序的最好、最差、平均复杂度均为O(n^2)。因为主要步骤是进行元素的比较，此步骤并不会随着初始状态而改变。</p>
<h6 id="内存消耗-2"><a href="#内存消耗-2" class="headerlink" title="内存消耗"></a>内存消耗</h6><p>选择排序时，只需要常量级的临时空间，空间复杂度为O(1)，所以 <strong>是原地排序</strong> 算法。</p>
<h6 id="稳定性-3"><a href="#稳定性-3" class="headerlink" title="稳定性"></a>稳定性</h6><p>选择排序会进行元素的交换，会导致顺序发生变化，所以它是一个 <strong>不稳定</strong> 的排序算法。</p>
<p>比如，2 2 1，将1与2交换后，2的先后顺序发生了变化。</p>
<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><h5 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h5><p>归并排序的核心思想是分治。</p>
<p>可以分为两部分，分解和合并。</p>
<p>分解：先将数组从中间一分为二，每部分继续一分为二，直到每部分只有一个元素。</p>
<p>合并：将相邻两部分按顺序合并，合并到最后。</p>
<h5 id="伪代码-3"><a href="#伪代码-3" class="headerlink" title="伪代码"></a>伪代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*arr 待排序数组；front首索引；rear尾索引*/</span><br><span class="line">merge_sort(arr, front, rear)</span><br><span class="line">&#123;</span><br><span class="line">    if front ≥ rear then return</span><br><span class="line">    </span><br><span class="line">    mid := (front+rear)/2</span><br><span class="line">    merge_sort(arr, front, mid)</span><br><span class="line">    merge_sort(arr, mid+1, rear)</span><br><span class="line">    </span><br><span class="line">    merge(arr, front, mid, rear)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*arr 待排序数组；front首索引；mid中间索引；rear尾索引；tempArr中间过渡数组*/</span><br><span class="line">merge(arr, front, mid, rear, tempArr)</span><br><span class="line">&#123;</span><br><span class="line">    i := front</span><br><span class="line">    j := mid+1</span><br><span class="line">    k := 0</span><br><span class="line">    </span><br><span class="line">    while i ≤ mid and j ≤ rear do</span><br><span class="line">    	if arr[i] ≤ arr[j] </span><br><span class="line">    		then </span><br><span class="line">    			tempArr[k] := arr[i]</span><br><span class="line">    			k := k+1</span><br><span class="line">    			i := i+1</span><br><span class="line">    		else</span><br><span class="line">    			tempArr[k] := arr[j]</span><br><span class="line">    			k := k+1</span><br><span class="line">    			j := j+1</span><br><span class="line">    end</span><br><span class="line">    while i ≤ mid do</span><br><span class="line">    	tempArr[k] := arr[i]</span><br><span class="line">    	k := k+1</span><br><span class="line">    	i := i+1</span><br><span class="line">    end</span><br><span class="line">    while j ≤ rear do</span><br><span class="line">    	tempArr[k] := arr[j]</span><br><span class="line">    	k := k+1</span><br><span class="line">    	j := j+1</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    for l:=0 to rear-front do</span><br><span class="line">    	arr[front+l] := tempArr[l]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h5><h6 id="执行效率-3"><a href="#执行效率-3" class="headerlink" title="执行效率"></a>执行效率</h6><p>归并排序的时间复杂度计算比较特别，可以用递推公式来分析一下。</p>
<p>假设对n个元素进行归并排序的时间是 T(n)，merge函数合并两个有序数组时间复杂度是O(n)。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">T(<span class="number">1</span>)	=	C;					<span class="comment">// n=1时，只需要常量级执行时间，表示为C。</span></span><br><span class="line">T(n)	=	<span class="number">2</span>*T(n/<span class="number">2</span>) + n;</span><br><span class="line">		= 	<span class="number">2</span>* (<span class="number">2</span>*T(n/<span class="number">4</span>) + n/<span class="number">2</span>) + n 				= 	<span class="number">4</span>*T(n/<span class="number">4</span>) + <span class="number">2</span>*n</span><br><span class="line">		=	<span class="number">2</span>* (<span class="number">2</span>* (<span class="number">2</span>*T(n/<span class="number">8</span>) + n/<span class="number">4</span>) + n/<span class="number">2</span>) + n 		=	<span class="number">8</span>*T(n/<span class="number">8</span>) + <span class="number">3</span>*n</span><br><span class="line">        = 	<span class="number">2</span>* (<span class="number">2</span>* (<span class="number">2</span>* (<span class="number">2</span>*T(n/<span class="number">16</span>) + n/<span class="number">8</span>) + n/<span class="number">4</span>) + n/<span class="number">2</span>) + n 	= 	<span class="number">16</span>*T(n/<span class="number">16</span>) + <span class="number">4</span>*n</span><br><span class="line">        ...</span><br><span class="line">        = 	<span class="number">2</span>^k * T(n/<span class="number">2</span>^k) + k*n</span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line">当</span><br><span class="line">T(n/<span class="number">2</span>^k) 	= 	T(<span class="number">1</span>)</span><br><span class="line">n/<span class="number">2</span>^k = <span class="number">1</span> 	=&gt; 	k = log2n</span><br><span class="line">T(n) 		= 	Cn + nlog2n</span><br></pre></td></tr></table></figure>
<p>而且，归并排序的执行效率与原始数组的有序程度无关，所以最好、最差、平均时间复杂度均为 O(nlogn)。</p>
<h6 id="内存消耗-3"><a href="#内存消耗-3" class="headerlink" title="内存消耗"></a>内存消耗</h6><p>归并排序，在进行merge操作时候，会存在临时空间，最大不会超过n个数据大小。所以空间复杂度为 O(n)，它 <strong>不是原地排序</strong> 的算法。</p>
<h6 id="稳定性-4"><a href="#稳定性-4" class="headerlink" title="稳定性"></a>稳定性</h6><p>归并排序稳定性在合并数组时的处理，只要保证前半部分的先于后半部分的放入最终数组就可以让排序稳定。因此，归并排序 <strong>是稳定</strong> 的排序算法。</p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><h5 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h5><p>快速排序同归并排序一样，也是用的分治的思想。但是，又有些不同。它的思想是，取一个数为基准，将比它小的放在它左边，比它大的放在它右边；每部分再继续，直到区间缩小为1。</p>
<p>由此可见，归并排序是不断向上合并，是自下而上的；快速排序是不断下分，是自上而下的。</p>
<h5 id="伪代码-4"><a href="#伪代码-4" class="headerlink" title="伪代码"></a>伪代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*arr 待排序数组；low低位索引；high高位索引*/</span><br><span class="line">quick_sort(arr, low, high)</span><br><span class="line">&#123;</span><br><span class="line">	if low ≥ high then return</span><br><span class="line">	</span><br><span class="line">    q = partition(arr, low, high);</span><br><span class="line">    quick_sort(arr, low, q - 1);</span><br><span class="line">    quick_sort(arr, q + 1, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 将数组分成两部分, arr待排序数组，low低位索引，high高位索引 */</span><br><span class="line">partition(arr, low, high)</span><br><span class="line">&#123;</span><br><span class="line">    standard := arr[high]</span><br><span class="line">    i := low</span><br><span class="line">    for j:=low to high-1 do</span><br><span class="line">    	if arr[j] &lt; standard then</span><br><span class="line">    		swap arr[i] with arr[j]</span><br><span class="line">    		i := i+1</span><br><span class="line">    end</span><br><span class="line">    swap arr[i] with arr[high]</span><br><span class="line">    return i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h5><h6 id="执行效率-4"><a href="#执行效率-4" class="headerlink" title="执行效率"></a>执行效率</h6><p>快速排序的执行效率也可以通过递推公式来分析，如同归并排序一样</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">T(<span class="number">1</span>) = C</span><br><span class="line">T(n) = T(n/m) + T(n*(m<span class="number">-1</span>)/m) + n</span><br></pre></td></tr></table></figure>
<p>m的取值在于每次选的标准，即把数组分割的比例。</p>
<p>最好的情况，就是每次都将数组平分，即同归并排序的时间复杂度 O(nlogn)</p>
<p>最坏的情况，就是每次都是极端分割，时间复杂度退化到 O(n^2)</p>
<p>平均的情况，其实大部分的情况时间复杂度都可以达到 O(nlogn)；而且还有一些方法可以避免分割不均衡的发生。</p>
<h6 id="内存消耗-4"><a href="#内存消耗-4" class="headerlink" title="内存消耗"></a>内存消耗</h6><p>快速排序内存消耗主要在partition函数中，使用交换的方式进行替代了开辟新空间，所以快速排序时间复杂度是 O(1)，<strong>是原地排序</strong> 的算法。</p>
<h6 id="稳定性-5"><a href="#稳定性-5" class="headerlink" title="稳定性"></a>稳定性</h6><p>上面分析内存消耗的时候讲到，快速排序用交换的方式实现原地排序，但正是因为这样，就无法保证数据的稳定性了（参考选择排序）。所以快速排序 <strong>不是稳定</strong> 的排序算法。</p>
<h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><p>快速排序是常用的排序算法之一，但是它的时间复杂度最坏情况能退化到O(n^2)，这个是我们不想看到的，下面介绍几种可以尽量避免分区不平衡的方法。</p>
<ol>
<li>三数取中法：每次从区间的 头、中、尾 分别取出一个数，对比大小取中间值作为分区标准。当然，根据数据规模，可以扩展为n数取中。</li>
<li>随机法：每次从待排序区间，随机取一个元素作为分区标准，从概率学角度上讲相对于取固定位置值要好。</li>
</ol>
<h4 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h4><h5 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h5><p>将待排序数组分到几个有序的桶中，每个桶的数据再排序，之后将每个桶的数据按照顺序依次取出即排序完成。</p>
<p>桶排序不是基于比较的比较排序，是一种线性排序。</p>
<p>桶排序比较适合用在外部排序中，外部排序就是数据存储在外部磁盘中，由于数据量比较大，内存有限，无法将数据全部加载到内存。</p>
<h5 id="伪代码-5"><a href="#伪代码-5" class="headerlink" title="伪代码"></a>伪代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*arr 待排序数组，假定数组只有正数且范围在[0, 100), m为桶的数量*/</span><br><span class="line">bucket_sort(arr, n)</span><br><span class="line">&#123;</span><br><span class="line">	m := 10</span><br><span class="line">	</span><br><span class="line">    buckets := new array of m empty lists</span><br><span class="line">    for i:=0 to n-1 do</span><br><span class="line">    	insert arr[i] into buckets[arr[i]/10]</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    for i:=0 to m-1 do</span><br><span class="line">    	sort(buckets[i])</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    return conncation of buckets[0], ..., buckets[m-1]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h5><h6 id="执行效率-5"><a href="#执行效率-5" class="headerlink" title="执行效率"></a>执行效率</h6><p>将n个数据平均分配到m个桶中，每个桶内有 k=n/m 个元素；</p>
<p>每个桶的内部用比较排序，时间复杂度就是 O(k <em> logk)，m个桶排序的时间复杂度就是 O(m </em> k <em> logk)，也就是 O(m </em> n/m <em> log(n/m)) = O(n </em> log(n/m)) ；</p>
<p>当桶的个数m接近n时，log(n/m)会很小，此时桶排序时间复杂度接近 O(n)。</p>
<p>最好的情况，当m接近n，时间复杂度接近 O(n)。</p>
<p>最差的情况，只有一个桶，时间复杂度即是内部排序时间复杂度 O(nlogn)</p>
<p>平均的情况，时间复杂度为 O(n * log(n/m))</p>
<h6 id="内存消耗-5"><a href="#内存消耗-5" class="headerlink" title="内存消耗"></a>内存消耗</h6><p>桶排序需要的空间复杂度肯定不是O(1)了，最起码要分桶，而且如果想要达到O(n)的时间复杂度，桶的数量是不可少的。桶排序的空间复杂度为 O(n + m)，所以 <strong>不是原地排序</strong> 的算法。</p>
<h6 id="稳定性-6"><a href="#稳定性-6" class="headerlink" title="稳定性"></a>稳定性</h6><p>桶排序，先将数据分到桶内，这个是稳定的；再是桶内的排序，这个取决于采用的算法，也可以看做是稳定的；然后就是合并，这个步骤是稳定的。所以，桶排序 <strong>是稳定</strong> 的排序算法。</p>
<h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><h5 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h5><p>计数排序是桶排序的一种特殊情况。它通常对已知数量范围的数组进行排序，需要借助辅助数组C。</p>
<p>例如，</p>
<p>有一个大胃王比赛，总共有7个巨型包子，找10个人来参赛，成绩分别是 A[3, 1, 0, 2, 2, 5, 7, 1, 2, 0]。</p>
<p>因为，总共就7个包子，所以元素范围就是 [0, 7]，创建数组C[8]。</p>
<p>然后，遍历每个人吃的包子数量，填满数组C，比如第一个人吃了3个，C[0] += 1, C[1] += 1, C[2] += 1, C[3] += 1；数组内数字表示的是吃的包子数小于等于该下标的人数量，得到数组C[2, 4, 7, 8, 8, 9, 9, 10]。</p>
<p>最后，从后向前遍历原数组A，</p>
<p>根据原数组元素，在C数组找到在R数组的位置，并填入；比如元素0，在C数组0下标元素为2，表示小于等于0的元素有2个，它的位置为2，但是下标是从0开始，所以，位置修正为1。</p>
<p>遍历到头，得到最终数组R</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原数组	  	 A[3, 1, 0, 2, 2, 5, 7, 1, 2, 0]</span><br><span class="line"></span><br><span class="line">1: 		R[, 0, , , , , , , , ]					C[2-1, 4, 7, 8, 8, 9, 9, 10]</span><br><span class="line">2: 		R[, 0, , , , , 2, , , ]					C[1, 4, 7-1, 8, 8, 9, 9, 10]</span><br><span class="line">3: 		R[, 0, , 1, , , 2, , , ]				C[1, 4-1, 6, 8, 8, 9, 9, 10]</span><br><span class="line">4: 		R[, 0, , 1, , , 2, , , 7]				C[1, 3, 6, 8, 8, 9, 9, 10-1]</span><br><span class="line">5: 		R[, 0, , 1, , , 2, , 5, 7]				C[1, 3, 6, 8, 8, 9-1, 9, 9]</span><br><span class="line">6: 		R[, 0, , 1, , 2, 2, , 5, 7]				C[1, 3, 6-1, 8, 8, 8, 9, 9]</span><br><span class="line">7: 		R[, 0, , 1, 2, 2, 2, , 5, 7]			C[1, 3, 5-1, 8, 8, 8, 9, 9]</span><br><span class="line">8: 		R[0, 0, , 1, 2, 2, 2, , 5, 7]			C[1-1, 3, 4, 8, 8, 8, 9, 9]</span><br><span class="line">9: 		R[0, 0, 1, 1, 2, 2, 2, , 5, 7]			C[0, 3-1, 4, 8, 8, 8, 9, 9]</span><br><span class="line">10: 	R[0, 0, 1, 1, 2, 2, 2, 3, 5, 7]			C[0, 2, 4, 8-1, 8, 8, 9, 9]</span><br><span class="line"></span><br><span class="line">排序后数组 	R[0, 0, 1, 1, 2, 2, 2, 3, 5, 7]</span><br></pre></td></tr></table></figure>
<h5 id="伪代码-6"><a href="#伪代码-6" class="headerlink" title="伪代码"></a>伪代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*arr 待排序数组，假定数组只有正数且范围在[0, 100), k为C数组大小*/</span><br><span class="line">count_sort(arr, n)</span><br><span class="line">&#123;</span><br><span class="line">    for i:=0 to n-1 do</span><br><span class="line">    	C[arr[i]] := C[arr[i]] + 1</span><br><span class="line">    end</span><br><span class="line">    for i:=0 to k-1 do</span><br><span class="line">    	C[k] := C[k] + C[k-1]</span><br><span class="line">    end</span><br><span class="line">    for i:=n-1 to 0 do</span><br><span class="line">    	C[arr[i]] := C[arr[i]]-1</span><br><span class="line">    	R[C[arr[i]]] = arr[i]</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    return R</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h5><h6 id="执行效率-6"><a href="#执行效率-6" class="headerlink" title="执行效率"></a>执行效率</h6><p>计数排序的时间复杂度，最好、最坏、平均是一样的，都需要遍历两边数组，假定C的大小为k，时间复杂度均为 O(n + k)。</p>
<h6 id="内存消耗-6"><a href="#内存消耗-6" class="headerlink" title="内存消耗"></a>内存消耗</h6><p>很显然，计数排序需要额外的数组C，假定C的大小为k，空间复杂度为 O(n+k)，所以计数排序 <strong>不是原地排序</strong> 的算法。</p>
<h6 id="稳定性-7"><a href="#稳定性-7" class="headerlink" title="稳定性"></a>稳定性</h6><p>通过倒序遍历原数组构造最终数组，可以保证排序的稳定性。所以计数排序 <strong>是稳定</strong> 的排序算法。</p>
<h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4><h5 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h5><p>基数排序，也像是桶排序的变种。</p>
<p>每次遍历只排序每个元素的某同位置的顺序，然后将所有元素按顺序取出，再次排序下一个位置。</p>
<p>可以从低位到高位依次排序，称为LSD法（Least Significant Digit first）；也可以从高位到低位排序，称为MSD法（Most Significant Digit first）。</p>
<p>基数排序，可以分为两个步骤：</p>
<ol>
<li>根据某个位置分配元素到桶中</li>
<li>收集各个桶中元素</li>
</ol>
<p>不断重复，直到没有位数了。</p>
<p>例如，有10个元素进行排序 [13, 55, 42, 30, 66, 89, 43, 79, 2, 81]，此处用LSD法排序。（<em>LSD法适合位数小的排序，MSD法适合位数多的排序</em>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一趟，根据个位数分配到各个桶中：</span><br><span class="line">0 - 30</span><br><span class="line">1 - 81</span><br><span class="line">2 - 42, 2</span><br><span class="line">3 - 13, 43</span><br><span class="line">4 - </span><br><span class="line">5 - 55</span><br><span class="line">6 - 66</span><br><span class="line">7 - </span><br><span class="line">8 - </span><br><span class="line">9 - 89, 79</span><br><span class="line">将各个桶中元素收集: 30, 81, 42, 2, 13, 43, 55, 66, 89, 79</span><br><span class="line"></span><br><span class="line">第二趟，根据十位数分配到各个桶中：</span><br><span class="line">0 - 2</span><br><span class="line">1 - 13</span><br><span class="line">2 - </span><br><span class="line">3 - 30</span><br><span class="line">4 - 42, 43</span><br><span class="line">5 - 55</span><br><span class="line">6 - 66</span><br><span class="line">7 - 79</span><br><span class="line">8 - 81, 89</span><br><span class="line">9 - </span><br><span class="line">将各个桶中元素收集: 2, 13, 30, 42, 43, 55, 66, 79, 81, 89</span><br><span class="line"></span><br><span class="line">没有三位数情况，所以第二趟收集的元素，即为最终排序后的数组</span><br></pre></td></tr></table></figure>
<h5 id="伪代码-7"><a href="#伪代码-7" class="headerlink" title="伪代码"></a>伪代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*arr 待排序数组，n为数组长度，k为最大位数，m为桶个数*/</span><br><span class="line">radix_sort(arr, n)</span><br><span class="line">&#123;</span><br><span class="line">    for i:=1 to k do</span><br><span class="line">		m := 10</span><br><span class="line">		buckets := new array of m empty lists</span><br><span class="line">    	</span><br><span class="line">    	for j:=0 to n-1 do</span><br><span class="line">    		if i ≤ 1 then</span><br><span class="line">    			radix := arr[j]%pow(10, i)</span><br><span class="line">    		else</span><br><span class="line">    			radix := (arr[j]%pow(10, i))/pow(10, i-1)</span><br><span class="line">    		end</span><br><span class="line">    		insert arr[j] into buckets[radix]</span><br><span class="line">    	end</span><br><span class="line">    	</span><br><span class="line">    	clear arr</span><br><span class="line">    	for j:=0 to m-1 do</span><br><span class="line">    		for k:=0 to len(buckets[j]-1) do</span><br><span class="line">	    		insert buckets[j][k] into arr</span><br><span class="line">	    	end</span><br><span class="line">    	end</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    return arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h5><h6 id="执行效率-7"><a href="#执行效率-7" class="headerlink" title="执行效率"></a>执行效率</h6><p>基数排序的时间复杂度跟数组内最大位数 k 相关，也跟桶的数量 m 相关，时间复杂度为 O(n*(k + m))。</p>
<h6 id="内存消耗-7"><a href="#内存消耗-7" class="headerlink" title="内存消耗"></a>内存消耗</h6><p>基数排序需要额外的桶来不断分配，所以它的空间复杂度为 O(n + m)，基数排序 <strong>不是原地排序</strong> 的算法。</p>
<h6 id="稳定性-8"><a href="#稳定性-8" class="headerlink" title="稳定性"></a>稳定性</h6><p>基数排序在排序过程中是用分配的方式进行，有固定的顺序，所以不会打乱原先数组元素顺序。因此，基数排序 <strong>是稳定</strong> 的排序算法。</p>
<p><br></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th>排序算法</th>
<th>时间复杂度</th>
<th>是否稳定</th>
<th>是否原地</th>
</tr>
</thead>
<tbody>
<tr>
<td>冒泡排序</td>
<td>O(n^2)</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>插入排序</td>
<td>O(n^2)</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>选择排序</td>
<td>O(n^2)</td>
<td>不是</td>
<td>是</td>
</tr>
<tr>
<td>快速排序</td>
<td>O(nlogn)</td>
<td>不是</td>
<td>是</td>
</tr>
<tr>
<td>归并排序</td>
<td>O(nlogn)</td>
<td>是</td>
<td>不是</td>
</tr>
<tr>
<td>桶排序</td>
<td>O(n)</td>
<td>是</td>
<td>不是</td>
</tr>
<tr>
<td>计数排序</td>
<td>O(n)</td>
<td>是</td>
<td>不是</td>
</tr>
<tr>
<td>基数排序</td>
<td>O(n)</td>
<td>是</td>
<td>不是</td>
</tr>
</tbody>
</table>
<p><br></p>
<p><br></p>
<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>二分查找是对一个有序数组的集合，利用分治思想进行查找。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一般，直到找到查找的元素，或区间缩小为0即未找到。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>二分查找非常的高效，每次查找都会将查找区间缩小一半，即 n, n/2, n/4, n/8, n/16 … n/2^k ，时间复杂度为 O(logn) 。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*arr 待排序数组，n为数组长度，aim为要查找的数值*/</span><br><span class="line">binary_search(arr, n, aim)</span><br><span class="line">&#123;</span><br><span class="line">    low := 0</span><br><span class="line">    high := n-1</span><br><span class="line">    </span><br><span class="line">    while low ≤ high do</span><br><span class="line">    	mid := (low + high)/2</span><br><span class="line">    	if arr[mid] &lt; aim then</span><br><span class="line">    		low = mid + 1</span><br><span class="line">    	else if arr[mid] &gt; aim then</span><br><span class="line">    		high = mid - 1</span><br><span class="line">    	else</span><br><span class="line">    		return mid</span><br><span class="line">    	end</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    return -1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*arr 待排序数组，n为数组长度，aim为要查找的数值*/</span><br><span class="line">binary_search(arr, n, aim)</span><br><span class="line">&#123;</span><br><span class="line">    return block_binary_search(arr, 0, n-1, aim)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">recursive_binary_search(arr, low, high, aim)</span><br><span class="line">&#123;</span><br><span class="line">    if low &gt; high then</span><br><span class="line">    	return -1</span><br><span class="line">    	</span><br><span class="line">    mid := low + (high - low)/2</span><br><span class="line">    if arr[mid] &lt; aim then</span><br><span class="line">    	return recursive_binary_search(arr, mid + 1, high, aim)</span><br><span class="line">    else if arr[mid] &gt; aim then</span><br><span class="line">    	return recursive_binary_search(arr, low, mid - 1, aim)</span><br><span class="line">    else</span><br><span class="line">    	return mid</span><br><span class="line">    end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h3><p>前面说了二分查找这么厉害，它是不是就是查找算法的万能钥匙呢？显然不是。它有以下四个局限性</p>
<ul>
<li><strong>依赖顺序表结构，即数组。</strong> 因为它利用了根据下标随机访问，如果用链表，复杂度将提高很多。</li>
<li><strong>针对有序数据。</strong> 每次都用中间的元素来判断，下一个区间是哪一个。</li>
<li><strong>不适合小数据量查找。</strong> 如果比较操作非常耗时，那么还是推荐用二分查找，减少比较次数。</li>
<li><strong>不适合太大数据量查找。</strong> 因为二分查找依赖顺序表结构，会将占用连续一整块内存，如果数据量过大，会对存储造成大的麻烦。</li>
</ul>
<p><br></p>
<p><br></p>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h2><h3 id="必知必会"><a href="#必知必会" class="headerlink" title="必知必会"></a>必知必会</h3><h4 id="实现各种排序算法"><a href="#实现各种排序算法" class="headerlink" title="实现各种排序算法"></a>实现各种排序算法</h4><ul>
<li>归并排序</li>
<li>快速排序</li>
<li>插入排序</li>
<li>冒泡排序</li>
<li>选择排序</li>
</ul>
<h4 id="实现O-n-时间复杂度找到数据中第K大的元素"><a href="#实现O-n-时间复杂度找到数据中第K大的元素" class="headerlink" title="实现O(n)时间复杂度找到数据中第K大的元素"></a>实现O(n)时间复杂度找到数据中第K大的元素</h4><h3 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h3><ul>
<li><a href="https://blog.csdn.net/lttree/article/details/71313665" target="_blank" rel="noopener">23_Merge k Sorted Lists</a></li>
<li><a href="https://blog.csdn.net/lttree/article/details/77826724" target="_blank" rel="noopener">41_First Missing Positive</a></li>
<li><a href="https://blog.csdn.net/lttree/article/details/90150419" target="_blank" rel="noopener">74_Search a 2D Matrix</a></li>
<li><a href="https://blog.csdn.net/lx417147512/article/details/93140593" target="_blank" rel="noopener">75_Sort Colors</a></li>
<li><a href="https://blog.csdn.net/lx417147512/article/details/92854497" target="_blank" rel="noopener">148_Sort List</a></li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="二分查找-1"><a href="#二分查找-1" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="必知必会-1"><a href="#必知必会-1" class="headerlink" title="必知必会"></a>必知必会</h3><h4 id="实现有序数组二分查找"><a href="#实现有序数组二分查找" class="headerlink" title="实现有序数组二分查找"></a>实现有序数组二分查找</h4><h4 id="实现模糊二分查找（大于等于给定值的第一个元素）"><a href="#实现模糊二分查找（大于等于给定值的第一个元素）" class="headerlink" title="实现模糊二分查找（大于等于给定值的第一个元素）"></a>实现模糊二分查找（大于等于给定值的第一个元素）</h4><h3 id="LeetCode-1"><a href="#LeetCode-1" class="headerlink" title="LeetCode"></a>LeetCode</h3><ul>
<li><a href="https://blog.csdn.net/lttree/article/details/64173253" target="_blank" rel="noopener">4_Median of Two Sorted Arrays</a></li>
<li><a href="https://blog.csdn.net/lttree/article/details/72759051" target="_blank" rel="noopener">29_Divide Two Integers</a></li>
<li><a href="https://blog.csdn.net/lttree/article/details/72972759" target="_blank" rel="noopener">33_Search in Rotated Sorted Array</a></li>
<li><a href="https://blog.csdn.net/lttree/article/details/74899904" target="_blank" rel="noopener">34_Find First and Last Position of Element in Sorted Array</a></li>
<li><a href="https://blog.csdn.net/lttree/article/details/90815455" target="_blank" rel="noopener">69_Sqrt(x)</a> </li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>跟着学</tag>
      </tags>
  </entry>
  <entry>
    <title>用python发邮件</title>
    <url>/2016/11/04/%E7%94%A8python%E5%8F%91%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<p>One Step</p>
<p>用python来发邮件</p>
<a id="more"></a>
<p><br></p>
<p>恩，<br>学了python就不要浪费，<br>公司要求每天都要写工作日志，<br>每次都要:</p>
<ol>
<li>打开浏览器</li>
<li>选择收藏夹里的邮箱</li>
<li>输入账号密码登陆</li>
<li>选择收件人</li>
<li>填写邮件抬头</li>
<li>填写当前日期，还要把鼠标移下去看看</li>
<li>写工作日志</li>
<li>点击发送</li>
</ol>
<p>很麻烦啊，<br>写个脚本，</p>
<ol>
<li>打开脚本</li>
<li>写你的工作日志（注意，只需要写日志，不需要写时间，title，收件人等）</li>
<li>编译</li>
</ol>
<p>惊！<br>这难道就是传说中的 —— One Step ？！！</p>
<p><br></p>
<p>唠叨完了，该整干货了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">sender = <span class="string">''</span>  							<span class="comment"># 此处填写发件人邮箱</span></span><br><span class="line">password = <span class="string">''</span>							<span class="comment"># 此处填写发件人邮箱密码   	=&gt;注释1</span></span><br><span class="line">receiver = <span class="string">''</span>							<span class="comment"># 此处填写收件人邮箱</span></span><br><span class="line">smtp_server = <span class="string">''</span>						<span class="comment"># 此处填写smtp服务器地址</span></span><br><span class="line"></span><br><span class="line">DATE_FORMATE = <span class="string">'%Y-%m-%d %A'</span>			<span class="comment"># 日期的格式				=&gt; 注释2</span></span><br><span class="line">title = <span class="string">''</span>								<span class="comment"># 此处填写邮件标题</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialContent</span><span class="params">()</span>:</span></span><br><span class="line">	now = datetime.now()</span><br><span class="line">	<span class="keyword">return</span> now.strftime(DATE_FORMATE)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendEmail</span><span class="params">(cont)</span>:</span></span><br><span class="line">	content = initialContent() + <span class="string">'\n'</span> + cont</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		msg = MIMEText(content, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>) 					</span><br><span class="line">		msg[<span class="string">'Subject'</span>] = Header(title, <span class="string">'utf-8'</span>)				<span class="comment"># =&gt; 注释3</span></span><br><span class="line">		msg[<span class="string">'From'</span>] = sender + <span class="string">' &lt;'</span> + sender + <span class="string">'&gt;'</span>			<span class="comment"># =&gt; 注释3</span></span><br><span class="line">		msg[<span class="string">'To'</span>] = receiver								<span class="comment"># =&gt; 注释3</span></span><br><span class="line"></span><br><span class="line">		server = smtplib.SMTP(smtp_server, <span class="number">25</span>) 				<span class="comment"># 连接服务器，默认端口均为25</span></span><br><span class="line">		server.set_debuglevel(<span class="number">1</span>)  							<span class="comment"># 选择是否开启Debug，可以得到与服务端的反馈信息</span></span><br><span class="line">		server.login(sender, password)</span><br><span class="line">		server.sendmail(sender, [receiver], msg.as_string())</span><br><span class="line">		server.quit()</span><br><span class="line"></span><br><span class="line">		print(<span class="string">'send email success'</span>)</span><br><span class="line">	<span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">		priint(<span class="string">'send email fail'</span>)</span><br></pre></td></tr></table></figure>
<p>关于上述代码的一些注释：</p>
<ul>
<li>注释1:<br>关于邮箱密码，有些密码需要填写客户端授权码，比如163，当然，要用SMPT发邮件，需要将发信箱的SMTP服务打开。</li>
<li>注释2:<br>日期的格式，更详细的可参考官方文档：<a href="http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime" target="_blank" rel="noopener">http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime</a></li>
<li>注释3:<br>这里的From、To、Subject是非常必要的</li>
</ul>
<p><strong>还有，最好不要用163邮箱测试发邮件，会出现很多乱七八糟的问题（并非是你代码的问题）</strong></p>
<p><br></p>
<p>上面代码是用来发邮件的核心代码，<br>写日志的地方加在里面是很不友好的行为，<br>所以，<br>再单独建一个新的友好的地方来写日志。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> imp </span><br><span class="line">tool = imp.load_source(<span class="string">'sendEmail'</span>, <span class="string">'url'</span>)				<span class="comment"># 导入核心模块，url 填写你上面核心代码的位置</span></span><br><span class="line"></span><br><span class="line">content = <span class="string">"""</span></span><br><span class="line"><span class="string">在这里来写你的工作日志，</span></span><br><span class="line"><span class="string">支持多行。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">tool.sendEmail(content.strip()) 						<span class="comment"># strip将首尾空白字符删除</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p>这样就方便很多了。<br>最后，<br>这个只是初步版本，<br>后期可以添加很多你想要的东西，<br>比如多个联系人，一些判断。<br>我因为自己用，所以没有加那些东西。</p>
]]></content>
      <tags>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网</title>
    <url>/2019/09/21/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<p>用 VPS + SSR 科学上网</p>
<a id="more"></a>
<p><br></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>外网是一个很好的资源，但是需要好好使用，不能滥用。</p>
<p>我个人还是支持这堵墙的，</p>
<p>在一个小孩没有明辨是非能力的时候，父母的监护是非常必要且重要的；</p>
<p>当小孩长大，有了自己的价值观世界观，想去接触一些东西也是非常合理的。</p>
<p>但是，有些小孩，长不大…</p>
<p><br></p>
<p>最开始出去的动机就是：一直以来就有一个现象——天下文章一大抄。</p>
<p>在搜索某些问题的时候，容易搜到的答案中，基本都是同一篇文章，几乎90%以上的相似，没有思考，没有论点，纯纯的拷贝；对于不同的文章，需要花费很大精力去翻找。所以，逼迫着出去寻找答案。</p>
<p>最后，严正声明：请正确并合理的使用梯子，让它帮助你更好的学习进步，并且理智的看待这个世界。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="先搞一个VPS"><a href="#先搞一个VPS" class="headerlink" title="先搞一个VPS"></a>先搞一个VPS</h1><p>选择一个适合自己的VPS  </p>
<p><a href="https://anothervps.com/vps/" target="_blank" rel="noopener">VPS搜索工具</a></p>
<h2 id="Vultr"><a href="#Vultr" class="headerlink" title="Vultr"></a>Vultr</h2><p>优惠：</p>
<ul>
<li>Vultr优惠活动很多，不同时期不一样</li>
<li>可以用 支付宝</li>
</ul>
<p>注意：</p>
<ul>
<li>收费：<ul>
<li>模式： 后付费，不许购买多个月</li>
<li>时间： 月底</li>
<li>规则： 按小时扣费，不足1小时，按1小时计算；每个月有最高上限金额（超过这个金额，只扣这个金额钱数）。不用的服务器记得删除，不删还是扣你的钱。</li>
<li>备注： 为什么我要说这些呢？ 因为Vultr会经常做一些活动，我正好赶上 充$10送$50的活动；原以为租一个 $5/月 的服务器，1年只需要 $10 （$60 / $5 = 12），但是Vultr的收费模式是不允许购买多个月的，所以，$10 也就用3个月而已。</li>
</ul>
</li>
</ul>
<p>Vultr会有很多优惠活动，请多注意。</p>
<ol>
<li>注册并登录Vultr</li>
<li>充值Vultr（支持支付宝、信用卡、比特币等）</li>
<li>创建VPS（右上角蓝色的 + 号）<ul>
<li>选择VPS服务器</li>
<li>选择机房位置，可以先大概ping一下  <a href="https://www.vultrvps.com/test-server" target="_blank" rel="noopener">https://www.vultrvps.com/test-server</a></li>
<li>选择系统</li>
<li>选择服务器配置</li>
<li>确认创建</li>
</ul>
</li>
</ol>
<p><br></p>
<p><br></p>
<h2 id="Bandwagon"><a href="#Bandwagon" class="headerlink" title="Bandwagon"></a>Bandwagon</h2><p>待补充</p>
<p><br></p>
<p><br></p>
<h2 id="Google-Cloud"><a href="#Google-Cloud" class="headerlink" title="Google Cloud"></a>Google Cloud</h2><p>优惠：</p>
<ul>
<li>绑定信用卡，送300美元代金券，有效期一年，大概也就可以用一年</li>
</ul>
<p>注意：</p>
<ul>
<li><p>需要信用卡（VISA/Master）</p>
</li>
<li><p>这个要先翻出去，才能处理（是不是很矛盾：想要出去，先做个梯子，这个梯子，只能在外面做，但是我都出去了，还要做梯子干什么）</p>
</li>
</ul>
<p>步骤：</p>
<ol>
<li>注册账号</li>
<li>创建VM<ul>
<li>在 [左上角菜单] -&gt; [Compute Engine] -&gt; [VM实例]，创建一个VM。<ul>
<li>名称：随便</li>
<li>区域：随便</li>
<li>机器类型：小型的就行</li>
<li>容器：不用</li>
<li>启动磁盘：Ubuntu 16.04 LTS</li>
<li>身份和API访问权限：默认</li>
<li>防火墙：允许HTTP流量 &amp; 允许HTTPS流量</li>
</ul>
</li>
</ul>
</li>
<li>修改IP<ul>
<li>在 [左上角菜单] -&gt; [VPC网络] -&gt; [外部IP地址]<br>将上一个VM实例所用的IP地址类型，修改为 静态类型</li>
</ul>
</li>
<li>设置防火墙<ul>
<li>在 [左上角菜单] -&gt; [VPC网络] -&gt; [防火墙规则] 创建防火墙规则</li>
<li>入站规则：<ul>
<li>名称：随便</li>
<li>说明：随便</li>
<li>日志：建议关闭（开启可能会有费用）</li>
<li>网络：默认</li>
<li>优先级：默认</li>
<li>流量方向：<strong>入站</strong></li>
<li>对匹配项执行的操作：允许</li>
<li>目标：网络中的所有实例</li>
<li>来源过滤条件：<strong>IP地址范围</strong></li>
<li>来源IP地址范围：<strong>0.0.0.0/0</strong></li>
<li>次要过滤条件：无</li>
<li>协议和端口：<strong>全部允许</strong></li>
</ul>
</li>
<li>出站规则：<ul>
<li>名称：随便</li>
<li>说明：随便</li>
<li>日志：建议关闭（开启可能会有费用）</li>
<li>网络：默认</li>
<li>优先级：默认</li>
<li>流量方向：<strong>出站</strong></li>
<li>对匹配项执行的操作：允许</li>
<li>目标：网络中的所有实例</li>
<li>来源过滤条件：<strong>IP地址范围</strong></li>
<li>来源IP地址范围：<strong>0.0.0.0/0</strong></li>
<li>次要过滤条件：无</li>
<li>协议和端口：<strong>全部允许</strong></li>
</ul>
</li>
</ul>
</li>
</ol>
<p><br></p>
<p><br></p>
<h2 id="亚马逊服务器-AWS"><a href="#亚马逊服务器-AWS" class="headerlink" title="亚马逊服务器 AWS"></a>亚马逊服务器 AWS</h2><p>优惠：</p>
<ul>
<li>亚马逊新用户，然后绑定张信用卡，即可免费试用1年的AWS EC</li>
</ul>
<p>注意：</p>
<ul>
<li>需要信用卡（VISA/Master）</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>注册一个账号</p>
</li>
<li><p>创建EC2虚拟机</p>
<ol>
<li><p>选择AMI</p>
</li>
<li><p>选择实例类型：</p>
<ul>
<li>这里勾选的免费套餐，然后选择 Ubuntu Server</li>
</ul>
</li>
<li><p>配置实例</p>
<ul>
<li>默认即可</li>
</ul>
</li>
<li><p>添加存储</p>
<ul>
<li>默认即可</li>
</ul>
</li>
<li><p>添加标签</p>
<ul>
<li>默认即可</li>
</ul>
</li>
<li><p>配置安全组（配置防火墙，以下都是入站规则，这些创建完后也可以修改）</p>
<ul>
<li><p>方便SSH链接用的 =&gt;  类型：SSH，协议：TCP，端口范围：22，来源：自定义 0.0.0.0/0</p>
</li>
<li><p>想要PING通  =&gt;  类型：自定义ICMP规则(IPV4)，协议：回显请求，端口范围：不适用，来源：自定义 0.0.0.0/0; ::/0</p>
</li>
<li>给梯子用的端口  =&gt;  类型：HTTPS，协议：TCP， 端口范围：之后给梯子所预留的端口，来源：自定义  0.0.0.0/0; ::/0</li>
</ul>
</li>
<li><p>启动</p>
</li>
</ol>
</li>
</ol>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="拼个梯子"><a href="#拼个梯子" class="headerlink" title="拼个梯子"></a>拼个梯子</h1><p>大部分流程都差不多</p>
<p>PS:</p>
<ul>
<li><p>有些命令需要root权限，就是最前面可以加个 sudo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo xxxxx</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<h2 id="先登录上自己的服务器"><a href="#先登录上自己的服务器" class="headerlink" title="先登录上自己的服务器"></a>先登录上自己的服务器</h2><p>对于Windows用户，可以下载一个 PuTTY/Xshell 来远程登录，</p>
<p>Username 与 Password 在服务器详情界面中都有。</p>
<p>PS：密码，选择复制，然后在命令行界面右键点击（粘贴行为）即可（输入密码模式，并不会把输入的值打印出来）</p>
<p><br></p>
<p><br></p>
<h2 id="搭建SS服务器"><a href="#搭建SS服务器" class="headerlink" title="搭建SS服务器"></a>搭建SS服务器</h2><p>登录上服务器后，执行下面代码（就是复制粘贴过去）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line">./shadowsocks.sh <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocks.log</span><br></pre></td></tr></table></figure>
<p>然后，按照要求进行配置，一般是：</p>
<ol>
<li>输入密码</li>
<li>输入端口</li>
<li>选择加密方式</li>
<li>任意键开始，Ctrl+C 取消</li>
</ol>
<p>成功以后，控制台将显示所配置的SS服务器信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Your Server IP			:	服务器IP</span><br><span class="line">Your Server Port		:	服务器端口</span><br><span class="line">Your Password			:	服务器密码</span><br><span class="line">Your Encryption Method	:	加密方式</span><br></pre></td></tr></table></figure>
<p>记下这些数据，都是下面配置SS客户端需要的数据。</p>
<p><br></p>
<p><br></p>
<h2 id="配置SS客户端"><a href="#配置SS客户端" class="headerlink" title="配置SS客户端"></a>配置SS客户端</h2><p>在电脑或者手机上下载 SS客户端</p>
<p><a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">Shadowsocks 使用说明</a></p>
<p>安装好后，将上面服务器的配置填上去，就可以开心的使用梯子了。</p>
<p><br></p>
<p><br></p>
<h2 id="修改服务器SS配置"><a href="#修改服务器SS配置" class="headerlink" title="修改服务器SS配置"></a>修改服务器SS配置</h2><p>想修改服务器SS配置，需要先修改配置文件，再重启SS</p>
<ul>
<li><p>修改配置文件件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>
<p>然后修改相应配置文件</p>
</li>
<li><p>重启SS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ssserver -c /etc/shadowsocks.json -d restart</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="https://www.10besty.com/best-vps-hosting-services/" target="_blank" rel="noopener">2019最好的国外VPS推荐-十佳评测</a></li>
<li><a href="https://github.com/shadowsocks/shadowsocks/tree/rm" target="_blank" rel="noopener">shadowsocks github  branch</a></li>
</ul>
]]></content>
      <tags>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊版本控制</title>
    <url>/2019/10/14/%E8%81%8A%E8%81%8A%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>版本控制系统的简介及历史<br>SVN与Git</p>
<a id="more"></a>
<p><br></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>项目一直以SVN进行版本控制，感觉上线后，分支的管理会比较繁琐；加上我之前一直用Git，就推荐用Git来管理项目。</p>
<p>推荐一个东西，要有凭有据，所以就看了一下版本控制这块的内容，了解了一下版本控制的发展史，感觉收获颇丰，也修正了我以前的一些观点（褒Git 贬SVN）。</p>
<p><br></p>
<p>本文主要内容：</p>
<ul>
<li>版本控制系统简介及历史</li>
<li>SVN与Git的应用</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="what？"><a href="#what？" class="headerlink" title="what？"></a>what？</h2><p>版本控制系统（Version Control System）是指对软件开发过程中各种程序代码、配置文件及说明文档等文件变更的管理，是软件配置管理的核心思想之一。（源自 百度百科）</p>
<p>内容包括：</p>
<ul>
<li>检入检出控制</li>
<li>分支和合并</li>
<li>历史记录</li>
</ul>
<p><br></p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>这里简单的列几个时期，更加详细内容可参考 <a href="https://www.plasticscm.com/version-control-history" target="_blank" rel="noopener">版本控制的历史</a></p>
<p><br></p>
<h3 id="1-本地版本控制系统"><a href="#1-本地版本控制系统" class="headerlink" title="1. 本地版本控制系统"></a>1. 本地版本控制系统</h3><p>采用的模式为锁定文件模式：lock-modify-checkin-unlock</p>
<p>多客户端在同一个服务器上工作，修改文件前先锁定文件，再去修改，提交，并解除锁定。类似于多线程中的锁机制。</p>
<p>代表：</p>
<ul>
<li>RCS(Revision Control System) </li>
</ul>
<p><br></p>
<h3 id="2-集中式版本控制系统（CVCS-Centralized-Version-Control-System）"><a href="#2-集中式版本控制系统（CVCS-Centralized-Version-Control-System）" class="headerlink" title="2. 集中式版本控制系统（CVCS - Centralized Version Control System）"></a>2. 集中式版本控制系统（CVCS - Centralized Version Control System）</h3><p>采用的模式为复制修改合并模式：copy-modify-merge</p>
<p>此时的服务器成为一个中央存储服务器，各客户端都有一个中央服务器的备份（分支），并基于此修改，再去合并到中央服务器，修改文件不需要加锁，但是在合并的时候要处理冲突，。</p>
<p>代表：</p>
<ul>
<li><p>CVS(Concurrent Versions System) </p>
<ul>
<li><p>CVS管理下的每个文件都有一系列独立的版本号，比如：r1.1, r1.2 …，然后用标签（tag）来记录一个集合，这个集合的元素是一对（文件名：版本号）。比如创建个v1.0的标签：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tag v1.0 (file1: r1.1) (file2: r1.6) (file3: r1.3)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>VSS(Visual Source Safe)</p>
</li>
<li><p>Perforce</p>
</li>
<li><p>SVN(Subservision)</p>
<p>不同于CVS，SVN采用关系型数据库来存储改变集，并依赖于硬链接的方式来提高效率，避免复制文件本身。</p>
</li>
</ul>
<p><br></p>
<h3 id="3-分布式版本控制系统（DVCS-Distributed-Version-Control-System）"><a href="#3-分布式版本控制系统（DVCS-Distributed-Version-Control-System）" class="headerlink" title="3. 分布式版本控制系统（DVCS - Distributed Version Control System）"></a>3. 分布式版本控制系统（DVCS - Distributed Version Control System）</h3><p>不再像本地版本控制系统与集中式版本控制系统的 C/S结构，而采用P2P结构。</p>
<p>相对于集中式版本控制系统，在创建、合并分支上更为便捷。支持离线的相关操作，脱离网络的控制。</p>
<p>代表：</p>
<ul>
<li>BitKeeper</li>
<li>Git<ul>
<li>Git有四种对象<ul>
<li>tag对象，作为标签指向某个commit对象</li>
<li>commit对象代表一次提交，它保存有修改人、修改时间、附加信息并且指向一个文件系统树（tree对象），每次commit实际上都是一次对文件系统树的快照。</li>
<li>tree对象代表一个文件夹，保存指向blob对象或tree对象的指针</li>
<li>blob对象代表一个文件</li>
</ul>
</li>
<li>所有的对象都有HASH值，通过HASH值变化来判断commit间是否有变化，当不同commit间某文件没有变化时，不同commit的指针都指向该文件，并不会创建一个新的blob对象</li>
</ul>
</li>
<li>Mercurial</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="下一代？"><a href="#下一代？" class="headerlink" title="下一代？"></a>下一代？</h2><p>在 <a href="https://www.plasticscm.com/version-control-history" target="_blank" rel="noopener">版本控制的历史</a> 网站中，也给出了对下一代版本控制系统的畅想。</p>
<ul>
<li>语义化的版本控制系统；通过了解代码结构去合并文件或对比文件差异，辅助提高代码质量</li>
<li>分析并提取有价值信息辅助开发；版本控制系统不仅仅作为一种交付机制，更应该成为提高生产力的工具</li>
<li>企业级的分布式版本控制系统；消除悲观锁等模式，并可以遵守企业所需的规定和安全策略</li>
<li>更好的可视化工具</li>
<li>更优的性能</li>
</ul>
<p><br></p>
<p><br></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>目前最常用的无外乎 SVN和Git，本文章主要讨论的也是这两个。</p>
<h2 id="SVN-Subversion"><a href="#SVN-Subversion" class="headerlink" title="SVN(Subversion)"></a>SVN(Subversion)</h2><p>Apache项目底下的一个开源版本控制系统，目的是取代CVS，特点是 <strong>集中式管理</strong> 。</p>
<p>优点：</p>
<ul>
<li>集中式管理，管理方式在服务端配置好，客户端只需要同步提交即可，使用方便，操作简单，容易上手。</li>
<li>在服务端统一控制好访问权限，利用代码的安全管理</li>
<li>所有的代码以服务端为标准，代码一致性高</li>
</ul>
<p>缺点：</p>
<ul>
<li>性能要求高。所有操作都需要通过服务端进行同步，这会导致服务器性能要求比较高。如果服务器宕机就无法提交代码。</li>
<li>分支管理不灵活。SVN分支是一个完整的目录，且这个目录拥有完整的实际文件，这些操作都是在服务端进行同步的，不是本地化操作，如果要删除分支（即删除远程分支），需要所有人都同步。</li>
<li>需要联网。如果无法连接到SVN服务器，就无法提交自己的代码，更别说还原、对比等操作。如果在外网，网速不稳定，同步时间会久一些。</li>
</ul>
<p>工具：</p>
<ul>
<li>首推的还是小乌龟，<a href="https://tortoisesvn.net/downloads.html" target="_blank" rel="noopener">TortoiseSVN</a><ul>
<li><a href="https://www.runoob.com/svn/tortoisesvn-intro.html" target="_blank" rel="noopener">TortoiseSVN使用教程 | 菜鸟教程</a></li>
</ul>
</li>
</ul>
<p>教程：</p>
<ul>
<li><a href="https://www.runoob.com/svn/svn-intro.html" target="_blank" rel="noopener">SVN教程 | 菜鸟教程</a></li>
</ul>
<p><br></p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Git是一个开源的版本控制软件，它的特点是 <strong>分布式管理</strong> 。</p>
<p>优点：</p>
<ul>
<li>分布式开发时，可以克隆一个本地版本，然后在本地进行操作提交，本地可以完成一个完整的版本控制。在发布的时候，推送到远程服务器即可。</li>
<li>分支的本质是一个指向提交快照的指针，速度快、灵活，分支之间可以任意切换，都可以在本地进行操作可以不同步到远程服务器。</li>
<li>可以离线工作。如果远程服务器出现问题，也可以在本地进行切换分支的操作，等联网后再提交、合并等。</li>
</ul>
<p>缺点：</p>
<ul>
<li>没有严格的权限控制，一般是通过系统设置文件的读写权限来做权限控制。</li>
<li>工作目录只能是整个目录，而SVN可以单独检出某个有权限的目录。</li>
<li>上手难度较高。</li>
</ul>
<p>工具：</p>
<ul>
<li>命令行（专业的Coder是不需要图形化界面的！  手动狗头..）</li>
<li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a><ul>
<li>之前用Mac的时候用过，感觉可视化工具里面算比较好用的；Windows上效果也不错</li>
</ul>
</li>
<li><a href="https://www.gitkraken.com/" target="_blank" rel="noopener">GitKraken</a><ul>
<li>没用过，看UI风格，挺不错的</li>
</ul>
</li>
</ul>
<p>教程：</p>
<ul>
<li><a href="https://www.runoob.com/git/git-tutorial.html" target="_blank" rel="noopener">Git教程 | 菜鸟教程</a></li>
</ul>
<p><br></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在很多人都无比推崇Git，贬SVN（好吧，我承认之前我也有一些），也看了许多人对此的讨论，比如 StackOverFlow 中的 <a href="https://stackoverflow.com/questions/871/why-is-git-better-than-subversion" target="_blank" rel="noopener">Why is Git better than Subversion?</a> 与 <a href="https://stackoverflow.com/questions/3215282/why-to-use-svn-any-hidden-pros-over-git-mercurial-bazaar-there" target="_blank" rel="noopener">Why to use SVN? Any hidden pros (over GIT/Mercurial/Bazaar) there?</a> 。</p>
<p>但是，现在我觉得无论是SVN还是Git，各有特色，没有哪个是占据绝对优势，</p>
<p>对于技术开发，所管理的大部分是文本文件，需求灵活多变且频繁，所以能够便捷的 创建合并 分支的Git，显然是有益处的。</p>
<p>对于非技术开发，再加上管理文件为 文档文件、音乐音效、图片视频等，没有diff需求，使用上手快速简单的SVN，更为稳妥。</p>
<p>而且对于企业，对访问控制、权限分配、安全性有较强需求，使用SVN相对于Git更好一些。</p>
<p><br></p>
<p>在所在的游戏开发这行，我觉得小孩子才做选择，我全都要！</p>
<p>对于策划、美术、测试等维护的文件采用SVN管理，上手简单、定向拉取；</p>
<p>对于技术开发，使用Git来维护，对代码管理更加灵活便捷。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/61259351" target="_blank" rel="noopener">版本管理工具——SVN和GIT</a></li>
<li><a href="https://www.cnblogs.com/vamei/archive/2013/02/21/2918069.html" target="_blank" rel="noopener">版本管理三国志 (CVS, Subversion, git)</a></li>
<li><a href="http://www.catb.org/~esr/writings/version-control/version-control.html" target="_blank" rel="noopener">版本控制时间轴</a></li>
<li><a href="http://blog.plasticscm.com/2010/11/version-control-timeline.html" target="_blank" rel="noopener">The version control timeline</a></li>
<li><a href="https://www.plasticscm.com/version-control-history" target="_blank" rel="noopener">Version Control History</a></li>
</ul>
]]></content>
      <tags>
        <tag>瞎分析</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊自己</title>
    <url>/2020/02/05/%E8%81%8A%E8%81%8A%E8%87%AA%E5%B7%B1/</url>
    <content><![CDATA[<p>”我热爱的是做游戏，相对于玩游戏，我知道这两者的差别 …“</p>
<p>这，是我来北京找工作，面试时自我介绍的开头。</p>
<p>不知不觉，已经工作五年，经历了三家公司，做过五六个项目，一步步，算是摸爬滚打的过来了。</p>
<p>聊聊过去，聊聊自己。</p>
<a id="more"></a>
<p><br><br><br></p>
<h1 id="启蒙"><a href="#启蒙" class="headerlink" title="启蒙"></a>启蒙</h1><p>上大学前，并没有接触过编程。</p>
<p>仅有的经验只是金山打字通的打字练习、做PPT，管管教室电脑（就是开关机）；噢，当然还有打游戏。</p>
<p>大一初识C++，经典的谭浩强老师的 《C++程序设计(第二版)》，拿着忘了从哪蹭的100道经典C++练习题，一顿猛敲。</p>
<p>大二，就拉了个团队去做个游戏，学了点C++的皮毛，就准备撸起袖子大干一场，正好有个齐鲁软件大赛，正好有个手机游戏项目，正好就拉了几个人，一个暑假都在学校奋斗，还好，没有半途而废，算是一个完整的游戏吧？。。</p>
<p>后来，加入仰慕已久的ACM实验室，开始撸题。</p>
<p>后来，没有考研，决定就业。</p>
<p>…</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><h2 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h2><p>从第一份工作到现在一直是在做手机游戏，一直用的是Cocos2d引擎来开发，有接触了解，也做过一些Creator、Unity的Demo，但真正工业级的项目没有碰过。</p>
<p>在我所经历过的各家公司，也各有特色与偏重，没有同质性的公司。</p>
<p>我目前的理解，做游戏（仅客户端而论），可以先大概分为两部分：</p>
<ul>
<li>游戏；每一行代码都能在游戏中体现，为游戏内容品质服务。<ul>
<li>基础组件</li>
<li>中间件</li>
<li>业务功能</li>
</ul>
</li>
<li>产品；项目从立项到上线，所额外负责的工作。<ul>
<li>版本控制</li>
<li>打包、SDK接入</li>
<li>跨平台扩展</li>
<li>更新机制</li>
<li>游戏优化</li>
<li>统计反馈</li>
<li>测试支持</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>游戏开发中，所做的每个改动，都可以在游戏中直接表现出来。 </p>
<p>我把游戏分为三个部分，各部分所重视的角度不同：</p>
<ul>
<li>基础组件；基础组成部分，一般涉及到自研底层代码及引擎底层代码，相对重视效率与性能。</li>
<li>中间件；为业务功能研发做中间转接口，将基础组件拼接组装或封装调整，相对重视通用性及便携性。</li>
<li>业务功能；实现各种需求，直面用户，相对重视灵活性。</li>
</ul>
<p>在开发的时候，明确并了解所开发的模块属于哪个部分，从而知晓它的重点偏向。</p>
<p>比如，开发业务功能，更重视灵活性，多与需求方沟通，了解他们的本意，不要厌恶、恐惧变化，甚至要拥抱变化，以 “任它需求千万变，不如我代码灵活又简便” 为目标。</p>
<p>再比如，如果开发基础组件，理论上，不应该为了使用方便，而去牺牲它的执行效率。</p>
<p><br></p>
<h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><p>这部分可能跟游戏的实际开发无关，但是却是完整的产品必经之路。</p>
<p>这些部分或许与游戏的品质等无直接相关，但是会直接影响团队的研发效率。就如同产品与包装的关系，包装不代表产品品质，但是好的包装亦能影响用户心中的价值。要不然，月饼、白酒的包装会越来越华丽呢？</p>
<p>这部分的特点是 <strong>简单繁琐</strong> 、 <strong>涉及广度大</strong> 、<strong>一次就好</strong>。</p>
<ul>
<li>简单繁琐；很多简单且繁琐的事情，相对于技术可能更考究细心与耐心。</li>
<li>涉及广度大；一般涉及的范围很大，虽不至于天文地理，但也基本和项目的开发截然不同。</li>
<li>一次就好；基本实现一次就好，不需要频繁迭代维护，甚至不维护。</li>
</ul>
<p>这些特点，导致这部分的内容，更像一个苦差事。但随着各种自动化工具、集成工具的发展，完全可以把这些内容脚本化，进而可视化、自动化，慢慢的就会找到这部分的乐趣，能把一堆繁琐的东西理的井井有条，还是很有成就感的。</p>
<p>有一点要谨记，做好文档，做好规范。</p>
<p><br></p>
<p><br></p>
<h2 id="软技能"><a href="#软技能" class="headerlink" title="软技能"></a>软技能</h2><p>很多行业慢慢由增量时代转入存量时代，做开发亦是如此。</p>
<p>由于模块拆分的越来越细，第三方的服务越来越多广泛且专业，导致开发一个产品的门槛越来越低。</p>
<p>不能再像以前那样，闷头只钻研技术，而忽视软技能的发展。我不否认依旧有很多硬靠技术吃饭的人，但我知道，我不是。</p>
<p>技术&amp;软技能，就像一块木板的长和宽；最终拼的是面积，而不是单纯的长或单纯的宽。但不要因噎废食，过于注重软技能而忽视技术；要做的是以技术为基础核心，同时也注重软技能的发展。</p>
<h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><p>沟通是一门很大的学问。</p>
<p>小的来说，沟通可以简单分为：</p>
<ul>
<li>向上沟通<ul>
<li>向上级汇报</li>
</ul>
</li>
<li>向下沟通<ul>
<li>向下级安排任务</li>
</ul>
</li>
<li>跨界沟通<ul>
<li>向其他部门咨询或请求援助</li>
</ul>
</li>
</ul>
<p>其实，不仅仅是说话，所写的文档、代码等，也都可以算是沟通的一部分。</p>
<p>沟通的目标是让别人理解你的观点，或者是理解别人所表达的内容。无论哪一个方面，都需要换位思考，并且有事直问，不要妄加揣测。</p>
<p><br></p>
<h3 id="主人翁"><a href="#主人翁" class="headerlink" title="主人翁"></a>主人翁</h3><p>全心全意去做当前所做的项目。（我可没说把公司当成自己的家。不一样吗？你品，你细品！)</p>
<p>不要只做自己该做的，剩下的高高挂起。</p>
<p>原因如下：</p>
<ol>
<li>早晚都要自己带团队做产品，与其到时抓破头皮，不如早做准备。</li>
<li>看的越多越仔细，会发现一些不曾注意到的细节，都是知识，都是财富。</li>
<li>有时候，编程也是门经验学科，有很多坑早晚都要踩过一遍就知道，踩得越晚，坑越深。</li>
<li>给上级一个让你晋升的理由。</li>
</ol>
<p>在开始，大家都是消费者，但可以慢慢成为一名生产者，产出对团队有利，对自己又何尝不是。</p>
<p>一方的利益获得不一定伴随着另一方的利益损失，世界上有很多多赢的事情，只要利益的获得满足自己的预期即可。</p>
<p>体会一句话：你可能血赚，但我绝对不亏。</p>
<p><br></p>
<h3 id="一个咖啡杯的故事"><a href="#一个咖啡杯的故事" class="headerlink" title="一个咖啡杯的故事"></a>一个咖啡杯的故事</h3><p>真人真事，在一个早上，我去便利蜂买杯咖啡，它们就是那种自助咖啡机，排在我前面的人，并没有放置咖啡杯，就开始扫码结算，这时我可以</p>
<ul>
<li>提醒他，让他先放杯子。</li>
<li>不提醒他，让他自生自灭。</li>
</ul>
<p>选择不提醒，最好的结果是，机器检测到没有放咖啡杯，然后提示放咖啡杯；最坏的结果是，机器直接出咖啡，客人手忙脚乱拿咖啡杯去硬放，烫伤自己，然后…。</p>
<p>选择提醒，就一句话的事情，可以避免很多事情；即使对我自己而言，也节省了我的时间，否则按最坏打算，我的这杯咖啡，什么时候能拿到呢。</p>
<p>其实，这个现象就跟团队内的合作沟通一样，很多东西提前通知，做好预备，往往一句话的事情，可以其他人很多的弯路，对整个项目而言，必然有利而无害的。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h1><p>工作这些年，早期，基本花了很多的时间花在摸索上，更多的关注在如何做一个完整的项目，也就是俗话中的深度和广度中的广度。</p>
<p>现在，对这一行有了大概的认知与理解，更需要的是去进阶一些深一层的东西。就像之前的策略 以技术为主，软技能为辅的发展一样，在技术中也要找到一个专精领域，再以其他领域为辅去进行进一步的发展。</p>
<p>然后，技术上很多东西是相同的，没有必要把自己局限于某个角色，在不同的角度思考问题，会发现不同的内容。</p>
<p>最后，依旧是那句话，屁股决定脑袋。所在的位置，利益诉求，会影响信息、判断与决定，每个人的阅历、想法不尽相同，不需要逼迫着所有人 思想的统一、行为的统一。</p>
<h2 id="准则"><a href="#准则" class="headerlink" title="准则"></a>准则</h2><p><strong>专业的事情交给专业的人，简单繁琐的事情交给脚本，留出时间做重要且核心的事。</strong></p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>不做总线，做一个被自己替代的人。</strong></p>
<p>总线，是必不可少的组件；它的阻塞会导致系统无法运行。</p>
<p>但有的时候，有些总线就没必要存在。</p>
<p>一个例子：</p>
<p>之前在生成 Android包及热更的时候，必须由开发来执行。</p>
<p>大概流程是这样的：</p>
<ol>
<li>A想要包测试内容</li>
<li>告知开发出包</li>
<li>开发出包完成，交给A</li>
</ol>
<p>这样有诸多弊端：</p>
<ul>
<li>出包占用开发电脑资源，影响开发原有功能开发</li>
<li>由于出包不便，必然会减少出包测试的请求，整体上讲对项目不利</li>
<li>期间有多个交接口，无法查进度，隐性所需时间拉长。（比如A告知开发出包，开发是否立马去出包，或者忘记出包等）</li>
<li>在忙碌的时候，手抖导致出包错误，重新出包</li>
<li>等等</li>
</ul>
<p>这个流程中，开发就是总线，但是这个总线是必要的吗？显然不是。</p>
<p>于是，采用一些方法去把总线替换掉：</p>
<ol>
<li>将出包相关脚本化、自动化</li>
<li>使用Jenkins实现接口暴露及工作空间共享</li>
</ol>
<p>这样，出包的流程变为：</p>
<ol>
<li>A想要包测试内容，登录内网jenkins地址，根据需求出包</li>
<li>jenkins出包</li>
<li>A从jenkins空间中拿包</li>
</ol>
<p>这样，开发从这个流程脱离出来，并且对于A有更多的配置选项可以配置，更为便捷，同时，出包进度也可视化，更有利于减少隐性时间消耗。</p>
<p>当然，这只是简单的一步，为了让它更加可靠且易用，必然要经历大量测试并且有一些预警机制，每隔一段时间进行使用者的反馈来扩展功能。</p>
<p>这只是简单的关于总线的例子，其实很多东西，都是表面上的总线，就如同那句话：</p>
<p>世界正在变得越来越自动化。因此我认为，并非每个人都需要学习编程，而是每个人都需要学习和理解如何实现自动化。—— 《Don’t Learn to Code — Learn to Automate》</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1><p>未来，谁都不知道会怎么样。</p>
<p>能做的就是总结过去经验，把握当下。</p>
<p>确定长目标与短目标，以一年或关键时间点为期，进行总结，看是否在既定的路上前进。</p>
<p>重视并珍惜每一个机会，每一个项目，只有在总结的时候才去考虑收益的事，剩下的期间全心全意的去做事。</p>
<p>多想多讨论多实践多总结，步入一个良性的循环。</p>
<p>然后，多读书，保持健康。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<p>引用内容：</p>
<ul>
<li><a href="https://daedtech.com/dont-learn-to-code-learn-to-automate/" target="_blank" rel="noopener">Don’t Learn to Code — Learn to Automate</a></li>
</ul>
]]></content>
      <tags>
        <tag>抽空写</tag>
        <tag>瞎分析</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊鸿蒙</title>
    <url>/2021/07/17/%E8%81%8A%E8%81%8A%E9%B8%BF%E8%92%99/</url>
    <content><![CDATA[<p>我所理解的鸿蒙</p>
<a id="more"></a>
<p><br></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>鸿蒙问世以来，广受争论，它到底是个什么东西呢？<br>简单的说一下我的理解，本文纯属个人观点，欢迎讨论~</p>
<p><br></p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>先了解一些简单的概念</p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>广义上讲：Android是操作系统，包括 AOSP+GMS</p>
<p>狭义上讲：Android是Android开源项目（即 AOSP）</p>
<p><br></p>
<h3 id="AOSP"><a href="#AOSP" class="headerlink" title="AOSP"></a>AOSP</h3><p>AOSP是一个由谷歌维护的开源操作系统开发项目，谷歌引领着大方向和大部分的开发工作。AOSP会定期为Android加入最新的安全补丁，谷歌每年也会在其I/O开发者大会上公布操作系统的新功能。</p>
<p>作为 AOSP 的主导者，Google 负责 Android 的维护和后续开发工作。虽然 Android 由多个子项目组成，但严格意义上，AOSP 这样只是出于项目管理的需要。我们将 Android 整体视为一个软件产品（而不是可更换部件的“发行版”、规范或集合），并依此原则进行管理。我们希望设备制造商只需将 Android 移植到其设备上，而无需实现一个规范或构建一个“发行版”。</p>
<p><img src="ape_fwk_all.png" alt=""></p>
<p><br></p>
<h3 id="CM（编译团队-CyanogenMod）"><a href="#CM（编译团队-CyanogenMod）" class="headerlink" title="CM（编译团队  CyanogenMod）"></a>CM（编译团队  CyanogenMod）</h3><p>CyanogenMod是一个基于开源Android系统，供某些手机使用的二级市场固件，它提供一些在官方Android系统或手机厂商没有提供的功能。</p>
<ul>
<li>CM是全球最大的第三方ROM编译团队；CM是基于AOSP进行二次开发，在AOSP的基础上添加功能、适配更多机型、编写众多机型的内核和驱动。</li>
<li>其他第三方ROM编译团队<ul>
<li>第三方ROM编译团队，主要是基于CM或使用CM一部分代码（因为CM编写了大量底层驱动和内核，这样更容易适配更多的机型）</li>
<li>包含但不仅限于：ParanoidAndroid、Slim、Carbon、Omni、PAC、AOSB、AOKP、Mahdi、Purity</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="GMS（谷歌移动服务-Google-Mobile-Service）"><a href="#GMS（谷歌移动服务-Google-Mobile-Service）" class="headerlink" title="GMS（谷歌移动服务  Google Mobile Service）"></a>GMS（谷歌移动服务  Google Mobile Service）</h3><p>GMS是谷歌的一组应用程序和服务，预先安装在GMS认证的Android设备上。GMS是建立在Android开源项目(AOSP)之上的，这意味着制造商需要获得许可才能在设备上预安装GMS包。此外，来自谷歌的特定包在GMS设备上可用，而AOSP设备不可用。</p>
<p>AOSP不包含谷歌的软件应用套件，如Chrome浏览器、YouTube，甚至谷歌Play商店。它也不包括谷歌的一些底层技术和API，而这些技术和API可以实现移动支付、语音命令和云存储等功能，这些都是作为谷歌移动服务（GMS）单独授权的。</p>
<p>任何厂商想要在系统中安装GMS，都必须为自己的设备获得GMS授权和移动应用分发协议（MADA），然后通过多项兼容性测试。有Android兼容性测试套件（CTS）来验证软件和硬件以及API。然后是谷歌移动服务测试套件和供应商测试套件（VTS）来测试多媒体功能、操作系统内核和HAL功能。而获得GMS许可的另一个条件是在新设备上预装一些谷歌的应用。</p>
<p>GMS包含</p>
<ul>
<li>Google Chrome</li>
<li>Google Search</li>
<li>YouTube</li>
<li>Google PlayStore</li>
<li>Gmail</li>
<li>Google Drive</li>
<li>Google Duo</li>
<li>Google Maps</li>
<li>Google Photos</li>
<li>Google Play Music</li>
<li>Google Play Speech</li>
</ul>
<p>商用收费</p>
<ol>
<li><p>免费使用Android操作系统，但不内嵌GMS；</p>
</li>
<li><p>内嵌部分GMS服务，但手机不能打上谷歌的商标；</p>
</li>
<li><p>内嵌所有的GMS服务，也可以使用谷歌商标。如果在android手机中内置有谷歌GMS服务的话，是等同被谷歌官方认证过的产品。</p>
</li>
</ol>
<p><br></p>
<h2 id="IoT（物联网-Internet-of-Things）"><a href="#IoT（物联网-Internet-of-Things）" class="headerlink" title="IoT（物联网  Internet of Things）"></a>IoT（物联网  Internet of Things）</h2><p>物联网是指通过各种信息传感器、射频识别技术、全球定位系统、红外感应器、激光扫描器等各种装置与技术，实时采集任何需要监控、 连接、互动的物体或过程，采集其声、光、热、电、力学、化 学、生物、位置等各种需要的信息，通过各类可能的网络接入，实现物与物、物与人的泛在连接，实现对物品和过程的智能化感知、识别和管理。物联网是一个基于互联网、传统电信网等的信息承载体，它让所有能够被独立寻址的普通物理对象形成互联互通的网络。</p>
<p><br></p>
<h2 id="HarmonyOS"><a href="#HarmonyOS" class="headerlink" title="HarmonyOS"></a>HarmonyOS</h2><p>华为智能终端操作系统（鸿蒙操作系统），是华为研发的面向万物互联时代的全新的、独立的智能终端操作系统，为不同设备的智能化、互联与协同提供统一语言。</p>
<p>总的来说，鸿蒙更像是一个生态，在不同的领域代表不同的东西，最终是为万物互联的时代，提供一个基础通用的平台，让各种设备之间的交互更加便捷。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h1><h2 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h2><p>要知道一个东西的出现，先要知道它的起因，它的需求，它的背景。</p>
<p>首先是操作系统的演化，从PC端到移动端到未来的万物互联的时代，明显是一个大势，从这一点来说，是在为下一个风口做储备</p>
<ol>
<li>PC，Windows + Mac OS</li>
<li>移动互联，Android + iOS</li>
<li>万物互联时代 IoT</li>
</ol>
<p>目前，移动互联时代，市场量最大的操作系统Android，主导者是Google，虽然说Android提倡开源、免费等，但是实际上，各大厂商受到了很多的限制。（可见 谷歌与欧盟的抗争）</p>
<ul>
<li>目前安卓阵营各厂商并不只是使用了免费的AOSP，还使用了谷歌发布的收费的GMS以及谷歌的各类APP。</li>
<li>虽然国内手机可以不使用谷歌app，但是由于早期GMS属于AOSP，因此大量的安卓App依赖了GMS的许多功能接口，随着后期谷歌把大批GMS代码从AOSP项目移出转为收费GMS，所以谷歌几乎控制了整个安卓生态。这也是为什么安卓标榜是免费开源项目而所有厂商都离不开谷歌的核心原因</li>
</ul>
<p>再加上，各国最近对中国互联网行业的一些制裁等。</p>
<p><br></p>
<p><br></p>
<h2 id="做什么"><a href="#做什么" class="headerlink" title="做什么"></a>做什么</h2><h3 id="发布会宣传点"><a href="#发布会宣传点" class="headerlink" title="发布会宣传点"></a>发布会宣传点</h3><p>总结</p>
<ul>
<li>多设备兼容：不同设备 一个系统</li>
<li>软总线</li>
<li>分布式技术：打破硬件边界 一拉即合</li>
<li>原子化服务：无需安装 自由流转</li>
<li>卡片设计：万物互联时代的统一语言</li>
<li>通信安全</li>
</ul>
<p>三大特征</p>
<ul>
<li>可以满足大大小小设备需求，实现统一OS，弹性部署</li>
<li>搭载该操作系统的设备在系统层面融为一体、形成超级终端，让设备的硬件能力可以弹性扩展，实现设备之间硬件互助，资源共享</li>
<li>面向开发者，实现一次开发，多端部署</li>
</ul>
<p><br></p>
<h3 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h3><p><img src="鸿蒙框架结构.png" alt=""></p>
<p><br></p>
<h3 id="应用结构"><a href="#应用结构" class="headerlink" title="应用结构"></a>应用结构</h3><p><img src="HAP元程序结构1.png" alt=""></p>
<p><br></p>
<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>手机依旧是实现万物互联最为重要的一个拼图，华为用 1+8+N 战略实现农村包围城市</p>
<ul>
<li>1：<ul>
<li>手机</li>
</ul>
</li>
<li>8：<ul>
<li>4个大屏入口（平板、车机、PC、智慧屏）</li>
<li>4个非大屏入口（手表、耳机、AI音响、AR/VR 眼镜）</li>
</ul>
</li>
<li>N：<ul>
<li>泛IoT硬件构成的智能家居生态</li>
</ul>
</li>
</ul>
<p><img src="华为1_8_N.png" alt=""></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="争论点"><a href="#争论点" class="headerlink" title="争论点"></a>争论点</h2><h3 id="为什么大家对鸿蒙如此苛刻"><a href="#为什么大家对鸿蒙如此苛刻" class="headerlink" title="为什么大家对鸿蒙如此苛刻"></a>为什么大家对鸿蒙如此苛刻</h3><p>国内在计算机基础核心领域缺乏建树，将领域比喻成一棵大树，国内的树枝、树叶都非常繁茂，但是树干、树根却不牢靠。</p>
<p>国人对此有很大期待，也有部分人辜负了这份期待，出了很多事故（汉芯事件、红芯浏览器事件等），前车之鉴，导致国人对新出的打着自主知识产权的产品，就更加严苛，避免一腔热血付诸东流。</p>
<p><br></p>
<h3 id="鸿蒙是不是套壳的android"><a href="#鸿蒙是不是套壳的android" class="headerlink" title="鸿蒙是不是套壳的android"></a>鸿蒙是不是套壳的android</h3><p>鸿蒙在只发布了一个版本的情况下，有些错误提示却是“此应用专为旧版鸿蒙打造，可能无法正常运行…” 与 android的错误提示 “此应用专为旧版 Android 打造，可能无法正常运行…” 不能说完全一样，只能说严丝合缝吧。所以，很多人怀疑是字符串批量替换。（主要还有一部分 P月亮 事件的前科干扰）</p>
<p>个人观点来看，手机系统是生态很重要的一部分，时间紧任务重的情况，对现有开源内容进行模块化整合，先来补足自身生态最关键的一环，而后再继续优化处理，也是无可厚非的。而且，说了这么多了，如果还在乎是否是android套壳的东西，em….，我建议再多看几遍。</p>
<p><br></p>
<h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><ul>
<li>逆势而为，芯片减少，供应减少情况下，推广生态</li>
<li>企业不合作<ul>
<li>老企业无法合作，排他协议</li>
<li>新企业不方便合作，上市麻烦</li>
</ul>
</li>
</ul>
<p><br></p>
<h2 id="潜在对手"><a href="#潜在对手" class="headerlink" title="潜在对手"></a>潜在对手</h2><ul>
<li>Fuchsia OS（Google）</li>
<li>M1（Apple）</li>
<li>Windows11 (MicroSoft)</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>鸿蒙，相对于一个操作系统，不如说是一个生态。</p>
<p>它旨在解决IoT时代的底层操作系统，提供各物联网设备的基础内核。目前看来，物联网设备暂时离不开手机的支持反而手机是很重要的核心，所以鸿蒙也要提供手机操作系统。有了基础共通的内核，加上卡片式应用，通过软总线强化连接，多设备共通，这可能就是鸿蒙所畅想的未来生态。</p>
<p>开发者，不再需要按设备支持的功能，底层系统而开发不同版本；</p>
<p>用户，不再需要复杂且繁琐的连接步骤；</p>
<p>厂商，不再需要为产品挑选所部署系统，对比优缺点，有取舍的选择。</p>
<p>下面是两段关于鸿蒙的体验视频：</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1xK4y1X79x?p=1&amp;share_medium=android&amp;share_plat=android&amp;share_source=COPY&amp;share_tag=s_i&amp;timestamp=1624332773&amp;unique_k=WEmHIx" target="_blank" rel="noopener">小泽 鸿蒙全家桶体验</a></li>
<li><a href="https://www.bilibili.com/video/BV16K4y1X7cw?p=1&amp;share_medium=android&amp;share_plat=android&amp;share_source=COPY&amp;share_tag=s_i&amp;timestamp=1624332799&amp;unique_k=DFPZDX" target="_blank" rel="noopener">万物互联是什么</a></li>
</ul>
<p>总的来说，先不看如何宣传，过去的各种前科，单看鸿蒙的背景及愿景，也是值得肯定的。或许步子太大，或许还太过空，或许还不够严谨；但它依旧在朝着那目标前进，总要有点梦想，有点希望，不是吗？</p>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<p>参考</p>
<ul>
<li><a href="https://source.android.com/devices/architecture" target="_blank" rel="noopener">https://source.android.com/devices/architecture</a></li>
<li><a href="https://blog.esper.io/gms-vs-non-gms-for-android" target="_blank" rel="noopener">https://blog.esper.io/gms-vs-non-gms-for-android</a></li>
<li><a href="https://www.xbxit.com/545" target="_blank" rel="noopener">https://www.xbxit.com/545</a></li>
<li><a href="https://www.zhihu.com/question/447128093/answer/1759851619" target="_blank" rel="noopener">https://www.zhihu.com/question/447128093/answer/1759851619</a></li>
<li><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides/document-outline-0000001064589184" target="_blank" rel="noopener">https://developer.harmonyos.com/cn/docs/documentation/doc-guides/document-outline-0000001064589184</a></li>
<li><a href="https://www.zhihu.com/question/374012496/answer/1979909631" target="_blank" rel="noopener">https://www.zhihu.com/question/374012496/answer/1979909631</a></li>
<li><a href="https://www.zhihu.com/question/374012496" target="_blank" rel="noopener">https://www.zhihu.com/question/374012496</a></li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>瞎分析</tag>
      </tags>
  </entry>
  <entry>
    <title>联网战斗同步优化</title>
    <url>/2020/04/19/%E8%81%94%E7%BD%91%E6%88%98%E6%96%97%E5%90%8C%E6%AD%A5%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>联网战斗同步之优化篇</p>
<a id="more"></a>
<p><br></p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>在上篇文章，主要讲述</p>
<ol>
<li>联网战斗的简介<ul>
<li>网络传输协议</li>
<li>网络同步模型</li>
<li>网络拓扑模型</li>
</ul>
</li>
<li>实现联网战斗的方案</li>
<li>实现时的一些重点处理</li>
<li>实现后的一些优化改进畅想</li>
<li>我的感悟</li>
</ol>
<p>更详细的内容，请跳转：<a href="http://www.lt-tree.com/2019/09/21/%E8%81%94%E7%BD%91%E6%88%98%E6%96%97%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">联网战斗同步实现</a></p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>之前实现了一版联网战斗方案，还比较粗糙，存在许多不足的地方。<br>秉承着 先实现，再持续交付、快速迭代 的理念。<br>由于实践的效果不是很好，所以需要做一版优化。</p>
<p><br></p>
<h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>总览：</p>
<ol>
<li>轮询机制都改为即时</li>
<li>帧推送间隔时间修改</li>
<li>建立帧缓存机制</li>
<li>扩充操作帧上传时机</li>
<li>完善的统计机制</li>
<li>自动化工具完善</li>
</ol>
<p><br></p>
<h3 id="轮询机制改为即时"><a href="#轮询机制改为即时" class="headerlink" title="轮询机制改为即时"></a>轮询机制改为即时</h3><p>在捋清各个流程步骤时，发现有些轮询机制，会导致延迟的增高。</p>
<ul>
<li>逻辑处的轮询</li>
<li>协议收发的轮询</li>
</ul>
<p>轮询的作用是减轻各模块功能的压力，降低成本。<br>我个人是觉得，在实现功能的时候，对于这种可控性成本需求，先按最优版本实现，做出我们最优效果。<br>之后，再根据成本等问题，进行打折简化。<br>我们做好对比数据的提供，交由项目负责人决策。</p>
<p><br></p>
<h3 id="帧推送间隔时间修改"><a href="#帧推送间隔时间修改" class="headerlink" title="帧推送间隔时间修改"></a>帧推送间隔时间修改</h3><p>之前，为了让客户端压力小一些，处于“饥饿”状态，服务器推帧间隔设置为 35ms。<br>但是，在有些模块进行逻辑处理依旧以 30帧/秒（固定间隔 33.3ms）处理数据。<br>会导致部分客户端逻辑 与 实际有差异，造成抖动。</p>
<p>因此，将帧推送间隔时间修改为 33ms，减缓抖动。</p>
<p><br></p>
<h3 id="建立帧缓存机制-重点"><a href="#建立帧缓存机制-重点" class="headerlink" title="建立帧缓存机制[重点]"></a>建立帧缓存机制[重点]</h3><p>基础方案，过于依赖网络状况。<br>显然这样是不现实的，所以需要做一套帧缓存机制，来应对网络的波动。</p>
<p>释放帧的时机：</p>
<ul>
<li>逻辑帧执行时</li>
<li>绘制帧执行时</li>
<li>逻辑帧执行时释放一次，绘制帧执行时根据需要补充释放</li>
</ul>
<p>释放帧策略：</p>
<ul>
<li>释放一次，每次释放一帧<ul>
<li>可能导致帧积压，越来越卡</li>
</ul>
</li>
<li>释放一次，每次释放帧数量可变<ul>
<li>每次释放帧数量根据帧缓存池内帧数变化</li>
</ul>
</li>
<li>释放多次，每次释放数量可变</li>
<li>缓存帧模式，缓存帧数量可配置</li>
<li>缓存帧模式，缓存一帧<ul>
<li>如果缓存帧数量可配置，就需要做一个让所有配置相对平衡的策略；单做缓存一帧，可以更细致的制定策略</li>
<li>但是经用户体验，发现这个策略并没有比大锅饭更好，甚至更差。。</li>
</ul>
</li>
<li>释放一次，每次释放所有帧</li>
</ul>
<h4 id="可配置缓存"><a href="#可配置缓存" class="headerlink" title="可配置缓存"></a>可配置缓存</h4><p>第一版做的是可配置缓存。<br>缓存帧的数量可配，通过实际体验来决定具体缓存帧的数量。<br>（最开始设想是，先做成可配；之后再根据实际网络状况，动态修改配置缓存的帧数量，类似于流媒体领域的 JitterBuffer）<br>对于释放帧的数量方案是：</p>
<p>缓存帧数量为 n<br>帧池内帧数量为 m</p>
<ul>
<li>若 m &lt;= (n+1), 释放1帧</li>
<li>若 m &lt;= (n+1) * 2, 释放2帧</li>
<li>若 m &lt;= (n+1) * 3, 释放3帧</li>
<li>若 m &gt; (n+1) * 3, 释放 (m-1)帧</li>
</ul>
<p>流程图：</p>
<p><img src="/images/sync_cacheConfig.png" alt="缓存N帧"></p>
<h4 id="缓存一帧"><a href="#缓存一帧" class="headerlink" title="缓存一帧"></a>缓存一帧</h4><p>经过实际体验，缓存一帧是比较理想的，大于一帧的延迟，大家接受不了。<br>之前的释放帧策略是针对缓存n帧的普适规则，既然定下来缓存1帧，就做一个更为详细的策略。</p>
<p>先说结论再说步骤：<br>帧池内帧数量为 m</p>
<p>分为四个阶段</p>
<ol>
<li>正常运行阶段<ul>
<li>0 &lt; m &lt;= 2, 每次释放1帧</li>
</ul>
</li>
<li>大步调优阶段<ul>
<li>m &lt;= 5, 释放1次释放2帧</li>
<li>m &lt;= 8, 释放1次释放3帧</li>
</ul>
</li>
<li>小步快跑阶段<ul>
<li>m &lt;= 14, 进入快跑模式, 往后每次释放k帧, 直到恢复正常, k = math.ceil((m+1) / 2)</li>
<li>当不足以释放k帧时，释放 k-1 帧, 退出快跑模式</li>
</ul>
</li>
<li>瞬间传送阶段<ul>
<li>m &gt; 14, 释放 (m-1)帧</li>
</ul>
</li>
</ol>
<p>流程图：</p>
<p><img src="/images/sync_cacheOne.png" alt="缓存一帧"></p>
<p>这个是怎么算出来的呢？<br>我列了一个表格，</p>
<p>列为：<br>帧池内帧数量 | 延迟时间 | 释放帧数量 | 释放后帧数量 | 下次释放帧时，帧池内可能帧数量 | 恢复正常所需要快播次数 | 往后每次释放帧数量</p>
<p>行为：<br>从1-15, 每帧33ms，15帧大约为 495ms</p>
<p>接下来开始填释放帧数量，依据以下原则：</p>
<ul>
<li>每次释放帧数量要保证在3帧内</li>
<li>恢复正常所需要的快播数，保证在3次内</li>
<li>尽可能平缓的恢复</li>
<li>若无法满足，更倾向于保证3次快播，恢复正常</li>
</ul>
<p>然后就开始填表格。<br>有一点遗憾的是，没有卡到300ms 和 500ms，都差一帧。</p>
<p><br></p>
<h3 id="扩充帧上传时机"><a href="#扩充帧上传时机" class="headerlink" title="扩充帧上传时机"></a>扩充帧上传时机</h3><p>之前方案中，客户端收集完帧，上传时机在于执行逻辑帧前：先上传之前的操作，再去执行帧操作。<br>扩充为三个方案：</p>
<ul>
<li>执行逻辑帧前</li>
<li>执行逻辑帧后</li>
<li>执行绘制帧前</li>
</ul>
<p><br></p>
<h3 id="完善的统计机制-重点"><a href="#完善的统计机制-重点" class="headerlink" title="完善的统计机制 [重点]"></a>完善的统计机制 [重点]</h3><p>我个人一直特别推崇数据驱动，数据不会说谎，除非数据收集的粒度与广度不够。<br>建立一套完善的统计机制，通过数据来分析用户状态、行为，进而辅助设计，优化体验，做到有依据有目的有验证标准的方式的去解决问题是非常必要的。</p>
<p>统计数值大概包括：</p>
<ul>
<li>基本信息<ul>
<li>机型</li>
<li>操作系统</li>
<li>位置信息</li>
<li>连接的服务器位置</li>
<li>战斗开始时间</li>
<li>战斗类型</li>
<li>掉线标记</li>
</ul>
</li>
<li>服务器项（分为两部分，客户端发往服务器&amp;服务器发往客户端）<ul>
<li>丢包率</li>
<li>重发率</li>
<li>协议平均延迟</li>
</ul>
</li>
<li>客户端项<ul>
<li>快播率<ul>
<li>释放帧时帧数大于1帧</li>
</ul>
</li>
<li>卡死率<ul>
<li>释放帧时帧数等于0帧</li>
</ul>
</li>
<li>正常率<ul>
<li>释放帧时帧数等于1帧</li>
</ul>
</li>
<li>帧间隔值<ul>
<li>收到帧间隔</li>
</ul>
</li>
<li>帧间隔波动值<ul>
<li>距离帧应到时间的差值</li>
</ul>
</li>
<li>PING值</li>
<li>FPS值</li>
</ul>
</li>
<li>帧操作的一生<ul>
<li>操作的产生</li>
<li>操作的上传</li>
<li>操作的下发</li>
<li>操作的执行</li>
</ul>
</li>
</ul>
<p>针对每个数值，都可以包括更详细的项：</p>
<ul>
<li>最大值</li>
<li>最小值</li>
<li>阈值达到次数<ul>
<li>100%</li>
<li>70%</li>
<li>50%</li>
</ul>
</li>
<li>平均值</li>
</ul>
<p>注意：</p>
<ul>
<li>计算平均值的时候，超出阈值的取阈值，避免一些极端数值影响平均值。</li>
<li>这里我采用了python的 pandas模块去处理并分析数据</li>
</ul>
<p><br></p>
<h3 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h3><h4 id="判定-amp-收集不同步"><a href="#判定-amp-收集不同步" class="headerlink" title="判定&amp;收集不同步"></a>判定&amp;收集不同步</h4><p>首先对战斗产生日志分级存储：</p>
<ol>
<li>【同步】帧处理，随机数，实体状态 相关</li>
<li>【部分同步】实体添加删除，BUFF添加删除等（包含1的所有内容）</li>
<li>【不同步】时间戳，其他同步信息打印（包含1，2）</li>
</ol>
<p>注意：</p>
<ul>
<li>包含关系，越往下越详细，而且下一级的内容包含上一级的所有内容，即当一条信息在 2级日志内时，不会在1级日志内出现，但会在3的日志内出现。这样做方便定位更详细的日志的各级位置</li>
<li>【同步】、【部分同步】、【不同步】 代表同样的战斗在不同客户端上的日志是否一致，【部分同步】表示不一致的内容只会在开头&amp;结尾，不会在中间出现</li>
</ul>
<p>1级日志内容会比较少（因为会在战斗中生成，每场战斗要重置），是重点的同步信息。这份日志主要是用来判断各客户端战斗是否同步使用的，同步判断包括两部分：</p>
<ul>
<li>随机数取值一致</li>
<li>实体状态一致</li>
</ul>
<p>2级日志，是用来辅助1级日志查找不同步问题，但是内容会相对3级日志更偏重联网战斗一些</p>
<p>3级日志，就是更广范围的日志，包含游戏其他功能模块的处理逻辑日志打印</p>
<p>不同步判定&amp;收集:</p>
<ol>
<li><p>战斗结束后，客户端战斗产生的1级日志内容，压缩为MD5，上传给服务器</p>
</li>
<li><p>服务器收集各客户端MD5，进行比较；判定战斗不同步即分版本存储本场战斗录像（所有的帧操作）</p>
</li>
<li>任意客户端可在debug模式中，拉取不同步的战斗进行回放现场</li>
</ol>
<h4 id="重现不同步"><a href="#重现不同步" class="headerlink" title="重现不同步"></a>重现不同步</h4><p>通过不同步收集，可以获取到不同步的战斗信息。</p>
<p>剩下的就是重现不同，这里采用的方式很简单，就是不断的跑这场战斗。</p>
<p>比如，跑100次战斗，将MD5不同的日志收集起来，进行比对，进而修改，直至这100场战斗的日志产生的MD5均一致。</p>
<p>其实，只要能重现BUG，就离解决不远了，而且是能无限重现的BUG。</p>
<h4 id="其他项"><a href="#其他项" class="headerlink" title="其他项"></a>其他项</h4><ul>
<li><p>前期测试时期，可以让服务器把同步的战斗操作也存储，然后拉去下来本地跑100场。</p>
</li>
<li><p>100场也只是一个样例，嫌多可以跑30场，200场，都随意。</p>
</li>
<li><p>善于利用闲置电脑，让所有客户端都能替你跑不同步测试</p>
<ul>
<li>我是在游戏内开发一套debug工具，配合服务器，可以拉取各个角色的回放信息，并进行不同步测试。在战斗时，把自己带入为双方中的任何一方视角进行战斗并输出日志。</li>
<li>后期也支持，只跑逻辑，不跑绘制的战斗，这样使得测试时间大大缩短。（还顺便检测出了一些BUG）</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="优化效果"><a href="#优化效果" class="headerlink" title="优化效果"></a>优化效果</h2><p>通过最新一期的线上测试；大概近6000场战斗，总的不同步率 及 各战斗模式的不同步率 均已经降低到了 0.1%以下。(包含 1V1 PK，多人组队战斗等)。</p>
<p>可能还是战斗场次不够多，需要更大量的数据来检测，但是，起码目前已经到及格线，下一步就是调整优化延迟了。</p>
<p>联网战斗就是这样：</p>
<p>延迟调完调同步，同步调完调延迟。</p>
<p><br></p>
<p><br></p>
<h2 id="下一步方向"><a href="#下一步方向" class="headerlink" title="下一步方向"></a>下一步方向</h2><p>现在已经算是一个闭环的方案了。</p>
<ol>
<li>发现问题</li>
<li>重现问题</li>
<li>解决问题</li>
<li>验证问题</li>
<li>收集问题<ul>
<li>主动收集</li>
<li>被动收集</li>
</ul>
</li>
<li>提前发现问题</li>
</ol>
<p>各个方面都有解决方案了，剩下的就是基于这个基础上再去不断的优化完善。</p>
<p>在不同步上，目前待测试的：</p>
<ul>
<li>浮点数问题</li>
</ul>
<p>不知不觉已经做了这么多，可惜最后无法见证最终的效果，时也命也。</p>
<p>仅愿：</p>
<p>​    功成须献捷，未必去经年。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p>这些是在优化过程中遇到的一些问题，采用的一些方法，一些策略</p>
<p><br></p>
<h2 id="番外：痛苦的不同步"><a href="#番外：痛苦的不同步" class="headerlink" title="番外：痛苦的不同步"></a>番外：痛苦的不同步</h2><p>每次接到不同步的反馈，都是异常痛苦的，就如之前所说。<br>同步模块做的很多的事情都是大方向框架性的，具体的流畅问题、不同步问题，往往是负责最繁琐复杂的发现问题的角色，<br>然后带着发现的问题找相应模块负责人，去反馈。（最麻烦的就是发现问题，一旦定位问题，距离解决基本不远了）</p>
<p>但是，<br>同步方面的问题，往往是上线前无人问津，上线后铢锱必较。<br>一旦出了问题，虽然能把锅分分钟甩出去，但是最终留下来加班修改的还是自己；所以，解决这个问题才是关键。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>上线前为什么会无人问津？</p>
<ul>
<li>代码尚在修改，测试收效甚微</li>
<li>数据尚未到位，测试范围不足</li>
<li>待到代码和数据双双齐备，距离上线不足弹指一挥间，甚至上线后依然在修改调整</li>
<li>测试方法繁琐复杂</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>针对代码修改问题；可以提高版本内相关功能优先级，先修改相关代码，再做其他相关功能</li>
<li>针对数据到位问题；可以分批次到位，分批次测试，而非最终一口吃个胖子</li>
<li>针对测试方法繁琐复杂；可以实现自动化测试，提供测试工具</li>
</ul>
<p>自动化测试，本不应该属于这片内容。<br>作为联网战斗的实现，处理同步问题，是重中之重。<br>处理方向有两个：</p>
<ul>
<li>预防不同步，在出现前，扼杀在摇篮中</li>
<li>解决不同步，当出现时，如何快速定位并解决</li>
</ul>
<p>预防不同步，就是使用自动化测试的方案，针对策划所配置的所有项都提前做好测试。做一个改动后，就相关影响的战斗，都多跑几遍；就是把人力做的事情，通过技术来自动化跑。</p>
<p>解决不同步，可以分为三个部分：</p>
<ol>
<li>收集</li>
<li>重现</li>
<li>验证</li>
</ol>
<p>收集，就是当出现不同步问题的时候，我们一定要知道；</p>
<p>重现，就是我们要对现场进行重现，这样就方便查找问题，进而验证是否解决问题。</p>
<p>这些通过上面优化方案的自动化工具都已经初具模型。</p>
<p><br></p>
<h2 id="番外：集思广益"><a href="#番外：集思广益" class="headerlink" title="番外：集思广益"></a>番外：集思广益</h2><p>以前做东西，习惯闷头开发，因为为了做这方面的内容，查阅资料，实验功能，做了各种各样的努力，对这方面的认知和理解还是有一定的把控的。</p>
<p>但是，“不识庐山真面目，只缘身在此山中”，有时候往往会自己把自己限制住，对一个问题不同高度，不同角度，不同层次的解析，也是值得尝试的。</p>
<p>于是，这次优化，准备了以下内容，然后先在内部范围开了个会，收集大家的意见：</p>
<ol>
<li>整个机制的框架</li>
<li>上次测试的数据</li>
<li>针对测试数据分析的原因</li>
<li>针对分析的原因，准备做的优化方向</li>
</ol>
<p>事实证明，通过这次会议，收集到了很多有用的建议与方案，回去做了针对性的调整，再去实施。</p>
<p><br></p>
<h2 id="番外：延迟与平滑的博弈"><a href="#番外：延迟与平滑的博弈" class="headerlink" title="番外：延迟与平滑的博弈"></a>番外：延迟与平滑的博弈</h2><p>联网战斗的效果，最终都是归咎与延迟与平滑的博弈，效果平滑，完全可以通过最粗暴的高延迟实现，但是动作游戏的高延迟还是比较影响玩家体验的，所以就需要不断的调整优化，找到那个平衡点。</p>
<p>下面是一个经典的样例：</p>
<ol>
<li>以当前帧池数量 n 为准，差值释放，假定平均3次释放完毕，每次释放 n/3</li>
<li>注重延迟，当需要快播，每次选择最大释放帧数释放（3帧），保证3次释放即可恢复（100ms内）<ul>
<li>假设帧池中有5帧，选择<ol>
<li>释放3帧 =&gt; 5-3=2 ，已恢复现场</li>
</ol>
</li>
</ul>
</li>
<li>注重平滑，当需要快播，每次选择尽可能平滑的方式去释放帧<ul>
<li>假设帧池中有5帧，选择<ol>
<li>释放2帧 =&gt; 5-2=3</li>
<li>释放2帧 =&gt; 3-2=1 ，已恢复现场</li>
</ol>
</li>
</ul>
</li>
<li>平衡平滑与延迟，指定每个数值缓存帧时的缓存策略，</li>
</ol>
<p>注意：</p>
<ul>
<li>快播时，是否重新计算该释放的帧数</li>
</ul>
<p><br></p>
<h2 id="番外：电脑与收集MD5不一致"><a href="#番外：电脑与收集MD5不一致" class="headerlink" title="番外：电脑与收集MD5不一致"></a>番外：电脑与收集MD5不一致</h2><p>在重现不同步时，手机产生的MD5与PC产生的MD5不一致。</p>
<p>经过一系列实验检测发现，在时间种子传输过程中（Lua -&gt; C++），种子的数据类型发生变化，导致种子数值发生了改变。</p>
<p><br></p>
<h2 id="番外：卡顿反馈"><a href="#番外：卡顿反馈" class="headerlink" title="番外：卡顿反馈"></a>番外：卡顿反馈</h2><p>为了更近一步手机玩家反馈，同时也不影响玩家正常体验。</p>
<p>在联网战斗后，结算界面添加反馈按钮，收集第一手玩家信息。</p>
<p>然后，设定一个卡顿阈值来自动弹出反馈面板（该面板允许玩家选择永久不自动弹出）。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<p>参考：</p>
<ul>
<li><a href="http://www.lt-tree.com/2019/09/21/%E8%81%94%E7%BD%91%E6%88%98%E6%96%97%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">联网战斗同步实现</a></li>
</ul>
]]></content>
      <tags>
        <tag>抽空写</tag>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>联网战斗同步实现</title>
    <url>/2019/09/21/%E8%81%94%E7%BD%91%E6%88%98%E6%96%97%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>联网战斗同步实现的心得</p>
<a id="more"></a>
<p><br></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在做联网战斗同步这块的东西，读了不少文章、书籍，于是整理了一下。</p>
<p>之前也有在 团队内部技术分享 中分享过这块内容，但是有些东西受限于时间，只是大概的略过，重点放在了实现与遇到的难题解决上。</p>
<p>后来，在做优化调整的时候，又有不少新的收获，改进了之前的分享稿。</p>
<p>欢迎各位小伙伴来一起讨论，通过分享讨论来不断进步。</p>
<hr>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>网络游戏的同步方案，大概由以下三部分搭配组成</p>
<ul>
<li>网络传输协议</li>
<li>网络同步模型</li>
<li>网络拓扑结构</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="网络传输协议（Network-Transport-Protocol）"><a href="#网络传输协议（Network-Transport-Protocol）" class="headerlink" title="网络传输协议（Network Transport Protocol）"></a>网络传输协议（Network Transport Protocol）</h2><ul>
<li><p>分类</p>
<ul>
<li>UDP协议</li>
<li>TCP协议</li>
</ul>
</li>
<li><p>共同点</p>
<ul>
<li>在 TCP/IP 协议族中[物理层，数据链路层，网络层，传输层，应用层]，位于 传输层的协议，均依赖底层 网络层中的 IP协议。</li>
</ul>
</li>
<li><p>区别</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>UDP</th>
<th>TCP</th>
</tr>
</thead>
<tbody>
<tr>
<td>传输可靠性</td>
<td>不可靠</td>
<td>可靠</td>
</tr>
<tr>
<td>传输速度</td>
<td>快</td>
<td>慢</td>
</tr>
<tr>
<td>带宽</td>
<td>包头小，省</td>
<td>包头大，费</td>
</tr>
<tr>
<td>连接速度</td>
<td>快</td>
<td>慢</td>
</tr>
</tbody>
</table>
<ul>
<li>此外，TCP还提供了 流量控制、拥塞控制等</li>
</ul>
<ul>
<li><p>其他</p>
<ul>
<li>关于 KCP协议<ul>
<li>KCP协议是一个快速可靠协议，它以浪费10%-20%带宽的代价（相较于TCP协议），换取平均延迟降低 30%-40%，且最大延迟降低三倍的传输效果。纯算法实现，并不负责底层协议的收发。</li>
<li>更详细信息可跳转最下方  参考资料2</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="网络同步模型（Network-Model）"><a href="#网络同步模型（Network-Model）" class="headerlink" title="网络同步模型（Network Model）"></a>网络同步模型（Network Model）</h2><ul>
<li><p>分类</p>
<ul>
<li>状态同步（State Synchronization ）<ul>
<li>本质：上传包含 游戏外部变化原因集合（玩家操作等）及 中间状态的子集（客户端计算的部分）；下发包含 游戏状态的集合。</li>
</ul>
</li>
<li>帧同步（Lockstep）<ul>
<li>本质：上传下发只包含游戏外部变化原因集合（玩家操作等）。<ul>
<li>对于A客户端：  [输入A] -&gt; [过程A + 运算A] -&gt; 输出A</li>
<li>对于B客户端：  [输入B] -&gt; [过程B + 运算B] -&gt; 输出B</li>
<li>确保 [输入] 相同，再保证 [过程] 与 [运算] 一致，那么 [输出] 一定是一致的</li>
</ul>
</li>
<li>逻辑帧，游戏在逻辑层面是离散的过程，即可认为是一个逻辑帧一个逻辑帧进行逻辑运算。</li>
<li>渲染帧，游戏在渲染层面是离散的过程，即可认为是一个渲染帧一个渲染帧进行画面呈现。</li>
<li>游戏逻辑帧 与 渲染帧 需要互相独立。</li>
</ul>
</li>
</ul>
</li>
<li><p>共同</p>
<ul>
<li>两种同步方案都分为 上传 和 下发 过程。<ul>
<li>上传 指客户端将信息传输给 服务器/客户端</li>
<li>下发 指客户端从 服务器/客户端 中获取信息</li>
</ul>
</li>
</ul>
</li>
<li><p>对比</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>帧同步</th>
<th>状态同步</th>
</tr>
</thead>
<tbody>
<tr>
<td>流量</td>
<td>通常较低，取决于玩家数量</td>
<td>通常较高，取决于该客户端可观察到的网络实体数量</td>
</tr>
<tr>
<td>预表现</td>
<td>难，客户端本地计算，进行回滚等</td>
<td>较易，客户端进行预表现，服务器进行权威演算，客户端最终和服务器下发的状态进行调节或回滚</td>
</tr>
<tr>
<td>确定性</td>
<td>严格确定性</td>
<td>不严格确定性</td>
</tr>
<tr>
<td>弱网影响</td>
<td>大，较难做到预表现</td>
<td>小，较易做到预表现</td>
</tr>
<tr>
<td>断线重连</td>
<td>难，需要获取所有相关帧且快播追上进度</td>
<td>易，根据快照迅速恢复</td>
</tr>
<tr>
<td>实时回放</td>
<td>难，客户端需要消耗非常大性能去从头播放到对应序列，回放完后需要快播追赶</td>
<td>易，根据快照进行回放，回放完再根据快照恢复</td>
</tr>
<tr>
<td>逻辑性能优化</td>
<td>难，客户端需要运算所有逻辑，跟客户端性能强相关</td>
<td>易，大部分逻辑可在服务器进行，分担客户端运算压力</td>
</tr>
<tr>
<td>外挂影响</td>
<td>大，客户端拥有所有信息，透视类外挂影响严重</td>
<td>小，服务器可做视野剔除等处理</td>
</tr>
<tr>
<td>开发特征</td>
<td>平时开发高效，不需要前后端联调；但是开发时要保证各模块确定性，不同步BUG出现，难以排查</td>
<td>平时开发效率一般，需要前后端联调，无不同步BUG</td>
</tr>
<tr>
<td>第三方库影响</td>
<td>大，第三方库需要确保确定性</td>
<td>小，第三方库不需要确保确定性</td>
</tr>
</tbody>
</table>
<p><br></p>
<p><br></p>
<h2 id="网络拓扑结构（Network-Topology）"><a href="#网络拓扑结构（Network-Topology）" class="headerlink" title="网络拓扑结构（Network Topology）"></a>网络拓扑结构（Network Topology）</h2><ul>
<li><p>分类</p>
<ul>
<li>对等结构<ul>
<li>P2P结构（Peer to Peer）</li>
</ul>
</li>
<li>主从结构<ul>
<li>CS结构（Client-Server）</li>
</ul>
</li>
</ul>
</li>
<li><p>共同</p>
<ul>
<li>网络时延的评估标准<ul>
<li>Ping<ul>
<li>概念：网络连接的两个端之间的信号在网络传输所花费的时间。</li>
<li>例：从A端发出信号开始计时，到B端响应并立刻返回响应信号，A端收到响应后停止计时，该时长为Ping。</li>
</ul>
</li>
<li>RTT（Round Trip Time）<ul>
<li>概念：一般可认为等于Ping，但此处 RTT = Ping +  两个端的处理信号前等待时间 + 两个端处理信号的时间，即 实际体验到的游戏时延。</li>
<li>例：A端逻辑发出信号开始计时，在A端等待一段时间、处理一段时间；发出到B端，在B端等待一段时间、处理一段时间；处理发出响应信号；再次在B端等待一段时间、处理一段时间；发出到A端，再次等待一段时间、处理一段时间；A端逻辑收到响应信号，停止计时；该时长为RTT。</li>
</ul>
</li>
<li>标准（单位 ms）<ul>
<li>极好：&lt;= 20</li>
<li>优秀：21 ~ 50</li>
<li>正常：51 ~ 100</li>
<li>差：101 ~ 200</li>
<li>极差：&gt;= 201</li>
</ul>
</li>
</ul>
</li>
<li>丢包率<ul>
<li>原因： 直接原因是由于 无线网络 和 拥塞控制，根本原因比较复杂。</li>
<li>标准：<ul>
<li>优秀：&lt;= 2%</li>
<li>一般：2% ~ 10%</li>
<li>差：&gt;= 10%</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>对比</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>P2P结构</th>
<th>CS结构</th>
</tr>
</thead>
<tbody>
<tr>
<td>样式</td>
<td>全连接的网状结构</td>
<td>星状结构</td>
</tr>
<tr>
<td>连接数</td>
<td>O(n^2)</td>
<td>O(n)</td>
</tr>
<tr>
<td>流量</td>
<td>各客户端相等，均为 O(n^2)</td>
<td>服务器为 O(n)，客户端为 O(1)</td>
</tr>
<tr>
<td>客户端间的时延</td>
<td>较小，为RTT/2</td>
<td>较大，为RTT</td>
</tr>
</tbody>
</table>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="广义"><a href="#广义" class="headerlink" title="广义"></a>广义</h2><p>广义上来说，游戏采用的技术是：</p>
<ul>
<li>网络传输协议： KCP &amp; TCP</li>
<li>网络同步模型： 帧同步</li>
<li>网络拓扑结构： CS结构</li>
</ul>
<p>图例</p>
<p><img src="/images/sync_FrameProcess.png" alt="帧同步流程"></p>
<p><br></p>
<p><br></p>
<h2 id="狭义"><a href="#狭义" class="headerlink" title="狭义"></a>狭义</h2><p>关联类</p>
<ul>
<li>同步管理类</li>
<li>联网战斗数据缓存类</li>
<li>联网战斗场景类</li>
</ul>
<p><br></p>
<h3 id="同步管理类"><a href="#同步管理类" class="headerlink" title="同步管理类"></a>同步管理类</h3><p>功能</p>
<ul>
<li>同步帧的操作的处理<ul>
<li>添加</li>
<li>处理</li>
<li>执行</li>
<li>修正</li>
</ul>
</li>
<li>对玩家操作的处理<ul>
<li>收集</li>
<li>上传</li>
<li>吞噬</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="联网战斗数据缓存类"><a href="#联网战斗数据缓存类" class="headerlink" title="联网战斗数据缓存类"></a>联网战斗数据缓存类</h3><p>功能</p>
<ul>
<li>提供联网战斗通用数据模型<ul>
<li>解析玩家数据</li>
</ul>
</li>
<li>客户端与战斗服交互的中枢<ul>
<li>发往战斗服消息，均由此统一发送</li>
<li>收到战斗服的消息，处理后转发给其他业务类</li>
</ul>
</li>
<li>断线重连相关处理<ul>
<li>追帧相关</li>
</ul>
</li>
</ul>
<p><br></p>
<h3 id="联网战斗场景类"><a href="#联网战斗场景类" class="headerlink" title="联网战斗场景类"></a>联网战斗场景类</h3><p>功能</p>
<ul>
<li>处理联网战斗基础场景流程、方法<ul>
<li>房间状态切换流程</li>
<li>创建角色数据及实体</li>
<li>传送逻辑</li>
</ul>
</li>
<li>实现本地战斗与联网战斗切换</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="为什么采用帧同步"><a href="#为什么采用帧同步" class="headerlink" title="为什么采用帧同步"></a>为什么采用帧同步</h2><ol>
<li>游戏的核心逻辑在客户端实现，服务器只负责转发验证等</li>
<li>游戏类型及形式，动作类、房间为单位；更适合用帧同步</li>
<li>开发速度快，周期短</li>
</ol>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="重点处理"><a href="#重点处理" class="headerlink" title="重点处理"></a>重点处理</h1><p>如同帧同步的简介中介绍，要保证 输出的一致性，先要确保输入、过程、运算的一致性。</p>
<p><br></p>
<h2 id="浮点数与定点数-运算一致性"><a href="#浮点数与定点数-运算一致性" class="headerlink" title="浮点数与定点数  [运算一致性]"></a>浮点数与定点数  [运算一致性]</h2><p>浮点数的运算在不同的操作系统，甚至不同的机器上算出来的结果都是有精度差异的。</p>
<p>一般解决该类问题方法：</p>
<ul>
<li>使用定点数</li>
<li>使用分数</li>
</ul>
<p>这里主要麻烦点在于lua支持定点数，lua中的小数是double，需要把lua源码中的基础小数全部替换为定点数。</p>
<p>然后，物理引擎的计算，第三方库的引用（比如随机数），都需要使用定点数。</p>
<p><br></p>
<p><br></p>
<h2 id="确定的-随机数机制-运算一致性"><a href="#确定的-随机数机制-运算一致性" class="headerlink" title="确定的 随机数机制  [运算一致性]"></a>确定的 随机数机制  [运算一致性]</h2><p>确定的随机数机制就是保证各个客户端一旦用到随机数，随机出来的值必须是一样的。</p>
<p>得益于计算机的伪随机，通过设定同样的随机种子即可实现。</p>
<p>但是，在客户端内，需要明确区分随机数的类型</p>
<ul>
<li>战斗类<ul>
<li>设计战斗的实体、BUFF、技能 等等</li>
</ul>
</li>
<li>非战斗类<ul>
<li>主要是显示项的随机，比如 loading期间的 tip选择</li>
</ul>
</li>
</ul>
<p>这里，为了更明确区分，在客户端做了一层封装：</p>
<ul>
<li>AEUtil:GRandom，战斗类的随机数方法</li>
<li>AEUtil:UIRandom，非战斗类的随机数方法</li>
</ul>
<p>做好区分，也便于相关日志的打印。</p>
<p>使用战斗类随机数模块：</p>
<ul>
<li>AI</li>
<li>行为树</li>
<li>相机</li>
<li>技能、BUFF、特殊能力</li>
<li>实体相关</li>
<li>地图相关</li>
</ul>
<p>使用 非战斗类 随机数模块：</p>
<ul>
<li>UI界面</li>
<li>外挂检测</li>
<li>数据收集</li>
<li>音乐音效</li>
</ul>
<p>当然，也不是绝对的，比如实体相关的有些可以不用战斗类随机数，比如NPC弹出个对话，也是纯显示性的。这里是为了好区分，方便开发，一刀切了。</p>
<p><br></p>
<p><br></p>
<h2 id="确定的-容器及算法-过程一致性"><a href="#确定的-容器及算法-过程一致性" class="headerlink" title="确定的 容器及算法  [过程一致性]"></a>确定的 容器及算法  [过程一致性]</h2><ul>
<li>对于lua语言，不要用 pairs 方式遍历，要用 ipairs，也相应就要求容器必须是数组</li>
<li>所有用到的算法，必须是 <strong>稳定</strong> 的算法</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="隔离与封装-逻辑层-过程一致性"><a href="#隔离与封装-逻辑层-过程一致性" class="headerlink" title="隔离与封装 逻辑层  [过程一致性]"></a>隔离与封装 逻辑层  [过程一致性]</h2><p>所有模块都可以分为 draw 与 update 两部分</p>
<ul>
<li>draw 进行绘制，走本地绘制帧更新</li>
<li>update 进行逻辑计算，走逻辑帧更新，可被帧同步接管</li>
</ul>
<p>实现帧同步尤其需要对 逻辑层的数据进行封装与隔离</p>
<p>以位移组件为例：</p>
<ul>
<li>位移组件有两套坐标<ul>
<li>逻辑坐标</li>
<li>渲染坐标</li>
</ul>
</li>
<li>人物的行走都是通过逻辑坐标计算，渲染坐标是在渲染帧的时候，将当前渲染坐标与逻辑坐标进行比较，再用差值平滑过渡</li>
</ul>
<p>同理的还有：</p>
<ul>
<li>碰撞框的计算</li>
<li>各组件</li>
<li>各实体</li>
</ul>
<p>做好分离，也便于之后做快照相关的优化。</p>
<p><br></p>
<p><br></p>
<h2 id="支持本地战斗"><a href="#支持本地战斗" class="headerlink" title="支持本地战斗"></a>支持本地战斗</h2><p>创建联网战斗场景基类继承自单人战斗场景基类，用来统一控制联网相关的特殊操作，如 传送，协议交互 等。</p>
<p>然后，设置本地战斗变量，用来进行控制，若是本地战斗，交由基类处理。</p>
<p><br></p>
<p><br></p>
<h2 id="同步模式-及-处理帧策略-过程一致性"><a href="#同步模式-及-处理帧策略-过程一致性" class="headerlink" title="同步模式 及 处理帧策略  [过程一致性]"></a>同步模式 及 处理帧策略  [过程一致性]</h2><h3 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h3><ul>
<li>服务器： 固定推帧    30帧/秒</li>
<li>客户端： <ol>
<li>30帧/秒，每次执行一次处理帧</li>
<li>60帧/秒，每次执行一次处理帧</li>
<li>30帧/秒，每次执行一次处理帧，绘制帧到来时，若有帧积压，再执行一次处理帧</li>
</ol>
</li>
</ul>
<p><br></p>
<h3 id="处理帧策略"><a href="#处理帧策略" class="headerlink" title="处理帧策略"></a>处理帧策略</h3><p>每次执行一次处理帧操作，具体释放帧数量</p>
<ol>
<li>释放1帧</li>
<li>逐步释放帧<ul>
<li>累计帧数 &lt; 2帧，释放1帧</li>
<li>累计帧数 &lt; 5帧，释放2帧</li>
<li>累计帧数 &lt; 10帧，释放3帧</li>
<li>累计帧数 &gt;= 10帧，释放所有帧</li>
</ul>
</li>
<li>可变释放帧<ul>
<li>释放帧数量由 PlayFrameScale 变量控制，可 加速/减速 播放（一般用于处理回放）</li>
</ul>
</li>
<li>释放全部帧</li>
</ol>
<p><br></p>
<p><br></p>
<h2 id="断线重连"><a href="#断线重连" class="headerlink" title="断线重连"></a>断线重连</h2><p>断线重连，主要由 联网战斗数据缓存类负责。</p>
<ol>
<li>从服务器中获取重连过程中的战斗帧</li>
<li>进入 追帧模式进行追帧，在追帧模式中，服务器发来的推送帧会被缓存起来</li>
<li>追帧完毕后，退出追帧模式；并将追帧期间的 服务器推送帧压入 同步管理器中</li>
</ol>
<p><img src="/images/sync_reconnect.png" alt="断线重连"></p>
<p><br></p>
<p><br></p>
<h2 id="同步校验"><a href="#同步校验" class="headerlink" title="同步校验"></a>同步校验</h2><p>验证多个客户端是否同步，主要依赖于随机数及调用随机数的位置。</p>
<p>在联网战斗运行时，会将使用的随机数都打印出来，由于我们随机种子一致，所调用的随机数序列也应该是一致的，辅助以调用随机数的位置信息，战斗结束后对不同客户端的随机种子文件日志比对，可以校验同步。</p>
<p>我处理这块的方式是使用两个日志文件，</p>
<ul>
<li>一个用来做同步校验：大部分内容是 使用随机数的模块 + 随机数范围 + 最终生成的随机数，还有一些必然一致的过程日志。</li>
<li>另一个用来做同步排查：包含更详细的日志信息</li>
</ul>
<p>两场战斗结束后，用对比工具比较日志，一旦有差异，用更详细的日志信息，进行排查。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="优化项"><a href="#优化项" class="headerlink" title="优化项"></a>优化项</h1><p>联网战斗同步向来不是一个做完就行的东西，而且也没有一套东西，在各个类型游戏通吃的情况。</p>
<p>所以，在实现完基础的同步架构后，还有很长的路要走。</p>
<p>目前只是搭建了一个基础的框架，要真正投入还有下面这些优化项可以做。</p>
<p>下面这些东西，有些已经做了，有些正在做，有些是一些设想，即将做的；欢迎各位伙伴一起来讨论。</p>
<p><br></p>
<h2 id="快照的支持"><a href="#快照的支持" class="headerlink" title="快照的支持"></a>快照的支持</h2><p>在帧同步基础上，进行优化；就是 帧同步+快照 的模式。</p>
<p>其实已经不属于帧同步了，偏向状态同步。</p>
<p>快照作用就是将整个现场备份，缺点是数据量过大。</p>
<p>但是，我们以房间为单位的战斗，尤其适合 帧同步+快照；因为有明确的划分单位；并且房间初始，很多东西都是不需要存储的。</p>
<ul>
<li>房间内的快照，所有实体的状态（怪物、NPC、传送门 等等），HP、EP、受损状态 等等</li>
<li>房间间的快照，实体都是初始创建，且实体的创建是不通过帧的，可以本地处理</li>
</ul>
<p>这三者区别，</p>
<ul>
<li><p>帧同步 =&gt; 没有进度条的播放器；想要看到第6分30秒的内容，必须从头开始看</p>
</li>
<li><p>状态同步 =&gt; 有进度条的播放器；知道时间，就可以直接切到相应时间开始播放</p>
</li>
<li><p>帧同步+快照 =&gt; 有进度条，但单位是5分钟；要看 6分30秒的内容，不需要从头看，但是也要从第5分钟开始播放，直到6分30秒</p>
</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>帧同步的安全性也是一个重大的问题，可以分为几大部分。</p>
<ol>
<li><p>客户端的安全模块，游戏的核心战斗逻辑演算都在客户端进行，所以对于数据的加密，防篡改等都是由安全模块统一处理。</p>
</li>
<li><p>网络模块，对于网络层的外挂，由底层网络模块的加密等处理。</p>
</li>
<li><p>联网战斗系统的防外挂模块</p>
<p>基础的几个方案</p>
<ul>
<li>每隔一段时间，进行玩家信息收集并上传（如血量、技能使用、buff使用），出现结算不一致，由服务器裁决，可以解决部分外挂</li>
<li>服务器新开一个“客户端”，在那个客户端上跑所有的帧，作为评判依据。</li>
<li>等等</li>
</ul>
</li>
</ol>
<p>防外挂这个东西，就是魔高一尺，道高一丈，不断优化，不断调整的过程，有些东西也不好讲太细，只能说个大概。</p>
<p><br></p>
<p><br></p>
<h2 id="不同步的处理"><a href="#不同步的处理" class="headerlink" title="不同步的处理"></a>不同步的处理</h2><p>解决不同步问题，也是帧同步方案的一大痛点。</p>
<p>对于不同步的处理，可以分为三个部分：发现 -&gt; 重现 -&gt; 解决</p>
<p>作为开发，应该深有感触，如果方便重现，那解决问题就很简单了。</p>
<p>下面的处理方式都是针对传统的不同步处理各个步骤，进行优化设想。</p>
<p>一般出现不同步： 发现不同步 -&gt; 打开日志开关 -&gt; 使用同样的数据源 -&gt; 复现问题 -&gt; 解决问题</p>
<h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><p>发现不同步，最简单粗暴的方式，肯定是人力跑，没有技术成本，纯跑…</p>
<p>但是，缺点很多：</p>
<ul>
<li>人力不足</li>
<li>时间不足</li>
<li>不够全面</li>
<li>不方便收集日志</li>
<li>不能体现技术实力</li>
<li>等等等等</li>
</ul>
<p>所以，需要一种自动化的测试工具，来进行大量全面的测试。</p>
<p>目前打算是使用 python + jenkins 来部署自动化测试流水线，等测试完，再单独来说一说。</p>
<p><br></p>
<h3 id="重现"><a href="#重现" class="headerlink" title="重现"></a>重现</h3><p>重现不同步，也是很重要的一个步骤，能完美重现，那距离解决就不远了。</p>
<p>这里预期采用的方案是，固定数据源 + 回放机制。</p>
<ul>
<li><p>固定数据源</p>
<p>需要和服务器配合，服务器需要存储参战玩家信息及帧内容，便于回放。</p>
<p>前期可以全部存储，但是这样服务器压力会比较大；后期可以将本地战斗产生的同步文件形成MD5，发给服务器；服务器判断各客户端MD5不同，采取缓存录像。</p>
</li>
<li><p>回放机制</p>
<p>需要客户端实现一套根据帧内容回放机制，理论上来讲帧同步的回放还是比较好实现的。</p>
<p>毕竟 确定的输入，确定的运算，确定的过程，都与时间无关联，可以得到确定的输出。</p>
<p>但是，我们需要的是日志文件，所以绘制帧内容可以忽略掉，尽量做到逻辑帧的播放，这样在时间上也会更快。</p>
</li>
</ul>
<p><br></p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>解决不同步问题，那就相对简单很多了。</p>
<p>实现了上面的发现 与 重现，可以无数次反复执行不同步数据源，验证是否解决也很便捷。</p>
<p><br></p>
<h3 id="运行过程中的日志收集"><a href="#运行过程中的日志收集" class="headerlink" title="运行过程中的日志收集"></a><em>运行过程中的日志收集</em></h3><p>这应该属于发现不同步的部分。</p>
<p>在实际项目中，日志的实现都是比较粗暴的，一般来说线上运行的模块，都不会开启日志文件。因为一般日志文件都会比较大，尤其是查同步问题的日志文件，涉及模块繁多，产生文件体积大。</p>
<p>所以，线上出不同步问题，往往也很难复现并解决，就是无法固定数据源。（不产生校验文件，就不能上传MD5，不能传MD5，服务器无法判断是否不同步，就不会缓存）</p>
<p>如果有一套性能损耗小一些的日志收集系统，会对同步问题的解决有很大的帮助，</p>
<p>正好最近看到了 《腾讯游戏开发精粹》- 第六部分 - 第14章 - 一种高效的帧同步全过程日志输出方案 。</p>
<p>上面的方案也对我有一些启发，之后可以去实验一下。</p>
<p><br></p>
<p><br></p>
<h2 id="延迟处理"><a href="#延迟处理" class="headerlink" title="延迟处理"></a>延迟处理</h2><p>在实际测验中，会有玩家反馈卡顿情况。</p>
<p>延迟、卡顿的玩家体验，一般可以分为：</p>
<ul>
<li>延迟高</li>
<li>波动大</li>
</ul>
<p>而且，不同游戏类型对延迟的敏感度也不同，现在实现的这种偏格斗类型的游戏，对延迟敏感度还是比较高的。</p>
<p>再者，传统帧同步的处理，逻辑上就是比本地操作要慢一帧：</p>
<p>A帧操作 -&gt; B帧上传 -&gt; C帧执行</p>
<p>B ≥ A，C ≥ B+1</p>
<p>最终，还是要用数据来验证延迟的具体位置，可以按照下流程打时间戳，再收集各个数据，来分析并解决延迟与卡顿：</p>
<p><img src="/images/sync_dataCollect.png" alt="同步帧数据收集流程"></p>
<p>这里列出几个方向：</p>
<ul>
<li>玩家的位置</li>
<li><p>玩家的机型</p>
</li>
<li><p>战斗的时间</p>
</li>
<li>玩家的运营商</li>
</ul>
<p>数据收集的选项：</p>
<ul>
<li>最小值</li>
<li>最大值</li>
<li>平均值</li>
<li>波动值</li>
</ul>
<p>这里还要注意设置阈值，防止某个异常操作，导致数据不准确，拉高或拉低平均值。</p>
<p>甚至可以设置一些字段，来做筛选剔除异常数据。</p>
<p><br></p>
<p><br></p>
<p><br></p>
<h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><h2 id="不信推送，相信帧"><a href="#不信推送，相信帧" class="headerlink" title="不信推送，相信帧"></a>不信推送，相信帧</h2><p>推送缺点</p>
<ul>
<li>每个客户端处理的时机不同<ul>
<li>收到的时机：服务器 推送A，再推送B；对于客户端肯定是先收到A，再收到B</li>
<li>处理的时机：由于各客户端阻塞状态等，每个客户端处理推送时机是不一致的</li>
</ul>
</li>
<li>推送可能丢失</li>
<li>推送内容，不支持在回放中处理</li>
</ul>
<p>比如：</p>
<ul>
<li>玩家复活</li>
<li>玩家掉线，删除角色</li>
</ul>
<p><br></p>
<p><br></p>
<h2 id="逻辑帧的更新流程是确定的"><a href="#逻辑帧的更新流程是确定的" class="headerlink" title="逻辑帧的更新流程是确定的"></a>逻辑帧的更新流程是确定的</h2><p>游戏进行过程中，所有的相关模块：</p>
<ul>
<li><p>实体管理器</p>
</li>
<li><p>场景管理器</p>
</li>
<li><p>碰撞管理器</p>
</li>
<li><p>摄像机管理器</p>
</li>
<li><p>等等</p>
</li>
</ul>
<p>这些模块的更新，都是固定顺序执行，所有参数都是确定的，所用随机都是指定随机方法</p>
<p>需要客户端同步的东西，必须通过帧来驱动。</p>
<p><br></p>
<p><br></p>
<h2 id="同步的实质"><a href="#同步的实质" class="headerlink" title="同步的实质"></a>同步的实质</h2><p>同步，就像一个管理器，它的策略项设计项不难，难点主要在于管理的各个模块的内部实现。因为一场战斗涉及的模块很多，只要有一个模块实现有不同步的地方，整场战斗就不同步了。</p>
<p>在到后期查找不同步原因，也往往是去排查下属模块的实现，可能就是在于遍历方式，随机数的使用，逻辑帧绘制帧等。</p>
<p>主要还是要求：</p>
<ul>
<li>实现同步下属模块的责任人，有联网战斗的意识，尽量的不使用本地数据，能区分出哪些代码可以使用绘制帧的更新，哪些坚决不允许使用绘制帧的更新。</li>
<li>做同步的责任人，对各个下属模块的涉猎广泛，不能只做完同步就可以了，还需要辅助下属模块进行不同步的排查。</li>
</ul>
<p>解决这个问题的方向：</p>
<ul>
<li>让所有实现模块的人都有联网战斗的意识，对整个逻辑帧绘制帧等更新都有概念。（难度很大）</li>
<li>实现自动化同步测试，在发现不同步问题，辅助去定位解决。</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<hr>
<p>参考资料：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/56923109" target="_blank" rel="noopener">DonaldW-网络游戏同步技术概述</a></li>
<li><a href="https://github.com/skywind3000/kcp" target="_blank" rel="noopener">KCP - A Fast and Reliable ARQ Protocol</a>、</li>
<li>《腾讯游戏开发精粹》</li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>抽空写</tag>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>字符集与字符编码</title>
    <url>/2021/10/26/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<p>全球化，多语言，Unicode，UTF8</p>
<a id="more"></a>
<p><br></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在做游戏的全球化时，遇到的一个问题。</p>
<p>玩家名称可以混杂多国语言，但是要进行宽度检测。不同国家的字符宽度不同，比如中文、韩文、日文算2个宽度，其他算1个宽度。根据输入的多语言文本，准确计算宽度。</p>
<p>例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">你好 - <span class="number">4</span></span><br><span class="line">สวัสดี - <span class="number">6</span></span><br><span class="line">こんにちは - <span class="number">10</span></span><br><span class="line">Привет - <span class="number">6</span></span><br><span class="line">안녕 - <span class="number">4</span></span><br><span class="line">Hello - <span class="number">5</span></span><br><span class="line">Olá - <span class="number">3</span></span><br><span class="line">你好สวัสดีこんにちはПривет안녕HelloOlá 宽度为 <span class="number">38</span></span><br></pre></td></tr></table></figure>
<p>这里泰文比较特殊一些，สวัสดี 在存储时会转为 สว◌ัสด◌ี，unicode中没有 วั 与 ดี 。</p>
<p><br></p>
<p><br></p>
<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>字符集即字符的集合。<br>字符是各种文字和符号的总称，包含各国文字、标点符号、图形符号、数字等。</p>
<p>常见的字符集</p>
<table>
<thead>
<tr>
<th>字符集名称</th>
<th>别称</th>
<th>特点</th>
<th>技术特征</th>
</tr>
</thead>
<tbody>
<tr>
<td>ASCII</td>
<td>American Standard Code for Information Interchange, 美国信息互换标准编码</td>
<td>主要用于显示现代英语和其他西欧语言，是最通用的单字节编码系统</td>
<td>7bits表示一个字符，共128个字符（0-127），其中32-126是可打印字符</td>
</tr>
<tr>
<td>Unicode</td>
<td>Universal Multiple-Octet Coded Character Set, 通用多八位编码字符集</td>
<td>支持现今世界各种不同语言的书面文本的交换、处理、显示；对每种语言中的每一个字符都设定了统一且唯一的二进制编码</td>
<td>使用十六进制数字，在书写时前面加上前缀 “U+”</td>
</tr>
<tr>
<td>UTF-8</td>
<td>8-bit Unicode Transformation Format, 将Unicode转成8bit格式 / 万国码</td>
<td>便于不同的计算机之间使用网络传输不同语言和编码文字，使得双字节的Unicode能在现存处理单字节系统上正确传输</td>
<td>UTF-8是一种针对Unicode的可变长字符编码；用1-6个字节编码Unicode字符，对应还有 UTF-16 与 UTF-32</td>
</tr>
<tr>
<td>GB2312</td>
<td>信息交换用汉字编码字符集·基本集</td>
<td>中国国家标准的简体中文字符集，于1981.5.1日实施</td>
<td>1. 区位码（分区表示）；对所收录的汉字进行分区处理，每区含有94个汉字/符号。 2. 双字节表示，即两个字节来编码一个字，高位字节与低位字节有各自范围</td>
</tr>
<tr>
<td>GB18030</td>
<td>信息交换用汉字编码字符集基本集的扩充</td>
<td>中国政府于2000年3月17日发布的汉字编码国家标准，2001年8月31日后在中国市场上发布的软件必须符合本标准；解决了汉字、日文假名、朝鲜语和中国少数民族文字组成的大字符集计算机编码问题。与 Unicode 3.0兼容，并且与 GB2312兼容</td>
<td>采用 单字节、双字节、四字节三种方式对字符编码。单字节部分使用 0x00-0x7F（与ASCII码对应）</td>
</tr>
<tr>
<td>BIG5</td>
<td>大五码/五大码</td>
<td>收录13053个中文字，在中国台湾使用广泛</td>
<td>双字节表示，即两个字节来编码一个字，高位字节与低位字节有各自范围</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>为什么需要编码？</p>
<ul>
<li>为了便于存储与传输，需要一个统一的规则来存取信息。（某段二进制代表什么信息）</li>
</ul>
<p>如何进行字符编码？</p>
<ul>
<li>编码转码所需元素：<ul>
<li>字库表，所有可读/可写的字符数据库</li>
<li>编码字符集，表示一个字符在字库表中的位置</li>
<li>字符编码，编码字符集与字库表的映射关系</li>
</ul>
</li>
<li>过程<ul>
<li>编码<ol>
<li>拿到一个字符准备存储</li>
<li>通过字符编码得到在编码字符集中值</li>
<li>将得到值存储</li>
</ol>
</li>
<li>转码<ul>
<li>得到要显示的值</li>
<li>通过字符编码得到对应字库中的值</li>
<li>将得到值进行显示</li>
</ul>
</li>
</ul>
</li>
<li>通过字符编码可以节省字库表大小</li>
</ul>
<p><br></p>
<h2 id="Unicode-amp-UTF-8"><a href="#Unicode-amp-UTF-8" class="headerlink" title="Unicode &amp; UTF-8"></a>Unicode &amp; UTF-8</h2><p>UTF-8编码为变长编码，最小编码单位（code unit）为一个字节，每个字节的前1-3个bit为描述性部分，后面的为实际序号部分。</p>
<ul>
<li>字节以 0 开头，当前字符为单字节字符，占用一个字节的空间；0之后的所有部分代表在Unicode中的序号。</li>
<li>字节以 10 开头，当前字符为多字节字符，当前字节为多字节字符的第二字节，10 后所有部分和第一字节的剩余部分共同组成在Unicode中的序号。</li>
<li>字节以 110 开头，当前字符为双字节字符，当前字节为双字节字符的第一字节，110 后所有部分与第二字节剩余部分共同组成在Unicode中的序号。（第二字节以10开头）</li>
<li>字节以 1110 开头，当前字符为三字节字符，当前字节为三字节字符的第一字节，1110 后所有部分与第二字节剩余部分第三字节剩余部分共同组成在Unicode中的序号。（第二字节与第三字节均以10开头）</li>
</ul>
<p>计划</p>
<table>
<thead>
<tr>
<th>字节</th>
<th>标准格式</th>
<th>容纳位数</th>
<th>16进制范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>单字节</td>
<td>0xxx xxxx</td>
<td>0-7</td>
<td>0x0000 - 0x007F</td>
</tr>
<tr>
<td>双字节</td>
<td>110x xxxx 10xx xxxx</td>
<td>8-11</td>
<td>0x0080 - 0x07FF</td>
</tr>
<tr>
<td>三字节</td>
<td>1110 xxxx 10xx xxxx 10xx xxxx</td>
<td>12-16</td>
<td>0x0800 - 0xFFFF</td>
</tr>
</tbody>
</table>
<p>实际应用</p>
<table>
<thead>
<tr>
<th>实际字符</th>
<th>在Unicode字库中十六进制</th>
<th>在Unicode字库中二进制</th>
<th>UTF-8编码后的二进制</th>
<th>UTF-8编码后十六进制</th>
</tr>
</thead>
<tbody>
<tr>
<td>H</td>
<td>0048</td>
<td>100 1000</td>
<td>0100 1000</td>
<td>48</td>
</tr>
<tr>
<td>Ĉ</td>
<td>0108</td>
<td>1 0000 1000</td>
<td>1100 0100 1000 1000</td>
<td>C4 88</td>
</tr>
<tr>
<td>你</td>
<td>4F60</td>
<td>100 1111 0110 0000</td>
<td>1110 0100 1011 1101 1010 0000</td>
<td>E4 BD A0</td>
</tr>
</tbody>
</table>
<p><br></p>
<h2 id="Lua-amp-Unicode"><a href="#Lua-amp-Unicode" class="headerlink" title="Lua &amp; Unicode"></a>Lua &amp; Unicode</h2><p>Lua是否支持Unicode的呢？<br>在官网FAQ中，有一些讨论： <a href="http://lua-users.org/wiki/LuaUnicode" target="_blank" rel="noopener">Can I use unicode strings? or Does Lua support unicode?</a><br>主要意思就是Lua并不知道存储/处理的是否为Unicode，但Lua字符串是一个任意序列的字节序列，可以存储任意二进制的数据，包括Unicode；然后根据处理需求可自行扩展相应逻辑。</p>
<p>处理UTF-8的第三方文件：</p>
<ul>
<li><a href="https://github.com/starwing/luautf8" target="_blank" rel="noopener">UTF-8 module for Lua 5.x</a></li>
<li><a href="https://github.com/alexander-yakushev/awesompd/blob/master/utf8.lua" target="_blank" rel="noopener">awesompd/utf8.lua</a></li>
<li><a href="https://github.com/Stepets/utf8.lua" target="_blank" rel="noopener">Stepets/utf8.lua</a></li>
</ul>
<p><br></p>
<h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>按照需求，可定流程</p>
<ol>
<li>求出字符串的unicode值</li>
<li>查找unicode值区间，判断所属国家</li>
<li>根据国家来进行不同长度计算</li>
</ol>
<p>PS: 整个utf8相关方法，在文章最下方</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- http://www.unicode.org/charts/nameslist/</span></span><br><span class="line"><span class="keyword">local</span> UnicodeNationRangeList = &#123;</span><br><span class="line">    &#123;tip = <span class="string">"数字"</span>, range = &#123;&#123;<span class="number">0x30</span>, <span class="number">0x39</span>&#125;&#125;&#125;,</span><br><span class="line">    &#123;tip = <span class="string">"英文"</span>, range = &#123;&#123;<span class="number">0x41</span>, <span class="number">0x5A</span>&#125;, &#123;<span class="number">0x61</span>, <span class="number">0x7a</span>&#125;&#125;&#125;,</span><br><span class="line">    &#123;tip = <span class="string">"中文"</span>, range = &#123;&#123;<span class="number">0x2E80</span>, <span class="number">0x2FDF</span>&#125;, &#123;<span class="number">0x3400</span>, <span class="number">0x4dbf</span>&#125;, &#123;<span class="number">0x4E00</span>, <span class="number">0x9FFF</span>&#125;&#125;&#125;,</span><br><span class="line">    &#123;tip = <span class="string">"韩文"</span>, range = &#123;&#123;<span class="number">0x1100</span>, <span class="number">0x11FF</span>&#125;, &#123;<span class="number">0x3130</span>, <span class="number">0x318F</span>&#125;, &#123;<span class="number">0xAC00</span>, <span class="number">0xD7AF</span>&#125;&#125;&#125;,</span><br><span class="line">    &#123;tip = <span class="string">"日文"</span>, range = &#123;&#123;<span class="number">0x3040</span>, <span class="number">0x30FF</span>&#125;, &#123;<span class="number">0x31F0</span>, <span class="number">0x31FF</span>&#125;&#125;&#125;,</span><br><span class="line">    &#123;tip = <span class="string">"泰文"</span>, range = &#123;&#123;<span class="number">0x0E00</span>, <span class="number">0x0E7F</span>&#125;&#125;&#125;,</span><br><span class="line">    &#123;tip = <span class="string">"俄文"</span>, range = &#123;&#123;<span class="number">0x0400</span>, <span class="number">0x052F</span>&#125;&#125;&#125;,</span><br><span class="line">    &#123;tip = <span class="string">"法文/德文"</span>, range = &#123;&#123;<span class="number">0x00C0</span>, <span class="number">0x00FF</span>&#125;&#125;&#125;,</span><br><span class="line">    &#123;tip = <span class="string">"阿拉伯文"</span>, range = &#123;&#123;<span class="number">0x0600</span>, <span class="number">0x06FF</span>&#125;, &#123;<span class="number">0x0750</span>, <span class="number">0x077F</span>&#125;&#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[DESC: 分析字符属于哪个国家文字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    c: string</span></span><br><span class="line"><span class="comment">        字符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    return: number, string</span></span><br><span class="line"><span class="comment">        number: 国家索引</span></span><br><span class="line"><span class="comment">        string: 国家简述</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Xutf8.analyseCharBelong</span><span class="params">(c)</span></span></span><br><span class="line">    <span class="keyword">local</span> nationIdx = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">local</span> tip = <span class="string">"不识别"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> Xutf8.<span class="built_in">len</span>(c) ~= <span class="number">1</span> <span class="keyword">then</span> <span class="keyword">return</span> nationIdx, tip <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> hexStr, hexStrArr, hexValArr = Xutf8.utf8_to_unicode(c)</span><br><span class="line">    <span class="keyword">local</span> valueC = hexValArr[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, cfg <span class="keyword">in</span> <span class="built_in">ipairs</span>(UnicodeNationRangeList) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> rangeList = cfg.range</span><br><span class="line">        <span class="keyword">for</span> _, rangeCfg <span class="keyword">in</span> <span class="built_in">ipairs</span>(rangeList) <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">if</span> valueC &gt;= rangeCfg[<span class="number">1</span>] <span class="keyword">and</span> valueC &lt;= rangeCfg[<span class="number">2</span>] <span class="keyword">then</span></span><br><span class="line">                nationIdx = i</span><br><span class="line">                tip = cfg.tip</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nationIdx ~= <span class="number">-1</span> <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nationIdx, tip</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[DESC: 返回字符串长度</span></span><br><span class="line"><span class="comment">        中文、日文、韩文，一个字符算两个长度</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        注意：有些会占据双字节，所以长度会有所偏差</span></span><br><span class="line"><span class="comment">            สวัสดี = สว◌ัสด◌ี  -- 长度为6</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    str: string</span></span><br><span class="line"><span class="comment">        字符串</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    return:</span></span><br><span class="line"><span class="comment">        int - 返回具体长度</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Xutf8.getSpecialLength</span><span class="params">(s)</span></span></span><br><span class="line">    <span class="keyword">local</span> l = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> realLen = Xutf8.<span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, realLen <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> c = Xutf8.<span class="built_in">sub</span>(s, i, i)</span><br><span class="line">        <span class="keyword">local</span> idx, tip = Xutf8.analyseCharBelong(c)</span><br><span class="line">        <span class="keyword">if</span> idx == <span class="number">3</span> <span class="keyword">or</span> idx == <span class="number">4</span> <span class="keyword">or</span> idx == <span class="number">5</span> <span class="keyword">then</span></span><br><span class="line">            l = l + <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = l + <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><br></p>
<p><br></p>
<hr>
<p>参考文章:</p>
<ul>
<li><a href="https://www.cnblogs.com/yuanzhenliu/p/8494203.html" target="_blank" rel="noopener">各种语系的unicode对应以及local编码方式</a></li>
<li><a href="http://www.unicode.org/charts/nameslist/" target="_blank" rel="noopener">Unicode官网字符映射</a></li>
<li><a href="http://lua-users.org/wiki/LuaUnicode" target="_blank" rel="noopener">Lua是否支持Unicode</a></li>
<li><a href="http://cenalulu.github.io/linux/character-encoding/" target="_blank" rel="noopener">搞清字符集与字符编码</a></li>
<li><a href="https://www.ltool.net/characters-to-unicode-converter-in-simplified-chinese.php" target="_blank" rel="noopener">Unicode字符查询</a></li>
</ul>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>想就做</tag>
      </tags>
  </entry>
  <entry>
    <title>碎碎念之机器人抽血</title>
    <url>/2021/10/25/%E7%A2%8E%E7%A2%8E%E5%BF%B5%E4%B9%8B%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%8A%BD%E8%A1%80/</url>
    <content><![CDATA[<p>一篇文章引发的思考<br><a href="https://china.huanqiu.com/article/44o1EsgCOHk" target="_blank" rel="noopener">机器人扎针疼不疼？上海首台智能采血机器人在中山医院上岗</a></p>
<a id="more"></a>
<p><br></p>
<p>看到文章，我第一反应是：NB，厉害，又一工种要被取代了吗？ QAQ<br>但紧接着，我会去尝试吗？不，我不会。<br>诶？那…这东西有啥用。</p>
<p><br></p>
<p>在我看来，连我都不敢尝试的东西，那基本淘汰了至少50%吧？<br>我自认为</p>
<ul>
<li>处于一个敢于尝试的年纪</li>
<li>从事于一个敢于尝试的行业</li>
<li>是一个敢于尝试的性格</li>
</ul>
<p>所以，连我都不敢尝试，那怎么推广，让大家信任？</p>
<p>于是，开始在小组内头(hu)脑(si)风(luan)暴(xiang)</p>
<p>为什么大家会接受不了呢？<br>我们在 不信任 或是 在恐惧 什么事情?</p>
<p><br></p>
<p>担忧点：</p>
<ul>
<li><p>同为开发者，反而不信任</p>
<ul>
<li>自己就是开发者，写的一手lan代码，一堆BUG，如何保证程序不出问题？</li>
<li>解决：写代码不出BUG最好的解决方案是不写代码，没人能保证程序没问题，我们只能提高出问题的门槛，降低问题产生后的影响。所以大量测试验证。</li>
</ul>
</li>
<li><p>机器不透明，不知道它具体在做什么</p>
<ul>
<li><p>不透明的机器外壳，不知道内部行为，更加不安。</p>
</li>
<li><p>即使透明，会降低部分不安感，但无法完全消除。</p>
</li>
</ul>
</li>
<li><p>机器没有情感</p>
<ul>
<li>这个理由是，有情感的人，会共情，知道自己的错误会给别人带来痛苦，会约束自己。</li>
<li>针对情感，如果让一个猴子或者狒狒或者10岁的小孩子学会抽血，敢让它们操作吗？ 不敢，因为它们虽然有情感，但是无法保证是否会暴起。</li>
</ul>
</li>
<li><p>机器没轻没重，无法制止</p>
<ul>
<li>器械的威力、动力是很大的，而且无法准确判断自己是否出错，无脑执行。如果发生一些意外，我们可以制止人继续执行，比如推开，逃离等；但是面对机器，它“听不懂”你的话时，还是很危险的。</li>
<li>那如果有一键制止的按钮在手边，发现异常的时候，直接按下按钮可以终止机器人一切行为。</li>
</ul>
</li>
<li><p>一旦出了问题，无法解决</p>
<ul>
<li>当机器出了问题，如何保证后续的任务呢？</li>
</ul>
</li>
</ul>
<p><br></p>
<p>根据担忧点，总结下来，一些方案：</p>
<ol>
<li>讲解原理（解释机器所做的所有流程，正常情况表现，异常情况表现）</li>
<li>流程可视化（机器透明，并实时显示正在处理的内容进度及状况）</li>
<li>可以强制制止（触手可及的按钮，可以一键终止所有行为）</li>
<li>有紧急保障机制（有专门医务工作室在旁边防备所有可能问题）</li>
</ol>
<p>这样一套方案下来，还敢让机器人抽血吗？<br>虽然担忧依旧存在，但是未尝不是不可以一试。</p>
<p><br></p>
<p>其实，这些都是让人主动去接受，但是当面前有两个选择，一是传统方案，一是新奇方案；有多少人会选择新奇的方案呢？<br>所以，在现实情况下，依旧需要找到被动需求方案。<br>比如：</p>
<ol>
<li>经济限制（机器抽血价格降低）</li>
<li>时间限制（机器抽血口大于人工口）</li>
</ol>
<p>但是，也要尽量降低风险</p>
<ol>
<li>限制年龄、健康状况</li>
<li>多做宣传，让更多人可接受（广告作用）</li>
</ol>
<p><br></p>
<p>最后，总结下来这些方案：</p>
<ol>
<li>讲解原理（解释机器所做的所有流程，正常情况表现，异常情况表现）</li>
<li>流程可视化（机器透明，并实时显示正在处理的内容进度及状况）</li>
<li>可以强制制止（触手可及的按钮，可以一键终止所有行为）</li>
<li>有紧急保障机制（有专门医务工作室在旁边防备所有可能问题）</li>
<li>经济限制（机器抽血价格降低）</li>
<li>时间限制（机器抽血口大于人工口）</li>
<li>限制年龄、健康状况</li>
<li>多做宣传，让更多人可接受（广告作用）</li>
</ol>
<p><br></p>
<p>这些方案下，<br>你，敢于尝试机器抽血吗？</p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
<p><br></p>
]]></content>
      <tags>
        <tag>瞎分析</tag>
      </tags>
  </entry>
</search>
