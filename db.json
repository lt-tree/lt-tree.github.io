{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/assets/img/ltree98.png","path":"assets/img/ltree98.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"a8120c4aefba5810512dc03620ff6cdd8e08346f","modified":1531847110617},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1531747575104},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1531747575104},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1531747575104},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1531747575106},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1531747575107},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1531747575107},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1531747575107},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1531747575108},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1531747575108},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1531747575108},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1531747575109},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1531747575109},{"_id":"themes/next/_config.yml","hash":"754df54352f5215ea3bb9386ce2cf6208543914d","modified":1534086769126},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1531747575109},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1531747575110},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1531747575154},{"_id":"source/404/index.html","hash":"7f6281d10dc1195599bc145c084cf24fbd0f6be1","modified":1532968235981},{"_id":"source/categories/index.md","hash":"7ff5acba47408ee6c43598422684f1e1d459c59e","modified":1531847110633},{"_id":"source/_posts/2015，学剑.md","hash":"8f1830cc6be69bc689dc357915d2834bf6479f14","modified":1531847110618},{"_id":"source/_posts/2016，没走偏.md","hash":"03ca9bb6b756ef71ed6446341952e17f03dcdfe6","modified":1531932806501},{"_id":"source/_posts/2017,  迷不茫.md","hash":"a54c0317a6e41f601aecf6fbb1a85a17b602df38","modified":1531847110619},{"_id":"source/_posts/Cocos2d-lua ScrollView优化1.md","hash":"edf0e4c9a1bd8bf8cc81dd15d1f0541ca0c4a54d","modified":1532018178583},{"_id":"source/_posts/Cocos2d iPhone 边缘触屏延迟现象.md","hash":"ee56759a2b773d951c808f75fd0d91b0b6fd77ee","modified":1534085189244},{"_id":"source/_posts/Cocos2d-lua ScrollView优化2.md","hash":"3d24dfb90f7615d72993500560b23aa5e7677dba","modified":1532018431222},{"_id":"source/_posts/Go环境搭建小记.md","hash":"7c24c5d635060754bfde55c66cf5412ae1f0e31c","modified":1531847110622},{"_id":"source/_posts/TreeHouse是怎样建成的.md","hash":"39ef0bc4bdbdda428add9f1e8444d55138c7bcf1","modified":1534087957456},{"_id":"source/_posts/TreeHouse装修指南之工具.md","hash":"d43effe52206b483a437b8514a0d3cb888c070ca","modified":1534088400109},{"_id":"source/_posts/TreeHouse装修指南之文章.md","hash":"296f7f782e3225428b2505a994009253fe4004c9","modified":1534088567474},{"_id":"source/_posts/TreeHouse装修指南之菜单.md","hash":"99475452465d6bde712941c0f73a133cd0f7d82b","modified":1534088444864},{"_id":"source/_posts/cocos2d-x 接入 GameCenter 排行榜与成就.md","hash":"821dc42268bea159118a72f96bf01d2f08a37a8c","modified":1532021189734},{"_id":"source/_posts/python dictionary & lua table.md","hash":"8d3bcb45e6adc588689c331084cf0ed2bfbff5ae","modified":1532018629469},{"_id":"source/_posts/python学习笔记.md","hash":"ee7b1ceae05168088a8c0ba0dbe42ce1250c03f3","modified":1532018783700},{"_id":"source/_posts/《REWORK》读记.md","hash":"f9308fca69400844e95ad2409c4e8d35e762e00f","modified":1531847110625},{"_id":"source/_posts/《三体》读感.md","hash":"84aece3fed2428cec45808c29d8cd587db513790","modified":1531847110625},{"_id":"source/_posts/《代码的整洁之道》读记.md","hash":"23f241dae18997c8188abab956c05f9569b60d38","modified":1531847110626},{"_id":"source/_posts/《天才在左，疯子在右》读记.md","hash":"bd6a5880b9519d4709e7c38391631c1e0d9b731b","modified":1531847110627},{"_id":"source/_posts/《我们仨》读记.md","hash":"55a755a1e747159ef2f041c6bc1291330ec4b81c","modified":1531847110627},{"_id":"source/_posts/《时间简史》读感.md","hash":"57f65edfa88aab778db803f662eb902f3d987480","modified":1531847110628},{"_id":"source/_posts/为什么要搞这个？.md","hash":"1803053a54a53d48329a6898228d0b2d37341260","modified":1531847110629},{"_id":"source/_posts/《生死疲劳》读感.md","hash":"5b59ae0b0e0e9335cd60281ed43549ffad3f2ba5","modified":1531847110629},{"_id":"source/_posts/删除文件名中的空格.md","hash":"c48e8fd7029fc6f1144745af6fc276a3c6d4639b","modified":1532018805569},{"_id":"source/_posts/用python发邮件.md","hash":"736ce22ea7e747c3fd7167ea30aa50f8746a66bb","modified":1532018822552},{"_id":"source/tags/index.md","hash":"d38b5ab020a769245722952437bff4f628709f03","modified":1531847110634},{"_id":"source/about/index.md","hash":"1fe2e8b5e8555c6197ac996aed21e3bb15a89698","modified":1531847110631},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1531747575090},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1531747463385},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1531747575095},{"_id":"themes/next/.git/index","hash":"2207e170faca2ec8f2fefc2dc959509065d81246","modified":1531747575251},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1531747575078},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1531747575105},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1531747575105},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1531747575105},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1531747575106},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1531747575111},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1531747575111},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1531747575111},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1531747575112},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1531747575112},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1531747575113},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1531747575114},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1531747575115},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1531747575113},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1531747575115},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1531747575115},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1531747575116},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1531747575116},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1531747575116},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1531747575117},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1531747575118},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1532020018115},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1531747575151},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1531747575151},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1531747575151},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1531747575152},{"_id":"themes/next/layout/post.swig","hash":"c2cca13c82a46017ff67a9f732d0424c2ffacb67","modified":1534083858183},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1531747575153},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1531747575153},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1531747575154},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1531747575155},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1531747575250},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1531747575250},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1531747575250},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531747575198},{"_id":"source/assets/img/ltree98.png","hash":"3a4a56f24cd563a01a57e65e2c2ad2d0a79fd1df","modified":1531847110632},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1531747463386},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1531747463388},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1531747463391},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1531747463390},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1531747463391},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1531747463394},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1531747463395},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1531747463397},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1531747463397},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1531747463398},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1531747463399},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1531747463399},{"_id":"themes/next/.git/logs/HEAD","hash":"aaed0660bd1d3601525e6d09b186f8e212245352","modified":1531747575091},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1531747575118},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1531747575120},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1531747575120},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"af26c38b651c9d3ab2efaf3671bb8eb3f872836d","modified":1534086825451},{"_id":"themes/next/layout/_macro/post.swig","hash":"8781d9ec4cebdf3c4ceae1bd742bbdcab2689137","modified":1534084720938},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1531747575121},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1531747575123},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1531747575124},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1531747575124},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1531747575125},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1531747575126},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1531747575127},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1531747575127},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1531747575128},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1531747575128},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1531747575132},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1531747575132},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1531747575135},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1531747575145},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1531747575145},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1531747575145},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1531747575147},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1531747575147},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1531747575147},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1531747575147},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1531747575156},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1531747575156},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1531747575156},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1531747575157},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1531747575157},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1531747575157},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1531747575158},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1531747575159},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1531747575159},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1531747575198},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1531747575198},{"_id":"themes/next/source/images/apple-touch-icon.png","hash":"10bb4e1569f8047ec6be5152c148319339984ed7","modified":1532105049518},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1531747575199},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1531747575199},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1531747575199},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1531747575200},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1531747575200},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1531747575200},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1531747575201},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1531747575201},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"e80068bc9fc677be3a19927846e5bdd0ffcf72d7","modified":1532105117953},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"09a7674db633b1e4e770de324f92e74ab29b7bcc","modified":1532105115929},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531747575201},{"_id":"themes/next/source/images/logo.svg","hash":"cb13852db63f2f9ffd2916a7cf6f4880b3568f9c","modified":1532104904364},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531747575202},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1531747575202},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1531747575202},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1531747575202},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531747575134},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531747575134},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531747575189},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531747575197},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531747575189},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531747575197},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531747575190},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1531747575091},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1531747575126},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1531747575126},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1531747575129},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1531747575129},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1531747575130},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1531747575131},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1531747575131},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1531747575131},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1531747575132},{"_id":"themes/next/layout/_partials/share/sharesdk.swig","hash":"e7cc41627628072cb790d0559056ad6653327538","modified":1534077944364},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1531747575133},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1531747575133},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1531747575134},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1531747575136},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1531747575136},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1531747575137},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1531747575137},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1531747575137},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1531747575138},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1531747575139},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1531747575139},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1531747575139},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1531747575140},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1531747575141},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1531747575141},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1531747575141},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1531747575142},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1531747575142},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1531747575142},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1531747575143},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1531747575143},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1531747575143},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1531747575144},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1531747575144},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1531747575145},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1531747575149},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1531747575149},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1531747575149},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1531747575150},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1531747575189},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1531747575190},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1531747575189},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"68b6859fb48fe8358e567fc324f218cecfc3a533","modified":1532365262579},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"95e2d3cac74156c673f1fde757d23ce9a68c5118","modified":1531840611021},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1531747575197},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1531840410339},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1531747575197},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1531747575203},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1531747575203},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1531747575204},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1531747575204},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1531747575203},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1531747575205},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1531747575204},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1531747575205},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1531747575206},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1531747575206},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1531747575207},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"6e47405feb1d480c2014996ccf536cac96e9ec36","modified":1532103767454},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1531747575211},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1531747575214},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1531747575215},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1531747575214},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1531747575220},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1531747575220},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1531747575221},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1531747575221},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1531747575222},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1531747575222},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1531747575223},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1531747575223},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1531747575223},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1531747575234},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1531747575235},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1531747575235},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1531747575235},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1531747575236},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1531747575236},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1531747575237},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1531747575237},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1531747575237},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1531747575238},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1531747575238},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1531747575238},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1531747575239},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1531747575239},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1531747575239},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1531747575240},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1531747575240},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1531747575240},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1531747575240},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1531747575240},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1531747575241},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1531747575241},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1531747575241},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1531747575241},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1531747575242},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1531747575242},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1531747575242},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1531747575247},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1531747575247},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1531747575249},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1531747575249},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1531747575249},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1531747575235},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"aaed0660bd1d3601525e6d09b186f8e212245352","modified":1531747575093},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1531747575089},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1531747575148},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1531747575148},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1531747575160},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1531747575160},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1531747575161},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1531747575161},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1531747575161},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1531747575168},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1531747575178},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1531747575187},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1531747575187},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1531747575187},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1531747575187},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1531747575188},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1531747575188},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1531747575188},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1531747575190},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1531747575191},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1531747575191},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1531747575191},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1531747575191},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1531747575192},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1531747575191},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1531747575192},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1531747575195},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1531747575195},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1531747575195},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1531747575196},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1531747575196},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1531747575196},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1531747575193},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1531747575194},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1531747575194},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1531747575194},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1531747575194},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1531747575206},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1531747575209},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1531747575211},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1531747575210},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1531747575215},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1531747575215},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1531747575216},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1531747575215},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1531747575216},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1531747575219},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1531747575216},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1531747575219},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1531747575220},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1531747575221},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1531747575222},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1531747575224},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1531747575224},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1531747575224},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1531747575246},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1531747575246},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1531747575210},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1531747575233},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1531747575234},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1531747575248},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"aaed0660bd1d3601525e6d09b186f8e212245352","modified":1531747575089},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1531747575163},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1531747575165},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1531747575165},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1531747575163},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1531747575163},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1531747575166},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1531747575164},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1531840792276},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1531747575164},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1531747575167},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1531747575167},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1531747575167},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1531747575167},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1531747575168},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1531747575169},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1531839663771},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1531747575170},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1531838306387},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1531838315775},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1531747575171},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1531747575172},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1531747575172},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1531747575172},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1531747575173},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1531747575173},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1531747575173},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1531747575173},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1531747575174},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"6be9cf248df8e47bdb1ccc3394498838b2b68006","modified":1532966814886},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1531747575174},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"0e1359267fbd5f0fa70ca6c0ada071a38b0f9565","modified":1532362204947},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1531747575175},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1531747575176},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1531747575176},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1531747575177},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1531747575177},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1531747575177},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1531747575178},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1531747575178},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1531747575179},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1531747575180},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1531747575180},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1531747575180},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1531747575183},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1531747575180},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1531747575183},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1531747575183},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1531747575183},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1531747575184},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1531747575184},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1531747575184},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1531747575184},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1531747575185},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1531747575185},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1531747575186},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1531747575186},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1531747575186},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1531747575186},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1531747575193},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1531747575193},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1531747575195},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1531747575207},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1531747575208},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1531747575209},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1531747575208},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1531747575208},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1531747575217},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1531747575217},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1531747575218},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1531747575217},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1531747575218},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1531747575219},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1531747575226},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1531747575228},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1531747575232},{"_id":"themes/next/.git/objects/pack/pack-30a62047db825c29862367a57fb4121cf6d92feb.idx","hash":"8f0c72499de301e3bca267f0bdd3568f561f88dc","modified":1531747574169},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1531747575213},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1531747575245},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1531747575230},{"_id":"themes/next/.git/objects/pack/pack-30a62047db825c29862367a57fb4121cf6d92feb.pack","hash":"9ad9de360c43a67068d2438f2c83a469a48d8d74","modified":1531747575013},{"_id":"public/404/index.html","hash":"de15f5f664e42d2e7c6cdf57a1673986edaa1fb7","modified":1534088057435},{"_id":"public/categories/index.html","hash":"f634330cd64b4aadcd1119aaabc8156af287c879","modified":1534088057435},{"_id":"public/tags/index.html","hash":"dc9fdfacf6fa594653da830d857ea8b109891d5b","modified":1534088057435},{"_id":"public/about/index.html","hash":"92feba02b94f197a9acdc4e265feae36f3e2027c","modified":1534088057435},{"_id":"public/archives/2016/01/index.html","hash":"3e24b49569bcb143b120ab737ca2484afe94f4fc","modified":1534088057435},{"_id":"public/archives/2016/07/index.html","hash":"6bad982116a84cdf727b6b16788e304a1ba85ad1","modified":1534088057435},{"_id":"public/archives/2016/10/index.html","hash":"323200d49100542e7b56da02f4ccbefc780d3456","modified":1534088057435},{"_id":"public/archives/2017/01/index.html","hash":"c2a2d1467cb61a6d22da7d458106401ec1f234c2","modified":1534088057435},{"_id":"public/archives/2017/02/index.html","hash":"95041711a4b26317dcf8f40b284480f7aae76e3f","modified":1534088057435},{"_id":"public/archives/2017/03/index.html","hash":"0dac56d388c86b1f78b40c97ad9cba0b60459fd3","modified":1534088057435},{"_id":"public/archives/2017/04/index.html","hash":"ac8b8f4a90d330e5d62b7db6c0c2b9424b51bdc1","modified":1534088057435},{"_id":"public/archives/2017/05/index.html","hash":"fd12d80b3cfff09ab3796b2885f0ae2897afe361","modified":1534088057436},{"_id":"public/archives/2017/07/index.html","hash":"5125cea474a26177b7e0933a6871f95f91f1812f","modified":1534088057436},{"_id":"public/archives/2018/04/index.html","hash":"77eafcd39cfde684d04e77037d0414348092cb79","modified":1534088057436},{"_id":"public/archives/2018/05/index.html","hash":"215a0c673b0fc0bb4d4fb2a73c4c6581de1d0ea3","modified":1534088057436},{"_id":"public/archives/2018/06/index.html","hash":"bbfe0041697e7811ebd90579811501bec2a8a6c8","modified":1534088057436},{"_id":"public/tags/跟着学/index.html","hash":"35bb6c0f6d39ce598e6a34034b327a5b79db1a0d","modified":1534088057436},{"_id":"public/tags/Go/index.html","hash":"4254947360c2e84712ac849c57d3edfb353af4d3","modified":1534088057436},{"_id":"public/2018/06/05/Cocos2d-lua ScrollView优化2/index.html","hash":"cb0e5089b8a89b0f37c68f0d009f7e73a69c0e2a","modified":1534088057436},{"_id":"public/2018/06/06/Cocos2d iPhone 边缘触屏延迟现象/index.html","hash":"b8981ed9f20c08e22b9ba1b622fda2873e24708a","modified":1534088057436},{"_id":"public/2018/05/28/python dictionary & lua table/index.html","hash":"7ade0136a6a6642f698bb79b93c7bccedc22a157","modified":1534088057436},{"_id":"public/2018/04/03/2017,  迷不茫/index.html","hash":"d939fecc85127bc8272df80204874b58f918b6b7","modified":1534088057436},{"_id":"public/2018/05/21/Cocos2d-lua ScrollView优化1/index.html","hash":"80fc38b970e348a8b215c88a5e1fd3b21c28d732","modified":1534088057436},{"_id":"public/2017/07/30/《天才在左，疯子在右》读记/index.html","hash":"773defe6ddf10606d5aa14bbd803e3c081a0636f","modified":1534088057437},{"_id":"public/2017/05/30/《我们仨》读记/index.html","hash":"0f0f533e3446fc380bbdb8366403779c94f742ab","modified":1534088057437},{"_id":"public/2017/04/29/cocos2d-x 接入 GameCenter 排行榜与成就/index.html","hash":"ba87aaf2b9058d62dd19ee0d090947ff37779a3c","modified":1534088057437},{"_id":"public/2017/03/23/Go环境搭建小记/index.html","hash":"01ab0cefc437974c05b229415fb6bd50ab9b617d","modified":1534088057437},{"_id":"public/2017/03/14/《时间简史》读感/index.html","hash":"a0ec6df0eba61faf0a3c7c260bce303a927e2318","modified":1534088057437},{"_id":"public/2017/02/13/《三体》读感/index.html","hash":"d1887c3d2c89cde1fbd760e3afb13ef288cba5b8","modified":1534088057437},{"_id":"public/2017/01/23/2016，没走偏/index.html","hash":"7180b6f06cc89a8147abd3a9999c5e13231dd0ab","modified":1534088057437},{"_id":"public/2016/11/22/python学习笔记/index.html","hash":"cd385633a4fd2c24d6382949a3e59541fca5d65f","modified":1534088057437},{"_id":"public/2016/11/20/《REWORK》读记/index.html","hash":"d404cacc1e77e485cdcd4eaee999aa83645231d5","modified":1534088057437},{"_id":"public/2016/11/04/用python发邮件/index.html","hash":"1b70cb557faf0e62e0bc79bb2d011fc4d7ad987e","modified":1534088057437},{"_id":"public/2016/11/02/删除文件名中的空格/index.html","hash":"29b06cdb7a09ca4001762dd8c2d49e2c725b0a2a","modified":1534088057437},{"_id":"public/2016/10/13/《代码的整洁之道》读记/index.html","hash":"076af48dc193f85faccff14a516425055a40d3d0","modified":1534088057437},{"_id":"public/2016/07/25/《生死疲劳》读感/index.html","hash":"050a8889fb8d5cd53b1b275277be0240e3c35e58","modified":1534088057437},{"_id":"public/2016/07/20/为什么要搞这个？/index.html","hash":"7c9bdfb7be7a6545018695ff64f2c7c43fea6129","modified":1534088057437},{"_id":"public/2016/01/03/2015，学剑/index.html","hash":"6149383e611edb51e2f57ca27d4ecf3e3171bf2c","modified":1534088057437},{"_id":"public/archives/index.html","hash":"82072281336d7b4d4ab1c25b67e6ab91d18693f2","modified":1534088057437},{"_id":"public/archives/page/2/index.html","hash":"ef7621b45030364e42b51e803cc1ab336f0eb906","modified":1534088057437},{"_id":"public/archives/2016/index.html","hash":"f26904a7568a5c572940fc970f168fd054fa039e","modified":1534088057438},{"_id":"public/archives/2016/11/index.html","hash":"b513273b60277e3814c0b8622393fc9a761f3eef","modified":1534088057438},{"_id":"public/archives/2017/index.html","hash":"c9c64343fcaed5fb4d08c24bb8dbcb6fcf786d9a","modified":1534088057438},{"_id":"public/archives/2018/index.html","hash":"77cd8e8de8189b7b15c58f8df37d7973f1bd1e8e","modified":1534088057438},{"_id":"public/tags/抽空写/index.html","hash":"82bd6493cd2d5f10483162a1ca25199ae2342c73","modified":1534088057438},{"_id":"public/tags/cocos2d/index.html","hash":"7dc76eee6f8162491be79acb0c3521eaf8cb0019","modified":1534088057438},{"_id":"public/tags/想就做/index.html","hash":"23334a910a0257c77af71b8831efec5b0751f220","modified":1534088057438},{"_id":"public/tags/看着读/index.html","hash":"af0d4e868cf2fe03b20488d215f4ace9f238fba5","modified":1534088057438},{"_id":"public/index.html","hash":"7c1128d18460cfba38e827f3cc61687bb6ec28cd","modified":1534088576527},{"_id":"public/page/2/index.html","hash":"610da3c9403277686c8ca96d9436c29ab67a10a8","modified":1534088057438},{"_id":"public/tags/想就做/page/2/index.html","hash":"8322b261c6283da092c5dcecf5f64e35f830ab0e","modified":1534087975812},{"_id":"public/2018/07/17/TreeHouse装修指南之菜单/index.html","hash":"a3c4baf9a6f1b02eb2512dcbcfb08fa0cc134c26","modified":1534088452705},{"_id":"public/2018/07/17/TreeHouse是怎样建成的/index.html","hash":"e87ec9f6308446aaa4cc7c910f80baaa29716f04","modified":1534087975812},{"_id":"public/2018/07/17/TreeHouse装修指南之工具/index.html","hash":"4af90f0a70ef5d6efba92fd059e223ad720a350c","modified":1534088452705},{"_id":"public/2018/07/17/TreeHouse装修指南之文章/index.html","hash":"1e31c209bfd4de858e86ce9de019a032f8223118","modified":1534088576527},{"_id":"public/archives/page/3/index.html","hash":"83cd45deccf1270f9b002dad16cf0d1465f1ca4f","modified":1534088057438},{"_id":"public/archives/2018/07/index.html","hash":"e61b3120aaee9e31fb16f1ec693b59290aca8eb9","modified":1534088057438},{"_id":"public/tags/hexo搭建/index.html","hash":"872b4aa0bc2fb18405922b7ba403e9b744841b15","modified":1534088057436},{"_id":"public/page/3/index.html","hash":"6f75c7c06b69046ca8e972248056679de2e36bd3","modified":1534088057438},{"_id":"public/CNAME","hash":"a8120c4aefba5810512dc03620ff6cdd8e08346f","modified":1534087975816},{"_id":"public/assets/img/ltree98.png","hash":"3a4a56f24cd563a01a57e65e2c2ad2d0a79fd1df","modified":1534087975816},{"_id":"public/images/apple-touch-icon.png","hash":"10bb4e1569f8047ec6be5152c148319339984ed7","modified":1534087975816},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1534087975816},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534087975816},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1534087975816},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1534087975816},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1534087975816},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1534087975816},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1534087975816},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1534087975816},{"_id":"public/images/favicon-16x16.png","hash":"e80068bc9fc677be3a19927846e5bdd0ffcf72d7","modified":1534087975816},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1534087975816},{"_id":"public/images/favicon-32x32.png","hash":"09a7674db633b1e4e770de324f92e74ab29b7bcc","modified":1534087975816},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534087975817},{"_id":"public/images/logo.svg","hash":"cb13852db63f2f9ffd2916a7cf6f4880b3568f9c","modified":1534087975817},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1534087975817},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534087975817},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534087975817},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1534087975817},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1534087975817},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1534087975817},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1534087975817},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1534087975817},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1534087975817},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1534087975817},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1534087975817},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1534087975817},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1534087975817},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1534087975817},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1534087975817},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1534087975817},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1534087975817},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1534087975817},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1534087975817},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1534087976324},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1534087976329},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1534087976343},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1534087976343},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1534087976343},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1534087976343},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1534087976343},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1534087976343},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1534087976343},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1534087976343},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1534087976343},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1534087976343},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"6e47405feb1d480c2014996ccf536cac96e9ec36","modified":1534087976343},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1534087976343},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1534087976343},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1534087976343},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1534087976343},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1534087976343},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1534087976343},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1534087976344},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1534087976344},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1534087976345},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1534087976345},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1534087976345},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1534087976345},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1534087976345},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1534087976345},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1534087976345},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1534087976345},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1534087976345},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1534087976345},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1534087976345},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1534087976345},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1534087976345},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1534087976345},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1534087976346},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1534087976346},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1534087976346},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1534087976346},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1534087976346},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1534087976346},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1534087976346},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1534087976346},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1534087976346},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1534087976346},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1534087976346},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1534087976346},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1534087976346},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1534087976346},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1534087976346},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1534087976346},{"_id":"public/css/main.css","hash":"70bb049b89357a25258e1963128fba986d598014","modified":1534087976346},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1534087976346},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1534087976347},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1534087976347},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1534087976347},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1534087976347},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1534087976347},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1534087976347},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1534087976347},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1534087976347},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1534087976347},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1534087976347},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1534087976347},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1534087976347},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1534087976347},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1534087976347},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1534087976347},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1534087976347},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1534087976347},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1534087976347},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1534087976348},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1534087976348},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1534087976348},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1534087976348},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1534087976372}],"Category":[],"Data":[],"Page":[{"_content":"<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404/index.html","raw":"<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-07-30T16:36:51.641Z","updated":"2018-07-30T16:30:35.981Z","path":"404/index.html","title":"","comments":1,"layout":"page","_id":"cjkr0dbbk0000esvqzyikknqi","content":"<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"categories","date":"2018-07-16T16:01:52.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-07-17 00:01:52\n---\n","updated":"2018-07-17T17:05:10.633Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjkr0dbbp0002esvq75txkdf0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-07-16T16:02:52.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-17 00:02:52\n---\n","updated":"2018-07-17T17:05:10.634Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjkr0dbbt0005esvqbwx8xr19","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2018-07-16T16:01:23.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-07-17 00:01:23\n---\n","updated":"2018-07-17T17:05:10.631Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjkr0dbbv0007esvqfhqnqf7l","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2017, 迷不茫","date":"2018-04-03T15:44:35.000Z","_content":"\n2017都过去了4个月，\n才有空，好好写写  过去的这一年。\n\n<!-- more -->\n\n<br/>\n\n---\n\n2017 - 2018, 发生了很多事，按时间段来分：\n1.A公司 倒闭\n2.加入&离开 B公司\n3.加入 C公司\n\n---\n\n<br/>\n\n# A公司 Over\n\n其实，早就预感到了这一天的到来。\n薪酬已经很低了，依旧留到最后。\n首先，我还是比较感性一些，我在A公司呆了近两年的时间，我从没毕业实习就在这。\n其次，我在这里能学到很多东西，同伴都是很资深且专业的人。\n最后，我喜欢这个公司的氛围，喜欢大家一起工作共事的感觉。\n\n最后做的TCG游戏的框架模式，也是我所喜欢的类型。\n就像女巫去熬制药剂一样，我们负责提供原材料；策划通过不同原材料的比例来合成不同的东西。\n\n最后没有撑下去，从我的角度来总结就是：\n1.版号的限制。\n这是最主要的问题，我们主要眼光放在了 中国的苹果市场，在游戏基本完成时，恰好赶上版号限制。那时候由于是版号政策刚刚实行，还是比较严格，公司有耗了大半年吧。\n2.目标过于单一\n这是后来，我入职B公司以后，才想到的。如同第一个问题，过于纠结 中国的苹果市场；相应的苹果海外市场及安卓海外市场也是可以去考虑的。对于技术来说，改成多语言版本，并不是难题。\n当然也有几个问题，我没有仔细考虑：\n- 做海外市场的推广，如何进行。A公司是研发团队，对运营及发行，完全没有能力。\n- 所做的题材是 西游题材，海外对此的接受程度如何。\n\n3.游戏选型\n这是，我从开始就隐隐担忧的事情。做的是对战类型的游戏，它不像很多游戏，发行有很多技巧去让游戏营收。这种游戏，更重玩家数量，要的就是与人斗，其乐无穷的效果。一个小公司去研发这种类型的游戏，着实不能让我有信心。虽然，最后决定要在对战AI上弥补人数不足的问题，但是，感觉还是有些差那么一丢丢。（让AI 充个648！）\n\n但是，我并不是老板，也不是专业的人员。所以，我的想法仅仅是从我能看到的方面去考虑。这里面我肯定疏忽了很多东西，毕竟，老板他们都是专业的，都在这个行业做了十几年，比我这个小菜鸟懂得太多了。\n\n然后，就是在A公司的收获吧：\n1.技术\n虽然游戏不是很大，但是整个一套流程，及周边一些相关开发（SDK接入；ios平台上，针对Object-C代码的修改；android平台上，针对java代码的修改；等等...）\n2.团队\n一个对的团队是很重要的，三观基本一致，朝着共同的目标去奋斗，鼓励学习，追求高效。还记得凯神拿着大长刀演示，人物挥动武器时重心的变化，手的位置，发力点等；涛哥又捣鼓出了一个android应用，附近的人的聊天室...\n3.无悔\n在一个公司，心甘情愿的留到最后。这真的不是很容易的事情。因为这个游戏是我喜欢做的，虽然不是独一无二的原创，但是无论是玩法，还是游戏表现，还是做游戏的过程，都让我对它有信心。我感觉到自己是在开发一款游戏，美术对设计一丝不苟，吹毛求疵，策划对数值不断优化测试。不管怎么说，有过这么一次经历，也无悔了。\n\n\n<br/>\n\n# B公司的入职与离职\n\nA公司over以后，就开始要找工作了...\n毕竟我也不是什么富二代啥的，在A公司由于一直在研发，也没有很高的收入，再加上女朋友也在身边，所以经济压力比较大。然后就没有花很长的时间去找一个工作。最后在很多公司中，选择了B公司。\n我选择B公司的原因如下：\n- 资金充裕，游戏已经上线，营收虽然不多，但是基本能够自给自足，正在优化准备大力推广阶段。\n- 扁平化的团队，其他同事的技术水平都比较高。\n- 大公司的孵化团队，有很好的资源。\n- 主攻海外市场的细分领域，目标明确且合理。\n\n在这家公司也呆了快一年的时间。老板和同事都挺好，由于个人原因吧，最终还是选择了离职。其实，用大白话来说，任何一个小型的团队，在维护**基本**团队建设基础上，最重要的一件事，还是**做成一款产品**。\n我离职，也是想了很久才下决定的，因为同事关系都挺好，也一起呆了这么久，真的不容易。\n我离职的原因如下：\n1.技术\n最主要的原因。不能说在这个公司没有学到技术，只是提升速度有些缓慢。因为偏向于换皮一类，技术提升还是有限度的。我希望提升的速度更快一些。\n2.时间\n个人喜好吧，我还是喜欢折腾一些东西，所以，我希望有一些自己的时间去做一些东西。但是工作时间有些长，休息都不够，更不用提其他的一些东西。这也是我有近大半年没有写过东西的原因之一（懒惰是原罪= =..）\n3.观念\n我目前是处于学习阶段，但其他同事都是工作了5年6年，甚至9年10年的。他们是想用自己所学的东西来变现的阶段。所以，很多东西就可能有些冲突。我不想太过于牺牲我自己来成全团队，这如同一场豪赌，赌赢了还好，若是输了...毕竟，我现在的半年和五年以后的半年，价值是不一样的。\n\n在A公司，我坚持到了最后，是因为对我技术提升有很大的帮助。在B公司，收入是足够的，但是我还是离开，因为和我个人发展的确有冲突。我觉得对我不公平，对公司也不公平。所以，选择了离开。\n\n我在B公司也学到的最主要的几个词：快速迭代，快速试错，搜集数据，重视反馈。\n\n\n<br/>\n\n# 加入C公司\n\n这次找工作目标，其实挺明确的。\n我去面试的时候，也没有藏着掖着；虽然面试有很多套路，很多技巧；但我觉得那都不是长久之计，适当的坦诚，真的很有必要。\n公司招人，肯定看中下面几方面：\n- 能不能干活\n- 能不能留下\n- 能不能学习\n\n再往后才是薪资什么的\n面试官，往往能分析到能不能干活和能不能学习；对于能不能留下，不好判断。\n所以，我面试的时候，往往会表达出我所看重的东西，我所期望的东西 —— 个人的成长和进步；也正因为如此，有很多机会我都错过了。\n其实，我觉得个人的进步和发展和工作并不冲突；在工作能力胜任的基础上，个人的每一分成长都会对工作产生积极正面的影响，但是，往往会被认为我会误工，对工作不认真不努力。\n对此，我也只能抱歉离开。\n\n选择C公司，真的是因为三观很合，无论是技术还是负责人。公司更看重功劳而非苦劳，鼓励高效率工作，而非低效率磨工，等等方案，当让我很有亲切感，归属感。\n而且，入职以来，很多事情都验证了我的选择的正确性。\n\n\n<br/>\n\n# 这两段经历的总结\n\n这几年，我一直贯彻着，个人发展重于其他，不将就，不妥协。\n但是还是或由于个人情感，或其他，将就了一些，妥协了一些。\n正如我这篇文章的题目 迷 但不 茫。\n过去这几年很迷，因为我目标明确了，但是却没有准确的实施下来。\n过去这几年不茫，因为我还是朝着我的方向在走。\n通过这几年的经验，最起码让我眼界扩宽了；身边的同事都比我资深，很有经验，有想法，与他们的合作与交流，让我进步很多。\n\n<br/>\n\n# 接下来\n\n1.工作上\n找一个对口的公司很重要，既然找到了，那就去做好它。\n现在证明了我选择它，我选对了；接下来要给它看，它选择我，同样也是正确的。\n\n2.生活上\n恢复博客的更新，个人主页的更新。\n以后，还是会维护CSDN和个人主页，各有侧重。\n博客，更侧重于算法上的一些东西；个人主页，更多的是一些杂谈感想还有技术。\n\n<br/>\n<br/>\n<br/>\n\n---\n\n然后，拨开迷雾，再度起航！\n\n\n\n","source":"_posts/2017,  迷不茫.md","raw":"\n---\ntitle: 2017, 迷不茫\ndate: 2018-04-03 23:44:35\ntags: 抽空写\n\n---\n\n2017都过去了4个月，\n才有空，好好写写  过去的这一年。\n\n<!-- more -->\n\n<br/>\n\n---\n\n2017 - 2018, 发生了很多事，按时间段来分：\n1.A公司 倒闭\n2.加入&离开 B公司\n3.加入 C公司\n\n---\n\n<br/>\n\n# A公司 Over\n\n其实，早就预感到了这一天的到来。\n薪酬已经很低了，依旧留到最后。\n首先，我还是比较感性一些，我在A公司呆了近两年的时间，我从没毕业实习就在这。\n其次，我在这里能学到很多东西，同伴都是很资深且专业的人。\n最后，我喜欢这个公司的氛围，喜欢大家一起工作共事的感觉。\n\n最后做的TCG游戏的框架模式，也是我所喜欢的类型。\n就像女巫去熬制药剂一样，我们负责提供原材料；策划通过不同原材料的比例来合成不同的东西。\n\n最后没有撑下去，从我的角度来总结就是：\n1.版号的限制。\n这是最主要的问题，我们主要眼光放在了 中国的苹果市场，在游戏基本完成时，恰好赶上版号限制。那时候由于是版号政策刚刚实行，还是比较严格，公司有耗了大半年吧。\n2.目标过于单一\n这是后来，我入职B公司以后，才想到的。如同第一个问题，过于纠结 中国的苹果市场；相应的苹果海外市场及安卓海外市场也是可以去考虑的。对于技术来说，改成多语言版本，并不是难题。\n当然也有几个问题，我没有仔细考虑：\n- 做海外市场的推广，如何进行。A公司是研发团队，对运营及发行，完全没有能力。\n- 所做的题材是 西游题材，海外对此的接受程度如何。\n\n3.游戏选型\n这是，我从开始就隐隐担忧的事情。做的是对战类型的游戏，它不像很多游戏，发行有很多技巧去让游戏营收。这种游戏，更重玩家数量，要的就是与人斗，其乐无穷的效果。一个小公司去研发这种类型的游戏，着实不能让我有信心。虽然，最后决定要在对战AI上弥补人数不足的问题，但是，感觉还是有些差那么一丢丢。（让AI 充个648！）\n\n但是，我并不是老板，也不是专业的人员。所以，我的想法仅仅是从我能看到的方面去考虑。这里面我肯定疏忽了很多东西，毕竟，老板他们都是专业的，都在这个行业做了十几年，比我这个小菜鸟懂得太多了。\n\n然后，就是在A公司的收获吧：\n1.技术\n虽然游戏不是很大，但是整个一套流程，及周边一些相关开发（SDK接入；ios平台上，针对Object-C代码的修改；android平台上，针对java代码的修改；等等...）\n2.团队\n一个对的团队是很重要的，三观基本一致，朝着共同的目标去奋斗，鼓励学习，追求高效。还记得凯神拿着大长刀演示，人物挥动武器时重心的变化，手的位置，发力点等；涛哥又捣鼓出了一个android应用，附近的人的聊天室...\n3.无悔\n在一个公司，心甘情愿的留到最后。这真的不是很容易的事情。因为这个游戏是我喜欢做的，虽然不是独一无二的原创，但是无论是玩法，还是游戏表现，还是做游戏的过程，都让我对它有信心。我感觉到自己是在开发一款游戏，美术对设计一丝不苟，吹毛求疵，策划对数值不断优化测试。不管怎么说，有过这么一次经历，也无悔了。\n\n\n<br/>\n\n# B公司的入职与离职\n\nA公司over以后，就开始要找工作了...\n毕竟我也不是什么富二代啥的，在A公司由于一直在研发，也没有很高的收入，再加上女朋友也在身边，所以经济压力比较大。然后就没有花很长的时间去找一个工作。最后在很多公司中，选择了B公司。\n我选择B公司的原因如下：\n- 资金充裕，游戏已经上线，营收虽然不多，但是基本能够自给自足，正在优化准备大力推广阶段。\n- 扁平化的团队，其他同事的技术水平都比较高。\n- 大公司的孵化团队，有很好的资源。\n- 主攻海外市场的细分领域，目标明确且合理。\n\n在这家公司也呆了快一年的时间。老板和同事都挺好，由于个人原因吧，最终还是选择了离职。其实，用大白话来说，任何一个小型的团队，在维护**基本**团队建设基础上，最重要的一件事，还是**做成一款产品**。\n我离职，也是想了很久才下决定的，因为同事关系都挺好，也一起呆了这么久，真的不容易。\n我离职的原因如下：\n1.技术\n最主要的原因。不能说在这个公司没有学到技术，只是提升速度有些缓慢。因为偏向于换皮一类，技术提升还是有限度的。我希望提升的速度更快一些。\n2.时间\n个人喜好吧，我还是喜欢折腾一些东西，所以，我希望有一些自己的时间去做一些东西。但是工作时间有些长，休息都不够，更不用提其他的一些东西。这也是我有近大半年没有写过东西的原因之一（懒惰是原罪= =..）\n3.观念\n我目前是处于学习阶段，但其他同事都是工作了5年6年，甚至9年10年的。他们是想用自己所学的东西来变现的阶段。所以，很多东西就可能有些冲突。我不想太过于牺牲我自己来成全团队，这如同一场豪赌，赌赢了还好，若是输了...毕竟，我现在的半年和五年以后的半年，价值是不一样的。\n\n在A公司，我坚持到了最后，是因为对我技术提升有很大的帮助。在B公司，收入是足够的，但是我还是离开，因为和我个人发展的确有冲突。我觉得对我不公平，对公司也不公平。所以，选择了离开。\n\n我在B公司也学到的最主要的几个词：快速迭代，快速试错，搜集数据，重视反馈。\n\n\n<br/>\n\n# 加入C公司\n\n这次找工作目标，其实挺明确的。\n我去面试的时候，也没有藏着掖着；虽然面试有很多套路，很多技巧；但我觉得那都不是长久之计，适当的坦诚，真的很有必要。\n公司招人，肯定看中下面几方面：\n- 能不能干活\n- 能不能留下\n- 能不能学习\n\n再往后才是薪资什么的\n面试官，往往能分析到能不能干活和能不能学习；对于能不能留下，不好判断。\n所以，我面试的时候，往往会表达出我所看重的东西，我所期望的东西 —— 个人的成长和进步；也正因为如此，有很多机会我都错过了。\n其实，我觉得个人的进步和发展和工作并不冲突；在工作能力胜任的基础上，个人的每一分成长都会对工作产生积极正面的影响，但是，往往会被认为我会误工，对工作不认真不努力。\n对此，我也只能抱歉离开。\n\n选择C公司，真的是因为三观很合，无论是技术还是负责人。公司更看重功劳而非苦劳，鼓励高效率工作，而非低效率磨工，等等方案，当让我很有亲切感，归属感。\n而且，入职以来，很多事情都验证了我的选择的正确性。\n\n\n<br/>\n\n# 这两段经历的总结\n\n这几年，我一直贯彻着，个人发展重于其他，不将就，不妥协。\n但是还是或由于个人情感，或其他，将就了一些，妥协了一些。\n正如我这篇文章的题目 迷 但不 茫。\n过去这几年很迷，因为我目标明确了，但是却没有准确的实施下来。\n过去这几年不茫，因为我还是朝着我的方向在走。\n通过这几年的经验，最起码让我眼界扩宽了；身边的同事都比我资深，很有经验，有想法，与他们的合作与交流，让我进步很多。\n\n<br/>\n\n# 接下来\n\n1.工作上\n找一个对口的公司很重要，既然找到了，那就去做好它。\n现在证明了我选择它，我选对了；接下来要给它看，它选择我，同样也是正确的。\n\n2.生活上\n恢复博客的更新，个人主页的更新。\n以后，还是会维护CSDN和个人主页，各有侧重。\n博客，更侧重于算法上的一些东西；个人主页，更多的是一些杂谈感想还有技术。\n\n<br/>\n<br/>\n<br/>\n\n---\n\n然后，拨开迷雾，再度起航！\n\n\n\n","slug":"2017,  迷不茫","published":1,"updated":"2018-07-17T17:05:10.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbbm0001esvq2i68zj5f","content":"<p>2017都过去了4个月，<br>才有空，好好写写  过去的这一年。</p>\n<a id=\"more\"></a>\n<p><br></p>\n<hr>\n<p>2017 - 2018, 发生了很多事，按时间段来分：<br>1.A公司 倒闭<br>2.加入&amp;离开 B公司<br>3.加入 C公司</p>\n<hr>\n<p><br></p>\n<h1 id=\"A公司-Over\"><a href=\"#A公司-Over\" class=\"headerlink\" title=\"A公司 Over\"></a>A公司 Over</h1><p>其实，早就预感到了这一天的到来。<br>薪酬已经很低了，依旧留到最后。<br>首先，我还是比较感性一些，我在A公司呆了近两年的时间，我从没毕业实习就在这。<br>其次，我在这里能学到很多东西，同伴都是很资深且专业的人。<br>最后，我喜欢这个公司的氛围，喜欢大家一起工作共事的感觉。</p>\n<p>最后做的TCG游戏的框架模式，也是我所喜欢的类型。<br>就像女巫去熬制药剂一样，我们负责提供原材料；策划通过不同原材料的比例来合成不同的东西。</p>\n<p>最后没有撑下去，从我的角度来总结就是：<br>1.版号的限制。<br>这是最主要的问题，我们主要眼光放在了 中国的苹果市场，在游戏基本完成时，恰好赶上版号限制。那时候由于是版号政策刚刚实行，还是比较严格，公司有耗了大半年吧。<br>2.目标过于单一<br>这是后来，我入职B公司以后，才想到的。如同第一个问题，过于纠结 中国的苹果市场；相应的苹果海外市场及安卓海外市场也是可以去考虑的。对于技术来说，改成多语言版本，并不是难题。<br>当然也有几个问题，我没有仔细考虑：</p>\n<ul>\n<li>做海外市场的推广，如何进行。A公司是研发团队，对运营及发行，完全没有能力。</li>\n<li>所做的题材是 西游题材，海外对此的接受程度如何。</li>\n</ul>\n<p>3.游戏选型<br>这是，我从开始就隐隐担忧的事情。做的是对战类型的游戏，它不像很多游戏，发行有很多技巧去让游戏营收。这种游戏，更重玩家数量，要的就是与人斗，其乐无穷的效果。一个小公司去研发这种类型的游戏，着实不能让我有信心。虽然，最后决定要在对战AI上弥补人数不足的问题，但是，感觉还是有些差那么一丢丢。（让AI 充个648！）</p>\n<p>但是，我并不是老板，也不是专业的人员。所以，我的想法仅仅是从我能看到的方面去考虑。这里面我肯定疏忽了很多东西，毕竟，老板他们都是专业的，都在这个行业做了十几年，比我这个小菜鸟懂得太多了。</p>\n<p>然后，就是在A公司的收获吧：<br>1.技术<br>虽然游戏不是很大，但是整个一套流程，及周边一些相关开发（SDK接入；ios平台上，针对Object-C代码的修改；android平台上，针对java代码的修改；等等…）<br>2.团队<br>一个对的团队是很重要的，三观基本一致，朝着共同的目标去奋斗，鼓励学习，追求高效。还记得凯神拿着大长刀演示，人物挥动武器时重心的变化，手的位置，发力点等；涛哥又捣鼓出了一个android应用，附近的人的聊天室…<br>3.无悔<br>在一个公司，心甘情愿的留到最后。这真的不是很容易的事情。因为这个游戏是我喜欢做的，虽然不是独一无二的原创，但是无论是玩法，还是游戏表现，还是做游戏的过程，都让我对它有信心。我感觉到自己是在开发一款游戏，美术对设计一丝不苟，吹毛求疵，策划对数值不断优化测试。不管怎么说，有过这么一次经历，也无悔了。</p>\n<p><br></p>\n<h1 id=\"B公司的入职与离职\"><a href=\"#B公司的入职与离职\" class=\"headerlink\" title=\"B公司的入职与离职\"></a>B公司的入职与离职</h1><p>A公司over以后，就开始要找工作了…<br>毕竟我也不是什么富二代啥的，在A公司由于一直在研发，也没有很高的收入，再加上女朋友也在身边，所以经济压力比较大。然后就没有花很长的时间去找一个工作。最后在很多公司中，选择了B公司。<br>我选择B公司的原因如下：</p>\n<ul>\n<li>资金充裕，游戏已经上线，营收虽然不多，但是基本能够自给自足，正在优化准备大力推广阶段。</li>\n<li>扁平化的团队，其他同事的技术水平都比较高。</li>\n<li>大公司的孵化团队，有很好的资源。</li>\n<li>主攻海外市场的细分领域，目标明确且合理。</li>\n</ul>\n<p>在这家公司也呆了快一年的时间。老板和同事都挺好，由于个人原因吧，最终还是选择了离职。其实，用大白话来说，任何一个小型的团队，在维护<strong>基本</strong>团队建设基础上，最重要的一件事，还是<strong>做成一款产品</strong>。<br>我离职，也是想了很久才下决定的，因为同事关系都挺好，也一起呆了这么久，真的不容易。<br>我离职的原因如下：<br>1.技术<br>最主要的原因。不能说在这个公司没有学到技术，只是提升速度有些缓慢。因为偏向于换皮一类，技术提升还是有限度的。我希望提升的速度更快一些。<br>2.时间<br>个人喜好吧，我还是喜欢折腾一些东西，所以，我希望有一些自己的时间去做一些东西。但是工作时间有些长，休息都不够，更不用提其他的一些东西。这也是我有近大半年没有写过东西的原因之一（懒惰是原罪= =..）<br>3.观念<br>我目前是处于学习阶段，但其他同事都是工作了5年6年，甚至9年10年的。他们是想用自己所学的东西来变现的阶段。所以，很多东西就可能有些冲突。我不想太过于牺牲我自己来成全团队，这如同一场豪赌，赌赢了还好，若是输了…毕竟，我现在的半年和五年以后的半年，价值是不一样的。</p>\n<p>在A公司，我坚持到了最后，是因为对我技术提升有很大的帮助。在B公司，收入是足够的，但是我还是离开，因为和我个人发展的确有冲突。我觉得对我不公平，对公司也不公平。所以，选择了离开。</p>\n<p>我在B公司也学到的最主要的几个词：快速迭代，快速试错，搜集数据，重视反馈。</p>\n<p><br></p>\n<h1 id=\"加入C公司\"><a href=\"#加入C公司\" class=\"headerlink\" title=\"加入C公司\"></a>加入C公司</h1><p>这次找工作目标，其实挺明确的。<br>我去面试的时候，也没有藏着掖着；虽然面试有很多套路，很多技巧；但我觉得那都不是长久之计，适当的坦诚，真的很有必要。<br>公司招人，肯定看中下面几方面：</p>\n<ul>\n<li>能不能干活</li>\n<li>能不能留下</li>\n<li>能不能学习</li>\n</ul>\n<p>再往后才是薪资什么的<br>面试官，往往能分析到能不能干活和能不能学习；对于能不能留下，不好判断。<br>所以，我面试的时候，往往会表达出我所看重的东西，我所期望的东西 —— 个人的成长和进步；也正因为如此，有很多机会我都错过了。<br>其实，我觉得个人的进步和发展和工作并不冲突；在工作能力胜任的基础上，个人的每一分成长都会对工作产生积极正面的影响，但是，往往会被认为我会误工，对工作不认真不努力。<br>对此，我也只能抱歉离开。</p>\n<p>选择C公司，真的是因为三观很合，无论是技术还是负责人。公司更看重功劳而非苦劳，鼓励高效率工作，而非低效率磨工，等等方案，当让我很有亲切感，归属感。<br>而且，入职以来，很多事情都验证了我的选择的正确性。</p>\n<p><br></p>\n<h1 id=\"这两段经历的总结\"><a href=\"#这两段经历的总结\" class=\"headerlink\" title=\"这两段经历的总结\"></a>这两段经历的总结</h1><p>这几年，我一直贯彻着，个人发展重于其他，不将就，不妥协。<br>但是还是或由于个人情感，或其他，将就了一些，妥协了一些。<br>正如我这篇文章的题目 迷 但不 茫。<br>过去这几年很迷，因为我目标明确了，但是却没有准确的实施下来。<br>过去这几年不茫，因为我还是朝着我的方向在走。<br>通过这几年的经验，最起码让我眼界扩宽了；身边的同事都比我资深，很有经验，有想法，与他们的合作与交流，让我进步很多。</p>\n<p><br></p>\n<h1 id=\"接下来\"><a href=\"#接下来\" class=\"headerlink\" title=\"接下来\"></a>接下来</h1><p>1.工作上<br>找一个对口的公司很重要，既然找到了，那就去做好它。<br>现在证明了我选择它，我选对了；接下来要给它看，它选择我，同样也是正确的。</p>\n<p>2.生活上<br>恢复博客的更新，个人主页的更新。<br>以后，还是会维护CSDN和个人主页，各有侧重。<br>博客，更侧重于算法上的一些东西；个人主页，更多的是一些杂谈感想还有技术。</p>\n<p><br><br><br><br><br></p>\n<hr>\n<p>然后，拨开迷雾，再度起航！</p>\n","site":{"data":{}},"excerpt":"<p>2017都过去了4个月，<br>才有空，好好写写  过去的这一年。</p>","more":"<p><br></p>\n<hr>\n<p>2017 - 2018, 发生了很多事，按时间段来分：<br>1.A公司 倒闭<br>2.加入&amp;离开 B公司<br>3.加入 C公司</p>\n<hr>\n<p><br></p>\n<h1 id=\"A公司-Over\"><a href=\"#A公司-Over\" class=\"headerlink\" title=\"A公司 Over\"></a>A公司 Over</h1><p>其实，早就预感到了这一天的到来。<br>薪酬已经很低了，依旧留到最后。<br>首先，我还是比较感性一些，我在A公司呆了近两年的时间，我从没毕业实习就在这。<br>其次，我在这里能学到很多东西，同伴都是很资深且专业的人。<br>最后，我喜欢这个公司的氛围，喜欢大家一起工作共事的感觉。</p>\n<p>最后做的TCG游戏的框架模式，也是我所喜欢的类型。<br>就像女巫去熬制药剂一样，我们负责提供原材料；策划通过不同原材料的比例来合成不同的东西。</p>\n<p>最后没有撑下去，从我的角度来总结就是：<br>1.版号的限制。<br>这是最主要的问题，我们主要眼光放在了 中国的苹果市场，在游戏基本完成时，恰好赶上版号限制。那时候由于是版号政策刚刚实行，还是比较严格，公司有耗了大半年吧。<br>2.目标过于单一<br>这是后来，我入职B公司以后，才想到的。如同第一个问题，过于纠结 中国的苹果市场；相应的苹果海外市场及安卓海外市场也是可以去考虑的。对于技术来说，改成多语言版本，并不是难题。<br>当然也有几个问题，我没有仔细考虑：</p>\n<ul>\n<li>做海外市场的推广，如何进行。A公司是研发团队，对运营及发行，完全没有能力。</li>\n<li>所做的题材是 西游题材，海外对此的接受程度如何。</li>\n</ul>\n<p>3.游戏选型<br>这是，我从开始就隐隐担忧的事情。做的是对战类型的游戏，它不像很多游戏，发行有很多技巧去让游戏营收。这种游戏，更重玩家数量，要的就是与人斗，其乐无穷的效果。一个小公司去研发这种类型的游戏，着实不能让我有信心。虽然，最后决定要在对战AI上弥补人数不足的问题，但是，感觉还是有些差那么一丢丢。（让AI 充个648！）</p>\n<p>但是，我并不是老板，也不是专业的人员。所以，我的想法仅仅是从我能看到的方面去考虑。这里面我肯定疏忽了很多东西，毕竟，老板他们都是专业的，都在这个行业做了十几年，比我这个小菜鸟懂得太多了。</p>\n<p>然后，就是在A公司的收获吧：<br>1.技术<br>虽然游戏不是很大，但是整个一套流程，及周边一些相关开发（SDK接入；ios平台上，针对Object-C代码的修改；android平台上，针对java代码的修改；等等…）<br>2.团队<br>一个对的团队是很重要的，三观基本一致，朝着共同的目标去奋斗，鼓励学习，追求高效。还记得凯神拿着大长刀演示，人物挥动武器时重心的变化，手的位置，发力点等；涛哥又捣鼓出了一个android应用，附近的人的聊天室…<br>3.无悔<br>在一个公司，心甘情愿的留到最后。这真的不是很容易的事情。因为这个游戏是我喜欢做的，虽然不是独一无二的原创，但是无论是玩法，还是游戏表现，还是做游戏的过程，都让我对它有信心。我感觉到自己是在开发一款游戏，美术对设计一丝不苟，吹毛求疵，策划对数值不断优化测试。不管怎么说，有过这么一次经历，也无悔了。</p>\n<p><br></p>\n<h1 id=\"B公司的入职与离职\"><a href=\"#B公司的入职与离职\" class=\"headerlink\" title=\"B公司的入职与离职\"></a>B公司的入职与离职</h1><p>A公司over以后，就开始要找工作了…<br>毕竟我也不是什么富二代啥的，在A公司由于一直在研发，也没有很高的收入，再加上女朋友也在身边，所以经济压力比较大。然后就没有花很长的时间去找一个工作。最后在很多公司中，选择了B公司。<br>我选择B公司的原因如下：</p>\n<ul>\n<li>资金充裕，游戏已经上线，营收虽然不多，但是基本能够自给自足，正在优化准备大力推广阶段。</li>\n<li>扁平化的团队，其他同事的技术水平都比较高。</li>\n<li>大公司的孵化团队，有很好的资源。</li>\n<li>主攻海外市场的细分领域，目标明确且合理。</li>\n</ul>\n<p>在这家公司也呆了快一年的时间。老板和同事都挺好，由于个人原因吧，最终还是选择了离职。其实，用大白话来说，任何一个小型的团队，在维护<strong>基本</strong>团队建设基础上，最重要的一件事，还是<strong>做成一款产品</strong>。<br>我离职，也是想了很久才下决定的，因为同事关系都挺好，也一起呆了这么久，真的不容易。<br>我离职的原因如下：<br>1.技术<br>最主要的原因。不能说在这个公司没有学到技术，只是提升速度有些缓慢。因为偏向于换皮一类，技术提升还是有限度的。我希望提升的速度更快一些。<br>2.时间<br>个人喜好吧，我还是喜欢折腾一些东西，所以，我希望有一些自己的时间去做一些东西。但是工作时间有些长，休息都不够，更不用提其他的一些东西。这也是我有近大半年没有写过东西的原因之一（懒惰是原罪= =..）<br>3.观念<br>我目前是处于学习阶段，但其他同事都是工作了5年6年，甚至9年10年的。他们是想用自己所学的东西来变现的阶段。所以，很多东西就可能有些冲突。我不想太过于牺牲我自己来成全团队，这如同一场豪赌，赌赢了还好，若是输了…毕竟，我现在的半年和五年以后的半年，价值是不一样的。</p>\n<p>在A公司，我坚持到了最后，是因为对我技术提升有很大的帮助。在B公司，收入是足够的，但是我还是离开，因为和我个人发展的确有冲突。我觉得对我不公平，对公司也不公平。所以，选择了离开。</p>\n<p>我在B公司也学到的最主要的几个词：快速迭代，快速试错，搜集数据，重视反馈。</p>\n<p><br></p>\n<h1 id=\"加入C公司\"><a href=\"#加入C公司\" class=\"headerlink\" title=\"加入C公司\"></a>加入C公司</h1><p>这次找工作目标，其实挺明确的。<br>我去面试的时候，也没有藏着掖着；虽然面试有很多套路，很多技巧；但我觉得那都不是长久之计，适当的坦诚，真的很有必要。<br>公司招人，肯定看中下面几方面：</p>\n<ul>\n<li>能不能干活</li>\n<li>能不能留下</li>\n<li>能不能学习</li>\n</ul>\n<p>再往后才是薪资什么的<br>面试官，往往能分析到能不能干活和能不能学习；对于能不能留下，不好判断。<br>所以，我面试的时候，往往会表达出我所看重的东西，我所期望的东西 —— 个人的成长和进步；也正因为如此，有很多机会我都错过了。<br>其实，我觉得个人的进步和发展和工作并不冲突；在工作能力胜任的基础上，个人的每一分成长都会对工作产生积极正面的影响，但是，往往会被认为我会误工，对工作不认真不努力。<br>对此，我也只能抱歉离开。</p>\n<p>选择C公司，真的是因为三观很合，无论是技术还是负责人。公司更看重功劳而非苦劳，鼓励高效率工作，而非低效率磨工，等等方案，当让我很有亲切感，归属感。<br>而且，入职以来，很多事情都验证了我的选择的正确性。</p>\n<p><br></p>\n<h1 id=\"这两段经历的总结\"><a href=\"#这两段经历的总结\" class=\"headerlink\" title=\"这两段经历的总结\"></a>这两段经历的总结</h1><p>这几年，我一直贯彻着，个人发展重于其他，不将就，不妥协。<br>但是还是或由于个人情感，或其他，将就了一些，妥协了一些。<br>正如我这篇文章的题目 迷 但不 茫。<br>过去这几年很迷，因为我目标明确了，但是却没有准确的实施下来。<br>过去这几年不茫，因为我还是朝着我的方向在走。<br>通过这几年的经验，最起码让我眼界扩宽了；身边的同事都比我资深，很有经验，有想法，与他们的合作与交流，让我进步很多。</p>\n<p><br></p>\n<h1 id=\"接下来\"><a href=\"#接下来\" class=\"headerlink\" title=\"接下来\"></a>接下来</h1><p>1.工作上<br>找一个对口的公司很重要，既然找到了，那就去做好它。<br>现在证明了我选择它，我选对了；接下来要给它看，它选择我，同样也是正确的。</p>\n<p>2.生活上<br>恢复博客的更新，个人主页的更新。<br>以后，还是会维护CSDN和个人主页，各有侧重。<br>博客，更侧重于算法上的一些东西；个人主页，更多的是一些杂谈感想还有技术。</p>\n<p><br><br><br><br><br></p>\n<hr>\n<p>然后，拨开迷雾，再度起航！</p>"},{"title":"2016,没走偏","date":"2017-01-23T14:41:35.000Z","_content":"\n2016回顾：毕业与就业\n\n<!-- more -->\n\n<br/>\n\n---\n\n2016年结束有好一阵子了，\n但没有过年，总感觉2016还没有过去。。\n这次的总结，与之前的不大一样；\n有着人生的一个重要的节点，毕业与就业。\n\n---\n\n<br/>\n\n# 简单又充实的大学生涯\n\n四年的大学生涯，圆满结束。\n准确的来说应该是三年吧，最后一年基本就在北京实习了。\n回首，整个大学生涯，还算可以吧，\n虽然没有挂过科，没有做过弊，没有跳进三元湖里游个泳，没有裸过奔...\n但是，也这么平平安安的过来了。\n![这里写图片描述](http://img.blog.csdn.net/20170123230955916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n我投入游戏开发这行，是我高考完就定下的，\n当时找有没有相关的专业，\n挨，中国传媒大学新开了一个相关的，\n但是，高考失利，没上了（本来正常发挥分也够呛能够到）；\n只好选了个计算机方向的，怎么说，也是沾亲带故的嘛。\n刚开始是 软件工程专业，后来通过卓越工程师计划转到了计算机科学与技术。\n（这个计划，选拔时候又笔试又面试，结果，就是假期的时候多上了几个培训课，毕竟第一批，没经验呀，可怜的小白鼠）\n\n没太大关系，\n毕竟，我的目标是游戏开发。\n在完成正常课程情况下，去自学游戏开发。\n于是，大一拉了几个人一起去参加齐鲁软件大赛。\n上大学是我第一次接触编程，\n而且在大一，也没学什么，一堆基础课 加上 谭老师的《C++ 程序设计》。\n就想做一个游戏出来...\n那年夏天，暑假，一个屋子里有6，7个团队，都是准备参加大赛的；\n身为队长加带头人，当然要对这个团队负责；\n用什么方式开发，如何制定进度，每个人的分工，每个人工作的时间，事无巨细。\n中间那些苦难的时光，就不多叙述了。\n记忆最深刻的，就是五个人团结一致，找的小伙伴都很靠谱，记得当时应该是朝八晚八，中午有一个小时午休。\n每个人都很自觉，不需要督促，不需要烦忧。\n大概是一个月左右（五人合作时间），大体雏形已经出来了，\n到最后，整个屋子没剩几个人了，但我们依旧坚持了下来。\n最终，我大学期间第一个项目 —— 《残月夜》 出炉。\n\n![这里写图片描述](http://img.blog.csdn.net/20131009215534656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n[关于残月夜](http://blog.csdn.net/lttree/article/details/12525775)\n\n大二这一年，主要应该是ACM吧。\n本来大一暑假那段时间就应该去集训，但是因为齐鲁软件赛，就放下了ACM。\n然后，大二就比较吃力了。ACM在我们学校也算刚开始起步，方向什么都靠着摸索，也不是很轻松。\n结果，省赛失利，黯然退出。（因为不准备考研，所以大三要搞一搞就业相关的东西了，就没有在ACM再拼一年）\n但是，蓝桥杯的成绩还可以，起码有个奖了...\n\n![这里写图片描述](http://img.blog.csdn.net/20140624195413781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20140624195453375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n[关于我的ACM](http://blog.csdn.net/lttree/article/details/32321653)\n\n\n然后，到了大三。\n大三，就开始为就业做准备了，\n首先是，重新拿起cocos2d引擎，模仿着做了很多当下流行的游戏，有些发了教程博文，有些就自己做着玩了玩：HelloKitty2048、万圣大作战，别踩白块、flappy bird、消灭星星。\n然后，开始看一些书籍，因为我要做一个\"有思想\"的游戏开发者，多学多看一些游戏设计，可能更偏向于策划的东西。\n最后，因为大三了，开始到达专业课的最终章了，就开始各种课设，大作业；再加上卓越计划的培训班，\n学了一堆杂七杂八的，貌似现在已经忘了不少的东西：HTML，MFC，Android，iOS等等\n然后，参加了cocos官方举办的游戏开发大赛，这个要好好说道说道了:\n当时，我记得反转盛行，记得很火的捕鱼达人，然后就想了反过来，来个捕人达鱼，但是名字被美术同学嘲讽了，就改了个非常洋气的名字：人鱼塞壬。\n时间不是很充裕，\n看到比赛的时候就不是很早，\n前期忙于最后期末考试及各种大课设，\n中期，因为卓越班，暑假要到北京千锋培训十天，\n但是，我的美术君是在学校进行甲骨文培训。\n在千锋培训，也要交大作业呀，于是，一边学iOS开发，做大作业；一边再去忙活比赛作品。\n事实证明，三心二意是不好的，尤其是当你两边都想做好的时候，最后iOS作品很一般，比赛作品也没实现多少。\n还好回到学校，还有一段时间，马力全开的赶工，\n先完成了大体的东西，然后慢慢往上加各种功能，到最后功能也没有加多少。\n当初，游戏设定最初所想的都没有加上，\n后来，作品交上去以后，也没有动力去完善它。\n\n![这里写图片描述](http://img.blog.csdn.net/20140928175809265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n![这里写图片描述](http://img.blog.csdn.net/20141031230507078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20150818075936616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n[2048系列教程](http://blog.csdn.net/lx417147512/article/category/2602825)\n[别踩白块系列教程](http://blog.csdn.net/lx417147512/article/category/2889567)\n[消灭星星系列教程](http://blog.csdn.net/lx417147512/article/category/3258131)\n[万圣大作战系列教程](http://blog.csdn.net/lx417147512/article/category/2677429)\n[关于人鱼塞壬](http://blog.csdn.net/lttree/article/details/47729343)\n\n大四的时间，基本就是在北京实习了，至今也在这家公司，后面也会谈到。\n\n短暂的大学生涯，印象最深刻的就是启蒙我CSDN的 贺利坚老师，ACM三大巨头 卢云宏老师、周世平老师、封玮老师。\n然后，就是我那些奇葩可爱行为怪诞的室友与同学们，一起拼搏ACM、蓝桥杯的队友们，一起奋战齐鲁赛的组员们。\n\n噢，\n大学最亏欠的还有我那女友，\n看上面那些忙忙碌碌的东西，就知道，\n我很少有时间能陪她，不是在实验室就是在外面比赛。\n感谢她在背后一直默默支持我鼓励我。\n（这段话，绝对不是她在旁边逼迫我写的，键盘什么的跪着也不疼）\n\n<br/>\n\n# 奋斗的工作团队\n\n话说，\n那应该是2015年十月还是十一月份的，\n一人一包一行李箱闯北京，\n面试了三家，就落户于现在这个铭匠公司，\n以前都是我自己在学校做，自己负责全部。\n第一次接触，真正的游戏公司是如何运作的。\n\n其实，在小公司干活，是一件非常累而且难的事情。\n你会负责很多东西，你需要取舍，\n哪些技术知识，浅尝辄止即可，无须深入；\n哪些技术知识，需要好好研究探寻；\n庄子中也谈论过：\n吾生也有涯，而知也无涯。以有涯随无涯，殆已。\n所以，把有限的精力投入到刀刃上是很重要的。\n\n在 铭匠 呆了也有一年多了，\n期间参与了3.2个游戏制作。\n继续坚持在这里，还是因为做游戏的态度与氛围。\n毕竟，还年轻，工作的原因不是单纯的铁饭碗或者高回报。\n个人的发展与心情占据更高的位置。\n更加重要的是，\n我相信自己的眼光，\n我相信我们团队。\n\n马上游戏就要上线了，\n史诗级大作:   诛神记！\n\n![这里写图片描述](http://img.blog.csdn.net/20170123154953588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n<br/>\n\n# 一些杂事\n## 今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\n\n- 《活着》\n- 《REWORK》\n- 《从0到1》\n- 《生死疲劳》\n- 《人类简史》\n- 《卓有成效的程序员》\n- 《代码的整洁之道》\n\n## 学python\n初衷是因为感觉python这个脚本语言很强大，可以做各种辅助自己的工具。\n最后，也实践了一些，发工作日报，删文件名空格，火车票查询，感觉也不错，\n为什么有种大炮打苍蝇的感觉。。。\n接下来，还要做一些更多好玩的东西。。。\n\n## 个人博客  [www.lt-tree.com](http://www.lt-tree.com/)\n用 hexo+Github 搭建了自己的个人博客。\n现在，还没有腾出手好好研究，只是套了别人的模板。\n\n\n## Unity\n学了一些Unity的东西。\n简单的学习，起码如果换引擎，也不会手足无措。\n以后，也可能转Unity了。。。\n有点准备。\n\n\n<br/>\n\n# 接下来\n\n2017年，\n第一件想做的事就是 —— 减肥。\n曾经不怎么重视体重，\n晚上学习，嘴巴闲不下来，\n结果现在越来越严重了。\n是时候该重视一下了，\n健康，是革命的本钱嘛！\n\n第二件事，读更多的书。\n技术书籍可能不会读很多吧，\n毕竟，有些东西等到出书，可能都被淘汰了。\n主要想读更多的非专业技术书籍，\n比如去年读的《活着》、《生死疲劳》等，\n当然，还要扩展其他类别的。\n你不知道下一款游戏是什么类型的，多扩充一下自己知识体系还是很好的。\n\n最后一件事，老生常谈的 —— 学习。\n互联网这个行业，原地踏步就是退步。\n还是要一直学下去，\n学还要有选择的学，不能瞎学。\n\n<br/>\n<br/>\n<br/>\n\n---\n\n最后，\n大学四年，没走偏。\n毕业以后，没走偏。\n2017，继续掌舵前行\n\n","source":"_posts/2016，没走偏.md","raw":"---\ntitle: 2016,没走偏\ndate: 2017-01-23 22:41:35\ntags: 抽空写\n\n---\n\n2016回顾：毕业与就业\n\n<!-- more -->\n\n<br/>\n\n---\n\n2016年结束有好一阵子了，\n但没有过年，总感觉2016还没有过去。。\n这次的总结，与之前的不大一样；\n有着人生的一个重要的节点，毕业与就业。\n\n---\n\n<br/>\n\n# 简单又充实的大学生涯\n\n四年的大学生涯，圆满结束。\n准确的来说应该是三年吧，最后一年基本就在北京实习了。\n回首，整个大学生涯，还算可以吧，\n虽然没有挂过科，没有做过弊，没有跳进三元湖里游个泳，没有裸过奔...\n但是，也这么平平安安的过来了。\n![这里写图片描述](http://img.blog.csdn.net/20170123230955916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n我投入游戏开发这行，是我高考完就定下的，\n当时找有没有相关的专业，\n挨，中国传媒大学新开了一个相关的，\n但是，高考失利，没上了（本来正常发挥分也够呛能够到）；\n只好选了个计算机方向的，怎么说，也是沾亲带故的嘛。\n刚开始是 软件工程专业，后来通过卓越工程师计划转到了计算机科学与技术。\n（这个计划，选拔时候又笔试又面试，结果，就是假期的时候多上了几个培训课，毕竟第一批，没经验呀，可怜的小白鼠）\n\n没太大关系，\n毕竟，我的目标是游戏开发。\n在完成正常课程情况下，去自学游戏开发。\n于是，大一拉了几个人一起去参加齐鲁软件大赛。\n上大学是我第一次接触编程，\n而且在大一，也没学什么，一堆基础课 加上 谭老师的《C++ 程序设计》。\n就想做一个游戏出来...\n那年夏天，暑假，一个屋子里有6，7个团队，都是准备参加大赛的；\n身为队长加带头人，当然要对这个团队负责；\n用什么方式开发，如何制定进度，每个人的分工，每个人工作的时间，事无巨细。\n中间那些苦难的时光，就不多叙述了。\n记忆最深刻的，就是五个人团结一致，找的小伙伴都很靠谱，记得当时应该是朝八晚八，中午有一个小时午休。\n每个人都很自觉，不需要督促，不需要烦忧。\n大概是一个月左右（五人合作时间），大体雏形已经出来了，\n到最后，整个屋子没剩几个人了，但我们依旧坚持了下来。\n最终，我大学期间第一个项目 —— 《残月夜》 出炉。\n\n![这里写图片描述](http://img.blog.csdn.net/20131009215534656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n[关于残月夜](http://blog.csdn.net/lttree/article/details/12525775)\n\n大二这一年，主要应该是ACM吧。\n本来大一暑假那段时间就应该去集训，但是因为齐鲁软件赛，就放下了ACM。\n然后，大二就比较吃力了。ACM在我们学校也算刚开始起步，方向什么都靠着摸索，也不是很轻松。\n结果，省赛失利，黯然退出。（因为不准备考研，所以大三要搞一搞就业相关的东西了，就没有在ACM再拼一年）\n但是，蓝桥杯的成绩还可以，起码有个奖了...\n\n![这里写图片描述](http://img.blog.csdn.net/20140624195413781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20140624195453375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n[关于我的ACM](http://blog.csdn.net/lttree/article/details/32321653)\n\n\n然后，到了大三。\n大三，就开始为就业做准备了，\n首先是，重新拿起cocos2d引擎，模仿着做了很多当下流行的游戏，有些发了教程博文，有些就自己做着玩了玩：HelloKitty2048、万圣大作战，别踩白块、flappy bird、消灭星星。\n然后，开始看一些书籍，因为我要做一个\"有思想\"的游戏开发者，多学多看一些游戏设计，可能更偏向于策划的东西。\n最后，因为大三了，开始到达专业课的最终章了，就开始各种课设，大作业；再加上卓越计划的培训班，\n学了一堆杂七杂八的，貌似现在已经忘了不少的东西：HTML，MFC，Android，iOS等等\n然后，参加了cocos官方举办的游戏开发大赛，这个要好好说道说道了:\n当时，我记得反转盛行，记得很火的捕鱼达人，然后就想了反过来，来个捕人达鱼，但是名字被美术同学嘲讽了，就改了个非常洋气的名字：人鱼塞壬。\n时间不是很充裕，\n看到比赛的时候就不是很早，\n前期忙于最后期末考试及各种大课设，\n中期，因为卓越班，暑假要到北京千锋培训十天，\n但是，我的美术君是在学校进行甲骨文培训。\n在千锋培训，也要交大作业呀，于是，一边学iOS开发，做大作业；一边再去忙活比赛作品。\n事实证明，三心二意是不好的，尤其是当你两边都想做好的时候，最后iOS作品很一般，比赛作品也没实现多少。\n还好回到学校，还有一段时间，马力全开的赶工，\n先完成了大体的东西，然后慢慢往上加各种功能，到最后功能也没有加多少。\n当初，游戏设定最初所想的都没有加上，\n后来，作品交上去以后，也没有动力去完善它。\n\n![这里写图片描述](http://img.blog.csdn.net/20140928175809265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n![这里写图片描述](http://img.blog.csdn.net/20141031230507078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20150818075936616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n[2048系列教程](http://blog.csdn.net/lx417147512/article/category/2602825)\n[别踩白块系列教程](http://blog.csdn.net/lx417147512/article/category/2889567)\n[消灭星星系列教程](http://blog.csdn.net/lx417147512/article/category/3258131)\n[万圣大作战系列教程](http://blog.csdn.net/lx417147512/article/category/2677429)\n[关于人鱼塞壬](http://blog.csdn.net/lttree/article/details/47729343)\n\n大四的时间，基本就是在北京实习了，至今也在这家公司，后面也会谈到。\n\n短暂的大学生涯，印象最深刻的就是启蒙我CSDN的 贺利坚老师，ACM三大巨头 卢云宏老师、周世平老师、封玮老师。\n然后，就是我那些奇葩可爱行为怪诞的室友与同学们，一起拼搏ACM、蓝桥杯的队友们，一起奋战齐鲁赛的组员们。\n\n噢，\n大学最亏欠的还有我那女友，\n看上面那些忙忙碌碌的东西，就知道，\n我很少有时间能陪她，不是在实验室就是在外面比赛。\n感谢她在背后一直默默支持我鼓励我。\n（这段话，绝对不是她在旁边逼迫我写的，键盘什么的跪着也不疼）\n\n<br/>\n\n# 奋斗的工作团队\n\n话说，\n那应该是2015年十月还是十一月份的，\n一人一包一行李箱闯北京，\n面试了三家，就落户于现在这个铭匠公司，\n以前都是我自己在学校做，自己负责全部。\n第一次接触，真正的游戏公司是如何运作的。\n\n其实，在小公司干活，是一件非常累而且难的事情。\n你会负责很多东西，你需要取舍，\n哪些技术知识，浅尝辄止即可，无须深入；\n哪些技术知识，需要好好研究探寻；\n庄子中也谈论过：\n吾生也有涯，而知也无涯。以有涯随无涯，殆已。\n所以，把有限的精力投入到刀刃上是很重要的。\n\n在 铭匠 呆了也有一年多了，\n期间参与了3.2个游戏制作。\n继续坚持在这里，还是因为做游戏的态度与氛围。\n毕竟，还年轻，工作的原因不是单纯的铁饭碗或者高回报。\n个人的发展与心情占据更高的位置。\n更加重要的是，\n我相信自己的眼光，\n我相信我们团队。\n\n马上游戏就要上线了，\n史诗级大作:   诛神记！\n\n![这里写图片描述](http://img.blog.csdn.net/20170123154953588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n<br/>\n\n# 一些杂事\n## 今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\n\n- 《活着》\n- 《REWORK》\n- 《从0到1》\n- 《生死疲劳》\n- 《人类简史》\n- 《卓有成效的程序员》\n- 《代码的整洁之道》\n\n## 学python\n初衷是因为感觉python这个脚本语言很强大，可以做各种辅助自己的工具。\n最后，也实践了一些，发工作日报，删文件名空格，火车票查询，感觉也不错，\n为什么有种大炮打苍蝇的感觉。。。\n接下来，还要做一些更多好玩的东西。。。\n\n## 个人博客  [www.lt-tree.com](http://www.lt-tree.com/)\n用 hexo+Github 搭建了自己的个人博客。\n现在，还没有腾出手好好研究，只是套了别人的模板。\n\n\n## Unity\n学了一些Unity的东西。\n简单的学习，起码如果换引擎，也不会手足无措。\n以后，也可能转Unity了。。。\n有点准备。\n\n\n<br/>\n\n# 接下来\n\n2017年，\n第一件想做的事就是 —— 减肥。\n曾经不怎么重视体重，\n晚上学习，嘴巴闲不下来，\n结果现在越来越严重了。\n是时候该重视一下了，\n健康，是革命的本钱嘛！\n\n第二件事，读更多的书。\n技术书籍可能不会读很多吧，\n毕竟，有些东西等到出书，可能都被淘汰了。\n主要想读更多的非专业技术书籍，\n比如去年读的《活着》、《生死疲劳》等，\n当然，还要扩展其他类别的。\n你不知道下一款游戏是什么类型的，多扩充一下自己知识体系还是很好的。\n\n最后一件事，老生常谈的 —— 学习。\n互联网这个行业，原地踏步就是退步。\n还是要一直学下去，\n学还要有选择的学，不能瞎学。\n\n<br/>\n<br/>\n<br/>\n\n---\n\n最后，\n大学四年，没走偏。\n毕业以后，没走偏。\n2017，继续掌舵前行\n\n","slug":"2016，没走偏","published":1,"updated":"2018-07-18T16:53:26.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbbq0003esvqf2akovkn","content":"<p>2016回顾：毕业与就业</p>\n<a id=\"more\"></a>\n<p><br></p>\n<hr>\n<p>2016年结束有好一阵子了，<br>但没有过年，总感觉2016还没有过去。。<br>这次的总结，与之前的不大一样；<br>有着人生的一个重要的节点，毕业与就业。</p>\n<hr>\n<p><br></p>\n<h1 id=\"简单又充实的大学生涯\"><a href=\"#简单又充实的大学生涯\" class=\"headerlink\" title=\"简单又充实的大学生涯\"></a>简单又充实的大学生涯</h1><p>四年的大学生涯，圆满结束。<br>准确的来说应该是三年吧，最后一年基本就在北京实习了。<br>回首，整个大学生涯，还算可以吧，<br>虽然没有挂过科，没有做过弊，没有跳进三元湖里游个泳，没有裸过奔…<br>但是，也这么平平安安的过来了。<br><img src=\"http://img.blog.csdn.net/20170123230955916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>我投入游戏开发这行，是我高考完就定下的，<br>当时找有没有相关的专业，<br>挨，中国传媒大学新开了一个相关的，<br>但是，高考失利，没上了（本来正常发挥分也够呛能够到）；<br>只好选了个计算机方向的，怎么说，也是沾亲带故的嘛。<br>刚开始是 软件工程专业，后来通过卓越工程师计划转到了计算机科学与技术。<br>（这个计划，选拔时候又笔试又面试，结果，就是假期的时候多上了几个培训课，毕竟第一批，没经验呀，可怜的小白鼠）</p>\n<p>没太大关系，<br>毕竟，我的目标是游戏开发。<br>在完成正常课程情况下，去自学游戏开发。<br>于是，大一拉了几个人一起去参加齐鲁软件大赛。<br>上大学是我第一次接触编程，<br>而且在大一，也没学什么，一堆基础课 加上 谭老师的《C++ 程序设计》。<br>就想做一个游戏出来…<br>那年夏天，暑假，一个屋子里有6，7个团队，都是准备参加大赛的；<br>身为队长加带头人，当然要对这个团队负责；<br>用什么方式开发，如何制定进度，每个人的分工，每个人工作的时间，事无巨细。<br>中间那些苦难的时光，就不多叙述了。<br>记忆最深刻的，就是五个人团结一致，找的小伙伴都很靠谱，记得当时应该是朝八晚八，中午有一个小时午休。<br>每个人都很自觉，不需要督促，不需要烦忧。<br>大概是一个月左右（五人合作时间），大体雏形已经出来了，<br>到最后，整个屋子没剩几个人了，但我们依旧坚持了下来。<br>最终，我大学期间第一个项目 —— 《残月夜》 出炉。</p>\n<p><img src=\"http://img.blog.csdn.net/20131009215534656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\"></p>\n<p><a href=\"http://blog.csdn.net/lttree/article/details/12525775\" target=\"_blank\" rel=\"noopener\">关于残月夜</a></p>\n<p>大二这一年，主要应该是ACM吧。<br>本来大一暑假那段时间就应该去集训，但是因为齐鲁软件赛，就放下了ACM。<br>然后，大二就比较吃力了。ACM在我们学校也算刚开始起步，方向什么都靠着摸索，也不是很轻松。<br>结果，省赛失利，黯然退出。（因为不准备考研，所以大三要搞一搞就业相关的东西了，就没有在ACM再拼一年）<br>但是，蓝桥杯的成绩还可以，起码有个奖了…</p>\n<p><img src=\"http://img.blog.csdn.net/20140624195413781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20140624195453375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><a href=\"http://blog.csdn.net/lttree/article/details/32321653\" target=\"_blank\" rel=\"noopener\">关于我的ACM</a></p>\n<p>然后，到了大三。<br>大三，就开始为就业做准备了，<br>首先是，重新拿起cocos2d引擎，模仿着做了很多当下流行的游戏，有些发了教程博文，有些就自己做着玩了玩：HelloKitty2048、万圣大作战，别踩白块、flappy bird、消灭星星。<br>然后，开始看一些书籍，因为我要做一个”有思想”的游戏开发者，多学多看一些游戏设计，可能更偏向于策划的东西。<br>最后，因为大三了，开始到达专业课的最终章了，就开始各种课设，大作业；再加上卓越计划的培训班，<br>学了一堆杂七杂八的，貌似现在已经忘了不少的东西：HTML，MFC，Android，iOS等等<br>然后，参加了cocos官方举办的游戏开发大赛，这个要好好说道说道了:<br>当时，我记得反转盛行，记得很火的捕鱼达人，然后就想了反过来，来个捕人达鱼，但是名字被美术同学嘲讽了，就改了个非常洋气的名字：人鱼塞壬。<br>时间不是很充裕，<br>看到比赛的时候就不是很早，<br>前期忙于最后期末考试及各种大课设，<br>中期，因为卓越班，暑假要到北京千锋培训十天，<br>但是，我的美术君是在学校进行甲骨文培训。<br>在千锋培训，也要交大作业呀，于是，一边学iOS开发，做大作业；一边再去忙活比赛作品。<br>事实证明，三心二意是不好的，尤其是当你两边都想做好的时候，最后iOS作品很一般，比赛作品也没实现多少。<br>还好回到学校，还有一段时间，马力全开的赶工，<br>先完成了大体的东西，然后慢慢往上加各种功能，到最后功能也没有加多少。<br>当初，游戏设定最初所想的都没有加上，<br>后来，作品交上去以后，也没有动力去完善它。</p>\n<p><img src=\"http://img.blog.csdn.net/20140928175809265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20141031230507078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20150818075936616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><a href=\"http://blog.csdn.net/lx417147512/article/category/2602825\" target=\"_blank\" rel=\"noopener\">2048系列教程</a><br><a href=\"http://blog.csdn.net/lx417147512/article/category/2889567\" target=\"_blank\" rel=\"noopener\">别踩白块系列教程</a><br><a href=\"http://blog.csdn.net/lx417147512/article/category/3258131\" target=\"_blank\" rel=\"noopener\">消灭星星系列教程</a><br><a href=\"http://blog.csdn.net/lx417147512/article/category/2677429\" target=\"_blank\" rel=\"noopener\">万圣大作战系列教程</a><br><a href=\"http://blog.csdn.net/lttree/article/details/47729343\" target=\"_blank\" rel=\"noopener\">关于人鱼塞壬</a></p>\n<p>大四的时间，基本就是在北京实习了，至今也在这家公司，后面也会谈到。</p>\n<p>短暂的大学生涯，印象最深刻的就是启蒙我CSDN的 贺利坚老师，ACM三大巨头 卢云宏老师、周世平老师、封玮老师。<br>然后，就是我那些奇葩可爱行为怪诞的室友与同学们，一起拼搏ACM、蓝桥杯的队友们，一起奋战齐鲁赛的组员们。</p>\n<p>噢，<br>大学最亏欠的还有我那女友，<br>看上面那些忙忙碌碌的东西，就知道，<br>我很少有时间能陪她，不是在实验室就是在外面比赛。<br>感谢她在背后一直默默支持我鼓励我。<br>（这段话，绝对不是她在旁边逼迫我写的，键盘什么的跪着也不疼）</p>\n<p><br></p>\n<h1 id=\"奋斗的工作团队\"><a href=\"#奋斗的工作团队\" class=\"headerlink\" title=\"奋斗的工作团队\"></a>奋斗的工作团队</h1><p>话说，<br>那应该是2015年十月还是十一月份的，<br>一人一包一行李箱闯北京，<br>面试了三家，就落户于现在这个铭匠公司，<br>以前都是我自己在学校做，自己负责全部。<br>第一次接触，真正的游戏公司是如何运作的。</p>\n<p>其实，在小公司干活，是一件非常累而且难的事情。<br>你会负责很多东西，你需要取舍，<br>哪些技术知识，浅尝辄止即可，无须深入；<br>哪些技术知识，需要好好研究探寻；<br>庄子中也谈论过：<br>吾生也有涯，而知也无涯。以有涯随无涯，殆已。<br>所以，把有限的精力投入到刀刃上是很重要的。</p>\n<p>在 铭匠 呆了也有一年多了，<br>期间参与了3.2个游戏制作。<br>继续坚持在这里，还是因为做游戏的态度与氛围。<br>毕竟，还年轻，工作的原因不是单纯的铁饭碗或者高回报。<br>个人的发展与心情占据更高的位置。<br>更加重要的是，<br>我相信自己的眼光，<br>我相信我们团队。</p>\n<p>马上游戏就要上线了，<br>史诗级大作:   诛神记！</p>\n<p><img src=\"http://img.blog.csdn.net/20170123154953588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><br></p>\n<h1 id=\"一些杂事\"><a href=\"#一些杂事\" class=\"headerlink\" title=\"一些杂事\"></a>一些杂事</h1><h2 id=\"今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\"><a href=\"#今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\" class=\"headerlink\" title=\"今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\"></a>今年，也读了一些书，有些是同事推荐的，有些是自己想看的。</h2><ul>\n<li>《活着》</li>\n<li>《REWORK》</li>\n<li>《从0到1》</li>\n<li>《生死疲劳》</li>\n<li>《人类简史》</li>\n<li>《卓有成效的程序员》</li>\n<li>《代码的整洁之道》</li>\n</ul>\n<h2 id=\"学python\"><a href=\"#学python\" class=\"headerlink\" title=\"学python\"></a>学python</h2><p>初衷是因为感觉python这个脚本语言很强大，可以做各种辅助自己的工具。<br>最后，也实践了一些，发工作日报，删文件名空格，火车票查询，感觉也不错，<br>为什么有种大炮打苍蝇的感觉。。。<br>接下来，还要做一些更多好玩的东西。。。</p>\n<h2 id=\"个人博客-www-lt-tree-com\"><a href=\"#个人博客-www-lt-tree-com\" class=\"headerlink\" title=\"个人博客  www.lt-tree.com\"></a>个人博客  <a href=\"http://www.lt-tree.com/\" target=\"_blank\" rel=\"noopener\">www.lt-tree.com</a></h2><p>用 hexo+Github 搭建了自己的个人博客。<br>现在，还没有腾出手好好研究，只是套了别人的模板。</p>\n<h2 id=\"Unity\"><a href=\"#Unity\" class=\"headerlink\" title=\"Unity\"></a>Unity</h2><p>学了一些Unity的东西。<br>简单的学习，起码如果换引擎，也不会手足无措。<br>以后，也可能转Unity了。。。<br>有点准备。</p>\n<p><br></p>\n<h1 id=\"接下来\"><a href=\"#接下来\" class=\"headerlink\" title=\"接下来\"></a>接下来</h1><p>2017年，<br>第一件想做的事就是 —— 减肥。<br>曾经不怎么重视体重，<br>晚上学习，嘴巴闲不下来，<br>结果现在越来越严重了。<br>是时候该重视一下了，<br>健康，是革命的本钱嘛！</p>\n<p>第二件事，读更多的书。<br>技术书籍可能不会读很多吧，<br>毕竟，有些东西等到出书，可能都被淘汰了。<br>主要想读更多的非专业技术书籍，<br>比如去年读的《活着》、《生死疲劳》等，<br>当然，还要扩展其他类别的。<br>你不知道下一款游戏是什么类型的，多扩充一下自己知识体系还是很好的。</p>\n<p>最后一件事，老生常谈的 —— 学习。<br>互联网这个行业，原地踏步就是退步。<br>还是要一直学下去，<br>学还要有选择的学，不能瞎学。</p>\n<p><br><br><br><br><br></p>\n<hr>\n<p>最后，<br>大学四年，没走偏。<br>毕业以后，没走偏。<br>2017，继续掌舵前行</p>\n","site":{"data":{}},"excerpt":"<p>2016回顾：毕业与就业</p>","more":"<p><br></p>\n<hr>\n<p>2016年结束有好一阵子了，<br>但没有过年，总感觉2016还没有过去。。<br>这次的总结，与之前的不大一样；<br>有着人生的一个重要的节点，毕业与就业。</p>\n<hr>\n<p><br></p>\n<h1 id=\"简单又充实的大学生涯\"><a href=\"#简单又充实的大学生涯\" class=\"headerlink\" title=\"简单又充实的大学生涯\"></a>简单又充实的大学生涯</h1><p>四年的大学生涯，圆满结束。<br>准确的来说应该是三年吧，最后一年基本就在北京实习了。<br>回首，整个大学生涯，还算可以吧，<br>虽然没有挂过科，没有做过弊，没有跳进三元湖里游个泳，没有裸过奔…<br>但是，也这么平平安安的过来了。<br><img src=\"http://img.blog.csdn.net/20170123230955916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>我投入游戏开发这行，是我高考完就定下的，<br>当时找有没有相关的专业，<br>挨，中国传媒大学新开了一个相关的，<br>但是，高考失利，没上了（本来正常发挥分也够呛能够到）；<br>只好选了个计算机方向的，怎么说，也是沾亲带故的嘛。<br>刚开始是 软件工程专业，后来通过卓越工程师计划转到了计算机科学与技术。<br>（这个计划，选拔时候又笔试又面试，结果，就是假期的时候多上了几个培训课，毕竟第一批，没经验呀，可怜的小白鼠）</p>\n<p>没太大关系，<br>毕竟，我的目标是游戏开发。<br>在完成正常课程情况下，去自学游戏开发。<br>于是，大一拉了几个人一起去参加齐鲁软件大赛。<br>上大学是我第一次接触编程，<br>而且在大一，也没学什么，一堆基础课 加上 谭老师的《C++ 程序设计》。<br>就想做一个游戏出来…<br>那年夏天，暑假，一个屋子里有6，7个团队，都是准备参加大赛的；<br>身为队长加带头人，当然要对这个团队负责；<br>用什么方式开发，如何制定进度，每个人的分工，每个人工作的时间，事无巨细。<br>中间那些苦难的时光，就不多叙述了。<br>记忆最深刻的，就是五个人团结一致，找的小伙伴都很靠谱，记得当时应该是朝八晚八，中午有一个小时午休。<br>每个人都很自觉，不需要督促，不需要烦忧。<br>大概是一个月左右（五人合作时间），大体雏形已经出来了，<br>到最后，整个屋子没剩几个人了，但我们依旧坚持了下来。<br>最终，我大学期间第一个项目 —— 《残月夜》 出炉。</p>\n<p><img src=\"http://img.blog.csdn.net/20131009215534656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\"></p>\n<p><a href=\"http://blog.csdn.net/lttree/article/details/12525775\" target=\"_blank\" rel=\"noopener\">关于残月夜</a></p>\n<p>大二这一年，主要应该是ACM吧。<br>本来大一暑假那段时间就应该去集训，但是因为齐鲁软件赛，就放下了ACM。<br>然后，大二就比较吃力了。ACM在我们学校也算刚开始起步，方向什么都靠着摸索，也不是很轻松。<br>结果，省赛失利，黯然退出。（因为不准备考研，所以大三要搞一搞就业相关的东西了，就没有在ACM再拼一年）<br>但是，蓝桥杯的成绩还可以，起码有个奖了…</p>\n<p><img src=\"http://img.blog.csdn.net/20140624195413781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20140624195453375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><a href=\"http://blog.csdn.net/lttree/article/details/32321653\" target=\"_blank\" rel=\"noopener\">关于我的ACM</a></p>\n<p>然后，到了大三。<br>大三，就开始为就业做准备了，<br>首先是，重新拿起cocos2d引擎，模仿着做了很多当下流行的游戏，有些发了教程博文，有些就自己做着玩了玩：HelloKitty2048、万圣大作战，别踩白块、flappy bird、消灭星星。<br>然后，开始看一些书籍，因为我要做一个”有思想”的游戏开发者，多学多看一些游戏设计，可能更偏向于策划的东西。<br>最后，因为大三了，开始到达专业课的最终章了，就开始各种课设，大作业；再加上卓越计划的培训班，<br>学了一堆杂七杂八的，貌似现在已经忘了不少的东西：HTML，MFC，Android，iOS等等<br>然后，参加了cocos官方举办的游戏开发大赛，这个要好好说道说道了:<br>当时，我记得反转盛行，记得很火的捕鱼达人，然后就想了反过来，来个捕人达鱼，但是名字被美术同学嘲讽了，就改了个非常洋气的名字：人鱼塞壬。<br>时间不是很充裕，<br>看到比赛的时候就不是很早，<br>前期忙于最后期末考试及各种大课设，<br>中期，因为卓越班，暑假要到北京千锋培训十天，<br>但是，我的美术君是在学校进行甲骨文培训。<br>在千锋培训，也要交大作业呀，于是，一边学iOS开发，做大作业；一边再去忙活比赛作品。<br>事实证明，三心二意是不好的，尤其是当你两边都想做好的时候，最后iOS作品很一般，比赛作品也没实现多少。<br>还好回到学校，还有一段时间，马力全开的赶工，<br>先完成了大体的东西，然后慢慢往上加各种功能，到最后功能也没有加多少。<br>当初，游戏设定最初所想的都没有加上，<br>后来，作品交上去以后，也没有动力去完善它。</p>\n<p><img src=\"http://img.blog.csdn.net/20140928175809265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20141031230507078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20150818075936616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><a href=\"http://blog.csdn.net/lx417147512/article/category/2602825\" target=\"_blank\" rel=\"noopener\">2048系列教程</a><br><a href=\"http://blog.csdn.net/lx417147512/article/category/2889567\" target=\"_blank\" rel=\"noopener\">别踩白块系列教程</a><br><a href=\"http://blog.csdn.net/lx417147512/article/category/3258131\" target=\"_blank\" rel=\"noopener\">消灭星星系列教程</a><br><a href=\"http://blog.csdn.net/lx417147512/article/category/2677429\" target=\"_blank\" rel=\"noopener\">万圣大作战系列教程</a><br><a href=\"http://blog.csdn.net/lttree/article/details/47729343\" target=\"_blank\" rel=\"noopener\">关于人鱼塞壬</a></p>\n<p>大四的时间，基本就是在北京实习了，至今也在这家公司，后面也会谈到。</p>\n<p>短暂的大学生涯，印象最深刻的就是启蒙我CSDN的 贺利坚老师，ACM三大巨头 卢云宏老师、周世平老师、封玮老师。<br>然后，就是我那些奇葩可爱行为怪诞的室友与同学们，一起拼搏ACM、蓝桥杯的队友们，一起奋战齐鲁赛的组员们。</p>\n<p>噢，<br>大学最亏欠的还有我那女友，<br>看上面那些忙忙碌碌的东西，就知道，<br>我很少有时间能陪她，不是在实验室就是在外面比赛。<br>感谢她在背后一直默默支持我鼓励我。<br>（这段话，绝对不是她在旁边逼迫我写的，键盘什么的跪着也不疼）</p>\n<p><br></p>\n<h1 id=\"奋斗的工作团队\"><a href=\"#奋斗的工作团队\" class=\"headerlink\" title=\"奋斗的工作团队\"></a>奋斗的工作团队</h1><p>话说，<br>那应该是2015年十月还是十一月份的，<br>一人一包一行李箱闯北京，<br>面试了三家，就落户于现在这个铭匠公司，<br>以前都是我自己在学校做，自己负责全部。<br>第一次接触，真正的游戏公司是如何运作的。</p>\n<p>其实，在小公司干活，是一件非常累而且难的事情。<br>你会负责很多东西，你需要取舍，<br>哪些技术知识，浅尝辄止即可，无须深入；<br>哪些技术知识，需要好好研究探寻；<br>庄子中也谈论过：<br>吾生也有涯，而知也无涯。以有涯随无涯，殆已。<br>所以，把有限的精力投入到刀刃上是很重要的。</p>\n<p>在 铭匠 呆了也有一年多了，<br>期间参与了3.2个游戏制作。<br>继续坚持在这里，还是因为做游戏的态度与氛围。<br>毕竟，还年轻，工作的原因不是单纯的铁饭碗或者高回报。<br>个人的发展与心情占据更高的位置。<br>更加重要的是，<br>我相信自己的眼光，<br>我相信我们团队。</p>\n<p>马上游戏就要上线了，<br>史诗级大作:   诛神记！</p>\n<p><img src=\"http://img.blog.csdn.net/20170123154953588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><br></p>\n<h1 id=\"一些杂事\"><a href=\"#一些杂事\" class=\"headerlink\" title=\"一些杂事\"></a>一些杂事</h1><h2 id=\"今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\"><a href=\"#今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\" class=\"headerlink\" title=\"今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\"></a>今年，也读了一些书，有些是同事推荐的，有些是自己想看的。</h2><ul>\n<li>《活着》</li>\n<li>《REWORK》</li>\n<li>《从0到1》</li>\n<li>《生死疲劳》</li>\n<li>《人类简史》</li>\n<li>《卓有成效的程序员》</li>\n<li>《代码的整洁之道》</li>\n</ul>\n<h2 id=\"学python\"><a href=\"#学python\" class=\"headerlink\" title=\"学python\"></a>学python</h2><p>初衷是因为感觉python这个脚本语言很强大，可以做各种辅助自己的工具。<br>最后，也实践了一些，发工作日报，删文件名空格，火车票查询，感觉也不错，<br>为什么有种大炮打苍蝇的感觉。。。<br>接下来，还要做一些更多好玩的东西。。。</p>\n<h2 id=\"个人博客-www-lt-tree-com\"><a href=\"#个人博客-www-lt-tree-com\" class=\"headerlink\" title=\"个人博客  www.lt-tree.com\"></a>个人博客  <a href=\"http://www.lt-tree.com/\" target=\"_blank\" rel=\"noopener\">www.lt-tree.com</a></h2><p>用 hexo+Github 搭建了自己的个人博客。<br>现在，还没有腾出手好好研究，只是套了别人的模板。</p>\n<h2 id=\"Unity\"><a href=\"#Unity\" class=\"headerlink\" title=\"Unity\"></a>Unity</h2><p>学了一些Unity的东西。<br>简单的学习，起码如果换引擎，也不会手足无措。<br>以后，也可能转Unity了。。。<br>有点准备。</p>\n<p><br></p>\n<h1 id=\"接下来\"><a href=\"#接下来\" class=\"headerlink\" title=\"接下来\"></a>接下来</h1><p>2017年，<br>第一件想做的事就是 —— 减肥。<br>曾经不怎么重视体重，<br>晚上学习，嘴巴闲不下来，<br>结果现在越来越严重了。<br>是时候该重视一下了，<br>健康，是革命的本钱嘛！</p>\n<p>第二件事，读更多的书。<br>技术书籍可能不会读很多吧，<br>毕竟，有些东西等到出书，可能都被淘汰了。<br>主要想读更多的非专业技术书籍，<br>比如去年读的《活着》、《生死疲劳》等，<br>当然，还要扩展其他类别的。<br>你不知道下一款游戏是什么类型的，多扩充一下自己知识体系还是很好的。</p>\n<p>最后一件事，老生常谈的 —— 学习。<br>互联网这个行业，原地踏步就是退步。<br>还是要一直学下去，<br>学还要有选择的学，不能瞎学。</p>\n<p><br><br><br><br><br></p>\n<hr>\n<p>最后，<br>大学四年，没走偏。<br>毕业以后，没走偏。<br>2017，继续掌舵前行</p>"},{"title":"2015, 学剑","date":"2016-01-03T07:20:16.000Z","_content":"\n2015总结：刚出新手村的小侠客面对这纷繁的世界。\n\n<!-- more -->\n\n<br/>\n\n---\n\n2015年，是一个蜕变的一年。\n\n不管是如何度过了大学生活，总之，到时候离开了。 \n马上就要进入“外面的世界”， \n就好像，以前玩的RPG游戏，我们终于从新手村熬出来了，要踏上大陆的征程，当然，首先要完成新手村最后的考验。\n\n---\n\n<br/>\n\n# 新手村 \n一般，刚从新手村出来，面对这繁华的大陆，无数的诱惑，没有村长老爷爷（为什么不是老奶奶呢？）给你的小感叹号，告诉你一步步做什么。 \n穿着 裁缝铺大婶给你的衣服，挥舞着 铁匠大叔给你的长剑，带着 药铺小老板送你的几瓶红蓝药剂，相信我，一般用不到蓝色那瓶，不要舍不得用，到最后往往被更高级的药取代，好点的，能去跟杂货铺小奸商换1铜币，但大部分都是被丢弃的命运。\n\n# 任务 \n繁华的大陆有着千奇百怪的任务，不再像村长让你按顺序把村子周围清理一遍。 \n但是，刚出来的你面对着高额的悬赏任务，看着别人拿着把鎏金大剑，帅气的撕下悬赏，这时的你，只能摸摸残次的长剑（殊不知，当时，刚获得这把剑的时候，你曾开心的抱着它入睡），然后在任务版最下面一排寻找着。找邻居丢的小猫，帮饭馆打打野味，或者干脆就暂放长剑，去为客人端茶倒水…… \n每晚，盘算着还差多少能换来一把鎏金大剑，幻想着像之前那个人那样，帅气的撕下最顶部的悬赏，你也曾练习多次——撕悬赏的姿势。 \n又如何？ \n· 很多人看着每晚天文般的数字，就慢慢放弃了。在饭馆端菜的闲暇，看着一桌桌刚出来的侠客们谈天论地，默默的想起自己曾经的梦想，但又被老板的一喝惊醒。 \n· 很多人光顾着铜币，最基础的招式都忘记了，买着到手的鎏金大剑，帅气的用自己演练过多遍的姿势，撕下悬赏，在小侠客们艳羡的眼中，傲然的抬起下巴，奔向敌方。结果，一合不到，变血溅当场，连喝红药的时间都没有。 \n· 还有一些人，白天赚铜币，晚上练武功。Atk↑ Hp↓ and 狗带…\n\n# 衙门 \n这是，小侠客踏上这片大陆来，最受教育的一个地方。 \n他们是文明的， \n他们是合法的， \n他们能在文明&合法的前提下，让你无言以对。 \n这还是 顺天府 的体验。\n\n# 武馆 \n想做一名侠客，所以刚出来，还是先找一个武馆安顿下来，就算现在不能撕大悬赏，但也可以每天练剑，还可以攒铜币。 \n但，你从1xxxxxxxxxxxx号新手村出来，村长又没给你推荐信，这么多的新手村，都是想做侠客的人，找个武馆谈何容易？\n\n<br/>\n\n## 第一个武馆， \n武师：看你研究过招式的好坏。 \n小侠客：是的，曾经研究过一些，但是，只是皮毛而已。 \n武师：不错，那就说说 剑招中 探刺剑的动作要领吧。 \n小侠客：(⊙o⊙)…对不起，我只是懂一些皮毛。 \n武师：吓！ 什么↑~ 这都不知道？你怎么研究的招式！那你知道剑招有哪些吗？（鄙视ING） \n小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫，您刚才说的 探刺剑，属于刺剑一种，刺剑主要分为 平刺剑 、上刺剑 、下刺剑 、低刺剑、后刺剑 、探刺剑 。 \n武师：（依旧鄙视），这对于研究招式的来说是基础知识啊，你连这都不知道，你还说自己研究过招式。（你造假！） \n往后，就是各种怀疑。。 \n小侠客 OUT\n\n## 第二个武馆， \n前面很顺利，谈了1个多小时。。。 \n武师：你和别人对战过那么多次，你都用什么剑谱上的哪一式？ \n小侠客：我现在还没看那些剑谱的招式，我只是在想到的几个招式基础上，出一招。 \n武师：哦？ 那你是瞎打咯？ \n小侠客：不是瞎打，我也是有选择的，并不是想到什么就出什么。 \n武师：哦~↑~↓（你就是瞎打，哈哈，被我看出来了吧，瞎打，瞎打，瞎打，耶！） \n小侠客 OUT\n\n## 第三个武馆 \n武师：你现在是想做 剑客的学童是吗？那说说基本的剑招吧。 \n小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫。 \n武师：恩，可以，那简单说一下 劈剑的动作要领吧 \n小侠客：立剑，由上向下为劈，力达剑身，臂与剑成一直线。 \n武师：恩，不错，但是还有一点——抡劈贴身体右侧或左侧绕一立圆；后抡劈剑要与身体后转协调一致。 \n小侠客：（恍然大悟！） \n武师：你为什么要做剑客呢？ 剑客的未来如何？ \n小侠客：慷慨激昂的谈论了一下。\n\n<br/>\n**小侠客 达成成就 武馆剑童**\n<br/>\n\n# 村友 \n离开了新手村，曾经你感叹，新手村人真多，但就是这么多人，在被大陆稀释一下，你也很难再找到同新手村的人，更何况你新手村的玩伴。到最后，每次见到村友，即使俩人曾彼此红眼相对，最终也会红脸喝醉。 \n但也可能，曾经俩人红脸喝醉，到如今的红眼相对，亦或，默然无视。\n\n<br/>\n\n这个纷繁的世界 \n虽然还没有离开新手村，但提前体验了这个纷繁的世界。 \n2015年，想想，印象最深刻的还是下半年的这些体会。 \n独自一人来到北京，漂着~ \n2016年，我还是会继续做游戏， \n我也希望认识更多做游戏的朋友。\n\n<br/>\n<br/>\n<br/>\n\n---\n\n PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的... 换句话说：> 别来找我论剑 <\n\n","source":"_posts/2015，学剑.md","raw":"---\ntitle: 2015, 学剑\ndate: 2016-01-03 15:20:16\ntags: 抽空写\n\n---\n\n2015总结：刚出新手村的小侠客面对这纷繁的世界。\n\n<!-- more -->\n\n<br/>\n\n---\n\n2015年，是一个蜕变的一年。\n\n不管是如何度过了大学生活，总之，到时候离开了。 \n马上就要进入“外面的世界”， \n就好像，以前玩的RPG游戏，我们终于从新手村熬出来了，要踏上大陆的征程，当然，首先要完成新手村最后的考验。\n\n---\n\n<br/>\n\n# 新手村 \n一般，刚从新手村出来，面对这繁华的大陆，无数的诱惑，没有村长老爷爷（为什么不是老奶奶呢？）给你的小感叹号，告诉你一步步做什么。 \n穿着 裁缝铺大婶给你的衣服，挥舞着 铁匠大叔给你的长剑，带着 药铺小老板送你的几瓶红蓝药剂，相信我，一般用不到蓝色那瓶，不要舍不得用，到最后往往被更高级的药取代，好点的，能去跟杂货铺小奸商换1铜币，但大部分都是被丢弃的命运。\n\n# 任务 \n繁华的大陆有着千奇百怪的任务，不再像村长让你按顺序把村子周围清理一遍。 \n但是，刚出来的你面对着高额的悬赏任务，看着别人拿着把鎏金大剑，帅气的撕下悬赏，这时的你，只能摸摸残次的长剑（殊不知，当时，刚获得这把剑的时候，你曾开心的抱着它入睡），然后在任务版最下面一排寻找着。找邻居丢的小猫，帮饭馆打打野味，或者干脆就暂放长剑，去为客人端茶倒水…… \n每晚，盘算着还差多少能换来一把鎏金大剑，幻想着像之前那个人那样，帅气的撕下最顶部的悬赏，你也曾练习多次——撕悬赏的姿势。 \n又如何？ \n· 很多人看着每晚天文般的数字，就慢慢放弃了。在饭馆端菜的闲暇，看着一桌桌刚出来的侠客们谈天论地，默默的想起自己曾经的梦想，但又被老板的一喝惊醒。 \n· 很多人光顾着铜币，最基础的招式都忘记了，买着到手的鎏金大剑，帅气的用自己演练过多遍的姿势，撕下悬赏，在小侠客们艳羡的眼中，傲然的抬起下巴，奔向敌方。结果，一合不到，变血溅当场，连喝红药的时间都没有。 \n· 还有一些人，白天赚铜币，晚上练武功。Atk↑ Hp↓ and 狗带…\n\n# 衙门 \n这是，小侠客踏上这片大陆来，最受教育的一个地方。 \n他们是文明的， \n他们是合法的， \n他们能在文明&合法的前提下，让你无言以对。 \n这还是 顺天府 的体验。\n\n# 武馆 \n想做一名侠客，所以刚出来，还是先找一个武馆安顿下来，就算现在不能撕大悬赏，但也可以每天练剑，还可以攒铜币。 \n但，你从1xxxxxxxxxxxx号新手村出来，村长又没给你推荐信，这么多的新手村，都是想做侠客的人，找个武馆谈何容易？\n\n<br/>\n\n## 第一个武馆， \n武师：看你研究过招式的好坏。 \n小侠客：是的，曾经研究过一些，但是，只是皮毛而已。 \n武师：不错，那就说说 剑招中 探刺剑的动作要领吧。 \n小侠客：(⊙o⊙)…对不起，我只是懂一些皮毛。 \n武师：吓！ 什么↑~ 这都不知道？你怎么研究的招式！那你知道剑招有哪些吗？（鄙视ING） \n小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫，您刚才说的 探刺剑，属于刺剑一种，刺剑主要分为 平刺剑 、上刺剑 、下刺剑 、低刺剑、后刺剑 、探刺剑 。 \n武师：（依旧鄙视），这对于研究招式的来说是基础知识啊，你连这都不知道，你还说自己研究过招式。（你造假！） \n往后，就是各种怀疑。。 \n小侠客 OUT\n\n## 第二个武馆， \n前面很顺利，谈了1个多小时。。。 \n武师：你和别人对战过那么多次，你都用什么剑谱上的哪一式？ \n小侠客：我现在还没看那些剑谱的招式，我只是在想到的几个招式基础上，出一招。 \n武师：哦？ 那你是瞎打咯？ \n小侠客：不是瞎打，我也是有选择的，并不是想到什么就出什么。 \n武师：哦~↑~↓（你就是瞎打，哈哈，被我看出来了吧，瞎打，瞎打，瞎打，耶！） \n小侠客 OUT\n\n## 第三个武馆 \n武师：你现在是想做 剑客的学童是吗？那说说基本的剑招吧。 \n小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫。 \n武师：恩，可以，那简单说一下 劈剑的动作要领吧 \n小侠客：立剑，由上向下为劈，力达剑身，臂与剑成一直线。 \n武师：恩，不错，但是还有一点——抡劈贴身体右侧或左侧绕一立圆；后抡劈剑要与身体后转协调一致。 \n小侠客：（恍然大悟！） \n武师：你为什么要做剑客呢？ 剑客的未来如何？ \n小侠客：慷慨激昂的谈论了一下。\n\n<br/>\n**小侠客 达成成就 武馆剑童**\n<br/>\n\n# 村友 \n离开了新手村，曾经你感叹，新手村人真多，但就是这么多人，在被大陆稀释一下，你也很难再找到同新手村的人，更何况你新手村的玩伴。到最后，每次见到村友，即使俩人曾彼此红眼相对，最终也会红脸喝醉。 \n但也可能，曾经俩人红脸喝醉，到如今的红眼相对，亦或，默然无视。\n\n<br/>\n\n这个纷繁的世界 \n虽然还没有离开新手村，但提前体验了这个纷繁的世界。 \n2015年，想想，印象最深刻的还是下半年的这些体会。 \n独自一人来到北京，漂着~ \n2016年，我还是会继续做游戏， \n我也希望认识更多做游戏的朋友。\n\n<br/>\n<br/>\n<br/>\n\n---\n\n PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的... 换句话说：> 别来找我论剑 <\n\n","slug":"2015，学剑","published":1,"updated":"2018-07-17T17:05:10.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbbu0006esvqumsovuo2","content":"<p>2015总结：刚出新手村的小侠客面对这纷繁的世界。</p>\n<a id=\"more\"></a>\n<p><br></p>\n<hr>\n<p>2015年，是一个蜕变的一年。</p>\n<p>不管是如何度过了大学生活，总之，到时候离开了。<br>马上就要进入“外面的世界”，<br>就好像，以前玩的RPG游戏，我们终于从新手村熬出来了，要踏上大陆的征程，当然，首先要完成新手村最后的考验。</p>\n<hr>\n<p><br></p>\n<h1 id=\"新手村\"><a href=\"#新手村\" class=\"headerlink\" title=\"新手村\"></a>新手村</h1><p>一般，刚从新手村出来，面对这繁华的大陆，无数的诱惑，没有村长老爷爷（为什么不是老奶奶呢？）给你的小感叹号，告诉你一步步做什么。<br>穿着 裁缝铺大婶给你的衣服，挥舞着 铁匠大叔给你的长剑，带着 药铺小老板送你的几瓶红蓝药剂，相信我，一般用不到蓝色那瓶，不要舍不得用，到最后往往被更高级的药取代，好点的，能去跟杂货铺小奸商换1铜币，但大部分都是被丢弃的命运。</p>\n<h1 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h1><p>繁华的大陆有着千奇百怪的任务，不再像村长让你按顺序把村子周围清理一遍。<br>但是，刚出来的你面对着高额的悬赏任务，看着别人拿着把鎏金大剑，帅气的撕下悬赏，这时的你，只能摸摸残次的长剑（殊不知，当时，刚获得这把剑的时候，你曾开心的抱着它入睡），然后在任务版最下面一排寻找着。找邻居丢的小猫，帮饭馆打打野味，或者干脆就暂放长剑，去为客人端茶倒水……<br>每晚，盘算着还差多少能换来一把鎏金大剑，幻想着像之前那个人那样，帅气的撕下最顶部的悬赏，你也曾练习多次——撕悬赏的姿势。<br>又如何？<br>· 很多人看着每晚天文般的数字，就慢慢放弃了。在饭馆端菜的闲暇，看着一桌桌刚出来的侠客们谈天论地，默默的想起自己曾经的梦想，但又被老板的一喝惊醒。<br>· 很多人光顾着铜币，最基础的招式都忘记了，买着到手的鎏金大剑，帅气的用自己演练过多遍的姿势，撕下悬赏，在小侠客们艳羡的眼中，傲然的抬起下巴，奔向敌方。结果，一合不到，变血溅当场，连喝红药的时间都没有。<br>· 还有一些人，白天赚铜币，晚上练武功。Atk↑ Hp↓ and 狗带…</p>\n<h1 id=\"衙门\"><a href=\"#衙门\" class=\"headerlink\" title=\"衙门\"></a>衙门</h1><p>这是，小侠客踏上这片大陆来，最受教育的一个地方。<br>他们是文明的，<br>他们是合法的，<br>他们能在文明&amp;合法的前提下，让你无言以对。<br>这还是 顺天府 的体验。</p>\n<h1 id=\"武馆\"><a href=\"#武馆\" class=\"headerlink\" title=\"武馆\"></a>武馆</h1><p>想做一名侠客，所以刚出来，还是先找一个武馆安顿下来，就算现在不能撕大悬赏，但也可以每天练剑，还可以攒铜币。<br>但，你从1xxxxxxxxxxxx号新手村出来，村长又没给你推荐信，这么多的新手村，都是想做侠客的人，找个武馆谈何容易？</p>\n<p><br></p>\n<h2 id=\"第一个武馆，\"><a href=\"#第一个武馆，\" class=\"headerlink\" title=\"第一个武馆，\"></a>第一个武馆，</h2><p>武师：看你研究过招式的好坏。<br>小侠客：是的，曾经研究过一些，但是，只是皮毛而已。<br>武师：不错，那就说说 剑招中 探刺剑的动作要领吧。<br>小侠客：(⊙o⊙)…对不起，我只是懂一些皮毛。<br>武师：吓！ 什么↑~ 这都不知道？你怎么研究的招式！那你知道剑招有哪些吗？（鄙视ING）<br>小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫，您刚才说的 探刺剑，属于刺剑一种，刺剑主要分为 平刺剑 、上刺剑 、下刺剑 、低刺剑、后刺剑 、探刺剑 。<br>武师：（依旧鄙视），这对于研究招式的来说是基础知识啊，你连这都不知道，你还说自己研究过招式。（你造假！）<br>往后，就是各种怀疑。。<br>小侠客 OUT</p>\n<h2 id=\"第二个武馆，\"><a href=\"#第二个武馆，\" class=\"headerlink\" title=\"第二个武馆，\"></a>第二个武馆，</h2><p>前面很顺利，谈了1个多小时。。。<br>武师：你和别人对战过那么多次，你都用什么剑谱上的哪一式？<br>小侠客：我现在还没看那些剑谱的招式，我只是在想到的几个招式基础上，出一招。<br>武师：哦？ 那你是瞎打咯？<br>小侠客：不是瞎打，我也是有选择的，并不是想到什么就出什么。<br>武师：哦~↑~↓（你就是瞎打，哈哈，被我看出来了吧，瞎打，瞎打，瞎打，耶！）<br>小侠客 OUT</p>\n<h2 id=\"第三个武馆\"><a href=\"#第三个武馆\" class=\"headerlink\" title=\"第三个武馆\"></a>第三个武馆</h2><p>武师：你现在是想做 剑客的学童是吗？那说说基本的剑招吧。<br>小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫。<br>武师：恩，可以，那简单说一下 劈剑的动作要领吧<br>小侠客：立剑，由上向下为劈，力达剑身，臂与剑成一直线。<br>武师：恩，不错，但是还有一点——抡劈贴身体右侧或左侧绕一立圆；后抡劈剑要与身体后转协调一致。<br>小侠客：（恍然大悟！）<br>武师：你为什么要做剑客呢？ 剑客的未来如何？<br>小侠客：慷慨激昂的谈论了一下。</p>\n<p><br><br><strong>小侠客 达成成就 武馆剑童</strong><br><br></p>\n<h1 id=\"村友\"><a href=\"#村友\" class=\"headerlink\" title=\"村友\"></a>村友</h1><p>离开了新手村，曾经你感叹，新手村人真多，但就是这么多人，在被大陆稀释一下，你也很难再找到同新手村的人，更何况你新手村的玩伴。到最后，每次见到村友，即使俩人曾彼此红眼相对，最终也会红脸喝醉。<br>但也可能，曾经俩人红脸喝醉，到如今的红眼相对，亦或，默然无视。</p>\n<p><br></p>\n<p>这个纷繁的世界<br>虽然还没有离开新手村，但提前体验了这个纷繁的世界。<br>2015年，想想，印象最深刻的还是下半年的这些体会。<br>独自一人来到北京，漂着~<br>2016年，我还是会继续做游戏，<br>我也希望认识更多做游戏的朋友。</p>\n<p><br><br><br><br><br></p>\n<hr>\n<p> PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的… 换句话说：&gt; 别来找我论剑 &lt;</p>\n","site":{"data":{}},"excerpt":"<p>2015总结：刚出新手村的小侠客面对这纷繁的世界。</p>","more":"<p><br></p>\n<hr>\n<p>2015年，是一个蜕变的一年。</p>\n<p>不管是如何度过了大学生活，总之，到时候离开了。<br>马上就要进入“外面的世界”，<br>就好像，以前玩的RPG游戏，我们终于从新手村熬出来了，要踏上大陆的征程，当然，首先要完成新手村最后的考验。</p>\n<hr>\n<p><br></p>\n<h1 id=\"新手村\"><a href=\"#新手村\" class=\"headerlink\" title=\"新手村\"></a>新手村</h1><p>一般，刚从新手村出来，面对这繁华的大陆，无数的诱惑，没有村长老爷爷（为什么不是老奶奶呢？）给你的小感叹号，告诉你一步步做什么。<br>穿着 裁缝铺大婶给你的衣服，挥舞着 铁匠大叔给你的长剑，带着 药铺小老板送你的几瓶红蓝药剂，相信我，一般用不到蓝色那瓶，不要舍不得用，到最后往往被更高级的药取代，好点的，能去跟杂货铺小奸商换1铜币，但大部分都是被丢弃的命运。</p>\n<h1 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h1><p>繁华的大陆有着千奇百怪的任务，不再像村长让你按顺序把村子周围清理一遍。<br>但是，刚出来的你面对着高额的悬赏任务，看着别人拿着把鎏金大剑，帅气的撕下悬赏，这时的你，只能摸摸残次的长剑（殊不知，当时，刚获得这把剑的时候，你曾开心的抱着它入睡），然后在任务版最下面一排寻找着。找邻居丢的小猫，帮饭馆打打野味，或者干脆就暂放长剑，去为客人端茶倒水……<br>每晚，盘算着还差多少能换来一把鎏金大剑，幻想着像之前那个人那样，帅气的撕下最顶部的悬赏，你也曾练习多次——撕悬赏的姿势。<br>又如何？<br>· 很多人看着每晚天文般的数字，就慢慢放弃了。在饭馆端菜的闲暇，看着一桌桌刚出来的侠客们谈天论地，默默的想起自己曾经的梦想，但又被老板的一喝惊醒。<br>· 很多人光顾着铜币，最基础的招式都忘记了，买着到手的鎏金大剑，帅气的用自己演练过多遍的姿势，撕下悬赏，在小侠客们艳羡的眼中，傲然的抬起下巴，奔向敌方。结果，一合不到，变血溅当场，连喝红药的时间都没有。<br>· 还有一些人，白天赚铜币，晚上练武功。Atk↑ Hp↓ and 狗带…</p>\n<h1 id=\"衙门\"><a href=\"#衙门\" class=\"headerlink\" title=\"衙门\"></a>衙门</h1><p>这是，小侠客踏上这片大陆来，最受教育的一个地方。<br>他们是文明的，<br>他们是合法的，<br>他们能在文明&amp;合法的前提下，让你无言以对。<br>这还是 顺天府 的体验。</p>\n<h1 id=\"武馆\"><a href=\"#武馆\" class=\"headerlink\" title=\"武馆\"></a>武馆</h1><p>想做一名侠客，所以刚出来，还是先找一个武馆安顿下来，就算现在不能撕大悬赏，但也可以每天练剑，还可以攒铜币。<br>但，你从1xxxxxxxxxxxx号新手村出来，村长又没给你推荐信，这么多的新手村，都是想做侠客的人，找个武馆谈何容易？</p>\n<p><br></p>\n<h2 id=\"第一个武馆，\"><a href=\"#第一个武馆，\" class=\"headerlink\" title=\"第一个武馆，\"></a>第一个武馆，</h2><p>武师：看你研究过招式的好坏。<br>小侠客：是的，曾经研究过一些，但是，只是皮毛而已。<br>武师：不错，那就说说 剑招中 探刺剑的动作要领吧。<br>小侠客：(⊙o⊙)…对不起，我只是懂一些皮毛。<br>武师：吓！ 什么↑~ 这都不知道？你怎么研究的招式！那你知道剑招有哪些吗？（鄙视ING）<br>小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫，您刚才说的 探刺剑，属于刺剑一种，刺剑主要分为 平刺剑 、上刺剑 、下刺剑 、低刺剑、后刺剑 、探刺剑 。<br>武师：（依旧鄙视），这对于研究招式的来说是基础知识啊，你连这都不知道，你还说自己研究过招式。（你造假！）<br>往后，就是各种怀疑。。<br>小侠客 OUT</p>\n<h2 id=\"第二个武馆，\"><a href=\"#第二个武馆，\" class=\"headerlink\" title=\"第二个武馆，\"></a>第二个武馆，</h2><p>前面很顺利，谈了1个多小时。。。<br>武师：你和别人对战过那么多次，你都用什么剑谱上的哪一式？<br>小侠客：我现在还没看那些剑谱的招式，我只是在想到的几个招式基础上，出一招。<br>武师：哦？ 那你是瞎打咯？<br>小侠客：不是瞎打，我也是有选择的，并不是想到什么就出什么。<br>武师：哦~↑~↓（你就是瞎打，哈哈，被我看出来了吧，瞎打，瞎打，瞎打，耶！）<br>小侠客 OUT</p>\n<h2 id=\"第三个武馆\"><a href=\"#第三个武馆\" class=\"headerlink\" title=\"第三个武馆\"></a>第三个武馆</h2><p>武师：你现在是想做 剑客的学童是吗？那说说基本的剑招吧。<br>小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫。<br>武师：恩，可以，那简单说一下 劈剑的动作要领吧<br>小侠客：立剑，由上向下为劈，力达剑身，臂与剑成一直线。<br>武师：恩，不错，但是还有一点——抡劈贴身体右侧或左侧绕一立圆；后抡劈剑要与身体后转协调一致。<br>小侠客：（恍然大悟！）<br>武师：你为什么要做剑客呢？ 剑客的未来如何？<br>小侠客：慷慨激昂的谈论了一下。</p>\n<p><br><br><strong>小侠客 达成成就 武馆剑童</strong><br><br></p>\n<h1 id=\"村友\"><a href=\"#村友\" class=\"headerlink\" title=\"村友\"></a>村友</h1><p>离开了新手村，曾经你感叹，新手村人真多，但就是这么多人，在被大陆稀释一下，你也很难再找到同新手村的人，更何况你新手村的玩伴。到最后，每次见到村友，即使俩人曾彼此红眼相对，最终也会红脸喝醉。<br>但也可能，曾经俩人红脸喝醉，到如今的红眼相对，亦或，默然无视。</p>\n<p><br></p>\n<p>这个纷繁的世界<br>虽然还没有离开新手村，但提前体验了这个纷繁的世界。<br>2015年，想想，印象最深刻的还是下半年的这些体会。<br>独自一人来到北京，漂着~<br>2016年，我还是会继续做游戏，<br>我也希望认识更多做游戏的朋友。</p>\n<p><br><br><br><br><br></p>\n<hr>\n<p> PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的… 换句话说：&gt; 别来找我论剑 &lt;</p>"},{"title":"Cocos2d-lua ScrollView优化1","date":"2018-05-21T15:44:35.000Z","_content":"\ncocos2d lua \n修改ScrollView第一弹: item\n\n<!-- more -->\n\n<br/>\n\n# 做了什么\n\n## 问题：\n在使用ListView的时候，有多少个数据就会创建多少个item，并不会重复利用或回收释放。\n随着数据量的增加，会对性能造成很大的影响。\n\n## 解决方案：\n* clone 改成 create[据说是这样，我没有测试过 = =...]\n我们在使用ListView的时候，创建一个item，是通过lua重写的pushBackCustomItemView，\n它会先调用ListView的pushBackDefaultItem，通过clone创建一个csb，我们再把数据赋过去。\n所以，我们完全可以create一个csb，相对于clone会快一些。\n\n 缺点： 这个应该会有点效果，嗯，有点效果而已。\n\n* 分帧加载（逐帧加载）\n并不是在一帧全加载完，而是选择每帧加载一定个数，直到加载完成\n\n 缺点： 通过lua现有的协程来实现，但是流畅度不是很好，刚进入界面的时候可能看到item是逐渐加载进来的。\n\n* 异步加载\n这个主要对一些图片多的item，我们如果需要切换图，可以通过异步加载，等图片加载完再换图，这样不影响之后item的加载。\n\n 缺点： 会看到 默认图（csb创建的样子） -> 真正效果的转换过程。\n\n* 滑动到底加载\n就是先加载一定数量，监听到底部了，再拉取后面的部分，直到全部加载完。\n\n 缺点： 做一系列监听滑动等，没有根本解决问题。\n\n\n* 重用item[本次实现的方法]\n其实，上面的那些方法，都是优化的技巧，并没有从根本上解决问题。\n我们要根本的解决问题，就是创建可视区域可容纳数量+1的item，然后不断重用这些item。\n在ListView同一时刻，只能见到5个item，那我就创建6个item，然后不断重用这些item。\n\n\n<br>\n\n# 2.怎么做的\n## 机制\n首先明确view与inner，\nview像一个窗口，它的大小就是我们可以见到的大小（当然要设置裁切），\ninner是我们创建的所有item添加的地方（item并不是加载ScrollView上，而是加在了inner上）\nScrollView/ListView会监听滑动，同时相应的移动inner的位置，从而让我们看到item位置的变化。\n**简而言之，item加载inner上，是inner动，不是view动。**\n\n## 想法\n在ScrollView或者ListView中，正常情况是这样的：\n(前面数字代表item位置，后面数字代表item， ----代表可视区域)\n\n\n```lua\n\t\t1   1                   1\n\t\t    ----\n\t\t2   2                   2\n\t\t3   3                   3\n\t\t                        ----\n\t\t4   4                   4\n\t\t    ----                \n\t\t5   5                   5\n\t\t6   6                   6\n\t\t                        ----\n\t\t7   7                   7\n\t\t8   8                   8\n```\n\n可以发现，\n前面的例子中, 只能看见2, 3, 4; 但是看不见的1, 5, 6, 7, 8 依旧存在\n后面的例子中, 只能看见4, 5, 6; 但是看不见的1, 2, 3, 7, 8 依旧存在\n\n所以，我们改成下面的样子:\n\n```lua\n\t\t1                        \n\t\t    ----\n\t\t2   2                    \n\t\t3   3                    \n\t\t                        ----\n\t\t4   4                   4\n\t\t    ----                \n\t\t5                       5\n\t\t6                       6\n\t\t                        ----\n\t\t7                        \n\t\t8                        \n```\n\n因为可视区域只有3个item，我们就创建3个item，然后不断重用它们。(当然实际操作中，需要多创建一个，否则有穿帮风险)\n但是，位置，我们依旧留着（划重点，**inner大小不变**，否则无法滑动），\n在往下滑的时候，最上面的跑到下面去顶替下面的item；\n往上滑的时候，最下面的跑到上面去顶替上面的item；\n\n## 做法\n实现方法，\n可以通过监听ScrollView滑动，每当ScrollView滚动，我们可以知道当前inner位置，\n然后知道item的位置，从而判断item需不需要移动位置。\n这里，用的是编辑一个绘制方法，每隔一段时间，都看一下各个item位置，然后根据需求移动位置。\n我们在加载csb的时候将ScrollView记录下来，在view的update中调用它。\n（本来想重写update，但是遇到了一些问题，所以妥协用了它，具体可以看后面 遇到的问题）\n\n\ninit:\n\n```lua\n\t    --[[\n\t        name            :   item类名 \n\t        totalItemNum    :   item总数\n\t        ...             :   创建item时需要的参数\n\t    --]]\n\t    function ScrollView:setItemViewModel(name, totalItemNum, ...)\n```\n\n主要代码：\n\n\n```lua\n        -- 得到所需绘制item个数\n        local count = math.ceil(self:getContentSize().height / self.tItemContentSize.height) + 1\n        for i = 1, count do\n            -- 创建item\n            local view = CSBReaderLoad(name)\n            view:init(...)\n            if view.setIndex then\n                view:setIndex(i)\n            end\n\n            -- 将父节点转为widget类型（原因可见 遇到的问题）\n            local widget = quick.packageNodeToWidget(view.pLayer:getChildByName(\"LayerTouch\"))\n            view.pLayer = widget\n            -- widget随父节点透明度变化，默认是false\n            widget:setCascadeOpacityEnabled(true)\n            self:addChild(view.pLayer)\n\n            -- 总数小于所需绘制item个数，需要隐藏多创建的\n            view.pLayer:setVisible(i > 0 and i <= self.totalItemNum)\n            -- 设置位置，注意我们加item是从下往上加的\n            view.pLayer:setPositionY(self.tItemContentSize.height * (self.totalItemNum - i))\n            table.insert(self.tItemView, view)\n        end\n```\n\nupdate:\n\n```lua\n\t    function ScrollView:updateView(dt)\n```\n\n主要代码：\n\n```lua\n        -- 控制刷新时间\n        self.updateTimer = self.updateTimer + dt\n        if (self.updateTimer < self.updateInterval) then\n            return \n        end\n        self.updateTimer = 0;\n\n        ...\n\n        -- 遍历所有创建的item，如果它们需要移动位置，就移动它们的位置，并让它们重绘自己\n        for i = 1, length do\n            local item = self:getItemView(i)\n            local viewPos = self:getPositionInView(item.pLayer);\n            if increaseVal < 0 then\n                if viewPos.y < minBoundary then\n                    if item.index and item.setIndex then\n                        item:setIndex(item.index - length)\n                        item.pLayer:setVisible(item.index > 0 and item.index <= self.totalItemNum)\n                    end\n\n                    item.pLayer:setPositionY(item.pLayer:getPositionY() + offset)\n                end\n            elseif increaseVal > 0 then\n                if (viewPos.y > maxBoundary and item.pLayer:getPositionY() - offset > -self.tContentSize.height) then\n                    if item.index and item.setIndex then\n                        item:setIndex(item.index + length)\n                        item.pLayer:setVisible(item.index > 0 and item.index <= self.totalItemNum)\n                    end\n                    \n                    item.pLayer:setPositionY(item.pLayer:getPositionY() - offset)\n                end\n            end\n        end\n```\n\n<br/>\n\n# 3. 遇到的问题\n## 关于update\n在3.x中lua启用定时器有两种方法：\n\n第一种方法 scheduleUpdateWithPriorityLua\n\n```C++\n\t\tscheduleUpdateWithPriorityLua(update, priority)\n\t\t\tupdate - 刷新函数，\n\t\t\tpriority - 优先级，\n```\n\n此方法在Node类中实现，所以它的子类都可以使用。\n此方法默认为每帧都刷新因此，无法自定义刷新时间。\n这里，没有用这个方法，是因为ScrollView自己已经实现了update方法。\n所以，当我们重新注册给ScrollView一个update的时候，发现无法替换。\n这里涉及到计时器存储刷新方法：\n刷新方法通过哈希表存储，在主循环期间，不移除已有方法，而是将它暂停，且恢复时不加载新方法，而是将原有方法恢复。\n\n启用定时器的源码如下：\n\n```C++\nvoid Node::scheduleUpdateWithPriorityLua(int nHandler, int priority)\n{\n    unscheduleUpdate();\n    \n#if CC_ENABLE_SCRIPT_BINDING\n    _updateScriptHandler = nHandler;\n#endif\n    \n    _scheduler->scheduleUpdate(this, priority, !_running);\n}\n```\n\n执行： unscheduleUpdate();\n会先判断节点是否有update方法，在哈希表中查找，并执行移除方法：\n\n```C++\n\t\ttHashUpdateEntry *element = nullptr;\n\t\tHASH_FIND_PTR(_hashForUpdates, &target, element);\n\t\tif (element)\n\t\t{\n\t\t    if (_updateHashLocked)\n\t\t    {\n\t\t        element->entry->markedForDeletion = true;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t        this->removeUpdateFromHash(element->entry);\n\t\t    }\n\t\t}\n```\n\n上面移除方法，会根据_updateHashLocked值来执行，\n它为真时，\n如果节点原来有update，就先废弃它，废弃的方法是，将它标记为已删除，并让它暂停。注意！这里并没有真正的删除，而是将他表示是否删除的字段改值。\n它为假时，\n直接从哈希表中移除update方法。\n\n执行： \n```C++\n\t_scheduler->scheduleUpdate(this, priority, !_running);\n```\n\n加入update，也会先从哈希表中查找update，再执行添加方法。\n\n```C++\n\t\ttHashUpdateEntry *hashElement = nullptr;\n\t\tHASH_FIND_PTR(_hashForUpdates, &target, hashElement);\n\t\tif (hashElement)\n\t\t{\n\t\t    // check if priority has changed\n\t\t    if ((*hashElement->list)->priority != priority)\n\t\t    {\n\t\t        if (_updateHashLocked)\n\t\t        {\n\t\t            CCLOG(\"warning: you CANNOT change update priority in scheduled function\");\n\t\t            hashElement->entry->markedForDeletion = false;\n\t\t            hashElement->entry->paused = paused;\n\t\t            return;\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            // will be added again outside if (hashElement).\n\t\t            unscheduleUpdate(target);\n\t\t        }\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t        hashElement->entry->markedForDeletion = false;\n\t\t        hashElement->entry->paused = paused;\n\t\t        return;\n\t\t    }\n\t\t}\n```\n\n添加方法，会先判断优先级，如果优先级相同，那么就恢复原来的update。\n否则，根据 \\_updateHashLocked 值执行接下来操作。\n\n从移除和添加可以发现，关键值在于 \\_updateHashLocked的值，\n这个值在Scheduler::update中设置，开始的时候设置为true，最后结束设置为false。\n所以，如果要修改，就很麻烦，就放弃用这个方法了。\n*道理同样适用于所有自己已经重写了update，想要更换update情形*\n\n\n\n第二种方法，通过定时管理器调用\n就是上面指的Scheduler,不过我们不调ScrollView的，而是创建一个新的。\n\n```lua    \nscheduler:scheduleScriptFunc(update, inteval, isOnce)\n\tscheduler - cc.Director:getInstance():getScheduler()\n\tupdate - 更新方法\n\tinteval - 刷新时间间隔\n\tisOnce - 是否只执行一次\n```\n\n注意，如果用这个方法，需要负责创建，也要负责移除。\n上面方法会返回一个id，之后可以通过这个id来删除它。\n\n```lua\n\t\tcc.Director:getInstance():getScheduler():unscheduleScriptEntry(id)\n```\n\n## 为什么要把item包装成Widget\n在刚开始往ScrollView加child时，方法是将item的Node直接往ScrollView addChild（ScrollView封装了它，其实就是往inner addChild）\n但是当直接addChild时，会产生很多问题：比如按钮吞噬触摸，无法滑动等等。\n\n那就要问一下了，为什么ListView没事呢？\n这其实是Cocos对继承自ccui.Widget的事件的处理。\n所有的控件事件监听都是单点触摸，并且会吞噬事件。\n\n```C++\n\t\t_touchListener = EventListenerTouchOneByOne::create();\n\t\tCC_SAFE_RETAIN(_touchListener);\n\t\t_touchListener->setSwallowTouches(true);\n\t\t_touchListener->onTouchBegan = CC_CALLBACK_2(Widget::onTouchBegan, this);\n\t\t_touchListener->onTouchMoved = CC_CALLBACK_2(Widget::onTouchMoved, this);\n\t\t_touchListener->onTouchEnded = CC_CALLBACK_2(Widget::onTouchEnded, this);\n\t\t_touchListener->onTouchCancelled = CC_CALLBACK_2(Widget::onTouchCancelled, this);\n\t\t_eventDispatcher->addEventListenerWithSceneGraphPriority(_touchListener, this);\n```\n\n在widget的onTouchBegan, onTouchMove, onTouchEnd中，都会调用 propagateTouchEvent,\n这个方法是传播事件，每个子节点会吞噬事件，自己处理完，再向父节点传递，一般ScrollView、ListView、PageView会处理这些事件。\n\n```C++\n\t\tWidget* widgetParent = getWidgetParent();\n\t\tif (widgetParent)\n\t\t{\n\t\t    widgetParent->_hittedByCamera = _hittedByCamera;\n\t\t    widgetParent->interceptTouchEvent(event, sender, touch);\n\t\t    widgetParent->_hittedByCamera = nullptr;\n\t\t}\n```\n\n可以看出，只有继承自Widget类的，才会接收到interceptTouchEvent,并进行处理。\n而且，ScrollView的interceptTouchEvent 已经处理好了按钮的点击，取消等效果。\n\n```C++\n\t\tvoid ScrollView::interceptTouchEvent(Widget::TouchEventType event, Widget *sender,Touch* touch)\n\t\t{\n\t\t    if(!_touchEnabled)\n\t\t    {\n\t\t        Layout::interceptTouchEvent(event, sender, touch);\n\t\t        return;\n\t\t    }\n\t\t    if(_direction == Direction::NONE)\n\t\t        return;\n\t\t    Vec2 touchPoint = touch->getLocation();\n\t\t    switch (event)\n\t\t    {\n\t\t        case TouchEventType::BEGAN:\n\t\t        {\n\t\t            _isInterceptTouch = true;\n\t\t            _touchBeganPosition = touch->getLocation();\n\t\t            handlePressLogic(touch);\n\t\t        }\n\t\t        break;\n\t\t        case TouchEventType::MOVED:\n\t\t        {\n\t\t            _touchMovePosition = touch->getLocation();\n\t\t            // calculates move offset in points\n\t\t            float offsetInInch = 0;\n\t\t            switch (_direction)\n\t\t            {\n\t\t                case Direction::HORIZONTAL:\n\t\t                    offsetInInch = convertDistanceFromPointToInch(Vec2(std::abs(sender->getTouchBeganPosition().x - touchPoint.x), 0));\n\t\t                    break;\n\t\t                case Direction::VERTICAL:\n\t\t                    offsetInInch = convertDistanceFromPointToInch(Vec2(0, std::abs(sender->getTouchBeganPosition().y - touchPoint.y)));\n\t\t                    break;\n\t\t                case Direction::BOTH:\n\t\t                    offsetInInch = convertDistanceFromPointToInch(sender->getTouchBeganPosition() - touchPoint);\n\t\t                    break;\n\t\t                default:\n\t\t                    break;\n\t\t            }\n\t\t            if (offsetInInch > _childFocusCancelOffsetInInch)\n\t\t            {\n\t\t                sender->setHighlighted(false);\n\t\t                handleMoveLogic(touch);\n\t\t            }\n\t\t        }\n\t\t        break;\n\n\t\t        case TouchEventType::CANCELED:\n\t\t        case TouchEventType::ENDED:\n\t\t        {\n\t\t            _touchEndPosition = touch->getLocation();\n\t\t            handleReleaseLogic(touch);\n\t\t            if (sender->isSwallowTouches())\n\t\t            {\n\t\t                _isInterceptTouch = false;\n\t\t            }\n\t\t        }\n\t\t        break;\n\t\t    }\n\t\t}\n```\n\n之前的方法有问题，就是因为直接将Node addChild到ScrollView，当触摸传递到Node，发现无法转成Widget对象，就放弃了向上传播事件。\n所以，需要将item包装成Widget来让它将事件传递给ScrollView。\n\n<br/>\n\n# 4. 总结\n怎么用这个呢？\n\n1. 调用 ScrollView:setItemViewModel(item, item总数, 创建item所需的额外参数)\n2. 所有的item要有方法 item:setIndex(index), 并且以 self.index 作为自己的index[这里可以写一个类来封装，让所有item都继承它]\n3. 在删除的时候，要将ScrollView的每帧更新方法移除 \n\n\n现在，ScrollView已经可以重用item了。\n但是，还是比较粗糙；做为一个控件，仅仅是这样可不行。\n之后，会对这个控件慢慢优化，让它支持更多的功能，更加得心应手。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Cocos2d-lua ScrollView优化1.md","raw":"---\ntitle: Cocos2d-lua ScrollView优化1\ndate: 2018-05-21 23:44:35\ntags: [cocos2d, 想就做]\n\n---\n\ncocos2d lua \n修改ScrollView第一弹: item\n\n<!-- more -->\n\n<br/>\n\n# 做了什么\n\n## 问题：\n在使用ListView的时候，有多少个数据就会创建多少个item，并不会重复利用或回收释放。\n随着数据量的增加，会对性能造成很大的影响。\n\n## 解决方案：\n* clone 改成 create[据说是这样，我没有测试过 = =...]\n我们在使用ListView的时候，创建一个item，是通过lua重写的pushBackCustomItemView，\n它会先调用ListView的pushBackDefaultItem，通过clone创建一个csb，我们再把数据赋过去。\n所以，我们完全可以create一个csb，相对于clone会快一些。\n\n 缺点： 这个应该会有点效果，嗯，有点效果而已。\n\n* 分帧加载（逐帧加载）\n并不是在一帧全加载完，而是选择每帧加载一定个数，直到加载完成\n\n 缺点： 通过lua现有的协程来实现，但是流畅度不是很好，刚进入界面的时候可能看到item是逐渐加载进来的。\n\n* 异步加载\n这个主要对一些图片多的item，我们如果需要切换图，可以通过异步加载，等图片加载完再换图，这样不影响之后item的加载。\n\n 缺点： 会看到 默认图（csb创建的样子） -> 真正效果的转换过程。\n\n* 滑动到底加载\n就是先加载一定数量，监听到底部了，再拉取后面的部分，直到全部加载完。\n\n 缺点： 做一系列监听滑动等，没有根本解决问题。\n\n\n* 重用item[本次实现的方法]\n其实，上面的那些方法，都是优化的技巧，并没有从根本上解决问题。\n我们要根本的解决问题，就是创建可视区域可容纳数量+1的item，然后不断重用这些item。\n在ListView同一时刻，只能见到5个item，那我就创建6个item，然后不断重用这些item。\n\n\n<br>\n\n# 2.怎么做的\n## 机制\n首先明确view与inner，\nview像一个窗口，它的大小就是我们可以见到的大小（当然要设置裁切），\ninner是我们创建的所有item添加的地方（item并不是加载ScrollView上，而是加在了inner上）\nScrollView/ListView会监听滑动，同时相应的移动inner的位置，从而让我们看到item位置的变化。\n**简而言之，item加载inner上，是inner动，不是view动。**\n\n## 想法\n在ScrollView或者ListView中，正常情况是这样的：\n(前面数字代表item位置，后面数字代表item， ----代表可视区域)\n\n\n```lua\n\t\t1   1                   1\n\t\t    ----\n\t\t2   2                   2\n\t\t3   3                   3\n\t\t                        ----\n\t\t4   4                   4\n\t\t    ----                \n\t\t5   5                   5\n\t\t6   6                   6\n\t\t                        ----\n\t\t7   7                   7\n\t\t8   8                   8\n```\n\n可以发现，\n前面的例子中, 只能看见2, 3, 4; 但是看不见的1, 5, 6, 7, 8 依旧存在\n后面的例子中, 只能看见4, 5, 6; 但是看不见的1, 2, 3, 7, 8 依旧存在\n\n所以，我们改成下面的样子:\n\n```lua\n\t\t1                        \n\t\t    ----\n\t\t2   2                    \n\t\t3   3                    \n\t\t                        ----\n\t\t4   4                   4\n\t\t    ----                \n\t\t5                       5\n\t\t6                       6\n\t\t                        ----\n\t\t7                        \n\t\t8                        \n```\n\n因为可视区域只有3个item，我们就创建3个item，然后不断重用它们。(当然实际操作中，需要多创建一个，否则有穿帮风险)\n但是，位置，我们依旧留着（划重点，**inner大小不变**，否则无法滑动），\n在往下滑的时候，最上面的跑到下面去顶替下面的item；\n往上滑的时候，最下面的跑到上面去顶替上面的item；\n\n## 做法\n实现方法，\n可以通过监听ScrollView滑动，每当ScrollView滚动，我们可以知道当前inner位置，\n然后知道item的位置，从而判断item需不需要移动位置。\n这里，用的是编辑一个绘制方法，每隔一段时间，都看一下各个item位置，然后根据需求移动位置。\n我们在加载csb的时候将ScrollView记录下来，在view的update中调用它。\n（本来想重写update，但是遇到了一些问题，所以妥协用了它，具体可以看后面 遇到的问题）\n\n\ninit:\n\n```lua\n\t    --[[\n\t        name            :   item类名 \n\t        totalItemNum    :   item总数\n\t        ...             :   创建item时需要的参数\n\t    --]]\n\t    function ScrollView:setItemViewModel(name, totalItemNum, ...)\n```\n\n主要代码：\n\n\n```lua\n        -- 得到所需绘制item个数\n        local count = math.ceil(self:getContentSize().height / self.tItemContentSize.height) + 1\n        for i = 1, count do\n            -- 创建item\n            local view = CSBReaderLoad(name)\n            view:init(...)\n            if view.setIndex then\n                view:setIndex(i)\n            end\n\n            -- 将父节点转为widget类型（原因可见 遇到的问题）\n            local widget = quick.packageNodeToWidget(view.pLayer:getChildByName(\"LayerTouch\"))\n            view.pLayer = widget\n            -- widget随父节点透明度变化，默认是false\n            widget:setCascadeOpacityEnabled(true)\n            self:addChild(view.pLayer)\n\n            -- 总数小于所需绘制item个数，需要隐藏多创建的\n            view.pLayer:setVisible(i > 0 and i <= self.totalItemNum)\n            -- 设置位置，注意我们加item是从下往上加的\n            view.pLayer:setPositionY(self.tItemContentSize.height * (self.totalItemNum - i))\n            table.insert(self.tItemView, view)\n        end\n```\n\nupdate:\n\n```lua\n\t    function ScrollView:updateView(dt)\n```\n\n主要代码：\n\n```lua\n        -- 控制刷新时间\n        self.updateTimer = self.updateTimer + dt\n        if (self.updateTimer < self.updateInterval) then\n            return \n        end\n        self.updateTimer = 0;\n\n        ...\n\n        -- 遍历所有创建的item，如果它们需要移动位置，就移动它们的位置，并让它们重绘自己\n        for i = 1, length do\n            local item = self:getItemView(i)\n            local viewPos = self:getPositionInView(item.pLayer);\n            if increaseVal < 0 then\n                if viewPos.y < minBoundary then\n                    if item.index and item.setIndex then\n                        item:setIndex(item.index - length)\n                        item.pLayer:setVisible(item.index > 0 and item.index <= self.totalItemNum)\n                    end\n\n                    item.pLayer:setPositionY(item.pLayer:getPositionY() + offset)\n                end\n            elseif increaseVal > 0 then\n                if (viewPos.y > maxBoundary and item.pLayer:getPositionY() - offset > -self.tContentSize.height) then\n                    if item.index and item.setIndex then\n                        item:setIndex(item.index + length)\n                        item.pLayer:setVisible(item.index > 0 and item.index <= self.totalItemNum)\n                    end\n                    \n                    item.pLayer:setPositionY(item.pLayer:getPositionY() - offset)\n                end\n            end\n        end\n```\n\n<br/>\n\n# 3. 遇到的问题\n## 关于update\n在3.x中lua启用定时器有两种方法：\n\n第一种方法 scheduleUpdateWithPriorityLua\n\n```C++\n\t\tscheduleUpdateWithPriorityLua(update, priority)\n\t\t\tupdate - 刷新函数，\n\t\t\tpriority - 优先级，\n```\n\n此方法在Node类中实现，所以它的子类都可以使用。\n此方法默认为每帧都刷新因此，无法自定义刷新时间。\n这里，没有用这个方法，是因为ScrollView自己已经实现了update方法。\n所以，当我们重新注册给ScrollView一个update的时候，发现无法替换。\n这里涉及到计时器存储刷新方法：\n刷新方法通过哈希表存储，在主循环期间，不移除已有方法，而是将它暂停，且恢复时不加载新方法，而是将原有方法恢复。\n\n启用定时器的源码如下：\n\n```C++\nvoid Node::scheduleUpdateWithPriorityLua(int nHandler, int priority)\n{\n    unscheduleUpdate();\n    \n#if CC_ENABLE_SCRIPT_BINDING\n    _updateScriptHandler = nHandler;\n#endif\n    \n    _scheduler->scheduleUpdate(this, priority, !_running);\n}\n```\n\n执行： unscheduleUpdate();\n会先判断节点是否有update方法，在哈希表中查找，并执行移除方法：\n\n```C++\n\t\ttHashUpdateEntry *element = nullptr;\n\t\tHASH_FIND_PTR(_hashForUpdates, &target, element);\n\t\tif (element)\n\t\t{\n\t\t    if (_updateHashLocked)\n\t\t    {\n\t\t        element->entry->markedForDeletion = true;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t        this->removeUpdateFromHash(element->entry);\n\t\t    }\n\t\t}\n```\n\n上面移除方法，会根据_updateHashLocked值来执行，\n它为真时，\n如果节点原来有update，就先废弃它，废弃的方法是，将它标记为已删除，并让它暂停。注意！这里并没有真正的删除，而是将他表示是否删除的字段改值。\n它为假时，\n直接从哈希表中移除update方法。\n\n执行： \n```C++\n\t_scheduler->scheduleUpdate(this, priority, !_running);\n```\n\n加入update，也会先从哈希表中查找update，再执行添加方法。\n\n```C++\n\t\ttHashUpdateEntry *hashElement = nullptr;\n\t\tHASH_FIND_PTR(_hashForUpdates, &target, hashElement);\n\t\tif (hashElement)\n\t\t{\n\t\t    // check if priority has changed\n\t\t    if ((*hashElement->list)->priority != priority)\n\t\t    {\n\t\t        if (_updateHashLocked)\n\t\t        {\n\t\t            CCLOG(\"warning: you CANNOT change update priority in scheduled function\");\n\t\t            hashElement->entry->markedForDeletion = false;\n\t\t            hashElement->entry->paused = paused;\n\t\t            return;\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            // will be added again outside if (hashElement).\n\t\t            unscheduleUpdate(target);\n\t\t        }\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t        hashElement->entry->markedForDeletion = false;\n\t\t        hashElement->entry->paused = paused;\n\t\t        return;\n\t\t    }\n\t\t}\n```\n\n添加方法，会先判断优先级，如果优先级相同，那么就恢复原来的update。\n否则，根据 \\_updateHashLocked 值执行接下来操作。\n\n从移除和添加可以发现，关键值在于 \\_updateHashLocked的值，\n这个值在Scheduler::update中设置，开始的时候设置为true，最后结束设置为false。\n所以，如果要修改，就很麻烦，就放弃用这个方法了。\n*道理同样适用于所有自己已经重写了update，想要更换update情形*\n\n\n\n第二种方法，通过定时管理器调用\n就是上面指的Scheduler,不过我们不调ScrollView的，而是创建一个新的。\n\n```lua    \nscheduler:scheduleScriptFunc(update, inteval, isOnce)\n\tscheduler - cc.Director:getInstance():getScheduler()\n\tupdate - 更新方法\n\tinteval - 刷新时间间隔\n\tisOnce - 是否只执行一次\n```\n\n注意，如果用这个方法，需要负责创建，也要负责移除。\n上面方法会返回一个id，之后可以通过这个id来删除它。\n\n```lua\n\t\tcc.Director:getInstance():getScheduler():unscheduleScriptEntry(id)\n```\n\n## 为什么要把item包装成Widget\n在刚开始往ScrollView加child时，方法是将item的Node直接往ScrollView addChild（ScrollView封装了它，其实就是往inner addChild）\n但是当直接addChild时，会产生很多问题：比如按钮吞噬触摸，无法滑动等等。\n\n那就要问一下了，为什么ListView没事呢？\n这其实是Cocos对继承自ccui.Widget的事件的处理。\n所有的控件事件监听都是单点触摸，并且会吞噬事件。\n\n```C++\n\t\t_touchListener = EventListenerTouchOneByOne::create();\n\t\tCC_SAFE_RETAIN(_touchListener);\n\t\t_touchListener->setSwallowTouches(true);\n\t\t_touchListener->onTouchBegan = CC_CALLBACK_2(Widget::onTouchBegan, this);\n\t\t_touchListener->onTouchMoved = CC_CALLBACK_2(Widget::onTouchMoved, this);\n\t\t_touchListener->onTouchEnded = CC_CALLBACK_2(Widget::onTouchEnded, this);\n\t\t_touchListener->onTouchCancelled = CC_CALLBACK_2(Widget::onTouchCancelled, this);\n\t\t_eventDispatcher->addEventListenerWithSceneGraphPriority(_touchListener, this);\n```\n\n在widget的onTouchBegan, onTouchMove, onTouchEnd中，都会调用 propagateTouchEvent,\n这个方法是传播事件，每个子节点会吞噬事件，自己处理完，再向父节点传递，一般ScrollView、ListView、PageView会处理这些事件。\n\n```C++\n\t\tWidget* widgetParent = getWidgetParent();\n\t\tif (widgetParent)\n\t\t{\n\t\t    widgetParent->_hittedByCamera = _hittedByCamera;\n\t\t    widgetParent->interceptTouchEvent(event, sender, touch);\n\t\t    widgetParent->_hittedByCamera = nullptr;\n\t\t}\n```\n\n可以看出，只有继承自Widget类的，才会接收到interceptTouchEvent,并进行处理。\n而且，ScrollView的interceptTouchEvent 已经处理好了按钮的点击，取消等效果。\n\n```C++\n\t\tvoid ScrollView::interceptTouchEvent(Widget::TouchEventType event, Widget *sender,Touch* touch)\n\t\t{\n\t\t    if(!_touchEnabled)\n\t\t    {\n\t\t        Layout::interceptTouchEvent(event, sender, touch);\n\t\t        return;\n\t\t    }\n\t\t    if(_direction == Direction::NONE)\n\t\t        return;\n\t\t    Vec2 touchPoint = touch->getLocation();\n\t\t    switch (event)\n\t\t    {\n\t\t        case TouchEventType::BEGAN:\n\t\t        {\n\t\t            _isInterceptTouch = true;\n\t\t            _touchBeganPosition = touch->getLocation();\n\t\t            handlePressLogic(touch);\n\t\t        }\n\t\t        break;\n\t\t        case TouchEventType::MOVED:\n\t\t        {\n\t\t            _touchMovePosition = touch->getLocation();\n\t\t            // calculates move offset in points\n\t\t            float offsetInInch = 0;\n\t\t            switch (_direction)\n\t\t            {\n\t\t                case Direction::HORIZONTAL:\n\t\t                    offsetInInch = convertDistanceFromPointToInch(Vec2(std::abs(sender->getTouchBeganPosition().x - touchPoint.x), 0));\n\t\t                    break;\n\t\t                case Direction::VERTICAL:\n\t\t                    offsetInInch = convertDistanceFromPointToInch(Vec2(0, std::abs(sender->getTouchBeganPosition().y - touchPoint.y)));\n\t\t                    break;\n\t\t                case Direction::BOTH:\n\t\t                    offsetInInch = convertDistanceFromPointToInch(sender->getTouchBeganPosition() - touchPoint);\n\t\t                    break;\n\t\t                default:\n\t\t                    break;\n\t\t            }\n\t\t            if (offsetInInch > _childFocusCancelOffsetInInch)\n\t\t            {\n\t\t                sender->setHighlighted(false);\n\t\t                handleMoveLogic(touch);\n\t\t            }\n\t\t        }\n\t\t        break;\n\n\t\t        case TouchEventType::CANCELED:\n\t\t        case TouchEventType::ENDED:\n\t\t        {\n\t\t            _touchEndPosition = touch->getLocation();\n\t\t            handleReleaseLogic(touch);\n\t\t            if (sender->isSwallowTouches())\n\t\t            {\n\t\t                _isInterceptTouch = false;\n\t\t            }\n\t\t        }\n\t\t        break;\n\t\t    }\n\t\t}\n```\n\n之前的方法有问题，就是因为直接将Node addChild到ScrollView，当触摸传递到Node，发现无法转成Widget对象，就放弃了向上传播事件。\n所以，需要将item包装成Widget来让它将事件传递给ScrollView。\n\n<br/>\n\n# 4. 总结\n怎么用这个呢？\n\n1. 调用 ScrollView:setItemViewModel(item, item总数, 创建item所需的额外参数)\n2. 所有的item要有方法 item:setIndex(index), 并且以 self.index 作为自己的index[这里可以写一个类来封装，让所有item都继承它]\n3. 在删除的时候，要将ScrollView的每帧更新方法移除 \n\n\n现在，ScrollView已经可以重用item了。\n但是，还是比较粗糙；做为一个控件，仅仅是这样可不行。\n之后，会对这个控件慢慢优化，让它支持更多的功能，更加得心应手。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Cocos2d-lua ScrollView优化1","published":1,"updated":"2018-07-19T16:36:18.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbbv0008esvqasfq2la8","content":"<p>cocos2d lua<br>修改ScrollView第一弹: item</p>\n<a id=\"more\"></a>\n<p><br></p>\n<h1 id=\"做了什么\"><a href=\"#做了什么\" class=\"headerlink\" title=\"做了什么\"></a>做了什么</h1><h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><p>在使用ListView的时候，有多少个数据就会创建多少个item，并不会重复利用或回收释放。<br>随着数据量的增加，会对性能造成很大的影响。</p>\n<h2 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h2><ul>\n<li><p>clone 改成 create[据说是这样，我没有测试过 = =…]<br>我们在使用ListView的时候，创建一个item，是通过lua重写的pushBackCustomItemView，<br>它会先调用ListView的pushBackDefaultItem，通过clone创建一个csb，我们再把数据赋过去。<br>所以，我们完全可以create一个csb，相对于clone会快一些。</p>\n<p>缺点： 这个应该会有点效果，嗯，有点效果而已。</p>\n</li>\n<li><p>分帧加载（逐帧加载）<br>并不是在一帧全加载完，而是选择每帧加载一定个数，直到加载完成</p>\n<p>缺点： 通过lua现有的协程来实现，但是流畅度不是很好，刚进入界面的时候可能看到item是逐渐加载进来的。</p>\n</li>\n<li><p>异步加载<br>这个主要对一些图片多的item，我们如果需要切换图，可以通过异步加载，等图片加载完再换图，这样不影响之后item的加载。</p>\n<p>缺点： 会看到 默认图（csb创建的样子） -&gt; 真正效果的转换过程。</p>\n</li>\n<li><p>滑动到底加载<br>就是先加载一定数量，监听到底部了，再拉取后面的部分，直到全部加载完。</p>\n<p>缺点： 做一系列监听滑动等，没有根本解决问题。</p>\n</li>\n</ul>\n<ul>\n<li>重用item[本次实现的方法]<br>其实，上面的那些方法，都是优化的技巧，并没有从根本上解决问题。<br>我们要根本的解决问题，就是创建可视区域可容纳数量+1的item，然后不断重用这些item。<br>在ListView同一时刻，只能见到5个item，那我就创建6个item，然后不断重用这些item。</li>\n</ul>\n<p><br></p>\n<h1 id=\"2-怎么做的\"><a href=\"#2-怎么做的\" class=\"headerlink\" title=\"2.怎么做的\"></a>2.怎么做的</h1><h2 id=\"机制\"><a href=\"#机制\" class=\"headerlink\" title=\"机制\"></a>机制</h2><p>首先明确view与inner，<br>view像一个窗口，它的大小就是我们可以见到的大小（当然要设置裁切），<br>inner是我们创建的所有item添加的地方（item并不是加载ScrollView上，而是加在了inner上）<br>ScrollView/ListView会监听滑动，同时相应的移动inner的位置，从而让我们看到item位置的变化。<br><strong>简而言之，item加载inner上，是inner动，不是view动。</strong></p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>在ScrollView或者ListView中，正常情况是这样的：<br>(前面数字代表item位置，后面数字代表item， —-代表可视区域)</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1</span>                   <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">2</span>                   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"number\">3</span>                   <span class=\"number\">3</span></span><br><span class=\"line\">                        <span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">4</span>                   <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"comment\">----                </span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"number\">5</span>                   <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span>   <span class=\"number\">6</span>                   <span class=\"number\">6</span></span><br><span class=\"line\">                        <span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">7</span>   <span class=\"number\">7</span>                   <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span>   <span class=\"number\">8</span>                   <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>可以发现，<br>前面的例子中, 只能看见2, 3, 4; 但是看不见的1, 5, 6, 7, 8 依旧存在<br>后面的例子中, 只能看见4, 5, 6; 但是看不见的1, 2, 3, 7, 8 依旧存在</p>\n<p>所以，我们改成下面的样子:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>                        </span><br><span class=\"line\">    <span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">2</span>                    </span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"number\">3</span>                    </span><br><span class=\"line\">                        <span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">4</span>                   <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"comment\">----                </span></span><br><span class=\"line\"><span class=\"number\">5</span>                       <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span>                       <span class=\"number\">6</span></span><br><span class=\"line\">                        <span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">7</span>                        </span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>因为可视区域只有3个item，我们就创建3个item，然后不断重用它们。(当然实际操作中，需要多创建一个，否则有穿帮风险)<br>但是，位置，我们依旧留着（划重点，<strong>inner大小不变</strong>，否则无法滑动），<br>在往下滑的时候，最上面的跑到下面去顶替下面的item；<br>往上滑的时候，最下面的跑到上面去顶替上面的item；</p>\n<h2 id=\"做法\"><a href=\"#做法\" class=\"headerlink\" title=\"做法\"></a>做法</h2><p>实现方法，<br>可以通过监听ScrollView滑动，每当ScrollView滚动，我们可以知道当前inner位置，<br>然后知道item的位置，从而判断item需不需要移动位置。<br>这里，用的是编辑一个绘制方法，每隔一段时间，都看一下各个item位置，然后根据需求移动位置。<br>我们在加载csb的时候将ScrollView记录下来，在view的update中调用它。<br>（本来想重写update，但是遇到了一些问题，所以妥协用了它，具体可以看后面 遇到的问题）</p>\n<p>init:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">    name            :   item类名 </span></span><br><span class=\"line\"><span class=\"comment\">    totalItemNum    :   item总数</span></span><br><span class=\"line\"><span class=\"comment\">    ...             :   创建item时需要的参数</span></span><br><span class=\"line\"><span class=\"comment\">--]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollView:setItemViewModel</span><span class=\"params\">(name, totalItemNum, ...)</span></span></span><br></pre></td></tr></table></figure>\n<p>主要代码：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 得到所需绘制item个数</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> count = <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(self:getContentSize().height / self.tItemContentSize.height) + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, count <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\">-- 创建item</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> view = CSBReaderLoad(name)</span><br><span class=\"line\">    view:init(...)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> view.setIndex <span class=\"keyword\">then</span></span><br><span class=\"line\">        view:setIndex(i)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 将父节点转为widget类型（原因可见 遇到的问题）</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> widget = quick.packageNodeToWidget(view.pLayer:getChildByName(<span class=\"string\">\"LayerTouch\"</span>))</span><br><span class=\"line\">    view.pLayer = widget</span><br><span class=\"line\">    <span class=\"comment\">-- widget随父节点透明度变化，默认是false</span></span><br><span class=\"line\">    widget:setCascadeOpacityEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    self:addChild(view.pLayer)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 总数小于所需绘制item个数，需要隐藏多创建的</span></span><br><span class=\"line\">    view.pLayer:setVisible(i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> i &lt;= self.totalItemNum)</span><br><span class=\"line\">    <span class=\"comment\">-- 设置位置，注意我们加item是从下往上加的</span></span><br><span class=\"line\">    view.pLayer:setPositionY(self.tItemContentSize.height * (self.totalItemNum - i))</span><br><span class=\"line\">    <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(self.tItemView, view)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>update:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollView:updateView</span><span class=\"params\">(dt)</span></span></span><br></pre></td></tr></table></figure>\n<p>主要代码：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 控制刷新时间</span></span><br><span class=\"line\">self.updateTimer = self.updateTimer + dt</span><br><span class=\"line\"><span class=\"keyword\">if</span> (self.updateTimer &lt; self.updateInterval) <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">self.updateTimer = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 遍历所有创建的item，如果它们需要移动位置，就移动它们的位置，并让它们重绘自己</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, length <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> item = self:getItemView(i)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> viewPos = self:getPositionInView(item.pLayer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> increaseVal &lt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> viewPos.y &lt; minBoundary <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.index <span class=\"keyword\">and</span> item.setIndex <span class=\"keyword\">then</span></span><br><span class=\"line\">                item:setIndex(item.index - length)</span><br><span class=\"line\">                item.pLayer:setVisible(item.index &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> item.index &lt;= self.totalItemNum)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">            item.pLayer:setPositionY(item.pLayer:getPositionY() + offset)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">elseif</span> increaseVal &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (viewPos.y &gt; maxBoundary <span class=\"keyword\">and</span> item.pLayer:getPositionY() - offset &gt; -self.tContentSize.height) <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.index <span class=\"keyword\">and</span> item.setIndex <span class=\"keyword\">then</span></span><br><span class=\"line\">                item:setIndex(item.index + length)</span><br><span class=\"line\">                item.pLayer:setVisible(item.index &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> item.index &lt;= self.totalItemNum)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            item.pLayer:setPositionY(item.pLayer:getPositionY() - offset)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"3-遇到的问题\"><a href=\"#3-遇到的问题\" class=\"headerlink\" title=\"3. 遇到的问题\"></a>3. 遇到的问题</h1><h2 id=\"关于update\"><a href=\"#关于update\" class=\"headerlink\" title=\"关于update\"></a>关于update</h2><p>在3.x中lua启用定时器有两种方法：</p>\n<p>第一种方法 scheduleUpdateWithPriorityLua</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheduleUpdateWithPriorityLua(update, priority)</span><br><span class=\"line\">\tupdate - 刷新函数，</span><br><span class=\"line\">\tpriority - 优先级，</span><br></pre></td></tr></table></figure>\n<p>此方法在Node类中实现，所以它的子类都可以使用。<br>此方法默认为每帧都刷新因此，无法自定义刷新时间。<br>这里，没有用这个方法，是因为ScrollView自己已经实现了update方法。<br>所以，当我们重新注册给ScrollView一个update的时候，发现无法替换。<br>这里涉及到计时器存储刷新方法：<br>刷新方法通过哈希表存储，在主循环期间，不移除已有方法，而是将它暂停，且恢复时不加载新方法，而是将原有方法恢复。</p>\n<p>启用定时器的源码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Node::scheduleUpdateWithPriorityLua(<span class=\"keyword\">int</span> nHandler, <span class=\"keyword\">int</span> priority)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unscheduleUpdate();</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> CC_ENABLE_SCRIPT_BINDING</span></span><br><span class=\"line\">    _updateScriptHandler = nHandler;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    _scheduler-&gt;scheduleUpdate(<span class=\"keyword\">this</span>, priority, !_running);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行： unscheduleUpdate();<br>会先判断节点是否有update方法，在哈希表中查找，并执行移除方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tHashUpdateEntry *element = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">HASH_FIND_PTR(_hashForUpdates, &amp;target, element);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (element)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_updateHashLocked)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        element-&gt;entry-&gt;markedForDeletion = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;removeUpdateFromHash(element-&gt;entry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面移除方法，会根据_updateHashLocked值来执行，<br>它为真时，<br>如果节点原来有update，就先废弃它，废弃的方法是，将它标记为已删除，并让它暂停。注意！这里并没有真正的删除，而是将他表示是否删除的字段改值。<br>它为假时，<br>直接从哈希表中移除update方法。</p>\n<p>执行：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_scheduler-&gt;scheduleUpdate(<span class=\"keyword\">this</span>, priority, !_running);</span><br></pre></td></tr></table></figure></p>\n<p>加入update，也会先从哈希表中查找update，再执行添加方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tHashUpdateEntry *hashElement = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">HASH_FIND_PTR(_hashForUpdates, &amp;target, hashElement);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (hashElement)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// check if priority has changed</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((*hashElement-&gt;<span class=\"built_in\">list</span>)-&gt;priority != priority)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_updateHashLocked)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            CCLOG(<span class=\"string\">\"warning: you CANNOT change update priority in scheduled function\"</span>);</span><br><span class=\"line\">            hashElement-&gt;entry-&gt;markedForDeletion = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            hashElement-&gt;entry-&gt;paused = paused;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// will be added again outside if (hashElement).</span></span><br><span class=\"line\">            unscheduleUpdate(target);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        hashElement-&gt;entry-&gt;markedForDeletion = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        hashElement-&gt;entry-&gt;paused = paused;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>添加方法，会先判断优先级，如果优先级相同，那么就恢复原来的update。<br>否则，根据 _updateHashLocked 值执行接下来操作。</p>\n<p>从移除和添加可以发现，关键值在于 _updateHashLocked的值，<br>这个值在Scheduler::update中设置，开始的时候设置为true，最后结束设置为false。<br>所以，如果要修改，就很麻烦，就放弃用这个方法了。<br><em>道理同样适用于所有自己已经重写了update，想要更换update情形</em></p>\n<p>第二种方法，通过定时管理器调用<br>就是上面指的Scheduler,不过我们不调ScrollView的，而是创建一个新的。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheduler:scheduleScriptFunc(update, inteval, isOnce)</span><br><span class=\"line\">\tscheduler - cc.Director:getInstance():getScheduler()</span><br><span class=\"line\">\tupdate - 更新方法</span><br><span class=\"line\">\tinteval - 刷新时间间隔</span><br><span class=\"line\">\tisOnce - 是否只执行一次</span><br></pre></td></tr></table></figure>\n<p>注意，如果用这个方法，需要负责创建，也要负责移除。<br>上面方法会返回一个id，之后可以通过这个id来删除它。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc.Director:getInstance():getScheduler():unscheduleScriptEntry(id)</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么要把item包装成Widget\"><a href=\"#为什么要把item包装成Widget\" class=\"headerlink\" title=\"为什么要把item包装成Widget\"></a>为什么要把item包装成Widget</h2><p>在刚开始往ScrollView加child时，方法是将item的Node直接往ScrollView addChild（ScrollView封装了它，其实就是往inner addChild）<br>但是当直接addChild时，会产生很多问题：比如按钮吞噬触摸，无法滑动等等。</p>\n<p>那就要问一下了，为什么ListView没事呢？<br>这其实是Cocos对继承自ccui.Widget的事件的处理。<br>所有的控件事件监听都是单点触摸，并且会吞噬事件。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_touchListener = EventListenerTouchOneByOne::create();</span><br><span class=\"line\">CC_SAFE_RETAIN(_touchListener);</span><br><span class=\"line\">_touchListener-&gt;setSwallowTouches(<span class=\"literal\">true</span>);</span><br><span class=\"line\">_touchListener-&gt;onTouchBegan = CC_CALLBACK_2(Widget::onTouchBegan, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">_touchListener-&gt;onTouchMoved = CC_CALLBACK_2(Widget::onTouchMoved, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">_touchListener-&gt;onTouchEnded = CC_CALLBACK_2(Widget::onTouchEnded, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">_touchListener-&gt;onTouchCancelled = CC_CALLBACK_2(Widget::onTouchCancelled, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">_eventDispatcher-&gt;addEventListenerWithSceneGraphPriority(_touchListener, <span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n<p>在widget的onTouchBegan, onTouchMove, onTouchEnd中，都会调用 propagateTouchEvent,<br>这个方法是传播事件，每个子节点会吞噬事件，自己处理完，再向父节点传递，一般ScrollView、ListView、PageView会处理这些事件。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget* widgetParent = getWidgetParent();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (widgetParent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    widgetParent-&gt;_hittedByCamera = _hittedByCamera;</span><br><span class=\"line\">    widgetParent-&gt;interceptTouchEvent(event, sender, touch);</span><br><span class=\"line\">    widgetParent-&gt;_hittedByCamera = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，只有继承自Widget类的，才会接收到interceptTouchEvent,并进行处理。<br>而且，ScrollView的interceptTouchEvent 已经处理好了按钮的点击，取消等效果。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ScrollView::interceptTouchEvent(Widget::TouchEventType event, Widget *sender,Touch* touch)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!_touchEnabled)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Layout::interceptTouchEvent(event, sender, touch);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(_direction == Direction::NONE)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    Vec2 touchPoint = touch-&gt;getLocation();</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (event)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TouchEventType::BEGAN:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _isInterceptTouch = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            _touchBeganPosition = touch-&gt;getLocation();</span><br><span class=\"line\">            handlePressLogic(touch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TouchEventType::MOVED:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _touchMovePosition = touch-&gt;getLocation();</span><br><span class=\"line\">            <span class=\"comment\">// calculates move offset in points</span></span><br><span class=\"line\">            <span class=\"keyword\">float</span> offsetInInch = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (_direction)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Direction::HORIZONTAL:</span><br><span class=\"line\">                    offsetInInch = convertDistanceFromPointToInch(Vec2(<span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(sender-&gt;getTouchBeganPosition().x - touchPoint.x), <span class=\"number\">0</span>));</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Direction::VERTICAL:</span><br><span class=\"line\">                    offsetInInch = convertDistanceFromPointToInch(Vec2(<span class=\"number\">0</span>, <span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(sender-&gt;getTouchBeganPosition().y - touchPoint.y)));</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Direction::BOTH:</span><br><span class=\"line\">                    offsetInInch = convertDistanceFromPointToInch(sender-&gt;getTouchBeganPosition() - touchPoint);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (offsetInInch &gt; _childFocusCancelOffsetInInch)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sender-&gt;setHighlighted(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                handleMoveLogic(touch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> TouchEventType::CANCELED:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TouchEventType::ENDED:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _touchEndPosition = touch-&gt;getLocation();</span><br><span class=\"line\">            handleReleaseLogic(touch);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sender-&gt;isSwallowTouches())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _isInterceptTouch = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之前的方法有问题，就是因为直接将Node addChild到ScrollView，当触摸传递到Node，发现无法转成Widget对象，就放弃了向上传播事件。<br>所以，需要将item包装成Widget来让它将事件传递给ScrollView。</p>\n<p><br></p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h1><p>怎么用这个呢？</p>\n<ol>\n<li>调用 ScrollView:setItemViewModel(item, item总数, 创建item所需的额外参数)</li>\n<li>所有的item要有方法 item:setIndex(index), 并且以 self.index 作为自己的index[这里可以写一个类来封装，让所有item都继承它]</li>\n<li>在删除的时候，要将ScrollView的每帧更新方法移除 </li>\n</ol>\n<p>现在，ScrollView已经可以重用item了。<br>但是，还是比较粗糙；做为一个控件，仅仅是这样可不行。<br>之后，会对这个控件慢慢优化，让它支持更多的功能，更加得心应手。</p>\n","site":{"data":{}},"excerpt":"<p>cocos2d lua<br>修改ScrollView第一弹: item</p>","more":"<p><br></p>\n<h1 id=\"做了什么\"><a href=\"#做了什么\" class=\"headerlink\" title=\"做了什么\"></a>做了什么</h1><h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><p>在使用ListView的时候，有多少个数据就会创建多少个item，并不会重复利用或回收释放。<br>随着数据量的增加，会对性能造成很大的影响。</p>\n<h2 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h2><ul>\n<li><p>clone 改成 create[据说是这样，我没有测试过 = =…]<br>我们在使用ListView的时候，创建一个item，是通过lua重写的pushBackCustomItemView，<br>它会先调用ListView的pushBackDefaultItem，通过clone创建一个csb，我们再把数据赋过去。<br>所以，我们完全可以create一个csb，相对于clone会快一些。</p>\n<p>缺点： 这个应该会有点效果，嗯，有点效果而已。</p>\n</li>\n<li><p>分帧加载（逐帧加载）<br>并不是在一帧全加载完，而是选择每帧加载一定个数，直到加载完成</p>\n<p>缺点： 通过lua现有的协程来实现，但是流畅度不是很好，刚进入界面的时候可能看到item是逐渐加载进来的。</p>\n</li>\n<li><p>异步加载<br>这个主要对一些图片多的item，我们如果需要切换图，可以通过异步加载，等图片加载完再换图，这样不影响之后item的加载。</p>\n<p>缺点： 会看到 默认图（csb创建的样子） -&gt; 真正效果的转换过程。</p>\n</li>\n<li><p>滑动到底加载<br>就是先加载一定数量，监听到底部了，再拉取后面的部分，直到全部加载完。</p>\n<p>缺点： 做一系列监听滑动等，没有根本解决问题。</p>\n</li>\n</ul>\n<ul>\n<li>重用item[本次实现的方法]<br>其实，上面的那些方法，都是优化的技巧，并没有从根本上解决问题。<br>我们要根本的解决问题，就是创建可视区域可容纳数量+1的item，然后不断重用这些item。<br>在ListView同一时刻，只能见到5个item，那我就创建6个item，然后不断重用这些item。</li>\n</ul>\n<p><br></p>\n<h1 id=\"2-怎么做的\"><a href=\"#2-怎么做的\" class=\"headerlink\" title=\"2.怎么做的\"></a>2.怎么做的</h1><h2 id=\"机制\"><a href=\"#机制\" class=\"headerlink\" title=\"机制\"></a>机制</h2><p>首先明确view与inner，<br>view像一个窗口，它的大小就是我们可以见到的大小（当然要设置裁切），<br>inner是我们创建的所有item添加的地方（item并不是加载ScrollView上，而是加在了inner上）<br>ScrollView/ListView会监听滑动，同时相应的移动inner的位置，从而让我们看到item位置的变化。<br><strong>简而言之，item加载inner上，是inner动，不是view动。</strong></p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>在ScrollView或者ListView中，正常情况是这样的：<br>(前面数字代表item位置，后面数字代表item， —-代表可视区域)</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1</span>                   <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">2</span>                   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"number\">3</span>                   <span class=\"number\">3</span></span><br><span class=\"line\">                        <span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">4</span>                   <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"comment\">----                </span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"number\">5</span>                   <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span>   <span class=\"number\">6</span>                   <span class=\"number\">6</span></span><br><span class=\"line\">                        <span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">7</span>   <span class=\"number\">7</span>                   <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span>   <span class=\"number\">8</span>                   <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>可以发现，<br>前面的例子中, 只能看见2, 3, 4; 但是看不见的1, 5, 6, 7, 8 依旧存在<br>后面的例子中, 只能看见4, 5, 6; 但是看不见的1, 2, 3, 7, 8 依旧存在</p>\n<p>所以，我们改成下面的样子:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>                        </span><br><span class=\"line\">    <span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">2</span>                    </span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"number\">3</span>                    </span><br><span class=\"line\">                        <span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">4</span>                   <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"comment\">----                </span></span><br><span class=\"line\"><span class=\"number\">5</span>                       <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span>                       <span class=\"number\">6</span></span><br><span class=\"line\">                        <span class=\"comment\">----</span></span><br><span class=\"line\"><span class=\"number\">7</span>                        </span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>因为可视区域只有3个item，我们就创建3个item，然后不断重用它们。(当然实际操作中，需要多创建一个，否则有穿帮风险)<br>但是，位置，我们依旧留着（划重点，<strong>inner大小不变</strong>，否则无法滑动），<br>在往下滑的时候，最上面的跑到下面去顶替下面的item；<br>往上滑的时候，最下面的跑到上面去顶替上面的item；</p>\n<h2 id=\"做法\"><a href=\"#做法\" class=\"headerlink\" title=\"做法\"></a>做法</h2><p>实现方法，<br>可以通过监听ScrollView滑动，每当ScrollView滚动，我们可以知道当前inner位置，<br>然后知道item的位置，从而判断item需不需要移动位置。<br>这里，用的是编辑一个绘制方法，每隔一段时间，都看一下各个item位置，然后根据需求移动位置。<br>我们在加载csb的时候将ScrollView记录下来，在view的update中调用它。<br>（本来想重写update，但是遇到了一些问题，所以妥协用了它，具体可以看后面 遇到的问题）</p>\n<p>init:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">    name            :   item类名 </span></span><br><span class=\"line\"><span class=\"comment\">    totalItemNum    :   item总数</span></span><br><span class=\"line\"><span class=\"comment\">    ...             :   创建item时需要的参数</span></span><br><span class=\"line\"><span class=\"comment\">--]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollView:setItemViewModel</span><span class=\"params\">(name, totalItemNum, ...)</span></span></span><br></pre></td></tr></table></figure>\n<p>主要代码：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 得到所需绘制item个数</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> count = <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(self:getContentSize().height / self.tItemContentSize.height) + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, count <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\">-- 创建item</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> view = CSBReaderLoad(name)</span><br><span class=\"line\">    view:init(...)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> view.setIndex <span class=\"keyword\">then</span></span><br><span class=\"line\">        view:setIndex(i)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 将父节点转为widget类型（原因可见 遇到的问题）</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> widget = quick.packageNodeToWidget(view.pLayer:getChildByName(<span class=\"string\">\"LayerTouch\"</span>))</span><br><span class=\"line\">    view.pLayer = widget</span><br><span class=\"line\">    <span class=\"comment\">-- widget随父节点透明度变化，默认是false</span></span><br><span class=\"line\">    widget:setCascadeOpacityEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    self:addChild(view.pLayer)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 总数小于所需绘制item个数，需要隐藏多创建的</span></span><br><span class=\"line\">    view.pLayer:setVisible(i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> i &lt;= self.totalItemNum)</span><br><span class=\"line\">    <span class=\"comment\">-- 设置位置，注意我们加item是从下往上加的</span></span><br><span class=\"line\">    view.pLayer:setPositionY(self.tItemContentSize.height * (self.totalItemNum - i))</span><br><span class=\"line\">    <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(self.tItemView, view)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>update:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollView:updateView</span><span class=\"params\">(dt)</span></span></span><br></pre></td></tr></table></figure>\n<p>主要代码：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 控制刷新时间</span></span><br><span class=\"line\">self.updateTimer = self.updateTimer + dt</span><br><span class=\"line\"><span class=\"keyword\">if</span> (self.updateTimer &lt; self.updateInterval) <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">self.updateTimer = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 遍历所有创建的item，如果它们需要移动位置，就移动它们的位置，并让它们重绘自己</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, length <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> item = self:getItemView(i)</span><br><span class=\"line\">    <span class=\"keyword\">local</span> viewPos = self:getPositionInView(item.pLayer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> increaseVal &lt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> viewPos.y &lt; minBoundary <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.index <span class=\"keyword\">and</span> item.setIndex <span class=\"keyword\">then</span></span><br><span class=\"line\">                item:setIndex(item.index - length)</span><br><span class=\"line\">                item.pLayer:setVisible(item.index &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> item.index &lt;= self.totalItemNum)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">            item.pLayer:setPositionY(item.pLayer:getPositionY() + offset)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">elseif</span> increaseVal &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (viewPos.y &gt; maxBoundary <span class=\"keyword\">and</span> item.pLayer:getPositionY() - offset &gt; -self.tContentSize.height) <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.index <span class=\"keyword\">and</span> item.setIndex <span class=\"keyword\">then</span></span><br><span class=\"line\">                item:setIndex(item.index + length)</span><br><span class=\"line\">                item.pLayer:setVisible(item.index &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> item.index &lt;= self.totalItemNum)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            item.pLayer:setPositionY(item.pLayer:getPositionY() - offset)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"3-遇到的问题\"><a href=\"#3-遇到的问题\" class=\"headerlink\" title=\"3. 遇到的问题\"></a>3. 遇到的问题</h1><h2 id=\"关于update\"><a href=\"#关于update\" class=\"headerlink\" title=\"关于update\"></a>关于update</h2><p>在3.x中lua启用定时器有两种方法：</p>\n<p>第一种方法 scheduleUpdateWithPriorityLua</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheduleUpdateWithPriorityLua(update, priority)</span><br><span class=\"line\">\tupdate - 刷新函数，</span><br><span class=\"line\">\tpriority - 优先级，</span><br></pre></td></tr></table></figure>\n<p>此方法在Node类中实现，所以它的子类都可以使用。<br>此方法默认为每帧都刷新因此，无法自定义刷新时间。<br>这里，没有用这个方法，是因为ScrollView自己已经实现了update方法。<br>所以，当我们重新注册给ScrollView一个update的时候，发现无法替换。<br>这里涉及到计时器存储刷新方法：<br>刷新方法通过哈希表存储，在主循环期间，不移除已有方法，而是将它暂停，且恢复时不加载新方法，而是将原有方法恢复。</p>\n<p>启用定时器的源码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Node::scheduleUpdateWithPriorityLua(<span class=\"keyword\">int</span> nHandler, <span class=\"keyword\">int</span> priority)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unscheduleUpdate();</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> CC_ENABLE_SCRIPT_BINDING</span></span><br><span class=\"line\">    _updateScriptHandler = nHandler;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    _scheduler-&gt;scheduleUpdate(<span class=\"keyword\">this</span>, priority, !_running);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行： unscheduleUpdate();<br>会先判断节点是否有update方法，在哈希表中查找，并执行移除方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tHashUpdateEntry *element = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">HASH_FIND_PTR(_hashForUpdates, &amp;target, element);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (element)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_updateHashLocked)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        element-&gt;entry-&gt;markedForDeletion = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;removeUpdateFromHash(element-&gt;entry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面移除方法，会根据_updateHashLocked值来执行，<br>它为真时，<br>如果节点原来有update，就先废弃它，废弃的方法是，将它标记为已删除，并让它暂停。注意！这里并没有真正的删除，而是将他表示是否删除的字段改值。<br>它为假时，<br>直接从哈希表中移除update方法。</p>\n<p>执行：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_scheduler-&gt;scheduleUpdate(<span class=\"keyword\">this</span>, priority, !_running);</span><br></pre></td></tr></table></figure></p>\n<p>加入update，也会先从哈希表中查找update，再执行添加方法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tHashUpdateEntry *hashElement = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">HASH_FIND_PTR(_hashForUpdates, &amp;target, hashElement);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (hashElement)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// check if priority has changed</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((*hashElement-&gt;<span class=\"built_in\">list</span>)-&gt;priority != priority)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_updateHashLocked)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            CCLOG(<span class=\"string\">\"warning: you CANNOT change update priority in scheduled function\"</span>);</span><br><span class=\"line\">            hashElement-&gt;entry-&gt;markedForDeletion = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            hashElement-&gt;entry-&gt;paused = paused;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// will be added again outside if (hashElement).</span></span><br><span class=\"line\">            unscheduleUpdate(target);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        hashElement-&gt;entry-&gt;markedForDeletion = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        hashElement-&gt;entry-&gt;paused = paused;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>添加方法，会先判断优先级，如果优先级相同，那么就恢复原来的update。<br>否则，根据 _updateHashLocked 值执行接下来操作。</p>\n<p>从移除和添加可以发现，关键值在于 _updateHashLocked的值，<br>这个值在Scheduler::update中设置，开始的时候设置为true，最后结束设置为false。<br>所以，如果要修改，就很麻烦，就放弃用这个方法了。<br><em>道理同样适用于所有自己已经重写了update，想要更换update情形</em></p>\n<p>第二种方法，通过定时管理器调用<br>就是上面指的Scheduler,不过我们不调ScrollView的，而是创建一个新的。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheduler:scheduleScriptFunc(update, inteval, isOnce)</span><br><span class=\"line\">\tscheduler - cc.Director:getInstance():getScheduler()</span><br><span class=\"line\">\tupdate - 更新方法</span><br><span class=\"line\">\tinteval - 刷新时间间隔</span><br><span class=\"line\">\tisOnce - 是否只执行一次</span><br></pre></td></tr></table></figure>\n<p>注意，如果用这个方法，需要负责创建，也要负责移除。<br>上面方法会返回一个id，之后可以通过这个id来删除它。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc.Director:getInstance():getScheduler():unscheduleScriptEntry(id)</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么要把item包装成Widget\"><a href=\"#为什么要把item包装成Widget\" class=\"headerlink\" title=\"为什么要把item包装成Widget\"></a>为什么要把item包装成Widget</h2><p>在刚开始往ScrollView加child时，方法是将item的Node直接往ScrollView addChild（ScrollView封装了它，其实就是往inner addChild）<br>但是当直接addChild时，会产生很多问题：比如按钮吞噬触摸，无法滑动等等。</p>\n<p>那就要问一下了，为什么ListView没事呢？<br>这其实是Cocos对继承自ccui.Widget的事件的处理。<br>所有的控件事件监听都是单点触摸，并且会吞噬事件。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_touchListener = EventListenerTouchOneByOne::create();</span><br><span class=\"line\">CC_SAFE_RETAIN(_touchListener);</span><br><span class=\"line\">_touchListener-&gt;setSwallowTouches(<span class=\"literal\">true</span>);</span><br><span class=\"line\">_touchListener-&gt;onTouchBegan = CC_CALLBACK_2(Widget::onTouchBegan, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">_touchListener-&gt;onTouchMoved = CC_CALLBACK_2(Widget::onTouchMoved, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">_touchListener-&gt;onTouchEnded = CC_CALLBACK_2(Widget::onTouchEnded, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">_touchListener-&gt;onTouchCancelled = CC_CALLBACK_2(Widget::onTouchCancelled, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">_eventDispatcher-&gt;addEventListenerWithSceneGraphPriority(_touchListener, <span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n<p>在widget的onTouchBegan, onTouchMove, onTouchEnd中，都会调用 propagateTouchEvent,<br>这个方法是传播事件，每个子节点会吞噬事件，自己处理完，再向父节点传递，一般ScrollView、ListView、PageView会处理这些事件。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget* widgetParent = getWidgetParent();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (widgetParent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    widgetParent-&gt;_hittedByCamera = _hittedByCamera;</span><br><span class=\"line\">    widgetParent-&gt;interceptTouchEvent(event, sender, touch);</span><br><span class=\"line\">    widgetParent-&gt;_hittedByCamera = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，只有继承自Widget类的，才会接收到interceptTouchEvent,并进行处理。<br>而且，ScrollView的interceptTouchEvent 已经处理好了按钮的点击，取消等效果。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ScrollView::interceptTouchEvent(Widget::TouchEventType event, Widget *sender,Touch* touch)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!_touchEnabled)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Layout::interceptTouchEvent(event, sender, touch);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(_direction == Direction::NONE)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    Vec2 touchPoint = touch-&gt;getLocation();</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (event)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TouchEventType::BEGAN:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _isInterceptTouch = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            _touchBeganPosition = touch-&gt;getLocation();</span><br><span class=\"line\">            handlePressLogic(touch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TouchEventType::MOVED:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _touchMovePosition = touch-&gt;getLocation();</span><br><span class=\"line\">            <span class=\"comment\">// calculates move offset in points</span></span><br><span class=\"line\">            <span class=\"keyword\">float</span> offsetInInch = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (_direction)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Direction::HORIZONTAL:</span><br><span class=\"line\">                    offsetInInch = convertDistanceFromPointToInch(Vec2(<span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(sender-&gt;getTouchBeganPosition().x - touchPoint.x), <span class=\"number\">0</span>));</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Direction::VERTICAL:</span><br><span class=\"line\">                    offsetInInch = convertDistanceFromPointToInch(Vec2(<span class=\"number\">0</span>, <span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(sender-&gt;getTouchBeganPosition().y - touchPoint.y)));</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> Direction::BOTH:</span><br><span class=\"line\">                    offsetInInch = convertDistanceFromPointToInch(sender-&gt;getTouchBeganPosition() - touchPoint);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (offsetInInch &gt; _childFocusCancelOffsetInInch)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sender-&gt;setHighlighted(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                handleMoveLogic(touch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> TouchEventType::CANCELED:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TouchEventType::ENDED:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _touchEndPosition = touch-&gt;getLocation();</span><br><span class=\"line\">            handleReleaseLogic(touch);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sender-&gt;isSwallowTouches())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _isInterceptTouch = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之前的方法有问题，就是因为直接将Node addChild到ScrollView，当触摸传递到Node，发现无法转成Widget对象，就放弃了向上传播事件。<br>所以，需要将item包装成Widget来让它将事件传递给ScrollView。</p>\n<p><br></p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h1><p>怎么用这个呢？</p>\n<ol>\n<li>调用 ScrollView:setItemViewModel(item, item总数, 创建item所需的额外参数)</li>\n<li>所有的item要有方法 item:setIndex(index), 并且以 self.index 作为自己的index[这里可以写一个类来封装，让所有item都继承它]</li>\n<li>在删除的时候，要将ScrollView的每帧更新方法移除 </li>\n</ol>\n<p>现在，ScrollView已经可以重用item了。<br>但是，还是比较粗糙；做为一个控件，仅仅是这样可不行。<br>之后，会对这个控件慢慢优化，让它支持更多的功能，更加得心应手。</p>"},{"title":"Cocos2d iPhone 边缘触屏延迟现象","date":"2018-06-06T15:39:35.000Z","summary_img":"/images/summary_image/touch_screen.jpg","_content":"\nCocos2d iPhone 边缘触屏延迟现象\n发现并解决问题全历程\n\n<!-- more -->\n\n<br/>\n\n---\n\n初衷:\n这是在工作中遇到BUG，然后解决BUG的历程。\n希望我的思路及方向能对你有所启发。\n\n---\n\n<br/>\n\n# 现象\n游戏在真机测试出现某些区域不响应的问题。\n\n<br/>\n\n# 查原因\n\n## 找反馈者沟通\n去了解具体发生的问题及有无任何规律等。\n了解到只在**iPhone手机**上才出现。\n\n## 自己测试\n\n- 黑盒\n方法：根据现象，进一步测试，打不同手机包等\n经过各种测试，总结出的特征如下：\n    - 只有iPhone手机有问题（测试过几款Android手机 及 模拟器）\n    - 只有边缘触摸有问题（将触摸区域移动过不同的位置）\n    - 只有iPhone 6s以上手机有问题\n- 白盒\n方法：打印触屏信息等。\n发现 开始触摸时并没有打印，但是在结束触摸时，开始触摸喝结束触摸同时相应。\n进一步打印，发现**触摸开始和结束在同一帧执行**。\n- 总结\n其实，在只有 iPhone 6s 以上手机有问题就比较好确定了。\n经过调查发现 6s开始支持了 3D touch。\n\n<br/>\n\n# 解决\n既然发现3D touch有关，那就关闭3D touch看看效果。\n关闭以后发现，左右两边没有问题了，但是底边还是有问题。\n又了解到苹果按住边缘滑动，会滑出任务管理器，这个好像没办法关掉...\n\n然后，就去cocos2d的github的issues看有没有遇到同样的问题的。\n发现也有人遇到了同样的问题，已经解决好了。 [ https://github.com/cocos2d/cocos2d-x/issues/18479 ]\n解决方法就是将手势识别的触摸开始的延迟关掉。\n\n在 AppController.mm 文件内，\n        \n```objectivec\n        [window makeKeyAndVisible]; \n```\n\n之后加入:\n\n```objectivec\n        for(UIGestureRecognizer* gesture in window.gestureRecognizers)\n        {\n            gesture.delaysTouchesBegan=NO;\n        }\n```\n\n完美解决问题。\n真是查问题5小时，解决问题5秒钟。\n\n\n<br/>\n\n# 扩展\n一般到这里，解决完问题就结束了。\nBUG是无穷尽的，但是它们是有共性的。\n我们遇到一个问题，通过分析它能解决一类问题，这才是进步。\n\nUIGestureRecognizer 是手势识别器的基类。\n它用于识别触摸序列（或其他输入）的逻辑进行解耦，并对该识别进行操作，负责发送操作消息或转发触摸消息等。\n它主要有以下的手势：\n\n- UITapGestureRecognizer            [轻拍手势]\n- UIPinchGestureRecognizer          [捏合(缩放)手势]\n- UIRotationGestureRecognizer       [旋转手势]\n- UISwipeGestureRecognizer          [轻扫手势]\n- UIPanGestureRecognizer            [平移手势]\n- UIScreenEdgePanGestureRecognizer  [屏幕边缘平移手势]\n- UILongPressGestureRecognizer      [长按手势]\n\n如果窗口绑定了手势识别器，触摸事件会先经过手势识别器处理，再传递给视图。\n如果手势识别器识别了触摸，则传给视图的其余触摸事件将会被取消。\n它有三个主要的属性:\n\n- cancelsTouchesInView\n如果手势识别器识别出手势，则从视图中解除该手势的其余触摸，从而使窗口不再传递它们。\n- delaysTouchesBegan\n只要手势识别器分析触摸事件没有失败，窗口就会将UITouchPhaseBegan阶段中的触摸对象传递给视图。如果随后识别手势，则视图不接收这些触摸对象。\n- delaysTouchesEnded\n只要手势识别器分析触摸事件没有失败，窗口就会将UITouchPhaseEnded阶段中的触摸对象传递给视图。如果随后识别手势，则触摸被取消。\n\n更详细的可以看 参考资料3\n\n<br/>\n\n# 总结\n遇到问题 -> 分析&总结特征 -> 解决问题 -> 扩展问题\n针对同一个问题，学到的比其他人更多更广，长期以来，必将更进一步。\n\n\n\n<br/>\n<br/>\n<br/>\n\n---\n\n参考资料:\n\n- stackoverflow - TouchesBegan delay on left hand side of the display\n[ https://stackoverflow.com/questions/39998489/touchesbegan-delay-on-left-hand-side-of-the-display ]\n- stackoverflow - Swift SpriteKit 3D Touch and touches moved\n [ https://stackoverflow.com/questions/36060423/swift-spritekit-3d-touch-and-touches-moved ]\n- 苹果开发者 UIGestureRecognizer [ https://developer.apple.com/documentation/uikit/uigesturerecognizer?changes=_4&language=objc ]","source":"_posts/Cocos2d iPhone 边缘触屏延迟现象.md","raw":"---\ntitle: Cocos2d iPhone 边缘触屏延迟现象\ndate: 2018-06-06 23:39:35\ntags: [cocos2d, 想就做]\nsummary_img: /images/summary_image/touch_screen.jpg\n\n---\n\nCocos2d iPhone 边缘触屏延迟现象\n发现并解决问题全历程\n\n<!-- more -->\n\n<br/>\n\n---\n\n初衷:\n这是在工作中遇到BUG，然后解决BUG的历程。\n希望我的思路及方向能对你有所启发。\n\n---\n\n<br/>\n\n# 现象\n游戏在真机测试出现某些区域不响应的问题。\n\n<br/>\n\n# 查原因\n\n## 找反馈者沟通\n去了解具体发生的问题及有无任何规律等。\n了解到只在**iPhone手机**上才出现。\n\n## 自己测试\n\n- 黑盒\n方法：根据现象，进一步测试，打不同手机包等\n经过各种测试，总结出的特征如下：\n    - 只有iPhone手机有问题（测试过几款Android手机 及 模拟器）\n    - 只有边缘触摸有问题（将触摸区域移动过不同的位置）\n    - 只有iPhone 6s以上手机有问题\n- 白盒\n方法：打印触屏信息等。\n发现 开始触摸时并没有打印，但是在结束触摸时，开始触摸喝结束触摸同时相应。\n进一步打印，发现**触摸开始和结束在同一帧执行**。\n- 总结\n其实，在只有 iPhone 6s 以上手机有问题就比较好确定了。\n经过调查发现 6s开始支持了 3D touch。\n\n<br/>\n\n# 解决\n既然发现3D touch有关，那就关闭3D touch看看效果。\n关闭以后发现，左右两边没有问题了，但是底边还是有问题。\n又了解到苹果按住边缘滑动，会滑出任务管理器，这个好像没办法关掉...\n\n然后，就去cocos2d的github的issues看有没有遇到同样的问题的。\n发现也有人遇到了同样的问题，已经解决好了。 [ https://github.com/cocos2d/cocos2d-x/issues/18479 ]\n解决方法就是将手势识别的触摸开始的延迟关掉。\n\n在 AppController.mm 文件内，\n        \n```objectivec\n        [window makeKeyAndVisible]; \n```\n\n之后加入:\n\n```objectivec\n        for(UIGestureRecognizer* gesture in window.gestureRecognizers)\n        {\n            gesture.delaysTouchesBegan=NO;\n        }\n```\n\n完美解决问题。\n真是查问题5小时，解决问题5秒钟。\n\n\n<br/>\n\n# 扩展\n一般到这里，解决完问题就结束了。\nBUG是无穷尽的，但是它们是有共性的。\n我们遇到一个问题，通过分析它能解决一类问题，这才是进步。\n\nUIGestureRecognizer 是手势识别器的基类。\n它用于识别触摸序列（或其他输入）的逻辑进行解耦，并对该识别进行操作，负责发送操作消息或转发触摸消息等。\n它主要有以下的手势：\n\n- UITapGestureRecognizer            [轻拍手势]\n- UIPinchGestureRecognizer          [捏合(缩放)手势]\n- UIRotationGestureRecognizer       [旋转手势]\n- UISwipeGestureRecognizer          [轻扫手势]\n- UIPanGestureRecognizer            [平移手势]\n- UIScreenEdgePanGestureRecognizer  [屏幕边缘平移手势]\n- UILongPressGestureRecognizer      [长按手势]\n\n如果窗口绑定了手势识别器，触摸事件会先经过手势识别器处理，再传递给视图。\n如果手势识别器识别了触摸，则传给视图的其余触摸事件将会被取消。\n它有三个主要的属性:\n\n- cancelsTouchesInView\n如果手势识别器识别出手势，则从视图中解除该手势的其余触摸，从而使窗口不再传递它们。\n- delaysTouchesBegan\n只要手势识别器分析触摸事件没有失败，窗口就会将UITouchPhaseBegan阶段中的触摸对象传递给视图。如果随后识别手势，则视图不接收这些触摸对象。\n- delaysTouchesEnded\n只要手势识别器分析触摸事件没有失败，窗口就会将UITouchPhaseEnded阶段中的触摸对象传递给视图。如果随后识别手势，则触摸被取消。\n\n更详细的可以看 参考资料3\n\n<br/>\n\n# 总结\n遇到问题 -> 分析&总结特征 -> 解决问题 -> 扩展问题\n针对同一个问题，学到的比其他人更多更广，长期以来，必将更进一步。\n\n\n\n<br/>\n<br/>\n<br/>\n\n---\n\n参考资料:\n\n- stackoverflow - TouchesBegan delay on left hand side of the display\n[ https://stackoverflow.com/questions/39998489/touchesbegan-delay-on-left-hand-side-of-the-display ]\n- stackoverflow - Swift SpriteKit 3D Touch and touches moved\n [ https://stackoverflow.com/questions/36060423/swift-spritekit-3d-touch-and-touches-moved ]\n- 苹果开发者 UIGestureRecognizer [ https://developer.apple.com/documentation/uikit/uigesturerecognizer?changes=_4&language=objc ]","slug":"Cocos2d iPhone 边缘触屏延迟现象","published":1,"updated":"2018-08-12T14:46:29.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbbw0009esvq5bjcumk1","content":"<p>Cocos2d iPhone 边缘触屏延迟现象<br>发现并解决问题全历程</p>\n<a id=\"more\"></a>\n<p><br></p>\n<hr>\n<p>初衷:<br>这是在工作中遇到BUG，然后解决BUG的历程。<br>希望我的思路及方向能对你有所启发。</p>\n<hr>\n<p><br></p>\n<h1 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h1><p>游戏在真机测试出现某些区域不响应的问题。</p>\n<p><br></p>\n<h1 id=\"查原因\"><a href=\"#查原因\" class=\"headerlink\" title=\"查原因\"></a>查原因</h1><h2 id=\"找反馈者沟通\"><a href=\"#找反馈者沟通\" class=\"headerlink\" title=\"找反馈者沟通\"></a>找反馈者沟通</h2><p>去了解具体发生的问题及有无任何规律等。<br>了解到只在<strong>iPhone手机</strong>上才出现。</p>\n<h2 id=\"自己测试\"><a href=\"#自己测试\" class=\"headerlink\" title=\"自己测试\"></a>自己测试</h2><ul>\n<li>黑盒<br>方法：根据现象，进一步测试，打不同手机包等<br>经过各种测试，总结出的特征如下：<ul>\n<li>只有iPhone手机有问题（测试过几款Android手机 及 模拟器）</li>\n<li>只有边缘触摸有问题（将触摸区域移动过不同的位置）</li>\n<li>只有iPhone 6s以上手机有问题</li>\n</ul>\n</li>\n<li>白盒<br>方法：打印触屏信息等。<br>发现 开始触摸时并没有打印，但是在结束触摸时，开始触摸喝结束触摸同时相应。<br>进一步打印，发现<strong>触摸开始和结束在同一帧执行</strong>。</li>\n<li>总结<br>其实，在只有 iPhone 6s 以上手机有问题就比较好确定了。<br>经过调查发现 6s开始支持了 3D touch。</li>\n</ul>\n<p><br></p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>既然发现3D touch有关，那就关闭3D touch看看效果。<br>关闭以后发现，左右两边没有问题了，但是底边还是有问题。<br>又了解到苹果按住边缘滑动，会滑出任务管理器，这个好像没办法关掉…</p>\n<p>然后，就去cocos2d的github的issues看有没有遇到同样的问题的。<br>发现也有人遇到了同样的问题，已经解决好了。 [ <a href=\"https://github.com/cocos2d/cocos2d-x/issues/18479\" target=\"_blank\" rel=\"noopener\">https://github.com/cocos2d/cocos2d-x/issues/18479</a> ]<br>解决方法就是将手势识别的触摸开始的延迟关掉。</p>\n<p>在 AppController.mm 文件内，</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[window makeKeyAndVisible];</span><br></pre></td></tr></table></figure>\n<p>之后加入:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">UIGestureRecognizer</span>* gesture <span class=\"keyword\">in</span> window.gestureRecognizers)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    gesture.delaysTouchesBegan=<span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完美解决问题。<br>真是查问题5小时，解决问题5秒钟。</p>\n<p><br></p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p>一般到这里，解决完问题就结束了。<br>BUG是无穷尽的，但是它们是有共性的。<br>我们遇到一个问题，通过分析它能解决一类问题，这才是进步。</p>\n<p>UIGestureRecognizer 是手势识别器的基类。<br>它用于识别触摸序列（或其他输入）的逻辑进行解耦，并对该识别进行操作，负责发送操作消息或转发触摸消息等。<br>它主要有以下的手势：</p>\n<ul>\n<li>UITapGestureRecognizer            [轻拍手势]</li>\n<li>UIPinchGestureRecognizer          [捏合(缩放)手势]</li>\n<li>UIRotationGestureRecognizer       [旋转手势]</li>\n<li>UISwipeGestureRecognizer          [轻扫手势]</li>\n<li>UIPanGestureRecognizer            [平移手势]</li>\n<li>UIScreenEdgePanGestureRecognizer  [屏幕边缘平移手势]</li>\n<li>UILongPressGestureRecognizer      [长按手势]</li>\n</ul>\n<p>如果窗口绑定了手势识别器，触摸事件会先经过手势识别器处理，再传递给视图。<br>如果手势识别器识别了触摸，则传给视图的其余触摸事件将会被取消。<br>它有三个主要的属性:</p>\n<ul>\n<li>cancelsTouchesInView<br>如果手势识别器识别出手势，则从视图中解除该手势的其余触摸，从而使窗口不再传递它们。</li>\n<li>delaysTouchesBegan<br>只要手势识别器分析触摸事件没有失败，窗口就会将UITouchPhaseBegan阶段中的触摸对象传递给视图。如果随后识别手势，则视图不接收这些触摸对象。</li>\n<li>delaysTouchesEnded<br>只要手势识别器分析触摸事件没有失败，窗口就会将UITouchPhaseEnded阶段中的触摸对象传递给视图。如果随后识别手势，则触摸被取消。</li>\n</ul>\n<p>更详细的可以看 参考资料3</p>\n<p><br></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>遇到问题 -&gt; 分析&amp;总结特征 -&gt; 解决问题 -&gt; 扩展问题<br>针对同一个问题，学到的比其他人更多更广，长期以来，必将更进一步。</p>\n<p><br><br><br><br><br></p>\n<hr>\n<p>参考资料:</p>\n<ul>\n<li>stackoverflow - TouchesBegan delay on left hand side of the display<br>[ <a href=\"https://stackoverflow.com/questions/39998489/touchesbegan-delay-on-left-hand-side-of-the-display\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/39998489/touchesbegan-delay-on-left-hand-side-of-the-display</a> ]</li>\n<li>stackoverflow - Swift SpriteKit 3D Touch and touches moved<br>[ <a href=\"https://stackoverflow.com/questions/36060423/swift-spritekit-3d-touch-and-touches-moved\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/36060423/swift-spritekit-3d-touch-and-touches-moved</a> ]</li>\n<li>苹果开发者 UIGestureRecognizer [ <a href=\"https://developer.apple.com/documentation/uikit/uigesturerecognizer?changes=_4&amp;language=objc\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/documentation/uikit/uigesturerecognizer?changes=_4&amp;language=objc</a> ]</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Cocos2d iPhone 边缘触屏延迟现象<br>发现并解决问题全历程</p>","more":"<p><br></p>\n<hr>\n<p>初衷:<br>这是在工作中遇到BUG，然后解决BUG的历程。<br>希望我的思路及方向能对你有所启发。</p>\n<hr>\n<p><br></p>\n<h1 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h1><p>游戏在真机测试出现某些区域不响应的问题。</p>\n<p><br></p>\n<h1 id=\"查原因\"><a href=\"#查原因\" class=\"headerlink\" title=\"查原因\"></a>查原因</h1><h2 id=\"找反馈者沟通\"><a href=\"#找反馈者沟通\" class=\"headerlink\" title=\"找反馈者沟通\"></a>找反馈者沟通</h2><p>去了解具体发生的问题及有无任何规律等。<br>了解到只在<strong>iPhone手机</strong>上才出现。</p>\n<h2 id=\"自己测试\"><a href=\"#自己测试\" class=\"headerlink\" title=\"自己测试\"></a>自己测试</h2><ul>\n<li>黑盒<br>方法：根据现象，进一步测试，打不同手机包等<br>经过各种测试，总结出的特征如下：<ul>\n<li>只有iPhone手机有问题（测试过几款Android手机 及 模拟器）</li>\n<li>只有边缘触摸有问题（将触摸区域移动过不同的位置）</li>\n<li>只有iPhone 6s以上手机有问题</li>\n</ul>\n</li>\n<li>白盒<br>方法：打印触屏信息等。<br>发现 开始触摸时并没有打印，但是在结束触摸时，开始触摸喝结束触摸同时相应。<br>进一步打印，发现<strong>触摸开始和结束在同一帧执行</strong>。</li>\n<li>总结<br>其实，在只有 iPhone 6s 以上手机有问题就比较好确定了。<br>经过调查发现 6s开始支持了 3D touch。</li>\n</ul>\n<p><br></p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>既然发现3D touch有关，那就关闭3D touch看看效果。<br>关闭以后发现，左右两边没有问题了，但是底边还是有问题。<br>又了解到苹果按住边缘滑动，会滑出任务管理器，这个好像没办法关掉…</p>\n<p>然后，就去cocos2d的github的issues看有没有遇到同样的问题的。<br>发现也有人遇到了同样的问题，已经解决好了。 [ <a href=\"https://github.com/cocos2d/cocos2d-x/issues/18479\" target=\"_blank\" rel=\"noopener\">https://github.com/cocos2d/cocos2d-x/issues/18479</a> ]<br>解决方法就是将手势识别的触摸开始的延迟关掉。</p>\n<p>在 AppController.mm 文件内，</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[window makeKeyAndVisible];</span><br></pre></td></tr></table></figure>\n<p>之后加入:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">UIGestureRecognizer</span>* gesture <span class=\"keyword\">in</span> window.gestureRecognizers)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    gesture.delaysTouchesBegan=<span class=\"literal\">NO</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完美解决问题。<br>真是查问题5小时，解决问题5秒钟。</p>\n<p><br></p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p>一般到这里，解决完问题就结束了。<br>BUG是无穷尽的，但是它们是有共性的。<br>我们遇到一个问题，通过分析它能解决一类问题，这才是进步。</p>\n<p>UIGestureRecognizer 是手势识别器的基类。<br>它用于识别触摸序列（或其他输入）的逻辑进行解耦，并对该识别进行操作，负责发送操作消息或转发触摸消息等。<br>它主要有以下的手势：</p>\n<ul>\n<li>UITapGestureRecognizer            [轻拍手势]</li>\n<li>UIPinchGestureRecognizer          [捏合(缩放)手势]</li>\n<li>UIRotationGestureRecognizer       [旋转手势]</li>\n<li>UISwipeGestureRecognizer          [轻扫手势]</li>\n<li>UIPanGestureRecognizer            [平移手势]</li>\n<li>UIScreenEdgePanGestureRecognizer  [屏幕边缘平移手势]</li>\n<li>UILongPressGestureRecognizer      [长按手势]</li>\n</ul>\n<p>如果窗口绑定了手势识别器，触摸事件会先经过手势识别器处理，再传递给视图。<br>如果手势识别器识别了触摸，则传给视图的其余触摸事件将会被取消。<br>它有三个主要的属性:</p>\n<ul>\n<li>cancelsTouchesInView<br>如果手势识别器识别出手势，则从视图中解除该手势的其余触摸，从而使窗口不再传递它们。</li>\n<li>delaysTouchesBegan<br>只要手势识别器分析触摸事件没有失败，窗口就会将UITouchPhaseBegan阶段中的触摸对象传递给视图。如果随后识别手势，则视图不接收这些触摸对象。</li>\n<li>delaysTouchesEnded<br>只要手势识别器分析触摸事件没有失败，窗口就会将UITouchPhaseEnded阶段中的触摸对象传递给视图。如果随后识别手势，则触摸被取消。</li>\n</ul>\n<p>更详细的可以看 参考资料3</p>\n<p><br></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>遇到问题 -&gt; 分析&amp;总结特征 -&gt; 解决问题 -&gt; 扩展问题<br>针对同一个问题，学到的比其他人更多更广，长期以来，必将更进一步。</p>\n<p><br><br><br><br><br></p>\n<hr>\n<p>参考资料:</p>\n<ul>\n<li>stackoverflow - TouchesBegan delay on left hand side of the display<br>[ <a href=\"https://stackoverflow.com/questions/39998489/touchesbegan-delay-on-left-hand-side-of-the-display\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/39998489/touchesbegan-delay-on-left-hand-side-of-the-display</a> ]</li>\n<li>stackoverflow - Swift SpriteKit 3D Touch and touches moved<br>[ <a href=\"https://stackoverflow.com/questions/36060423/swift-spritekit-3d-touch-and-touches-moved\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/36060423/swift-spritekit-3d-touch-and-touches-moved</a> ]</li>\n<li>苹果开发者 UIGestureRecognizer [ <a href=\"https://developer.apple.com/documentation/uikit/uigesturerecognizer?changes=_4&amp;language=objc\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/documentation/uikit/uigesturerecognizer?changes=_4&amp;language=objc</a> ]</li>\n</ul>"},{"title":"Cocos2d-lua ScrollView优化2","date":"2018-06-05T15:44:35.000Z","_content":"\ncocos2d lua \n修改ScrollView第二弹: 功能扩展\n\n<!-- more -->\n\n<br/>\n\n---\n\n温故：\n上回书说到, 对Cocos2d-lua的ScrollView进行了修改优化。\n主要做了 —— 重用item。\n仅仅是重用item, 是远远不够的；还要对它进行进一步的功能扩展。\n\n---\n\n<br/>\n\n# 概览\n这次的扩展包括：\n- 支持横向和竖向\n- 支持多行多列\n- item的适配\n- item数量不够时的居中\n- 刷新数据\n- 跳转到指定item\n- 飞入动画\n\n<br/>\n\n## 多方向\n之前的版本仅仅是纵向而已, 当然要支持横向的滑动了。\n横向滑动其实与纵向不同。\n\n### 纵向\n由于ScrollView锚点在(0, 0), 要针对这个做一些处理。\n否则, 显示的是如下的样子：\n\n```\n        ...\n        5\n        4\n        3\n        2\n        1\n```\n\n从下往上排列, 而且滑动是从下往上滑。\n显然, 这并不符合常规操作。\n正常应该是, 从上往下滑, 且:\n\n```\n        1\n        2\n        3\n        4\n        5\n        ...\n```\n\n所以, 需要对它的坐标进行小处理。\n这里有两个坐标需要被处理：\n\t\n- item（要求锚点为(0, 0))\n    它正常坐标是从(0, 0)开始, 然后随着索引增加变为: (0, itemSize.height * index)\n    修改后的坐标应该是从(0, innerSize.height - itemSize.height)开始, 随着索引增加变为:(0, innerSize.height - itemSize.height * index)\n\n- inner\n    正常开始的坐标为(0, 0), 显示的是最底部的信息, 随着滑动y坐标减少。\n    修改后坐标为(0, scrollviewSize.height - innerSize.height), 显示最顶部的信息, 随着滑动y坐标增加。\n\n\n### 横向\n横向就没有那么多问题了, 很符合常规的动作。\n\n```\n        1 \t2 \t3 \t4 \t5 \t...\n```\n\n它的两个坐标就不需要处理:\n\n- item(要求锚点为(0, 0))\n\t坐标从(0, 0)开始, 随着索引增加变为: (itemSize.width * index, 0)\n\n- inner\n\t坐标从(0, 0)开始, 随着滑动x坐标增加\n\n\n### 主要代码\n    \n```lua\n        local ScrollViewDirection = {\n            DIR_VERTICAL = 1,\n            DIR_HORIZONTAL = 2,\n            DIR_BOTH = 3,\n        }\n\n        -- ScrollView 的大小\n        self.tContentSize\n        -- Item 的大小\n        self.tItemContentSize\n        -- item总数\n        self.iTotalItemNum \n        -- 重用的item的集合\n        self.tItemView\n\n        if ScrollViewDirection.DIR_HORIZONTAL == self:getDirection() then\n            self.tContentSize.width = self.tItemContentSize.width * self.iTotalItemNum\n            self:getInnerContainer():setContentSize(self.tContentSize)\n            self.fLastContentPos = self:getContentSize().width - self.tContentSize.width\n\n            local count = math.min(self.iTotalItemNum, math.ceil(self:getContentSize().width / self.tItemContentSize.width) + 1)\n            for i = 1, count do\n                local view = CSBReaderLoad(name)\n                view:init(...)\n                if view.setIndex then\n                    view:setIndex(i)\n                end\n\n                -- 将父节点转为widget类型（原因可见 上一篇文章）\n                local widget = quick.packageNodeToWidget(view.pLayer:getChildByName(\"LayerTouch\"))\n                view.pLayer = widget\n                -- widget随父节点透明度变化，默认是false\n                widget:setCascadeOpacityEnabled(true)\n                self:addChild(view.pLayer)\n\n                view.pLayer:setVisible(i > 0 and i <= self.iTotalItemNum)\n                view.pLayer:setPosition(self.tItemContentSize.width * (i - 1), 0)\n                table.insert(self.tItemView, view)\n            end\n\n            self:jumpToLeft()\n            self:getInnerContainer():setPositionX(self.fLastContentPos)\n            self:setTouchEnabled(self.tContentSize.width > self:getContentSize().width)\n\n        elseif ScrollViewDirection.DIR_VERTICAL == self:getDirection() then\n            self.tContentSize.height = self.tItemContentSize.height * self.iTotalItemNum\n            self:getInnerContainer():setContentSize(self.tContentSize)\n            self.fLastContentPos = self:getContentSize().height - self.tContentSize.height\n\n            local count = math.min(self.iTotalItemNum, math.ceil(self:getContentSize().height / self.tItemContentSize.height) + 1)\n            for i = 1, count do\n                local view = CSBReaderLoad(name)\n                view:init(...)\n                if view.setIndex then\n                    view:setIndex(i)\n                end\n\n                -- 将父节点转为widget类型（原因可见 上一篇文章）\n                local widget = quick.packageNodeToWidget(view.pLayer:getChildByName(\"LayerTouch\"))\n                view.pLayer = widget\n                -- widget随父节点透明度变化，默认是false\n                widget:setCascadeOpacityEnabled(true)\n                self:addChild(view.pLayer)\n\n                view.pLayer:setVisible(i > 0 and i <= self.iTotalItemNum)\n                view.pLayer:setPositionY(self.tItemContentSize.height * (self.iTotalItemNum - i))\n                table.insert(self.tItemView, view)\n            end\n\n            self:jumpToTop()\n            self:getInnerContainer():setPositionY(self.fLastContentPos)\n            self:setTouchEnabled(self.tContentSize.height > self:getContentSize().height)\n        end\n```\n\n## 适配item\n根据ScrollView显示区域大小及方向, 适当调整item大小。\n更充分重用item, 适应多尺寸item。\n如果是纵向的ScrollView, 根据width的值, 来决定放缩值。\n如果是横向的ScrollView, 根据height的值, 来决定放缩值。\n然后根据放缩值再修改一下item size的值。\n\n### 修改的东西(以纵向滑动ScrollView为例)\n\n- ScrollView inner 大小\n\n```lua\n        local scale = ScrollViewSize.width / (ItemSize.width * multiNum)\n```\n\n- 需要绘制item的总个数\n\n```lua\n        local totalRow = cond(totalItemNum % multiNum == 0, \n            totalItemNum / multiNum,\n            math.ceil(totalItemNum / multiNum))\n```\n\n- item的位置\n\n```lua\n        self.iCount = math.min(totalRow, math.ceil(ScrollViewSize.height / ItemSize.height) + 1)\n        for i = 1, self.iCount do\n            for j = 1, self.iMultiNum do\n                ...\n\n                item:setPosition(ItemSize.width * (j - 1), ItemSize.height * (totalRow - i))\n            end \n        end\n```\n\n## 多行多列\n重用item, 这么棒的东西, 肯定要多用用呀。\n支持多行多列，是根据ScrollView的滚动方向，再根据传入的行/列值进行设置。\n需要重新计算一些数值。(下面均以纵向滑动的ScrollView为例)\n\n### init \n\n* 放缩值\n    \n```lua\n    \tscale = innerSize.width / (itemSize.width * multiNum)\n```\n\n* inner size\n\n```lua\n    \t-- 根据总共需要的行数来计算高度\n    \ttotalRow = (totalItemNum % multiNum == 0) and (totalItemNum / multiNum) or (math.ceil(totalItemNum / multiNum))\n    \tinnerSize.height = totalRow * itemSize.height\n```\n\n* item position\n\n```lua\n    \t-- 获得需要重用的行数\n    \tshowRow = math.min(totalRow, math.ceil(viewSize.height / itemSize.height) + 1)\n    \tfor i = 1, showRow do\n    \t\tfor j = 1, multiNum do\n    \t\t\t...\n\n    \t\t\tview:setPosition(itemSize.width * (j - 1), itemSize.height * (totalRow - i))\n    \t\tend\n    \tend\n```\n\n## item数量不够时的居中\n主要是有个需求，希望item没有填满view的时候，所有的item居中显示。\n其实，item还是按照原来的方式放置，只需要移动inner的位置即可。\n\n```lua\n        --[[\n            描述:\n                ScrollView内Item是否居中显示\n            参数:\n                isCenter - boolean\n                    是否居中显示\n            返回:\n                无\n        --]]\n        function ScrollView:setShowCenter(isCenter)\n            local viewSize = self:getContentSize()\n            if ScrollViewDirection.DIR_HORIZONTAL == self:getDirection() then\n                local dertaValue = viewSize.width - self.tContentSize.width\n                if isCenter then\n                    if dertaValue > 0 then\n                        self:getInnerContainer():setPositionX(dertaValue/2)\n                    end\n                else\n                    self:getInnerContainer():setPositionX(dertaValue)\n                end\n            elseif ScrollViewDirection.DIR_VERTICAL == self:getDirection() then\n                local dertaValue = viewSize.height - self.tContentSize.height\n                if isCenter then\n                    if dertaValue > 0 then\n                        self:getInnerContainer():setPositionY(dertaValue/2)\n                    end\n                else\n                    self:getInnerContainer():setPositionY(dertaValue)\n                end\n            end\n        end\n```\n\n## 刷新数据\n创建完ScrollView，除非item变动自己的位置，否则是不会刷新数据的。\n所以需要一个手动刷新的方法。\n这里充分利用了lua的变长参数，在配合人为默认规定。ie\n\n```lua\n        --[[\n            描述:\n                刷新ScrollView中指定索引的item\n            参数:\n                ... - 传入一堆int\n                    item的索引, -1代表全部刷新\n            返回:\n                无\n        --]]\n        function ScrollView:refreshItems(...)\n            local args = {...}\n\n            if #args > 0 then\n                if args[1] == -1 then\n                    local items = self:getAllItemView()\n                    for k, v in pairs(items) do\n                        v:setIndex(v.iIndex)\n                    end\n                else\n                    -- 先做一个映射表，便于查找是否需要更新\n                    local tempTable = {}\n                    for k, v in pairs(args) do\n                        tempTable[v] = 1\n                    end\n\n                    local items = self:getAllItemView()\n                    for k, v in pairs(items) do\n                        if v.iIndex and tempTable[v.iIndex] == 1 then\n                            v:setIndex(v.iIndex)\n                        end\n                    end\n                end\n            end\n        end\n```\n\n这里我用了一个映射表。\n否则需要嵌套两层循环，复杂度 m * n\n做一个映射，只需要 n + m\n用空间来换取时间\n\n## 跳转到指定item\n这个功能ListView是支持的，觉得ScrollView也有必要支持一下。\n方法是先计算出inner需要移动多少距离，从而知道了index需要变化多少。\n\n### 主要步骤:（也是以垂直滑动方向为例）\n\n1. 计算所需跳转的index在最上方位置是第几行\n2. 计算inner需要滑动多少距离\n3. 计算从当前到目标，index需要变动多少\n4. 按照移动后的index，重新布局item\n\n\n### 主要代码：\n* 步骤1\n```lua\nlocal line = (index % self.iMultiNum == 0) and\n    (index / self.iMultiNum) or\n    (math.ceil(index / self.iMultiNum))\n```\n\n* 步骤2\n```lua\nlocal posY = self:getContentSize().height - self.tContentSize.height + self.tItemContentSize.height * (line - 1)\n-- 要考虑到滑动到底部，无法继续向上滑的情况\nposY = (posY > 0) and 0 or posY\n```\n\n* 步骤3\n```lua\nlocal changeIndex = math.ceil((posY - self:getInnerContainer():getPositionY()) / self.tItemContentSize.height)\n-- inner跳到指定位置\nself:jumpToDestination(cc.p(0, posY))\n```\n\n* 步骤4\n```lua\nself:updateViewByChangeIndex(changeIndex * self.iMultiNum)\n```\n\n### 根据index，重新布局item\n\t\n```lua\n        --[[\n            描述:\n                根据index，重新布局item\n            参数:\n                changeIndex:   int\n                    改变的index值\n            返回:\n                无\n        ]]\n        function ScrollView:updateViewByChangeIndex(changeIndex)\n            local totalBlock = (self.iTotalItemNum % self.iMultiNum == 0) and\n                (self.iTotalItemNum / self.iMultiNum) or\n                (math.ceil(self.iTotalItemNum / self.iMultiNum))\n\n            local items = self:getAllItemView()\n            for k, v in pairs(items) do\n                local idx = v.iIndex + changeIndex\n\n                v:setIndex(idx)\n                v.pLayer:setVisible(idx > 0 and idx <= self.iTotalItemNum)\n                \n                local i = (idx % self.iMultiNum == 0) and (idx / self.iMultiNum) or (math.ceil(idx / self.iMultiNum))\n                local j = self.iMultiNum - (idx % self.iMultiNum)\n                v.pLayer:setPosition(self.tItemContentSize.width * (j - 1), self.tItemContentSize.height * (totalBlock - i))\n            end\n        end\n```\n\n### 跳转的item在ScrollView中的位置\n需要跳转到的item在可视区域的 上、中、下 显示\n首先，一定要让使用者传入出现的位置枚举，\n然后在计算inner移动的位置上加上偏移量。\n如果要在中间显示，需要减去（向下移动） ScrollViewSize.height/2 , 因为初始的位置是按照item在最上面计算的，减去一半高度后，还需要再加上item本身高度的一半 ItemSize.height/2。\n如果在底部显示，则需要减去（向下移动） ScrollViewSize.height , 同理，需要再加回来一个item的高度 ItemSize.height。\n最后，依然要判定滑动到底部，无法滑动的情况。\n\n```lua\n        SCROLLVIEW_ALIGNMENT = {\n            FIRST = 1,\n            MID = 2,\n            LAST = 3,\n        }\n\n        local posY = self:getContentSize().height - self.tContentSize.height + self.tItemContentSize.height * (line - 1)\n        if alignment == SCROLLVIEW_ALIGNMENT.MID then\n            posY = posY - self:getContentSize().height / 2 + self.tItemContentSize.height / 2\n        elseif alignment == SCROLLVIEW_ALIGNMENT.LAST then\n            posY = posY - self:getContentSize().height + self.tItemContentSize.height\n        end\n        posY = (posY > 0) and 0 or posY\n```\n\n## 飞入动画\n额外再加一个飞入动画的支持吧。\n就是从外部飞入到ScrollView的效果。\n\n方法也很简单，就是在开始的时候，让所有的item在ScrollView外部；再一个个飞入到自己本应在的位置。\n依旧是以垂直向为例。\n\n```lua\n        -- 遍历所有item\n        for k, v in pairs(self.tItemView) do\n        \t-- 记录它本来所在的位置\n            local aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())\n\n            -- 把它放在区域外\n            v.pLayer:setPositionY(-self:getContentSize().height - self.tItemContentSize.height)\n            v.pLayer:runAction(\n                act.seq(\n                \t-- 一个个飞入\n                    act.delay((k - 1) * [delay_time]),\n                    act.movto([move_time], aimPos)\n                    )\n                )\n        end\n```\n\n当然，也要支持多方向ScrollView，并且要支持从前端飞入还是从后端飞入。\n这些都是通过改动初始位置及回弹值来实现。\n\n```lua\n        --[[\n            描述:\n                ScrollView内item的从外部飞入动画, 有回弹效果\n            参数:\n                fromBack:   boolean\n                    对于垂直方向, true代表自下而上; 对于水平方向, true代表自右向左\n            返回:\n                无\n        ]]\n        function ScrollView:playFlyInAction(fromBack)\n            fromBack = fromBack == nil and true    \n            self.tItemView = self.tItemView or {}\n\n           \tlocal moveTime = 0.2\n           \tlocal delayTime = 0.1\n\n            if self:getDirection() == ScrollViewDirection.DIR_HORIZONTAL then\n                local initPos = fromBack and (self:getContentSize().width + self.tItemContentSize.width) or (-self:getContentSize().width - self.tItemContentSize.width)\n\n                for k, v in pairs(self.tItemView) do\n                    local aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())\n\n                    v.pLayer:setPositionX(initPos)\n                    v.pLayer:runAction(\n                        act.seq(\n                            act.delay((k - 1) * delayTime),\n                            act.movto(moveTime, aimPos)\n                            )\n                        )\n                end\n            elseif self:getDirection() == ScrollViewDirection.DIR_VERTICAL then\n                local initPos = fromBack and (-self:getContentSize().height - self.tItemContentSize.height) or (self:getContentSize().height + self.tItemContentSize.height)\n\n                for k, v in pairs(self.tItemView) do\n                    local aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())\n\n                    v.pLayer:setPositionY(initPos)\n                    v.pLayer:runAction(\n                        act.seq(\n                            act.delay((k - 1) * delayTime),\n                            act.movto(moveTime, aimPos)\n                            )\n                        )\n                end\n            end\n        end\n```\n\n<br/>\n\n# 总结\n公司用ScrollView主要是用来替代ListView，虽然主要是用ScrollView的重用item的特性。\n但是还是要平滑的过渡过来，要支持ListView常用的一些接口。让这个组件更完善更好用。\n当然功能扩展还没有停止，之后也会陆陆续续的更新。\n\n","source":"_posts/Cocos2d-lua ScrollView优化2.md","raw":"---\ntitle: Cocos2d-lua ScrollView优化2\ndate: 2018-06-05 23:44:35\ntags: [cocos2d, 想就做]\n\n---\n\ncocos2d lua \n修改ScrollView第二弹: 功能扩展\n\n<!-- more -->\n\n<br/>\n\n---\n\n温故：\n上回书说到, 对Cocos2d-lua的ScrollView进行了修改优化。\n主要做了 —— 重用item。\n仅仅是重用item, 是远远不够的；还要对它进行进一步的功能扩展。\n\n---\n\n<br/>\n\n# 概览\n这次的扩展包括：\n- 支持横向和竖向\n- 支持多行多列\n- item的适配\n- item数量不够时的居中\n- 刷新数据\n- 跳转到指定item\n- 飞入动画\n\n<br/>\n\n## 多方向\n之前的版本仅仅是纵向而已, 当然要支持横向的滑动了。\n横向滑动其实与纵向不同。\n\n### 纵向\n由于ScrollView锚点在(0, 0), 要针对这个做一些处理。\n否则, 显示的是如下的样子：\n\n```\n        ...\n        5\n        4\n        3\n        2\n        1\n```\n\n从下往上排列, 而且滑动是从下往上滑。\n显然, 这并不符合常规操作。\n正常应该是, 从上往下滑, 且:\n\n```\n        1\n        2\n        3\n        4\n        5\n        ...\n```\n\n所以, 需要对它的坐标进行小处理。\n这里有两个坐标需要被处理：\n\t\n- item（要求锚点为(0, 0))\n    它正常坐标是从(0, 0)开始, 然后随着索引增加变为: (0, itemSize.height * index)\n    修改后的坐标应该是从(0, innerSize.height - itemSize.height)开始, 随着索引增加变为:(0, innerSize.height - itemSize.height * index)\n\n- inner\n    正常开始的坐标为(0, 0), 显示的是最底部的信息, 随着滑动y坐标减少。\n    修改后坐标为(0, scrollviewSize.height - innerSize.height), 显示最顶部的信息, 随着滑动y坐标增加。\n\n\n### 横向\n横向就没有那么多问题了, 很符合常规的动作。\n\n```\n        1 \t2 \t3 \t4 \t5 \t...\n```\n\n它的两个坐标就不需要处理:\n\n- item(要求锚点为(0, 0))\n\t坐标从(0, 0)开始, 随着索引增加变为: (itemSize.width * index, 0)\n\n- inner\n\t坐标从(0, 0)开始, 随着滑动x坐标增加\n\n\n### 主要代码\n    \n```lua\n        local ScrollViewDirection = {\n            DIR_VERTICAL = 1,\n            DIR_HORIZONTAL = 2,\n            DIR_BOTH = 3,\n        }\n\n        -- ScrollView 的大小\n        self.tContentSize\n        -- Item 的大小\n        self.tItemContentSize\n        -- item总数\n        self.iTotalItemNum \n        -- 重用的item的集合\n        self.tItemView\n\n        if ScrollViewDirection.DIR_HORIZONTAL == self:getDirection() then\n            self.tContentSize.width = self.tItemContentSize.width * self.iTotalItemNum\n            self:getInnerContainer():setContentSize(self.tContentSize)\n            self.fLastContentPos = self:getContentSize().width - self.tContentSize.width\n\n            local count = math.min(self.iTotalItemNum, math.ceil(self:getContentSize().width / self.tItemContentSize.width) + 1)\n            for i = 1, count do\n                local view = CSBReaderLoad(name)\n                view:init(...)\n                if view.setIndex then\n                    view:setIndex(i)\n                end\n\n                -- 将父节点转为widget类型（原因可见 上一篇文章）\n                local widget = quick.packageNodeToWidget(view.pLayer:getChildByName(\"LayerTouch\"))\n                view.pLayer = widget\n                -- widget随父节点透明度变化，默认是false\n                widget:setCascadeOpacityEnabled(true)\n                self:addChild(view.pLayer)\n\n                view.pLayer:setVisible(i > 0 and i <= self.iTotalItemNum)\n                view.pLayer:setPosition(self.tItemContentSize.width * (i - 1), 0)\n                table.insert(self.tItemView, view)\n            end\n\n            self:jumpToLeft()\n            self:getInnerContainer():setPositionX(self.fLastContentPos)\n            self:setTouchEnabled(self.tContentSize.width > self:getContentSize().width)\n\n        elseif ScrollViewDirection.DIR_VERTICAL == self:getDirection() then\n            self.tContentSize.height = self.tItemContentSize.height * self.iTotalItemNum\n            self:getInnerContainer():setContentSize(self.tContentSize)\n            self.fLastContentPos = self:getContentSize().height - self.tContentSize.height\n\n            local count = math.min(self.iTotalItemNum, math.ceil(self:getContentSize().height / self.tItemContentSize.height) + 1)\n            for i = 1, count do\n                local view = CSBReaderLoad(name)\n                view:init(...)\n                if view.setIndex then\n                    view:setIndex(i)\n                end\n\n                -- 将父节点转为widget类型（原因可见 上一篇文章）\n                local widget = quick.packageNodeToWidget(view.pLayer:getChildByName(\"LayerTouch\"))\n                view.pLayer = widget\n                -- widget随父节点透明度变化，默认是false\n                widget:setCascadeOpacityEnabled(true)\n                self:addChild(view.pLayer)\n\n                view.pLayer:setVisible(i > 0 and i <= self.iTotalItemNum)\n                view.pLayer:setPositionY(self.tItemContentSize.height * (self.iTotalItemNum - i))\n                table.insert(self.tItemView, view)\n            end\n\n            self:jumpToTop()\n            self:getInnerContainer():setPositionY(self.fLastContentPos)\n            self:setTouchEnabled(self.tContentSize.height > self:getContentSize().height)\n        end\n```\n\n## 适配item\n根据ScrollView显示区域大小及方向, 适当调整item大小。\n更充分重用item, 适应多尺寸item。\n如果是纵向的ScrollView, 根据width的值, 来决定放缩值。\n如果是横向的ScrollView, 根据height的值, 来决定放缩值。\n然后根据放缩值再修改一下item size的值。\n\n### 修改的东西(以纵向滑动ScrollView为例)\n\n- ScrollView inner 大小\n\n```lua\n        local scale = ScrollViewSize.width / (ItemSize.width * multiNum)\n```\n\n- 需要绘制item的总个数\n\n```lua\n        local totalRow = cond(totalItemNum % multiNum == 0, \n            totalItemNum / multiNum,\n            math.ceil(totalItemNum / multiNum))\n```\n\n- item的位置\n\n```lua\n        self.iCount = math.min(totalRow, math.ceil(ScrollViewSize.height / ItemSize.height) + 1)\n        for i = 1, self.iCount do\n            for j = 1, self.iMultiNum do\n                ...\n\n                item:setPosition(ItemSize.width * (j - 1), ItemSize.height * (totalRow - i))\n            end \n        end\n```\n\n## 多行多列\n重用item, 这么棒的东西, 肯定要多用用呀。\n支持多行多列，是根据ScrollView的滚动方向，再根据传入的行/列值进行设置。\n需要重新计算一些数值。(下面均以纵向滑动的ScrollView为例)\n\n### init \n\n* 放缩值\n    \n```lua\n    \tscale = innerSize.width / (itemSize.width * multiNum)\n```\n\n* inner size\n\n```lua\n    \t-- 根据总共需要的行数来计算高度\n    \ttotalRow = (totalItemNum % multiNum == 0) and (totalItemNum / multiNum) or (math.ceil(totalItemNum / multiNum))\n    \tinnerSize.height = totalRow * itemSize.height\n```\n\n* item position\n\n```lua\n    \t-- 获得需要重用的行数\n    \tshowRow = math.min(totalRow, math.ceil(viewSize.height / itemSize.height) + 1)\n    \tfor i = 1, showRow do\n    \t\tfor j = 1, multiNum do\n    \t\t\t...\n\n    \t\t\tview:setPosition(itemSize.width * (j - 1), itemSize.height * (totalRow - i))\n    \t\tend\n    \tend\n```\n\n## item数量不够时的居中\n主要是有个需求，希望item没有填满view的时候，所有的item居中显示。\n其实，item还是按照原来的方式放置，只需要移动inner的位置即可。\n\n```lua\n        --[[\n            描述:\n                ScrollView内Item是否居中显示\n            参数:\n                isCenter - boolean\n                    是否居中显示\n            返回:\n                无\n        --]]\n        function ScrollView:setShowCenter(isCenter)\n            local viewSize = self:getContentSize()\n            if ScrollViewDirection.DIR_HORIZONTAL == self:getDirection() then\n                local dertaValue = viewSize.width - self.tContentSize.width\n                if isCenter then\n                    if dertaValue > 0 then\n                        self:getInnerContainer():setPositionX(dertaValue/2)\n                    end\n                else\n                    self:getInnerContainer():setPositionX(dertaValue)\n                end\n            elseif ScrollViewDirection.DIR_VERTICAL == self:getDirection() then\n                local dertaValue = viewSize.height - self.tContentSize.height\n                if isCenter then\n                    if dertaValue > 0 then\n                        self:getInnerContainer():setPositionY(dertaValue/2)\n                    end\n                else\n                    self:getInnerContainer():setPositionY(dertaValue)\n                end\n            end\n        end\n```\n\n## 刷新数据\n创建完ScrollView，除非item变动自己的位置，否则是不会刷新数据的。\n所以需要一个手动刷新的方法。\n这里充分利用了lua的变长参数，在配合人为默认规定。ie\n\n```lua\n        --[[\n            描述:\n                刷新ScrollView中指定索引的item\n            参数:\n                ... - 传入一堆int\n                    item的索引, -1代表全部刷新\n            返回:\n                无\n        --]]\n        function ScrollView:refreshItems(...)\n            local args = {...}\n\n            if #args > 0 then\n                if args[1] == -1 then\n                    local items = self:getAllItemView()\n                    for k, v in pairs(items) do\n                        v:setIndex(v.iIndex)\n                    end\n                else\n                    -- 先做一个映射表，便于查找是否需要更新\n                    local tempTable = {}\n                    for k, v in pairs(args) do\n                        tempTable[v] = 1\n                    end\n\n                    local items = self:getAllItemView()\n                    for k, v in pairs(items) do\n                        if v.iIndex and tempTable[v.iIndex] == 1 then\n                            v:setIndex(v.iIndex)\n                        end\n                    end\n                end\n            end\n        end\n```\n\n这里我用了一个映射表。\n否则需要嵌套两层循环，复杂度 m * n\n做一个映射，只需要 n + m\n用空间来换取时间\n\n## 跳转到指定item\n这个功能ListView是支持的，觉得ScrollView也有必要支持一下。\n方法是先计算出inner需要移动多少距离，从而知道了index需要变化多少。\n\n### 主要步骤:（也是以垂直滑动方向为例）\n\n1. 计算所需跳转的index在最上方位置是第几行\n2. 计算inner需要滑动多少距离\n3. 计算从当前到目标，index需要变动多少\n4. 按照移动后的index，重新布局item\n\n\n### 主要代码：\n* 步骤1\n```lua\nlocal line = (index % self.iMultiNum == 0) and\n    (index / self.iMultiNum) or\n    (math.ceil(index / self.iMultiNum))\n```\n\n* 步骤2\n```lua\nlocal posY = self:getContentSize().height - self.tContentSize.height + self.tItemContentSize.height * (line - 1)\n-- 要考虑到滑动到底部，无法继续向上滑的情况\nposY = (posY > 0) and 0 or posY\n```\n\n* 步骤3\n```lua\nlocal changeIndex = math.ceil((posY - self:getInnerContainer():getPositionY()) / self.tItemContentSize.height)\n-- inner跳到指定位置\nself:jumpToDestination(cc.p(0, posY))\n```\n\n* 步骤4\n```lua\nself:updateViewByChangeIndex(changeIndex * self.iMultiNum)\n```\n\n### 根据index，重新布局item\n\t\n```lua\n        --[[\n            描述:\n                根据index，重新布局item\n            参数:\n                changeIndex:   int\n                    改变的index值\n            返回:\n                无\n        ]]\n        function ScrollView:updateViewByChangeIndex(changeIndex)\n            local totalBlock = (self.iTotalItemNum % self.iMultiNum == 0) and\n                (self.iTotalItemNum / self.iMultiNum) or\n                (math.ceil(self.iTotalItemNum / self.iMultiNum))\n\n            local items = self:getAllItemView()\n            for k, v in pairs(items) do\n                local idx = v.iIndex + changeIndex\n\n                v:setIndex(idx)\n                v.pLayer:setVisible(idx > 0 and idx <= self.iTotalItemNum)\n                \n                local i = (idx % self.iMultiNum == 0) and (idx / self.iMultiNum) or (math.ceil(idx / self.iMultiNum))\n                local j = self.iMultiNum - (idx % self.iMultiNum)\n                v.pLayer:setPosition(self.tItemContentSize.width * (j - 1), self.tItemContentSize.height * (totalBlock - i))\n            end\n        end\n```\n\n### 跳转的item在ScrollView中的位置\n需要跳转到的item在可视区域的 上、中、下 显示\n首先，一定要让使用者传入出现的位置枚举，\n然后在计算inner移动的位置上加上偏移量。\n如果要在中间显示，需要减去（向下移动） ScrollViewSize.height/2 , 因为初始的位置是按照item在最上面计算的，减去一半高度后，还需要再加上item本身高度的一半 ItemSize.height/2。\n如果在底部显示，则需要减去（向下移动） ScrollViewSize.height , 同理，需要再加回来一个item的高度 ItemSize.height。\n最后，依然要判定滑动到底部，无法滑动的情况。\n\n```lua\n        SCROLLVIEW_ALIGNMENT = {\n            FIRST = 1,\n            MID = 2,\n            LAST = 3,\n        }\n\n        local posY = self:getContentSize().height - self.tContentSize.height + self.tItemContentSize.height * (line - 1)\n        if alignment == SCROLLVIEW_ALIGNMENT.MID then\n            posY = posY - self:getContentSize().height / 2 + self.tItemContentSize.height / 2\n        elseif alignment == SCROLLVIEW_ALIGNMENT.LAST then\n            posY = posY - self:getContentSize().height + self.tItemContentSize.height\n        end\n        posY = (posY > 0) and 0 or posY\n```\n\n## 飞入动画\n额外再加一个飞入动画的支持吧。\n就是从外部飞入到ScrollView的效果。\n\n方法也很简单，就是在开始的时候，让所有的item在ScrollView外部；再一个个飞入到自己本应在的位置。\n依旧是以垂直向为例。\n\n```lua\n        -- 遍历所有item\n        for k, v in pairs(self.tItemView) do\n        \t-- 记录它本来所在的位置\n            local aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())\n\n            -- 把它放在区域外\n            v.pLayer:setPositionY(-self:getContentSize().height - self.tItemContentSize.height)\n            v.pLayer:runAction(\n                act.seq(\n                \t-- 一个个飞入\n                    act.delay((k - 1) * [delay_time]),\n                    act.movto([move_time], aimPos)\n                    )\n                )\n        end\n```\n\n当然，也要支持多方向ScrollView，并且要支持从前端飞入还是从后端飞入。\n这些都是通过改动初始位置及回弹值来实现。\n\n```lua\n        --[[\n            描述:\n                ScrollView内item的从外部飞入动画, 有回弹效果\n            参数:\n                fromBack:   boolean\n                    对于垂直方向, true代表自下而上; 对于水平方向, true代表自右向左\n            返回:\n                无\n        ]]\n        function ScrollView:playFlyInAction(fromBack)\n            fromBack = fromBack == nil and true    \n            self.tItemView = self.tItemView or {}\n\n           \tlocal moveTime = 0.2\n           \tlocal delayTime = 0.1\n\n            if self:getDirection() == ScrollViewDirection.DIR_HORIZONTAL then\n                local initPos = fromBack and (self:getContentSize().width + self.tItemContentSize.width) or (-self:getContentSize().width - self.tItemContentSize.width)\n\n                for k, v in pairs(self.tItemView) do\n                    local aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())\n\n                    v.pLayer:setPositionX(initPos)\n                    v.pLayer:runAction(\n                        act.seq(\n                            act.delay((k - 1) * delayTime),\n                            act.movto(moveTime, aimPos)\n                            )\n                        )\n                end\n            elseif self:getDirection() == ScrollViewDirection.DIR_VERTICAL then\n                local initPos = fromBack and (-self:getContentSize().height - self.tItemContentSize.height) or (self:getContentSize().height + self.tItemContentSize.height)\n\n                for k, v in pairs(self.tItemView) do\n                    local aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())\n\n                    v.pLayer:setPositionY(initPos)\n                    v.pLayer:runAction(\n                        act.seq(\n                            act.delay((k - 1) * delayTime),\n                            act.movto(moveTime, aimPos)\n                            )\n                        )\n                end\n            end\n        end\n```\n\n<br/>\n\n# 总结\n公司用ScrollView主要是用来替代ListView，虽然主要是用ScrollView的重用item的特性。\n但是还是要平滑的过渡过来，要支持ListView常用的一些接口。让这个组件更完善更好用。\n当然功能扩展还没有停止，之后也会陆陆续续的更新。\n\n","slug":"Cocos2d-lua ScrollView优化2","published":1,"updated":"2018-07-19T16:40:31.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbbz000cesvqjz97kmrz","content":"<p>cocos2d lua<br>修改ScrollView第二弹: 功能扩展</p>\n<a id=\"more\"></a>\n<p><br></p>\n<hr>\n<p>温故：<br>上回书说到, 对Cocos2d-lua的ScrollView进行了修改优化。<br>主要做了 —— 重用item。<br>仅仅是重用item, 是远远不够的；还要对它进行进一步的功能扩展。</p>\n<hr>\n<p><br></p>\n<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><p>这次的扩展包括：</p>\n<ul>\n<li>支持横向和竖向</li>\n<li>支持多行多列</li>\n<li>item的适配</li>\n<li>item数量不够时的居中</li>\n<li>刷新数据</li>\n<li>跳转到指定item</li>\n<li>飞入动画</li>\n</ul>\n<p><br></p>\n<h2 id=\"多方向\"><a href=\"#多方向\" class=\"headerlink\" title=\"多方向\"></a>多方向</h2><p>之前的版本仅仅是纵向而已, 当然要支持横向的滑动了。<br>横向滑动其实与纵向不同。</p>\n<h3 id=\"纵向\"><a href=\"#纵向\" class=\"headerlink\" title=\"纵向\"></a>纵向</h3><p>由于ScrollView锚点在(0, 0), 要针对这个做一些处理。<br>否则, 显示的是如下的样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">5</span><br><span class=\"line\">4</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>从下往上排列, 而且滑动是从下往上滑。<br>显然, 这并不符合常规操作。<br>正常应该是, 从上往下滑, 且:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>所以, 需要对它的坐标进行小处理。<br>这里有两个坐标需要被处理：</p>\n<ul>\n<li><p>item（要求锚点为(0, 0))<br>  它正常坐标是从(0, 0)开始, 然后随着索引增加变为: (0, itemSize.height <em> index)<br>  修改后的坐标应该是从(0, innerSize.height - itemSize.height)开始, 随着索引增加变为:(0, innerSize.height - itemSize.height </em> index)</p>\n</li>\n<li><p>inner<br>  正常开始的坐标为(0, 0), 显示的是最底部的信息, 随着滑动y坐标减少。<br>  修改后坐标为(0, scrollviewSize.height - innerSize.height), 显示最顶部的信息, 随着滑动y坐标增加。</p>\n</li>\n</ul>\n<h3 id=\"横向\"><a href=\"#横向\" class=\"headerlink\" title=\"横向\"></a>横向</h3><p>横向就没有那么多问题了, 很符合常规的动作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 \t2 \t3 \t4 \t5 \t...</span><br></pre></td></tr></table></figure>\n<p>它的两个坐标就不需要处理:</p>\n<ul>\n<li><p>item(要求锚点为(0, 0))<br>  坐标从(0, 0)开始, 随着索引增加变为: (itemSize.width * index, 0)</p>\n</li>\n<li><p>inner<br>  坐标从(0, 0)开始, 随着滑动x坐标增加</p>\n</li>\n</ul>\n<h3 id=\"主要代码\"><a href=\"#主要代码\" class=\"headerlink\" title=\"主要代码\"></a>主要代码</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ScrollViewDirection = &#123;</span><br><span class=\"line\">    DIR_VERTICAL = <span class=\"number\">1</span>,</span><br><span class=\"line\">    DIR_HORIZONTAL = <span class=\"number\">2</span>,</span><br><span class=\"line\">    DIR_BOTH = <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ScrollView 的大小</span></span><br><span class=\"line\">self.tContentSize</span><br><span class=\"line\"><span class=\"comment\">-- Item 的大小</span></span><br><span class=\"line\">self.tItemContentSize</span><br><span class=\"line\"><span class=\"comment\">-- item总数</span></span><br><span class=\"line\">self.iTotalItemNum </span><br><span class=\"line\"><span class=\"comment\">-- 重用的item的集合</span></span><br><span class=\"line\">self.tItemView</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ScrollViewDirection.DIR_HORIZONTAL == self:getDirection() <span class=\"keyword\">then</span></span><br><span class=\"line\">    self.tContentSize.width = self.tItemContentSize.width * self.iTotalItemNum</span><br><span class=\"line\">    self:getInnerContainer():setContentSize(self.tContentSize)</span><br><span class=\"line\">    self.fLastContentPos = self:getContentSize().width - self.tContentSize.width</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> count = <span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(self.iTotalItemNum, <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(self:getContentSize().width / self.tItemContentSize.width) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, count <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> view = CSBReaderLoad(name)</span><br><span class=\"line\">        view:init(...)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> view.setIndex <span class=\"keyword\">then</span></span><br><span class=\"line\">            view:setIndex(i)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">-- 将父节点转为widget类型（原因可见 上一篇文章）</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> widget = quick.packageNodeToWidget(view.pLayer:getChildByName(<span class=\"string\">\"LayerTouch\"</span>))</span><br><span class=\"line\">        view.pLayer = widget</span><br><span class=\"line\">        <span class=\"comment\">-- widget随父节点透明度变化，默认是false</span></span><br><span class=\"line\">        widget:setCascadeOpacityEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        self:addChild(view.pLayer)</span><br><span class=\"line\"></span><br><span class=\"line\">        view.pLayer:setVisible(i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> i &lt;= self.iTotalItemNum)</span><br><span class=\"line\">        view.pLayer:setPosition(self.tItemContentSize.width * (i - <span class=\"number\">1</span>), <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(self.tItemView, view)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    self:jumpToLeft()</span><br><span class=\"line\">    self:getInnerContainer():setPositionX(self.fLastContentPos)</span><br><span class=\"line\">    self:setTouchEnabled(self.tContentSize.width &gt; self:getContentSize().width)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> ScrollViewDirection.DIR_VERTICAL == self:getDirection() <span class=\"keyword\">then</span></span><br><span class=\"line\">    self.tContentSize.height = self.tItemContentSize.height * self.iTotalItemNum</span><br><span class=\"line\">    self:getInnerContainer():setContentSize(self.tContentSize)</span><br><span class=\"line\">    self.fLastContentPos = self:getContentSize().height - self.tContentSize.height</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> count = <span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(self.iTotalItemNum, <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(self:getContentSize().height / self.tItemContentSize.height) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, count <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> view = CSBReaderLoad(name)</span><br><span class=\"line\">        view:init(...)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> view.setIndex <span class=\"keyword\">then</span></span><br><span class=\"line\">            view:setIndex(i)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">-- 将父节点转为widget类型（原因可见 上一篇文章）</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> widget = quick.packageNodeToWidget(view.pLayer:getChildByName(<span class=\"string\">\"LayerTouch\"</span>))</span><br><span class=\"line\">        view.pLayer = widget</span><br><span class=\"line\">        <span class=\"comment\">-- widget随父节点透明度变化，默认是false</span></span><br><span class=\"line\">        widget:setCascadeOpacityEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        self:addChild(view.pLayer)</span><br><span class=\"line\"></span><br><span class=\"line\">        view.pLayer:setVisible(i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> i &lt;= self.iTotalItemNum)</span><br><span class=\"line\">        view.pLayer:setPositionY(self.tItemContentSize.height * (self.iTotalItemNum - i))</span><br><span class=\"line\">        <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(self.tItemView, view)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    self:jumpToTop()</span><br><span class=\"line\">    self:getInnerContainer():setPositionY(self.fLastContentPos)</span><br><span class=\"line\">    self:setTouchEnabled(self.tContentSize.height &gt; self:getContentSize().height)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"适配item\"><a href=\"#适配item\" class=\"headerlink\" title=\"适配item\"></a>适配item</h2><p>根据ScrollView显示区域大小及方向, 适当调整item大小。<br>更充分重用item, 适应多尺寸item。<br>如果是纵向的ScrollView, 根据width的值, 来决定放缩值。<br>如果是横向的ScrollView, 根据height的值, 来决定放缩值。<br>然后根据放缩值再修改一下item size的值。</p>\n<h3 id=\"修改的东西-以纵向滑动ScrollView为例\"><a href=\"#修改的东西-以纵向滑动ScrollView为例\" class=\"headerlink\" title=\"修改的东西(以纵向滑动ScrollView为例)\"></a>修改的东西(以纵向滑动ScrollView为例)</h3><ul>\n<li>ScrollView inner 大小</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> scale = ScrollViewSize.width / (ItemSize.width * multiNum)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>需要绘制item的总个数</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> totalRow = cond(totalItemNum % multiNum == <span class=\"number\">0</span>, </span><br><span class=\"line\">    totalItemNum / multiNum,</span><br><span class=\"line\">    <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(totalItemNum / multiNum))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>item的位置</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.iCount = <span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(totalRow, <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(ScrollViewSize.height / ItemSize.height) + <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, self.iCount <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j = <span class=\"number\">1</span>, self.iMultiNum <span class=\"keyword\">do</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        item:setPosition(ItemSize.width * (j - <span class=\"number\">1</span>), ItemSize.height * (totalRow - i))</span><br><span class=\"line\">    <span class=\"keyword\">end</span> </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"多行多列\"><a href=\"#多行多列\" class=\"headerlink\" title=\"多行多列\"></a>多行多列</h2><p>重用item, 这么棒的东西, 肯定要多用用呀。<br>支持多行多列，是根据ScrollView的滚动方向，再根据传入的行/列值进行设置。<br>需要重新计算一些数值。(下面均以纵向滑动的ScrollView为例)</p>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><ul>\n<li>放缩值</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scale = innerSize.width / (itemSize.width * multiNum)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>inner size</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 根据总共需要的行数来计算高度</span></span><br><span class=\"line\">totalRow = (totalItemNum % multiNum == <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (totalItemNum / multiNum) <span class=\"keyword\">or</span> (<span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(totalItemNum / multiNum))</span><br><span class=\"line\">innerSize.height = totalRow * itemSize.height</span><br></pre></td></tr></table></figure>\n<ul>\n<li>item position</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 获得需要重用的行数</span></span><br><span class=\"line\">showRow = <span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(totalRow, <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(viewSize.height / itemSize.height) + <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, showRow <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j = <span class=\"number\">1</span>, multiNum <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tview:setPosition(itemSize.width * (j - <span class=\"number\">1</span>), itemSize.height * (totalRow - i))</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"item数量不够时的居中\"><a href=\"#item数量不够时的居中\" class=\"headerlink\" title=\"item数量不够时的居中\"></a>item数量不够时的居中</h2><p>主要是有个需求，希望item没有填满view的时候，所有的item居中显示。<br>其实，item还是按照原来的方式放置，只需要移动inner的位置即可。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">    描述:</span></span><br><span class=\"line\"><span class=\"comment\">        ScrollView内Item是否居中显示</span></span><br><span class=\"line\"><span class=\"comment\">    参数:</span></span><br><span class=\"line\"><span class=\"comment\">        isCenter - boolean</span></span><br><span class=\"line\"><span class=\"comment\">            是否居中显示</span></span><br><span class=\"line\"><span class=\"comment\">    返回:</span></span><br><span class=\"line\"><span class=\"comment\">        无</span></span><br><span class=\"line\"><span class=\"comment\">--]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollView:setShowCenter</span><span class=\"params\">(isCenter)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> viewSize = self:getContentSize()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ScrollViewDirection.DIR_HORIZONTAL == self:getDirection() <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> dertaValue = viewSize.width - self.tContentSize.width</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isCenter <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dertaValue &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">                self:getInnerContainer():setPositionX(dertaValue/<span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            self:getInnerContainer():setPositionX(dertaValue)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">elseif</span> ScrollViewDirection.DIR_VERTICAL == self:getDirection() <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> dertaValue = viewSize.height - self.tContentSize.height</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isCenter <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dertaValue &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">                self:getInnerContainer():setPositionY(dertaValue/<span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            self:getInnerContainer():setPositionY(dertaValue)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"刷新数据\"><a href=\"#刷新数据\" class=\"headerlink\" title=\"刷新数据\"></a>刷新数据</h2><p>创建完ScrollView，除非item变动自己的位置，否则是不会刷新数据的。<br>所以需要一个手动刷新的方法。<br>这里充分利用了lua的变长参数，在配合人为默认规定。ie</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">    描述:</span></span><br><span class=\"line\"><span class=\"comment\">        刷新ScrollView中指定索引的item</span></span><br><span class=\"line\"><span class=\"comment\">    参数:</span></span><br><span class=\"line\"><span class=\"comment\">        ... - 传入一堆int</span></span><br><span class=\"line\"><span class=\"comment\">            item的索引, -1代表全部刷新</span></span><br><span class=\"line\"><span class=\"comment\">    返回:</span></span><br><span class=\"line\"><span class=\"comment\">        无</span></span><br><span class=\"line\"><span class=\"comment\">--]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollView:refreshItems</span><span class=\"params\">(...)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> args = &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> #args &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> args[<span class=\"number\">1</span>] == <span class=\"number\">-1</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">local</span> items = self:getAllItemView()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(items) <span class=\"keyword\">do</span></span><br><span class=\"line\">                v:setIndex(v.iIndex)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"comment\">-- 先做一个映射表，便于查找是否需要更新</span></span><br><span class=\"line\">            <span class=\"keyword\">local</span> tempTable = &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(args) <span class=\"keyword\">do</span></span><br><span class=\"line\">                tempTable[v] = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">local</span> items = self:getAllItemView()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(items) <span class=\"keyword\">do</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> v.iIndex <span class=\"keyword\">and</span> tempTable[v.iIndex] == <span class=\"number\">1</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">                    v:setIndex(v.iIndex)</span><br><span class=\"line\">                <span class=\"keyword\">end</span></span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>这里我用了一个映射表。<br>否则需要嵌套两层循环，复杂度 m * n<br>做一个映射，只需要 n + m<br>用空间来换取时间</p>\n<h2 id=\"跳转到指定item\"><a href=\"#跳转到指定item\" class=\"headerlink\" title=\"跳转到指定item\"></a>跳转到指定item</h2><p>这个功能ListView是支持的，觉得ScrollView也有必要支持一下。<br>方法是先计算出inner需要移动多少距离，从而知道了index需要变化多少。</p>\n<h3 id=\"主要步骤-（也是以垂直滑动方向为例）\"><a href=\"#主要步骤-（也是以垂直滑动方向为例）\" class=\"headerlink\" title=\"主要步骤:（也是以垂直滑动方向为例）\"></a>主要步骤:（也是以垂直滑动方向为例）</h3><ol>\n<li>计算所需跳转的index在最上方位置是第几行</li>\n<li>计算inner需要滑动多少距离</li>\n<li>计算从当前到目标，index需要变动多少</li>\n<li>按照移动后的index，重新布局item</li>\n</ol>\n<h3 id=\"主要代码：\"><a href=\"#主要代码：\" class=\"headerlink\" title=\"主要代码：\"></a>主要代码：</h3><ul>\n<li><p>步骤1</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> line = (index % self.iMultiNum == <span class=\"number\">0</span>) <span class=\"keyword\">and</span></span><br><span class=\"line\">    (index / self.iMultiNum) <span class=\"keyword\">or</span></span><br><span class=\"line\">    (<span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(index / self.iMultiNum))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤2</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> posY = self:getContentSize().height - self.tContentSize.height + self.tItemContentSize.height * (line - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 要考虑到滑动到底部，无法继续向上滑的情况</span></span><br><span class=\"line\">posY = (posY &gt; <span class=\"number\">0</span>) <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">or</span> posY</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤3</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> changeIndex = <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>((posY - self:getInnerContainer():getPositionY()) / self.tItemContentSize.height)</span><br><span class=\"line\"><span class=\"comment\">-- inner跳到指定位置</span></span><br><span class=\"line\">self:jumpToDestination(cc.p(<span class=\"number\">0</span>, posY))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤4</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self:updateViewByChangeIndex(changeIndex * self.iMultiNum)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"根据index，重新布局item\"><a href=\"#根据index，重新布局item\" class=\"headerlink\" title=\"根据index，重新布局item\"></a>根据index，重新布局item</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">    描述:</span></span><br><span class=\"line\"><span class=\"comment\">        根据index，重新布局item</span></span><br><span class=\"line\"><span class=\"comment\">    参数:</span></span><br><span class=\"line\"><span class=\"comment\">        changeIndex:   int</span></span><br><span class=\"line\"><span class=\"comment\">            改变的index值</span></span><br><span class=\"line\"><span class=\"comment\">    返回:</span></span><br><span class=\"line\"><span class=\"comment\">        无</span></span><br><span class=\"line\"><span class=\"comment\">]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollView:updateViewByChangeIndex</span><span class=\"params\">(changeIndex)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> totalBlock = (self.iTotalItemNum % self.iMultiNum == <span class=\"number\">0</span>) <span class=\"keyword\">and</span></span><br><span class=\"line\">        (self.iTotalItemNum / self.iMultiNum) <span class=\"keyword\">or</span></span><br><span class=\"line\">        (<span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(self.iTotalItemNum / self.iMultiNum))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> items = self:getAllItemView()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(items) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> idx = v.iIndex + changeIndex</span><br><span class=\"line\"></span><br><span class=\"line\">        v:setIndex(idx)</span><br><span class=\"line\">        v.pLayer:setVisible(idx &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> idx &lt;= self.iTotalItemNum)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">local</span> i = (idx % self.iMultiNum == <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (idx / self.iMultiNum) <span class=\"keyword\">or</span> (<span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(idx / self.iMultiNum))</span><br><span class=\"line\">        <span class=\"keyword\">local</span> j = self.iMultiNum - (idx % self.iMultiNum)</span><br><span class=\"line\">        v.pLayer:setPosition(self.tItemContentSize.width * (j - <span class=\"number\">1</span>), self.tItemContentSize.height * (totalBlock - i))</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"跳转的item在ScrollView中的位置\"><a href=\"#跳转的item在ScrollView中的位置\" class=\"headerlink\" title=\"跳转的item在ScrollView中的位置\"></a>跳转的item在ScrollView中的位置</h3><p>需要跳转到的item在可视区域的 上、中、下 显示<br>首先，一定要让使用者传入出现的位置枚举，<br>然后在计算inner移动的位置上加上偏移量。<br>如果要在中间显示，需要减去（向下移动） ScrollViewSize.height/2 , 因为初始的位置是按照item在最上面计算的，减去一半高度后，还需要再加上item本身高度的一半 ItemSize.height/2。<br>如果在底部显示，则需要减去（向下移动） ScrollViewSize.height , 同理，需要再加回来一个item的高度 ItemSize.height。<br>最后，依然要判定滑动到底部，无法滑动的情况。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SCROLLVIEW_ALIGNMENT = &#123;</span><br><span class=\"line\">    FIRST = <span class=\"number\">1</span>,</span><br><span class=\"line\">    MID = <span class=\"number\">2</span>,</span><br><span class=\"line\">    LAST = <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> posY = self:getContentSize().height - self.tContentSize.height + self.tItemContentSize.height * (line - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> alignment == SCROLLVIEW_ALIGNMENT.MID <span class=\"keyword\">then</span></span><br><span class=\"line\">    posY = posY - self:getContentSize().height / <span class=\"number\">2</span> + self.tItemContentSize.height / <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> alignment == SCROLLVIEW_ALIGNMENT.LAST <span class=\"keyword\">then</span></span><br><span class=\"line\">    posY = posY - self:getContentSize().height + self.tItemContentSize.height</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">posY = (posY &gt; <span class=\"number\">0</span>) <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">or</span> posY</span><br></pre></td></tr></table></figure>\n<h2 id=\"飞入动画\"><a href=\"#飞入动画\" class=\"headerlink\" title=\"飞入动画\"></a>飞入动画</h2><p>额外再加一个飞入动画的支持吧。<br>就是从外部飞入到ScrollView的效果。</p>\n<p>方法也很简单，就是在开始的时候，让所有的item在ScrollView外部；再一个个飞入到自己本应在的位置。<br>依旧是以垂直向为例。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 遍历所有item</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(self.tItemView) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"comment\">-- 记录它本来所在的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 把它放在区域外</span></span><br><span class=\"line\">    v.pLayer:setPositionY(-self:getContentSize().height - self.tItemContentSize.height)</span><br><span class=\"line\">    v.pLayer:runAction(</span><br><span class=\"line\">        act.seq(</span><br><span class=\"line\">        \t<span class=\"comment\">-- 一个个飞入</span></span><br><span class=\"line\">            act.delay((k - <span class=\"number\">1</span>) * [delay_time]),</span><br><span class=\"line\">            act.movto([move_time], aimPos)</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>当然，也要支持多方向ScrollView，并且要支持从前端飞入还是从后端飞入。<br>这些都是通过改动初始位置及回弹值来实现。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">    描述:</span></span><br><span class=\"line\"><span class=\"comment\">        ScrollView内item的从外部飞入动画, 有回弹效果</span></span><br><span class=\"line\"><span class=\"comment\">    参数:</span></span><br><span class=\"line\"><span class=\"comment\">        fromBack:   boolean</span></span><br><span class=\"line\"><span class=\"comment\">            对于垂直方向, true代表自下而上; 对于水平方向, true代表自右向左</span></span><br><span class=\"line\"><span class=\"comment\">    返回:</span></span><br><span class=\"line\"><span class=\"comment\">        无</span></span><br><span class=\"line\"><span class=\"comment\">]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollView:playFlyInAction</span><span class=\"params\">(fromBack)</span></span></span><br><span class=\"line\">    fromBack = fromBack == <span class=\"literal\">nil</span> <span class=\"keyword\">and</span> <span class=\"literal\">true</span>    </span><br><span class=\"line\">    self.tItemView = self.tItemView <span class=\"keyword\">or</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"keyword\">local</span> moveTime = <span class=\"number\">0.2</span></span><br><span class=\"line\">   \t<span class=\"keyword\">local</span> delayTime = <span class=\"number\">0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self:getDirection() == ScrollViewDirection.DIR_HORIZONTAL <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> initPos = fromBack <span class=\"keyword\">and</span> (self:getContentSize().width + self.tItemContentSize.width) <span class=\"keyword\">or</span> (-self:getContentSize().width - self.tItemContentSize.width)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(self.tItemView) <span class=\"keyword\">do</span></span><br><span class=\"line\">            <span class=\"keyword\">local</span> aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())</span><br><span class=\"line\"></span><br><span class=\"line\">            v.pLayer:setPositionX(initPos)</span><br><span class=\"line\">            v.pLayer:runAction(</span><br><span class=\"line\">                act.seq(</span><br><span class=\"line\">                    act.delay((k - <span class=\"number\">1</span>) * delayTime),</span><br><span class=\"line\">                    act.movto(moveTime, aimPos)</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                )</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">elseif</span> self:getDirection() == ScrollViewDirection.DIR_VERTICAL <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> initPos = fromBack <span class=\"keyword\">and</span> (-self:getContentSize().height - self.tItemContentSize.height) <span class=\"keyword\">or</span> (self:getContentSize().height + self.tItemContentSize.height)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(self.tItemView) <span class=\"keyword\">do</span></span><br><span class=\"line\">            <span class=\"keyword\">local</span> aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())</span><br><span class=\"line\"></span><br><span class=\"line\">            v.pLayer:setPositionY(initPos)</span><br><span class=\"line\">            v.pLayer:runAction(</span><br><span class=\"line\">                act.seq(</span><br><span class=\"line\">                    act.delay((k - <span class=\"number\">1</span>) * delayTime),</span><br><span class=\"line\">                    act.movto(moveTime, aimPos)</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                )</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>公司用ScrollView主要是用来替代ListView，虽然主要是用ScrollView的重用item的特性。<br>但是还是要平滑的过渡过来，要支持ListView常用的一些接口。让这个组件更完善更好用。<br>当然功能扩展还没有停止，之后也会陆陆续续的更新。</p>\n","site":{"data":{}},"excerpt":"<p>cocos2d lua<br>修改ScrollView第二弹: 功能扩展</p>","more":"<p><br></p>\n<hr>\n<p>温故：<br>上回书说到, 对Cocos2d-lua的ScrollView进行了修改优化。<br>主要做了 —— 重用item。<br>仅仅是重用item, 是远远不够的；还要对它进行进一步的功能扩展。</p>\n<hr>\n<p><br></p>\n<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><p>这次的扩展包括：</p>\n<ul>\n<li>支持横向和竖向</li>\n<li>支持多行多列</li>\n<li>item的适配</li>\n<li>item数量不够时的居中</li>\n<li>刷新数据</li>\n<li>跳转到指定item</li>\n<li>飞入动画</li>\n</ul>\n<p><br></p>\n<h2 id=\"多方向\"><a href=\"#多方向\" class=\"headerlink\" title=\"多方向\"></a>多方向</h2><p>之前的版本仅仅是纵向而已, 当然要支持横向的滑动了。<br>横向滑动其实与纵向不同。</p>\n<h3 id=\"纵向\"><a href=\"#纵向\" class=\"headerlink\" title=\"纵向\"></a>纵向</h3><p>由于ScrollView锚点在(0, 0), 要针对这个做一些处理。<br>否则, 显示的是如下的样子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">5</span><br><span class=\"line\">4</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>从下往上排列, 而且滑动是从下往上滑。<br>显然, 这并不符合常规操作。<br>正常应该是, 从上往下滑, 且:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>所以, 需要对它的坐标进行小处理。<br>这里有两个坐标需要被处理：</p>\n<ul>\n<li><p>item（要求锚点为(0, 0))<br>  它正常坐标是从(0, 0)开始, 然后随着索引增加变为: (0, itemSize.height <em> index)<br>  修改后的坐标应该是从(0, innerSize.height - itemSize.height)开始, 随着索引增加变为:(0, innerSize.height - itemSize.height </em> index)</p>\n</li>\n<li><p>inner<br>  正常开始的坐标为(0, 0), 显示的是最底部的信息, 随着滑动y坐标减少。<br>  修改后坐标为(0, scrollviewSize.height - innerSize.height), 显示最顶部的信息, 随着滑动y坐标增加。</p>\n</li>\n</ul>\n<h3 id=\"横向\"><a href=\"#横向\" class=\"headerlink\" title=\"横向\"></a>横向</h3><p>横向就没有那么多问题了, 很符合常规的动作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 \t2 \t3 \t4 \t5 \t...</span><br></pre></td></tr></table></figure>\n<p>它的两个坐标就不需要处理:</p>\n<ul>\n<li><p>item(要求锚点为(0, 0))<br>  坐标从(0, 0)开始, 随着索引增加变为: (itemSize.width * index, 0)</p>\n</li>\n<li><p>inner<br>  坐标从(0, 0)开始, 随着滑动x坐标增加</p>\n</li>\n</ul>\n<h3 id=\"主要代码\"><a href=\"#主要代码\" class=\"headerlink\" title=\"主要代码\"></a>主要代码</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> ScrollViewDirection = &#123;</span><br><span class=\"line\">    DIR_VERTICAL = <span class=\"number\">1</span>,</span><br><span class=\"line\">    DIR_HORIZONTAL = <span class=\"number\">2</span>,</span><br><span class=\"line\">    DIR_BOTH = <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ScrollView 的大小</span></span><br><span class=\"line\">self.tContentSize</span><br><span class=\"line\"><span class=\"comment\">-- Item 的大小</span></span><br><span class=\"line\">self.tItemContentSize</span><br><span class=\"line\"><span class=\"comment\">-- item总数</span></span><br><span class=\"line\">self.iTotalItemNum </span><br><span class=\"line\"><span class=\"comment\">-- 重用的item的集合</span></span><br><span class=\"line\">self.tItemView</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ScrollViewDirection.DIR_HORIZONTAL == self:getDirection() <span class=\"keyword\">then</span></span><br><span class=\"line\">    self.tContentSize.width = self.tItemContentSize.width * self.iTotalItemNum</span><br><span class=\"line\">    self:getInnerContainer():setContentSize(self.tContentSize)</span><br><span class=\"line\">    self.fLastContentPos = self:getContentSize().width - self.tContentSize.width</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> count = <span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(self.iTotalItemNum, <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(self:getContentSize().width / self.tItemContentSize.width) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, count <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> view = CSBReaderLoad(name)</span><br><span class=\"line\">        view:init(...)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> view.setIndex <span class=\"keyword\">then</span></span><br><span class=\"line\">            view:setIndex(i)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">-- 将父节点转为widget类型（原因可见 上一篇文章）</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> widget = quick.packageNodeToWidget(view.pLayer:getChildByName(<span class=\"string\">\"LayerTouch\"</span>))</span><br><span class=\"line\">        view.pLayer = widget</span><br><span class=\"line\">        <span class=\"comment\">-- widget随父节点透明度变化，默认是false</span></span><br><span class=\"line\">        widget:setCascadeOpacityEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        self:addChild(view.pLayer)</span><br><span class=\"line\"></span><br><span class=\"line\">        view.pLayer:setVisible(i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> i &lt;= self.iTotalItemNum)</span><br><span class=\"line\">        view.pLayer:setPosition(self.tItemContentSize.width * (i - <span class=\"number\">1</span>), <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(self.tItemView, view)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    self:jumpToLeft()</span><br><span class=\"line\">    self:getInnerContainer():setPositionX(self.fLastContentPos)</span><br><span class=\"line\">    self:setTouchEnabled(self.tContentSize.width &gt; self:getContentSize().width)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> ScrollViewDirection.DIR_VERTICAL == self:getDirection() <span class=\"keyword\">then</span></span><br><span class=\"line\">    self.tContentSize.height = self.tItemContentSize.height * self.iTotalItemNum</span><br><span class=\"line\">    self:getInnerContainer():setContentSize(self.tContentSize)</span><br><span class=\"line\">    self.fLastContentPos = self:getContentSize().height - self.tContentSize.height</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> count = <span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(self.iTotalItemNum, <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(self:getContentSize().height / self.tItemContentSize.height) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, count <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> view = CSBReaderLoad(name)</span><br><span class=\"line\">        view:init(...)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> view.setIndex <span class=\"keyword\">then</span></span><br><span class=\"line\">            view:setIndex(i)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">-- 将父节点转为widget类型（原因可见 上一篇文章）</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> widget = quick.packageNodeToWidget(view.pLayer:getChildByName(<span class=\"string\">\"LayerTouch\"</span>))</span><br><span class=\"line\">        view.pLayer = widget</span><br><span class=\"line\">        <span class=\"comment\">-- widget随父节点透明度变化，默认是false</span></span><br><span class=\"line\">        widget:setCascadeOpacityEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        self:addChild(view.pLayer)</span><br><span class=\"line\"></span><br><span class=\"line\">        view.pLayer:setVisible(i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> i &lt;= self.iTotalItemNum)</span><br><span class=\"line\">        view.pLayer:setPositionY(self.tItemContentSize.height * (self.iTotalItemNum - i))</span><br><span class=\"line\">        <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(self.tItemView, view)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    self:jumpToTop()</span><br><span class=\"line\">    self:getInnerContainer():setPositionY(self.fLastContentPos)</span><br><span class=\"line\">    self:setTouchEnabled(self.tContentSize.height &gt; self:getContentSize().height)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"适配item\"><a href=\"#适配item\" class=\"headerlink\" title=\"适配item\"></a>适配item</h2><p>根据ScrollView显示区域大小及方向, 适当调整item大小。<br>更充分重用item, 适应多尺寸item。<br>如果是纵向的ScrollView, 根据width的值, 来决定放缩值。<br>如果是横向的ScrollView, 根据height的值, 来决定放缩值。<br>然后根据放缩值再修改一下item size的值。</p>\n<h3 id=\"修改的东西-以纵向滑动ScrollView为例\"><a href=\"#修改的东西-以纵向滑动ScrollView为例\" class=\"headerlink\" title=\"修改的东西(以纵向滑动ScrollView为例)\"></a>修改的东西(以纵向滑动ScrollView为例)</h3><ul>\n<li>ScrollView inner 大小</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> scale = ScrollViewSize.width / (ItemSize.width * multiNum)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>需要绘制item的总个数</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> totalRow = cond(totalItemNum % multiNum == <span class=\"number\">0</span>, </span><br><span class=\"line\">    totalItemNum / multiNum,</span><br><span class=\"line\">    <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(totalItemNum / multiNum))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>item的位置</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.iCount = <span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(totalRow, <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(ScrollViewSize.height / ItemSize.height) + <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, self.iCount <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j = <span class=\"number\">1</span>, self.iMultiNum <span class=\"keyword\">do</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        item:setPosition(ItemSize.width * (j - <span class=\"number\">1</span>), ItemSize.height * (totalRow - i))</span><br><span class=\"line\">    <span class=\"keyword\">end</span> </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"多行多列\"><a href=\"#多行多列\" class=\"headerlink\" title=\"多行多列\"></a>多行多列</h2><p>重用item, 这么棒的东西, 肯定要多用用呀。<br>支持多行多列，是根据ScrollView的滚动方向，再根据传入的行/列值进行设置。<br>需要重新计算一些数值。(下面均以纵向滑动的ScrollView为例)</p>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><ul>\n<li>放缩值</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scale = innerSize.width / (itemSize.width * multiNum)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>inner size</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 根据总共需要的行数来计算高度</span></span><br><span class=\"line\">totalRow = (totalItemNum % multiNum == <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (totalItemNum / multiNum) <span class=\"keyword\">or</span> (<span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(totalItemNum / multiNum))</span><br><span class=\"line\">innerSize.height = totalRow * itemSize.height</span><br></pre></td></tr></table></figure>\n<ul>\n<li>item position</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 获得需要重用的行数</span></span><br><span class=\"line\">showRow = <span class=\"built_in\">math</span>.<span class=\"built_in\">min</span>(totalRow, <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(viewSize.height / itemSize.height) + <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, showRow <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j = <span class=\"number\">1</span>, multiNum <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tview:setPosition(itemSize.width * (j - <span class=\"number\">1</span>), itemSize.height * (totalRow - i))</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"item数量不够时的居中\"><a href=\"#item数量不够时的居中\" class=\"headerlink\" title=\"item数量不够时的居中\"></a>item数量不够时的居中</h2><p>主要是有个需求，希望item没有填满view的时候，所有的item居中显示。<br>其实，item还是按照原来的方式放置，只需要移动inner的位置即可。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">    描述:</span></span><br><span class=\"line\"><span class=\"comment\">        ScrollView内Item是否居中显示</span></span><br><span class=\"line\"><span class=\"comment\">    参数:</span></span><br><span class=\"line\"><span class=\"comment\">        isCenter - boolean</span></span><br><span class=\"line\"><span class=\"comment\">            是否居中显示</span></span><br><span class=\"line\"><span class=\"comment\">    返回:</span></span><br><span class=\"line\"><span class=\"comment\">        无</span></span><br><span class=\"line\"><span class=\"comment\">--]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollView:setShowCenter</span><span class=\"params\">(isCenter)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> viewSize = self:getContentSize()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ScrollViewDirection.DIR_HORIZONTAL == self:getDirection() <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> dertaValue = viewSize.width - self.tContentSize.width</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isCenter <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dertaValue &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">                self:getInnerContainer():setPositionX(dertaValue/<span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            self:getInnerContainer():setPositionX(dertaValue)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">elseif</span> ScrollViewDirection.DIR_VERTICAL == self:getDirection() <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> dertaValue = viewSize.height - self.tContentSize.height</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isCenter <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dertaValue &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">                self:getInnerContainer():setPositionY(dertaValue/<span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            self:getInnerContainer():setPositionY(dertaValue)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"刷新数据\"><a href=\"#刷新数据\" class=\"headerlink\" title=\"刷新数据\"></a>刷新数据</h2><p>创建完ScrollView，除非item变动自己的位置，否则是不会刷新数据的。<br>所以需要一个手动刷新的方法。<br>这里充分利用了lua的变长参数，在配合人为默认规定。ie</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">    描述:</span></span><br><span class=\"line\"><span class=\"comment\">        刷新ScrollView中指定索引的item</span></span><br><span class=\"line\"><span class=\"comment\">    参数:</span></span><br><span class=\"line\"><span class=\"comment\">        ... - 传入一堆int</span></span><br><span class=\"line\"><span class=\"comment\">            item的索引, -1代表全部刷新</span></span><br><span class=\"line\"><span class=\"comment\">    返回:</span></span><br><span class=\"line\"><span class=\"comment\">        无</span></span><br><span class=\"line\"><span class=\"comment\">--]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollView:refreshItems</span><span class=\"params\">(...)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> args = &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> #args &gt; <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> args[<span class=\"number\">1</span>] == <span class=\"number\">-1</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">local</span> items = self:getAllItemView()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(items) <span class=\"keyword\">do</span></span><br><span class=\"line\">                v:setIndex(v.iIndex)</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"comment\">-- 先做一个映射表，便于查找是否需要更新</span></span><br><span class=\"line\">            <span class=\"keyword\">local</span> tempTable = &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(args) <span class=\"keyword\">do</span></span><br><span class=\"line\">                tempTable[v] = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">local</span> items = self:getAllItemView()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(items) <span class=\"keyword\">do</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> v.iIndex <span class=\"keyword\">and</span> tempTable[v.iIndex] == <span class=\"number\">1</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">                    v:setIndex(v.iIndex)</span><br><span class=\"line\">                <span class=\"keyword\">end</span></span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>这里我用了一个映射表。<br>否则需要嵌套两层循环，复杂度 m * n<br>做一个映射，只需要 n + m<br>用空间来换取时间</p>\n<h2 id=\"跳转到指定item\"><a href=\"#跳转到指定item\" class=\"headerlink\" title=\"跳转到指定item\"></a>跳转到指定item</h2><p>这个功能ListView是支持的，觉得ScrollView也有必要支持一下。<br>方法是先计算出inner需要移动多少距离，从而知道了index需要变化多少。</p>\n<h3 id=\"主要步骤-（也是以垂直滑动方向为例）\"><a href=\"#主要步骤-（也是以垂直滑动方向为例）\" class=\"headerlink\" title=\"主要步骤:（也是以垂直滑动方向为例）\"></a>主要步骤:（也是以垂直滑动方向为例）</h3><ol>\n<li>计算所需跳转的index在最上方位置是第几行</li>\n<li>计算inner需要滑动多少距离</li>\n<li>计算从当前到目标，index需要变动多少</li>\n<li>按照移动后的index，重新布局item</li>\n</ol>\n<h3 id=\"主要代码：\"><a href=\"#主要代码：\" class=\"headerlink\" title=\"主要代码：\"></a>主要代码：</h3><ul>\n<li><p>步骤1</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> line = (index % self.iMultiNum == <span class=\"number\">0</span>) <span class=\"keyword\">and</span></span><br><span class=\"line\">    (index / self.iMultiNum) <span class=\"keyword\">or</span></span><br><span class=\"line\">    (<span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(index / self.iMultiNum))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤2</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> posY = self:getContentSize().height - self.tContentSize.height + self.tItemContentSize.height * (line - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 要考虑到滑动到底部，无法继续向上滑的情况</span></span><br><span class=\"line\">posY = (posY &gt; <span class=\"number\">0</span>) <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">or</span> posY</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤3</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> changeIndex = <span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>((posY - self:getInnerContainer():getPositionY()) / self.tItemContentSize.height)</span><br><span class=\"line\"><span class=\"comment\">-- inner跳到指定位置</span></span><br><span class=\"line\">self:jumpToDestination(cc.p(<span class=\"number\">0</span>, posY))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>步骤4</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self:updateViewByChangeIndex(changeIndex * self.iMultiNum)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"根据index，重新布局item\"><a href=\"#根据index，重新布局item\" class=\"headerlink\" title=\"根据index，重新布局item\"></a>根据index，重新布局item</h3><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">    描述:</span></span><br><span class=\"line\"><span class=\"comment\">        根据index，重新布局item</span></span><br><span class=\"line\"><span class=\"comment\">    参数:</span></span><br><span class=\"line\"><span class=\"comment\">        changeIndex:   int</span></span><br><span class=\"line\"><span class=\"comment\">            改变的index值</span></span><br><span class=\"line\"><span class=\"comment\">    返回:</span></span><br><span class=\"line\"><span class=\"comment\">        无</span></span><br><span class=\"line\"><span class=\"comment\">]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollView:updateViewByChangeIndex</span><span class=\"params\">(changeIndex)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> totalBlock = (self.iTotalItemNum % self.iMultiNum == <span class=\"number\">0</span>) <span class=\"keyword\">and</span></span><br><span class=\"line\">        (self.iTotalItemNum / self.iMultiNum) <span class=\"keyword\">or</span></span><br><span class=\"line\">        (<span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(self.iTotalItemNum / self.iMultiNum))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> items = self:getAllItemView()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(items) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> idx = v.iIndex + changeIndex</span><br><span class=\"line\"></span><br><span class=\"line\">        v:setIndex(idx)</span><br><span class=\"line\">        v.pLayer:setVisible(idx &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> idx &lt;= self.iTotalItemNum)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">local</span> i = (idx % self.iMultiNum == <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (idx / self.iMultiNum) <span class=\"keyword\">or</span> (<span class=\"built_in\">math</span>.<span class=\"built_in\">ceil</span>(idx / self.iMultiNum))</span><br><span class=\"line\">        <span class=\"keyword\">local</span> j = self.iMultiNum - (idx % self.iMultiNum)</span><br><span class=\"line\">        v.pLayer:setPosition(self.tItemContentSize.width * (j - <span class=\"number\">1</span>), self.tItemContentSize.height * (totalBlock - i))</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"跳转的item在ScrollView中的位置\"><a href=\"#跳转的item在ScrollView中的位置\" class=\"headerlink\" title=\"跳转的item在ScrollView中的位置\"></a>跳转的item在ScrollView中的位置</h3><p>需要跳转到的item在可视区域的 上、中、下 显示<br>首先，一定要让使用者传入出现的位置枚举，<br>然后在计算inner移动的位置上加上偏移量。<br>如果要在中间显示，需要减去（向下移动） ScrollViewSize.height/2 , 因为初始的位置是按照item在最上面计算的，减去一半高度后，还需要再加上item本身高度的一半 ItemSize.height/2。<br>如果在底部显示，则需要减去（向下移动） ScrollViewSize.height , 同理，需要再加回来一个item的高度 ItemSize.height。<br>最后，依然要判定滑动到底部，无法滑动的情况。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SCROLLVIEW_ALIGNMENT = &#123;</span><br><span class=\"line\">    FIRST = <span class=\"number\">1</span>,</span><br><span class=\"line\">    MID = <span class=\"number\">2</span>,</span><br><span class=\"line\">    LAST = <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> posY = self:getContentSize().height - self.tContentSize.height + self.tItemContentSize.height * (line - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> alignment == SCROLLVIEW_ALIGNMENT.MID <span class=\"keyword\">then</span></span><br><span class=\"line\">    posY = posY - self:getContentSize().height / <span class=\"number\">2</span> + self.tItemContentSize.height / <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> alignment == SCROLLVIEW_ALIGNMENT.LAST <span class=\"keyword\">then</span></span><br><span class=\"line\">    posY = posY - self:getContentSize().height + self.tItemContentSize.height</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">posY = (posY &gt; <span class=\"number\">0</span>) <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">or</span> posY</span><br></pre></td></tr></table></figure>\n<h2 id=\"飞入动画\"><a href=\"#飞入动画\" class=\"headerlink\" title=\"飞入动画\"></a>飞入动画</h2><p>额外再加一个飞入动画的支持吧。<br>就是从外部飞入到ScrollView的效果。</p>\n<p>方法也很简单，就是在开始的时候，让所有的item在ScrollView外部；再一个个飞入到自己本应在的位置。<br>依旧是以垂直向为例。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 遍历所有item</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(self.tItemView) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"comment\">-- 记录它本来所在的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 把它放在区域外</span></span><br><span class=\"line\">    v.pLayer:setPositionY(-self:getContentSize().height - self.tItemContentSize.height)</span><br><span class=\"line\">    v.pLayer:runAction(</span><br><span class=\"line\">        act.seq(</span><br><span class=\"line\">        \t<span class=\"comment\">-- 一个个飞入</span></span><br><span class=\"line\">            act.delay((k - <span class=\"number\">1</span>) * [delay_time]),</span><br><span class=\"line\">            act.movto([move_time], aimPos)</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>当然，也要支持多方向ScrollView，并且要支持从前端飞入还是从后端飞入。<br>这些都是通过改动初始位置及回弹值来实现。</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">    描述:</span></span><br><span class=\"line\"><span class=\"comment\">        ScrollView内item的从外部飞入动画, 有回弹效果</span></span><br><span class=\"line\"><span class=\"comment\">    参数:</span></span><br><span class=\"line\"><span class=\"comment\">        fromBack:   boolean</span></span><br><span class=\"line\"><span class=\"comment\">            对于垂直方向, true代表自下而上; 对于水平方向, true代表自右向左</span></span><br><span class=\"line\"><span class=\"comment\">    返回:</span></span><br><span class=\"line\"><span class=\"comment\">        无</span></span><br><span class=\"line\"><span class=\"comment\">]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ScrollView:playFlyInAction</span><span class=\"params\">(fromBack)</span></span></span><br><span class=\"line\">    fromBack = fromBack == <span class=\"literal\">nil</span> <span class=\"keyword\">and</span> <span class=\"literal\">true</span>    </span><br><span class=\"line\">    self.tItemView = self.tItemView <span class=\"keyword\">or</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   \t<span class=\"keyword\">local</span> moveTime = <span class=\"number\">0.2</span></span><br><span class=\"line\">   \t<span class=\"keyword\">local</span> delayTime = <span class=\"number\">0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self:getDirection() == ScrollViewDirection.DIR_HORIZONTAL <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> initPos = fromBack <span class=\"keyword\">and</span> (self:getContentSize().width + self.tItemContentSize.width) <span class=\"keyword\">or</span> (-self:getContentSize().width - self.tItemContentSize.width)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(self.tItemView) <span class=\"keyword\">do</span></span><br><span class=\"line\">            <span class=\"keyword\">local</span> aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())</span><br><span class=\"line\"></span><br><span class=\"line\">            v.pLayer:setPositionX(initPos)</span><br><span class=\"line\">            v.pLayer:runAction(</span><br><span class=\"line\">                act.seq(</span><br><span class=\"line\">                    act.delay((k - <span class=\"number\">1</span>) * delayTime),</span><br><span class=\"line\">                    act.movto(moveTime, aimPos)</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                )</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">elseif</span> self:getDirection() == ScrollViewDirection.DIR_VERTICAL <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> initPos = fromBack <span class=\"keyword\">and</span> (-self:getContentSize().height - self.tItemContentSize.height) <span class=\"keyword\">or</span> (self:getContentSize().height + self.tItemContentSize.height)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(self.tItemView) <span class=\"keyword\">do</span></span><br><span class=\"line\">            <span class=\"keyword\">local</span> aimPos = cc.p(v.pLayer:getPositionX(), v.pLayer:getPositionY())</span><br><span class=\"line\"></span><br><span class=\"line\">            v.pLayer:setPositionY(initPos)</span><br><span class=\"line\">            v.pLayer:runAction(</span><br><span class=\"line\">                act.seq(</span><br><span class=\"line\">                    act.delay((k - <span class=\"number\">1</span>) * delayTime),</span><br><span class=\"line\">                    act.movto(moveTime, aimPos)</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                )</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>公司用ScrollView主要是用来替代ListView，虽然主要是用ScrollView的重用item的特性。<br>但是还是要平滑的过渡过来，要支持ListView常用的一些接口。让这个组件更完善更好用。<br>当然功能扩展还没有停止，之后也会陆陆续续的更新。</p>"},{"title":"Go环境搭建小记","date":"2017-03-23T14:00:00.000Z","_content":"\nGo环境搭建\nMac + Go1.7 + VSCode1.8\n\n<!-- more -->\n\n<br/>\n\n---\n\n由于工作原因，需要学习一下Go。\n其实，我一直就对这个语言挺感兴趣的。\n虽说技多不压身，但贪多嚼不烂；本来想着嚼烂了客户端，再去学一学Go。\n没关系，先提前了解一下吧。\n\n---\n\n<br/>\n\n这个语言，对新手真是不友好到极点。\n搭环境废了很大功夫。\n\n先列一下我的环境：\nMac系统 - Go 1.7 - VSCode 1.8\n（ IDE为什么选择VSCode？VSCode优点可以自行Google ）\n\n<br/>\n<br/>\n\n# Go的设置\n\n先把Go下载，然后安装到Mac。\n然后需要配置一下环境变量\n\n- GOROOT\n这个是你Go安装到的位置，一般在  /usr/local/go\n- GOPATH\n这个是你工作区路径，一般在自建的文件夹下（这个自建的文件夹下要有3个子文件夹[src、pkg、bin]）\n- GOBIN（选配）\n工作区路径下的bin文件夹（**路径唯一**）\n\n当时这块就混淆了一下。\n因为Go是支持多个工作区域的，后面我们要为Go下载一系列依赖包（就是在命令行用 go get 获得的一堆东西），如果都放在一个工作区域，就会有些混乱。\n所以，很多人就建立两个区域，一个放依赖包，一个用来放自己平时的东西。\n这时候，环境变量上就要有多个区域，Mac用 ':' 来区隔。（依赖包默认下载到第一个工作区域）\n\n在命令行下：\n\n1. 打开配置（`vim .bash_profile`） 开始搭Go环境。\n2. `export GOPATH=\"/Users/你的用户名/依赖包目录:/Users/你的用户名/工作区目录\"`\n依赖包默认下载到GOPATH的第一个目录下，所以依赖包目录要放在第一个，然后用':'分隔\n`export PATH=$PATH:${GOPATH//://bin:}/bin`\n如果设置GOBIN，GOBIN只能设置一个路径，但是你可以将每个GOPATH下的bin添加到PATH中\n`export PATH=$PATH:$GOPATH`\n路径加入到PATH\n3. 保存退出，然后重启配置（source .bash_profile)\n4. 输入 go env 看看Go的环境变量\n\n*PS: 关于GOBIN：go install编译存放路径。不允许设置多个路径。可以为空。为空时则遵循“约定优于配置”原则，可执行文件放在各自GOPATH目录的bin文件夹中（前提是：package main的main函数文件不能直接放到GOPATH的src下面。)*\n\n<br/>\n\n# VSCode的配置\n下载VSCode，然后在左侧小图标的最下面那个扩展选项中，搜索Go，进行下载(一般会搜索到两个go 和 Go，我下载的是第二个Go)。\n接下来，要下载一系列的依赖包。\n\n\n## 打开命令行，分别输入以下命令进行下载：\n\n\n\t\tgo get -u -v github.com/nsf/gocode\n\t\tgo get -u -v github.com/rogpeppe/godef\n\t\tgo get -u -v github.com/golang/lint/golint\n\t\tgo get -u -v github.com/lukehoban/go-outline\n\t\tgo get -u -v sourcegraph.com/sqs/goreturns\n\t\tgo get -u -v golang.org/x/tools/cmd/gorename\n\t\tgo get -u -v github.com/tpng/gopkgs\n\t\tgo get -u -v golang.org/x/tools/cmd/guru\n\n\n这一步，需要  科学上网工具  的支持，而且有时候，你有科学上网工具的支持都不顶用。\n本质上讲，以gocode为例，它将gocode相关文件下载到src，然后将它编译生成可执行文件，将可执行文件放到bin目录下。\n所以，可以直接去github上下载下来，然后自己编译一下，将生成的可执行文件放到bin目录下。\n\n## 配置VSCode相关\n主要是 settings.json 与 launch.json\n\n如果你配置了 GOPATH、GOROOT ，就不需要配置相应的setting.json。\n（进入方法是 code -> 首选项 -> 用户设置）\n\n打开VSCode，选择你的工作区域文件夹，然后在编辑配置文件。（不选文件夹不能配置）\n进入方法是 code -> 首选项 -> 工作区设置\n\n主要修改program字段: `program: \"${workspaceRoot}\"`\n如果你的文件，比如test.go 放在src下就： `program: \"${workspaceRoot}/src\"`\n\n<br/>\n\n# 让Mac 支持 VSCode调试功能\n英语原文：  [>这里<](https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md)\n\n简单翻译一下步骤：\n1. 创建一个自签名证书\n\t找到钥匙串访问，（ 证书助理 -> 创建证书（身份类型：自签名证书，证书类型：代码签名，勾选 覆盖这些默认值） -> 继续到最后，指定用于该证书的位置: 系统 ）\n2. 设定信任属性\n\t重启系统后，找到自己创建的证书，在 （ 显示简介 -> 信任 -> 代码签名 ） 选择 （ 始终信任 ）\n3. 重新编译dlv文件\n\t打开命令行，进入依赖包所处的工作区: `src/github.com/derekparker/delve`\n\t如果你的Go版本是1.5，则运行： `GO15VENDOREXPERIMENT=1 CERT=你创建的证书名称 make install`\n\t其他版本就直接：`CERT=你创建的证书名称 make install`\n\n<br/>\n\n# 总结小记。\n终于折腾完了。\n花了好久时间，看了N多教程，但还是走了不少弯路。\n在 GOPATH、GOROOT理解上，在GOBIN路径唯一上，在创建签名证书处等等。\n所以，整理了一下这篇文章，希望对他人有所帮助。","source":"_posts/Go环境搭建小记.md","raw":"---\ntitle: Go环境搭建小记\ndate: 2017-03-23 22:00:00\ntags: [跟着学, Go]\n\n---\n\nGo环境搭建\nMac + Go1.7 + VSCode1.8\n\n<!-- more -->\n\n<br/>\n\n---\n\n由于工作原因，需要学习一下Go。\n其实，我一直就对这个语言挺感兴趣的。\n虽说技多不压身，但贪多嚼不烂；本来想着嚼烂了客户端，再去学一学Go。\n没关系，先提前了解一下吧。\n\n---\n\n<br/>\n\n这个语言，对新手真是不友好到极点。\n搭环境废了很大功夫。\n\n先列一下我的环境：\nMac系统 - Go 1.7 - VSCode 1.8\n（ IDE为什么选择VSCode？VSCode优点可以自行Google ）\n\n<br/>\n<br/>\n\n# Go的设置\n\n先把Go下载，然后安装到Mac。\n然后需要配置一下环境变量\n\n- GOROOT\n这个是你Go安装到的位置，一般在  /usr/local/go\n- GOPATH\n这个是你工作区路径，一般在自建的文件夹下（这个自建的文件夹下要有3个子文件夹[src、pkg、bin]）\n- GOBIN（选配）\n工作区路径下的bin文件夹（**路径唯一**）\n\n当时这块就混淆了一下。\n因为Go是支持多个工作区域的，后面我们要为Go下载一系列依赖包（就是在命令行用 go get 获得的一堆东西），如果都放在一个工作区域，就会有些混乱。\n所以，很多人就建立两个区域，一个放依赖包，一个用来放自己平时的东西。\n这时候，环境变量上就要有多个区域，Mac用 ':' 来区隔。（依赖包默认下载到第一个工作区域）\n\n在命令行下：\n\n1. 打开配置（`vim .bash_profile`） 开始搭Go环境。\n2. `export GOPATH=\"/Users/你的用户名/依赖包目录:/Users/你的用户名/工作区目录\"`\n依赖包默认下载到GOPATH的第一个目录下，所以依赖包目录要放在第一个，然后用':'分隔\n`export PATH=$PATH:${GOPATH//://bin:}/bin`\n如果设置GOBIN，GOBIN只能设置一个路径，但是你可以将每个GOPATH下的bin添加到PATH中\n`export PATH=$PATH:$GOPATH`\n路径加入到PATH\n3. 保存退出，然后重启配置（source .bash_profile)\n4. 输入 go env 看看Go的环境变量\n\n*PS: 关于GOBIN：go install编译存放路径。不允许设置多个路径。可以为空。为空时则遵循“约定优于配置”原则，可执行文件放在各自GOPATH目录的bin文件夹中（前提是：package main的main函数文件不能直接放到GOPATH的src下面。)*\n\n<br/>\n\n# VSCode的配置\n下载VSCode，然后在左侧小图标的最下面那个扩展选项中，搜索Go，进行下载(一般会搜索到两个go 和 Go，我下载的是第二个Go)。\n接下来，要下载一系列的依赖包。\n\n\n## 打开命令行，分别输入以下命令进行下载：\n\n\n\t\tgo get -u -v github.com/nsf/gocode\n\t\tgo get -u -v github.com/rogpeppe/godef\n\t\tgo get -u -v github.com/golang/lint/golint\n\t\tgo get -u -v github.com/lukehoban/go-outline\n\t\tgo get -u -v sourcegraph.com/sqs/goreturns\n\t\tgo get -u -v golang.org/x/tools/cmd/gorename\n\t\tgo get -u -v github.com/tpng/gopkgs\n\t\tgo get -u -v golang.org/x/tools/cmd/guru\n\n\n这一步，需要  科学上网工具  的支持，而且有时候，你有科学上网工具的支持都不顶用。\n本质上讲，以gocode为例，它将gocode相关文件下载到src，然后将它编译生成可执行文件，将可执行文件放到bin目录下。\n所以，可以直接去github上下载下来，然后自己编译一下，将生成的可执行文件放到bin目录下。\n\n## 配置VSCode相关\n主要是 settings.json 与 launch.json\n\n如果你配置了 GOPATH、GOROOT ，就不需要配置相应的setting.json。\n（进入方法是 code -> 首选项 -> 用户设置）\n\n打开VSCode，选择你的工作区域文件夹，然后在编辑配置文件。（不选文件夹不能配置）\n进入方法是 code -> 首选项 -> 工作区设置\n\n主要修改program字段: `program: \"${workspaceRoot}\"`\n如果你的文件，比如test.go 放在src下就： `program: \"${workspaceRoot}/src\"`\n\n<br/>\n\n# 让Mac 支持 VSCode调试功能\n英语原文：  [>这里<](https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md)\n\n简单翻译一下步骤：\n1. 创建一个自签名证书\n\t找到钥匙串访问，（ 证书助理 -> 创建证书（身份类型：自签名证书，证书类型：代码签名，勾选 覆盖这些默认值） -> 继续到最后，指定用于该证书的位置: 系统 ）\n2. 设定信任属性\n\t重启系统后，找到自己创建的证书，在 （ 显示简介 -> 信任 -> 代码签名 ） 选择 （ 始终信任 ）\n3. 重新编译dlv文件\n\t打开命令行，进入依赖包所处的工作区: `src/github.com/derekparker/delve`\n\t如果你的Go版本是1.5，则运行： `GO15VENDOREXPERIMENT=1 CERT=你创建的证书名称 make install`\n\t其他版本就直接：`CERT=你创建的证书名称 make install`\n\n<br/>\n\n# 总结小记。\n终于折腾完了。\n花了好久时间，看了N多教程，但还是走了不少弯路。\n在 GOPATH、GOROOT理解上，在GOBIN路径唯一上，在创建签名证书处等等。\n所以，整理了一下这篇文章，希望对他人有所帮助。","slug":"Go环境搭建小记","published":1,"updated":"2018-07-17T17:05:10.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbc1000desvqy8387te3","content":"<p>Go环境搭建<br>Mac + Go1.7 + VSCode1.8</p>\n<a id=\"more\"></a>\n<p><br></p>\n<hr>\n<p>由于工作原因，需要学习一下Go。<br>其实，我一直就对这个语言挺感兴趣的。<br>虽说技多不压身，但贪多嚼不烂；本来想着嚼烂了客户端，再去学一学Go。<br>没关系，先提前了解一下吧。</p>\n<hr>\n<p><br></p>\n<p>这个语言，对新手真是不友好到极点。<br>搭环境废了很大功夫。</p>\n<p>先列一下我的环境：<br>Mac系统 - Go 1.7 - VSCode 1.8<br>（ IDE为什么选择VSCode？VSCode优点可以自行Google ）</p>\n<p><br><br><br></p>\n<h1 id=\"Go的设置\"><a href=\"#Go的设置\" class=\"headerlink\" title=\"Go的设置\"></a>Go的设置</h1><p>先把Go下载，然后安装到Mac。<br>然后需要配置一下环境变量</p>\n<ul>\n<li>GOROOT<br>这个是你Go安装到的位置，一般在  /usr/local/go</li>\n<li>GOPATH<br>这个是你工作区路径，一般在自建的文件夹下（这个自建的文件夹下要有3个子文件夹[src、pkg、bin]）</li>\n<li>GOBIN（选配）<br>工作区路径下的bin文件夹（<strong>路径唯一</strong>）</li>\n</ul>\n<p>当时这块就混淆了一下。<br>因为Go是支持多个工作区域的，后面我们要为Go下载一系列依赖包（就是在命令行用 go get 获得的一堆东西），如果都放在一个工作区域，就会有些混乱。<br>所以，很多人就建立两个区域，一个放依赖包，一个用来放自己平时的东西。<br>这时候，环境变量上就要有多个区域，Mac用 ‘:’ 来区隔。（依赖包默认下载到第一个工作区域）</p>\n<p>在命令行下：</p>\n<ol>\n<li>打开配置（<code>vim .bash_profile</code>） 开始搭Go环境。</li>\n<li><code>export GOPATH=&quot;/Users/你的用户名/依赖包目录:/Users/你的用户名/工作区目录&quot;</code><br>依赖包默认下载到GOPATH的第一个目录下，所以依赖包目录要放在第一个，然后用’:’分隔<br><code>export PATH=$PATH:${GOPATH//://bin:}/bin</code><br>如果设置GOBIN，GOBIN只能设置一个路径，但是你可以将每个GOPATH下的bin添加到PATH中<br><code>export PATH=$PATH:$GOPATH</code><br>路径加入到PATH</li>\n<li>保存退出，然后重启配置（source .bash_profile)</li>\n<li>输入 go env 看看Go的环境变量</li>\n</ol>\n<p><em>PS: 关于GOBIN：go install编译存放路径。不允许设置多个路径。可以为空。为空时则遵循“约定优于配置”原则，可执行文件放在各自GOPATH目录的bin文件夹中（前提是：package main的main函数文件不能直接放到GOPATH的src下面。)</em></p>\n<p><br></p>\n<h1 id=\"VSCode的配置\"><a href=\"#VSCode的配置\" class=\"headerlink\" title=\"VSCode的配置\"></a>VSCode的配置</h1><p>下载VSCode，然后在左侧小图标的最下面那个扩展选项中，搜索Go，进行下载(一般会搜索到两个go 和 Go，我下载的是第二个Go)。<br>接下来，要下载一系列的依赖包。</p>\n<h2 id=\"打开命令行，分别输入以下命令进行下载：\"><a href=\"#打开命令行，分别输入以下命令进行下载：\" class=\"headerlink\" title=\"打开命令行，分别输入以下命令进行下载：\"></a>打开命令行，分别输入以下命令进行下载：</h2><pre><code>go get -u -v github.com/nsf/gocode\ngo get -u -v github.com/rogpeppe/godef\ngo get -u -v github.com/golang/lint/golint\ngo get -u -v github.com/lukehoban/go-outline\ngo get -u -v sourcegraph.com/sqs/goreturns\ngo get -u -v golang.org/x/tools/cmd/gorename\ngo get -u -v github.com/tpng/gopkgs\ngo get -u -v golang.org/x/tools/cmd/guru\n</code></pre><p>这一步，需要  科学上网工具  的支持，而且有时候，你有科学上网工具的支持都不顶用。<br>本质上讲，以gocode为例，它将gocode相关文件下载到src，然后将它编译生成可执行文件，将可执行文件放到bin目录下。<br>所以，可以直接去github上下载下来，然后自己编译一下，将生成的可执行文件放到bin目录下。</p>\n<h2 id=\"配置VSCode相关\"><a href=\"#配置VSCode相关\" class=\"headerlink\" title=\"配置VSCode相关\"></a>配置VSCode相关</h2><p>主要是 settings.json 与 launch.json</p>\n<p>如果你配置了 GOPATH、GOROOT ，就不需要配置相应的setting.json。<br>（进入方法是 code -&gt; 首选项 -&gt; 用户设置）</p>\n<p>打开VSCode，选择你的工作区域文件夹，然后在编辑配置文件。（不选文件夹不能配置）<br>进入方法是 code -&gt; 首选项 -&gt; 工作区设置</p>\n<p>主要修改program字段: <code>program: &quot;${workspaceRoot}&quot;</code><br>如果你的文件，比如test.go 放在src下就： <code>program: &quot;${workspaceRoot}/src&quot;</code></p>\n<p><br></p>\n<h1 id=\"让Mac-支持-VSCode调试功能\"><a href=\"#让Mac-支持-VSCode调试功能\" class=\"headerlink\" title=\"让Mac 支持 VSCode调试功能\"></a>让Mac 支持 VSCode调试功能</h1><p>英语原文：  <a href=\"https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md\" target=\"_blank\" rel=\"noopener\">&gt;这里&lt;</a></p>\n<p>简单翻译一下步骤：</p>\n<ol>\n<li>创建一个自签名证书<br> 找到钥匙串访问，（ 证书助理 -&gt; 创建证书（身份类型：自签名证书，证书类型：代码签名，勾选 覆盖这些默认值） -&gt; 继续到最后，指定用于该证书的位置: 系统 ）</li>\n<li>设定信任属性<br> 重启系统后，找到自己创建的证书，在 （ 显示简介 -&gt; 信任 -&gt; 代码签名 ） 选择 （ 始终信任 ）</li>\n<li>重新编译dlv文件<br> 打开命令行，进入依赖包所处的工作区: <code>src/github.com/derekparker/delve</code><br> 如果你的Go版本是1.5，则运行： <code>GO15VENDOREXPERIMENT=1 CERT=你创建的证书名称 make install</code><br> 其他版本就直接：<code>CERT=你创建的证书名称 make install</code></li>\n</ol>\n<p><br></p>\n<h1 id=\"总结小记。\"><a href=\"#总结小记。\" class=\"headerlink\" title=\"总结小记。\"></a>总结小记。</h1><p>终于折腾完了。<br>花了好久时间，看了N多教程，但还是走了不少弯路。<br>在 GOPATH、GOROOT理解上，在GOBIN路径唯一上，在创建签名证书处等等。<br>所以，整理了一下这篇文章，希望对他人有所帮助。</p>\n","site":{"data":{}},"excerpt":"<p>Go环境搭建<br>Mac + Go1.7 + VSCode1.8</p>","more":"<p><br></p>\n<hr>\n<p>由于工作原因，需要学习一下Go。<br>其实，我一直就对这个语言挺感兴趣的。<br>虽说技多不压身，但贪多嚼不烂；本来想着嚼烂了客户端，再去学一学Go。<br>没关系，先提前了解一下吧。</p>\n<hr>\n<p><br></p>\n<p>这个语言，对新手真是不友好到极点。<br>搭环境废了很大功夫。</p>\n<p>先列一下我的环境：<br>Mac系统 - Go 1.7 - VSCode 1.8<br>（ IDE为什么选择VSCode？VSCode优点可以自行Google ）</p>\n<p><br><br><br></p>\n<h1 id=\"Go的设置\"><a href=\"#Go的设置\" class=\"headerlink\" title=\"Go的设置\"></a>Go的设置</h1><p>先把Go下载，然后安装到Mac。<br>然后需要配置一下环境变量</p>\n<ul>\n<li>GOROOT<br>这个是你Go安装到的位置，一般在  /usr/local/go</li>\n<li>GOPATH<br>这个是你工作区路径，一般在自建的文件夹下（这个自建的文件夹下要有3个子文件夹[src、pkg、bin]）</li>\n<li>GOBIN（选配）<br>工作区路径下的bin文件夹（<strong>路径唯一</strong>）</li>\n</ul>\n<p>当时这块就混淆了一下。<br>因为Go是支持多个工作区域的，后面我们要为Go下载一系列依赖包（就是在命令行用 go get 获得的一堆东西），如果都放在一个工作区域，就会有些混乱。<br>所以，很多人就建立两个区域，一个放依赖包，一个用来放自己平时的东西。<br>这时候，环境变量上就要有多个区域，Mac用 ‘:’ 来区隔。（依赖包默认下载到第一个工作区域）</p>\n<p>在命令行下：</p>\n<ol>\n<li>打开配置（<code>vim .bash_profile</code>） 开始搭Go环境。</li>\n<li><code>export GOPATH=&quot;/Users/你的用户名/依赖包目录:/Users/你的用户名/工作区目录&quot;</code><br>依赖包默认下载到GOPATH的第一个目录下，所以依赖包目录要放在第一个，然后用’:’分隔<br><code>export PATH=$PATH:${GOPATH//://bin:}/bin</code><br>如果设置GOBIN，GOBIN只能设置一个路径，但是你可以将每个GOPATH下的bin添加到PATH中<br><code>export PATH=$PATH:$GOPATH</code><br>路径加入到PATH</li>\n<li>保存退出，然后重启配置（source .bash_profile)</li>\n<li>输入 go env 看看Go的环境变量</li>\n</ol>\n<p><em>PS: 关于GOBIN：go install编译存放路径。不允许设置多个路径。可以为空。为空时则遵循“约定优于配置”原则，可执行文件放在各自GOPATH目录的bin文件夹中（前提是：package main的main函数文件不能直接放到GOPATH的src下面。)</em></p>\n<p><br></p>\n<h1 id=\"VSCode的配置\"><a href=\"#VSCode的配置\" class=\"headerlink\" title=\"VSCode的配置\"></a>VSCode的配置</h1><p>下载VSCode，然后在左侧小图标的最下面那个扩展选项中，搜索Go，进行下载(一般会搜索到两个go 和 Go，我下载的是第二个Go)。<br>接下来，要下载一系列的依赖包。</p>\n<h2 id=\"打开命令行，分别输入以下命令进行下载：\"><a href=\"#打开命令行，分别输入以下命令进行下载：\" class=\"headerlink\" title=\"打开命令行，分别输入以下命令进行下载：\"></a>打开命令行，分别输入以下命令进行下载：</h2><pre><code>go get -u -v github.com/nsf/gocode\ngo get -u -v github.com/rogpeppe/godef\ngo get -u -v github.com/golang/lint/golint\ngo get -u -v github.com/lukehoban/go-outline\ngo get -u -v sourcegraph.com/sqs/goreturns\ngo get -u -v golang.org/x/tools/cmd/gorename\ngo get -u -v github.com/tpng/gopkgs\ngo get -u -v golang.org/x/tools/cmd/guru\n</code></pre><p>这一步，需要  科学上网工具  的支持，而且有时候，你有科学上网工具的支持都不顶用。<br>本质上讲，以gocode为例，它将gocode相关文件下载到src，然后将它编译生成可执行文件，将可执行文件放到bin目录下。<br>所以，可以直接去github上下载下来，然后自己编译一下，将生成的可执行文件放到bin目录下。</p>\n<h2 id=\"配置VSCode相关\"><a href=\"#配置VSCode相关\" class=\"headerlink\" title=\"配置VSCode相关\"></a>配置VSCode相关</h2><p>主要是 settings.json 与 launch.json</p>\n<p>如果你配置了 GOPATH、GOROOT ，就不需要配置相应的setting.json。<br>（进入方法是 code -&gt; 首选项 -&gt; 用户设置）</p>\n<p>打开VSCode，选择你的工作区域文件夹，然后在编辑配置文件。（不选文件夹不能配置）<br>进入方法是 code -&gt; 首选项 -&gt; 工作区设置</p>\n<p>主要修改program字段: <code>program: &quot;${workspaceRoot}&quot;</code><br>如果你的文件，比如test.go 放在src下就： <code>program: &quot;${workspaceRoot}/src&quot;</code></p>\n<p><br></p>\n<h1 id=\"让Mac-支持-VSCode调试功能\"><a href=\"#让Mac-支持-VSCode调试功能\" class=\"headerlink\" title=\"让Mac 支持 VSCode调试功能\"></a>让Mac 支持 VSCode调试功能</h1><p>英语原文：  <a href=\"https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md\" target=\"_blank\" rel=\"noopener\">&gt;这里&lt;</a></p>\n<p>简单翻译一下步骤：</p>\n<ol>\n<li>创建一个自签名证书<br> 找到钥匙串访问，（ 证书助理 -&gt; 创建证书（身份类型：自签名证书，证书类型：代码签名，勾选 覆盖这些默认值） -&gt; 继续到最后，指定用于该证书的位置: 系统 ）</li>\n<li>设定信任属性<br> 重启系统后，找到自己创建的证书，在 （ 显示简介 -&gt; 信任 -&gt; 代码签名 ） 选择 （ 始终信任 ）</li>\n<li>重新编译dlv文件<br> 打开命令行，进入依赖包所处的工作区: <code>src/github.com/derekparker/delve</code><br> 如果你的Go版本是1.5，则运行： <code>GO15VENDOREXPERIMENT=1 CERT=你创建的证书名称 make install</code><br> 其他版本就直接：<code>CERT=你创建的证书名称 make install</code></li>\n</ol>\n<p><br></p>\n<h1 id=\"总结小记。\"><a href=\"#总结小记。\" class=\"headerlink\" title=\"总结小记。\"></a>总结小记。</h1><p>终于折腾完了。<br>花了好久时间，看了N多教程，但还是走了不少弯路。<br>在 GOPATH、GOROOT理解上，在GOBIN路径唯一上，在创建签名证书处等等。<br>所以，整理了一下这篇文章，希望对他人有所帮助。</p>"},{"title":"TreeHouse装修指南之工具","date":"2018-07-17T14:43:00.000Z","_content":"\n本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。\n（通俗点说，就是hexo的相关搭建及应用的各效果的实现）\n\n工具相关\n\n<!-- more -->\n\n<br/>\n\n# 添加阅读统计功能\n用LeanCloud加入阅读统计功能\n\n1. 注册账号\n[LeanCloud官网](https://leancloud.cn/ \"点击前往注册\")\n2. 创建应用\n点击应用，创建应用，输入应用名称（可修改），不勾选schema\n3. 创建统计类\n点击创建Class，保存博客的相关访问数据，Class名称为Counter（必须），设置不限制数据条目的ACL权限\n4. 获取App ID与App Key\n点击最左侧的设置，下属的应用Key，可以看到App ID及App Key\n5. 配置App ID与App Key\n打开Next主题的_config.yml文件，找到leancloud_visitors，配置相关字段，不要忘了enable要为true哟。\n6. 对Web安全的设置\n点击最左侧的设置，下属的安全中心，在Web安全域名处，设置可以更新数据的自己博客域名。\n\n然后就可以在应用中的Counter类里看到相关阅读数据了，并且文章下面也有访问数量记录了。\n\n<br/>\n\n# 动态背景\n我的next版本是5.1.4, 已经集成了这个功能，只需要打开开关即可（在next配置文件）\n\n```\n  # Canvas-nest\n  canvas_nest: false  改成true\n```\n\n如果要修改相关配置（线条颜色，粗细，数量等等），可以在下面文件修改。\n\n```\n\\themes\\next\\source\\lib\\canvas-nest\\canvas-nest.min.js\n```\n\n背景的几何线条是采用的nest效果 \n一个基于html5 canvas绘制的网页背景效果\n来自github的开源项目 https://github.com/hustcc/canvas-nest.js\n\n<br/>\n\n# 设置网站的图标\n在next主题的图片文件夹下，将相应图片替换即可。\n```\n\\themes\\next\\source\\images\n```\n相关图片配置如下：（注意格式和大小）\n```\n[下面代码 位于next的配置文件内]\nfavicon:\n  small: /images/favicon-16x16-next.png\n  medium: /images/favicon-32x32-next.png\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n```\n<br/>\n\n# 实现统计功能\n增加字数统计及阅读时长\n\n修改next主题配置文件：\n```    \n\\themes\\next\\_config.yml \n```\n修改下面的配置\n```\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true     /*  字数统计      */\n  min2read: true    /*  阅读时长统计    */\n  totalcount: false   /*  总字数统计   */\n  separated_meta: true\n```\n如果没有，就自己安装，在根目录下输入：\n```    \nnpm install hexo-wordcount --save\n```\n然后再将上面配置添加到主题文件内。\n\n到这里，显示的字数统计和阅读时间没有单位，需要修改文件：\n```    \n\\themes\\next\\layout\\_macro\\post.swing\n```\n修改：\n```\n<span title=\"{{ __('post.wordcount') }}\"> {{ wordcount(post.content) }} 字 </span>\n<span title=\"{{ __('post.min2read') }}\"> {{ min2read(post.content) }} 分钟 </span>\n```","source":"_posts/TreeHouse装修指南之工具.md","raw":"---\ntitle: TreeHouse装修指南之工具\ndate: 2018-07-17 22:43:00\ntags: [hexo搭建, 想就做]\n\n---\n\n本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。\n（通俗点说，就是hexo的相关搭建及应用的各效果的实现）\n\n工具相关\n\n<!-- more -->\n\n<br/>\n\n# 添加阅读统计功能\n用LeanCloud加入阅读统计功能\n\n1. 注册账号\n[LeanCloud官网](https://leancloud.cn/ \"点击前往注册\")\n2. 创建应用\n点击应用，创建应用，输入应用名称（可修改），不勾选schema\n3. 创建统计类\n点击创建Class，保存博客的相关访问数据，Class名称为Counter（必须），设置不限制数据条目的ACL权限\n4. 获取App ID与App Key\n点击最左侧的设置，下属的应用Key，可以看到App ID及App Key\n5. 配置App ID与App Key\n打开Next主题的_config.yml文件，找到leancloud_visitors，配置相关字段，不要忘了enable要为true哟。\n6. 对Web安全的设置\n点击最左侧的设置，下属的安全中心，在Web安全域名处，设置可以更新数据的自己博客域名。\n\n然后就可以在应用中的Counter类里看到相关阅读数据了，并且文章下面也有访问数量记录了。\n\n<br/>\n\n# 动态背景\n我的next版本是5.1.4, 已经集成了这个功能，只需要打开开关即可（在next配置文件）\n\n```\n  # Canvas-nest\n  canvas_nest: false  改成true\n```\n\n如果要修改相关配置（线条颜色，粗细，数量等等），可以在下面文件修改。\n\n```\n\\themes\\next\\source\\lib\\canvas-nest\\canvas-nest.min.js\n```\n\n背景的几何线条是采用的nest效果 \n一个基于html5 canvas绘制的网页背景效果\n来自github的开源项目 https://github.com/hustcc/canvas-nest.js\n\n<br/>\n\n# 设置网站的图标\n在next主题的图片文件夹下，将相应图片替换即可。\n```\n\\themes\\next\\source\\images\n```\n相关图片配置如下：（注意格式和大小）\n```\n[下面代码 位于next的配置文件内]\nfavicon:\n  small: /images/favicon-16x16-next.png\n  medium: /images/favicon-32x32-next.png\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n```\n<br/>\n\n# 实现统计功能\n增加字数统计及阅读时长\n\n修改next主题配置文件：\n```    \n\\themes\\next\\_config.yml \n```\n修改下面的配置\n```\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true     /*  字数统计      */\n  min2read: true    /*  阅读时长统计    */\n  totalcount: false   /*  总字数统计   */\n  separated_meta: true\n```\n如果没有，就自己安装，在根目录下输入：\n```    \nnpm install hexo-wordcount --save\n```\n然后再将上面配置添加到主题文件内。\n\n到这里，显示的字数统计和阅读时间没有单位，需要修改文件：\n```    \n\\themes\\next\\layout\\_macro\\post.swing\n```\n修改：\n```\n<span title=\"{{ __('post.wordcount') }}\"> {{ wordcount(post.content) }} 字 </span>\n<span title=\"{{ __('post.min2read') }}\"> {{ min2read(post.content) }} 分钟 </span>\n```","slug":"TreeHouse装修指南之工具","published":1,"updated":"2018-08-12T15:40:00.109Z","_id":"cjkr0dbc4000hesvqhm7la72m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。<br>（通俗点说，就是hexo的相关搭建及应用的各效果的实现）</p>\n<p>工具相关</p>\n<a id=\"more\"></a>\n<p><br></p>\n<h1 id=\"添加阅读统计功能\"><a href=\"#添加阅读统计功能\" class=\"headerlink\" title=\"添加阅读统计功能\"></a>添加阅读统计功能</h1><p>用LeanCloud加入阅读统计功能</p>\n<ol>\n<li>注册账号<br><a href=\"https://leancloud.cn/\" title=\"点击前往注册\" target=\"_blank\" rel=\"noopener\">LeanCloud官网</a></li>\n<li>创建应用<br>点击应用，创建应用，输入应用名称（可修改），不勾选schema</li>\n<li>创建统计类<br>点击创建Class，保存博客的相关访问数据，Class名称为Counter（必须），设置不限制数据条目的ACL权限</li>\n<li>获取App ID与App Key<br>点击最左侧的设置，下属的应用Key，可以看到App ID及App Key</li>\n<li>配置App ID与App Key<br>打开Next主题的_config.yml文件，找到leancloud_visitors，配置相关字段，不要忘了enable要为true哟。</li>\n<li>对Web安全的设置<br>点击最左侧的设置，下属的安全中心，在Web安全域名处，设置可以更新数据的自己博客域名。</li>\n</ol>\n<p>然后就可以在应用中的Counter类里看到相关阅读数据了，并且文章下面也有访问数量记录了。</p>\n<p><br></p>\n<h1 id=\"动态背景\"><a href=\"#动态背景\" class=\"headerlink\" title=\"动态背景\"></a>动态背景</h1><p>我的next版本是5.1.4, 已经集成了这个功能，只需要打开开关即可（在next配置文件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Canvas-nest</span><br><span class=\"line\">canvas_nest: false  改成true</span><br></pre></td></tr></table></figure>\n<p>如果要修改相关配置（线条颜色，粗细，数量等等），可以在下面文件修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\source\\lib\\canvas-nest\\canvas-nest.min.js</span><br></pre></td></tr></table></figure>\n<p>背景的几何线条是采用的nest效果<br>一个基于html5 canvas绘制的网页背景效果<br>来自github的开源项目 <a href=\"https://github.com/hustcc/canvas-nest.js\" target=\"_blank\" rel=\"noopener\">https://github.com/hustcc/canvas-nest.js</a></p>\n<p><br></p>\n<h1 id=\"设置网站的图标\"><a href=\"#设置网站的图标\" class=\"headerlink\" title=\"设置网站的图标\"></a>设置网站的图标</h1><p>在next主题的图片文件夹下，将相应图片替换即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\source\\images</span><br></pre></td></tr></table></figure></p>\n<p>相关图片配置如下：（注意格式和大小）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[下面代码 位于next的配置文件内]</span><br><span class=\"line\">favicon:</span><br><span class=\"line\">  small: /images/favicon-16x16-next.png</span><br><span class=\"line\">  medium: /images/favicon-32x32-next.png</span><br><span class=\"line\">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class=\"line\">  safari_pinned_tab: /images/logo.svg</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h1 id=\"实现统计功能\"><a href=\"#实现统计功能\" class=\"headerlink\" title=\"实现统计功能\"></a>实现统计功能</h1><p>增加字数统计及阅读时长</p>\n<p>修改next主题配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\_config.yml</span><br></pre></td></tr></table></figure></p>\n<p>修改下面的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Post wordcount display settings</span><br><span class=\"line\"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class=\"line\">post_wordcount:</span><br><span class=\"line\">  item_text: true</span><br><span class=\"line\">  wordcount: true     /*  字数统计      */</span><br><span class=\"line\">  min2read: true    /*  阅读时长统计    */</span><br><span class=\"line\">  totalcount: false   /*  总字数统计   */</span><br><span class=\"line\">  separated_meta: true</span><br></pre></td></tr></table></figure></p>\n<p>如果没有，就自己安装，在根目录下输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></p>\n<p>然后再将上面配置添加到主题文件内。</p>\n<p>到这里，显示的字数统计和阅读时间没有单位，需要修改文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\layout\\_macro\\post.swing</span><br></pre></td></tr></table></figure></p>\n<p>修改：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span title=&quot;&#123;&#123; __(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt; &#123;&#123; wordcount(post.content) &#125;&#125; 字 &lt;/span&gt;</span><br><span class=\"line\">&lt;span title=&quot;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125;&quot;&gt; &#123;&#123; min2read(post.content) &#125;&#125; 分钟 &lt;/span&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。<br>（通俗点说，就是hexo的相关搭建及应用的各效果的实现）</p>\n<p>工具相关</p>","more":"<p><br></p>\n<h1 id=\"添加阅读统计功能\"><a href=\"#添加阅读统计功能\" class=\"headerlink\" title=\"添加阅读统计功能\"></a>添加阅读统计功能</h1><p>用LeanCloud加入阅读统计功能</p>\n<ol>\n<li>注册账号<br><a href=\"https://leancloud.cn/\" title=\"点击前往注册\" target=\"_blank\" rel=\"noopener\">LeanCloud官网</a></li>\n<li>创建应用<br>点击应用，创建应用，输入应用名称（可修改），不勾选schema</li>\n<li>创建统计类<br>点击创建Class，保存博客的相关访问数据，Class名称为Counter（必须），设置不限制数据条目的ACL权限</li>\n<li>获取App ID与App Key<br>点击最左侧的设置，下属的应用Key，可以看到App ID及App Key</li>\n<li>配置App ID与App Key<br>打开Next主题的_config.yml文件，找到leancloud_visitors，配置相关字段，不要忘了enable要为true哟。</li>\n<li>对Web安全的设置<br>点击最左侧的设置，下属的安全中心，在Web安全域名处，设置可以更新数据的自己博客域名。</li>\n</ol>\n<p>然后就可以在应用中的Counter类里看到相关阅读数据了，并且文章下面也有访问数量记录了。</p>\n<p><br></p>\n<h1 id=\"动态背景\"><a href=\"#动态背景\" class=\"headerlink\" title=\"动态背景\"></a>动态背景</h1><p>我的next版本是5.1.4, 已经集成了这个功能，只需要打开开关即可（在next配置文件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Canvas-nest</span><br><span class=\"line\">canvas_nest: false  改成true</span><br></pre></td></tr></table></figure>\n<p>如果要修改相关配置（线条颜色，粗细，数量等等），可以在下面文件修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\source\\lib\\canvas-nest\\canvas-nest.min.js</span><br></pre></td></tr></table></figure>\n<p>背景的几何线条是采用的nest效果<br>一个基于html5 canvas绘制的网页背景效果<br>来自github的开源项目 <a href=\"https://github.com/hustcc/canvas-nest.js\" target=\"_blank\" rel=\"noopener\">https://github.com/hustcc/canvas-nest.js</a></p>\n<p><br></p>\n<h1 id=\"设置网站的图标\"><a href=\"#设置网站的图标\" class=\"headerlink\" title=\"设置网站的图标\"></a>设置网站的图标</h1><p>在next主题的图片文件夹下，将相应图片替换即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\source\\images</span><br></pre></td></tr></table></figure></p>\n<p>相关图片配置如下：（注意格式和大小）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[下面代码 位于next的配置文件内]</span><br><span class=\"line\">favicon:</span><br><span class=\"line\">  small: /images/favicon-16x16-next.png</span><br><span class=\"line\">  medium: /images/favicon-32x32-next.png</span><br><span class=\"line\">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class=\"line\">  safari_pinned_tab: /images/logo.svg</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h1 id=\"实现统计功能\"><a href=\"#实现统计功能\" class=\"headerlink\" title=\"实现统计功能\"></a>实现统计功能</h1><p>增加字数统计及阅读时长</p>\n<p>修改next主题配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\_config.yml</span><br></pre></td></tr></table></figure></p>\n<p>修改下面的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Post wordcount display settings</span><br><span class=\"line\"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class=\"line\">post_wordcount:</span><br><span class=\"line\">  item_text: true</span><br><span class=\"line\">  wordcount: true     /*  字数统计      */</span><br><span class=\"line\">  min2read: true    /*  阅读时长统计    */</span><br><span class=\"line\">  totalcount: false   /*  总字数统计   */</span><br><span class=\"line\">  separated_meta: true</span><br></pre></td></tr></table></figure></p>\n<p>如果没有，就自己安装，在根目录下输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></p>\n<p>然后再将上面配置添加到主题文件内。</p>\n<p>到这里，显示的字数统计和阅读时间没有单位，需要修改文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\layout\\_macro\\post.swing</span><br></pre></td></tr></table></figure></p>\n<p>修改：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span title=&quot;&#123;&#123; __(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt; &#123;&#123; wordcount(post.content) &#125;&#125; 字 &lt;/span&gt;</span><br><span class=\"line\">&lt;span title=&quot;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125;&quot;&gt; &#123;&#123; min2read(post.content) &#125;&#125; 分钟 &lt;/span&gt;</span><br></pre></td></tr></table></figure></p>"},{"title":"TreeHouse装修指南之文章","date":"2018-07-17T14:43:00.000Z","_content":"\n本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。\n（通俗点说，就是hexo的相关搭建及应用的各效果的实现）\n\n文章相关\n\n<!-- more -->\n\n<br/>\n\n# 添加摘要图片, 在正文不显示\n首先加入相关配置设定\n在 \n\n```\n\\themes\\next\\layout\\_macro\\post.swing\n```\n\n中加入配置代码:\n\n```\n{% if post.summary_img  %}\n  <div class=\"out-img-topic\">\n    <img src={{ post.summary_img }} class=\"img-topic\">\n  </div>\n{% endif %}\n```\n\n添加位置是:\n\n```\n{% if is_index %}\n    在这里插入代码\n    {% if post.description and theme.excerpt_description %}\n      {{ post.description }}\n      <!--noindex-->\n      <div class=\"post-button text-center\">\n        <a class=\"btn\" href=\"{{ url_for(post.path) }}\">\n          {{ __('post.read_more') }} &raquo;\n        </a>\n      </div>\n      <!--/noindex-->\n    {% elif post.excerpt  %}\n      {{ post.excerpt }}\n      <!--noindex-->\n      <div class=\"post-button text-center\">\n        <a class=\"btn\" href=\"{{ url_for(post.path) }}{% if theme.scroll_to_more %}#{{ __('post.more') }}{% endif %}\" rel=\"contents\">\n          {{ __('post.read_more') }} &raquo;\n        </a>\n      </div>\n      <!--/noindex-->\n    {% elif theme.auto_excerpt.enable %}\n      {% set content = post.content | striptags %}\n      {{ content.substring(0, theme.auto_excerpt.length) }}\n      {% if content.length > theme.auto_excerpt.length %}...{% endif %}\n      <!--noindex-->\n      <div class=\"post-button text-center\">\n        <a class=\"btn\" href=\"{{ url_for(post.path) }}{% if theme.scroll_to_more %}#{{ __('post.more') }}{% endif %}\" rel=\"contents\">\n          {{ __('post.read_more') }} &raquo;\n        </a>\n      </div>\n      <!--/noindex-->\n    {% else %}\n      {% if post.type === 'picture' %}\n        <a href=\"{{ url_for(post.path) }}\">{{ post.content }}</a>\n      {% else %}\n        {{ post.content }}\n      {% endif %}\n    {% endif %}\n  {% else %}\n    {{ post.content }}\n{% endif  %}\n```\n\n然后在文章那部分加字段及图片位置名称\n\n```\nsummary_img: image_url\n```\n\nimage_url 是public文件夹下的相对路径\n\n<br/>\n\n# 添加摘要图片, 在正文显示\n直接在相应位置加入图片即可\n\n```\n<img src= image_url>\n```\n\n或者\n```\n![](image_url)\n```\nimage_url 可以是public文件夹下的相对路径，也可以是网络地址。\n\n<br/>\n\n# 代码块相关设置\n\n主题配置文件: \n\n```\n\\themes\\next\\_config.yml \n```\n\n代码块高亮，共五种模式，效果展示可以看注释里面的网址\n\n```\n# Code Highlight theme\n# Available value:\n#    normal | night | night eighties | night blue | night bright\n# https://github.com/chriskempson/tomorrow-theme\nhighlight_theme: night\n```\n要让代码各种颜色，就需要注意格式\n\n\n\\`\\`\\`语言\n  代码\n\\`\\`\\`\n\n\n具体语言用哪个可以看这个列表: https://prismjs.com/#languages-list\n例如 Objective-C 要用 objectivec\n\n<br/>\n\n# 文章tag显示修改\n在文章底部的tag，显示样子，默认是 #tag 改成 图片tag\n\n修改主题模板文件：\n\n```\n\\themes\\next\\layout\\_macro\\post.swig\n将 <a href=\"{{ url_for(tag.path) }}\" rel=\"tag\">#\n替换成 <a href=\"{{ url_for(tag.path) }}\" rel=\"tag\"><i class=\"fa fa-tag\"></i>\n```\n\n<br/>\n\n# 超链接样式\n将文章内的超链接样式修改一下，默认显示一个颜色，鼠标移动到链接上显示另一种颜色。\n\n修改主题模板文件：\n\n```\nthemes\\next\\source\\css\\_common\\components\\post\\post.styl\n添加相应修改：\n\n// 文章内链接文本样式\n.post-body p a{               /*  修改文本内的内容  p是为了不影响首页 阅读全文的样式 */\n  color: #0593d3;             /*  默认显示文本颜色    */\n  border-bottom: 1px solid #0593d3;     /*  底部下划线 1像素 实线 颜色 */\n  &:hover {                 /*  鼠标移动上去后显示的文本颜色  */\n    color: #fc6423;       \n    border-bottom: 1px solid #fc6423;\n  }\n}\n```\n\n<br/>\n\n# 添加文章版权信息\n将主题配置文件的copytright打开，并修改license相关\n\n```\n# Declare license on posts\npost_copyright:\n  enable: true\n  license: CC BY-NC-SA 3.0 CN\n  license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/cn/\n```\n\n修改copytright的链接地址：\n```\nthemes\\next\\layout\\_macro\\post-copyright.swig\n```\n将其中链接部分，修改一下：\n```\n<a href=\"http://www.lt-tree.com/{{ post.path | default(post.permalink) }}\" title=\"{{ post.title }}\">http://www.lt-tree.com/{{ post.path | default(post.permalink) }}</a>\n```","source":"_posts/TreeHouse装修指南之文章.md","raw":"---\ntitle: TreeHouse装修指南之文章\ndate: 2018-07-17 22:43:00\ntags: [hexo搭建, 想就做]\n\n---\n\n本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。\n（通俗点说，就是hexo的相关搭建及应用的各效果的实现）\n\n文章相关\n\n<!-- more -->\n\n<br/>\n\n# 添加摘要图片, 在正文不显示\n首先加入相关配置设定\n在 \n\n```\n\\themes\\next\\layout\\_macro\\post.swing\n```\n\n中加入配置代码:\n\n```\n{% if post.summary_img  %}\n  <div class=\"out-img-topic\">\n    <img src={{ post.summary_img }} class=\"img-topic\">\n  </div>\n{% endif %}\n```\n\n添加位置是:\n\n```\n{% if is_index %}\n    在这里插入代码\n    {% if post.description and theme.excerpt_description %}\n      {{ post.description }}\n      <!--noindex-->\n      <div class=\"post-button text-center\">\n        <a class=\"btn\" href=\"{{ url_for(post.path) }}\">\n          {{ __('post.read_more') }} &raquo;\n        </a>\n      </div>\n      <!--/noindex-->\n    {% elif post.excerpt  %}\n      {{ post.excerpt }}\n      <!--noindex-->\n      <div class=\"post-button text-center\">\n        <a class=\"btn\" href=\"{{ url_for(post.path) }}{% if theme.scroll_to_more %}#{{ __('post.more') }}{% endif %}\" rel=\"contents\">\n          {{ __('post.read_more') }} &raquo;\n        </a>\n      </div>\n      <!--/noindex-->\n    {% elif theme.auto_excerpt.enable %}\n      {% set content = post.content | striptags %}\n      {{ content.substring(0, theme.auto_excerpt.length) }}\n      {% if content.length > theme.auto_excerpt.length %}...{% endif %}\n      <!--noindex-->\n      <div class=\"post-button text-center\">\n        <a class=\"btn\" href=\"{{ url_for(post.path) }}{% if theme.scroll_to_more %}#{{ __('post.more') }}{% endif %}\" rel=\"contents\">\n          {{ __('post.read_more') }} &raquo;\n        </a>\n      </div>\n      <!--/noindex-->\n    {% else %}\n      {% if post.type === 'picture' %}\n        <a href=\"{{ url_for(post.path) }}\">{{ post.content }}</a>\n      {% else %}\n        {{ post.content }}\n      {% endif %}\n    {% endif %}\n  {% else %}\n    {{ post.content }}\n{% endif  %}\n```\n\n然后在文章那部分加字段及图片位置名称\n\n```\nsummary_img: image_url\n```\n\nimage_url 是public文件夹下的相对路径\n\n<br/>\n\n# 添加摘要图片, 在正文显示\n直接在相应位置加入图片即可\n\n```\n<img src= image_url>\n```\n\n或者\n```\n![](image_url)\n```\nimage_url 可以是public文件夹下的相对路径，也可以是网络地址。\n\n<br/>\n\n# 代码块相关设置\n\n主题配置文件: \n\n```\n\\themes\\next\\_config.yml \n```\n\n代码块高亮，共五种模式，效果展示可以看注释里面的网址\n\n```\n# Code Highlight theme\n# Available value:\n#    normal | night | night eighties | night blue | night bright\n# https://github.com/chriskempson/tomorrow-theme\nhighlight_theme: night\n```\n要让代码各种颜色，就需要注意格式\n\n\n\\`\\`\\`语言\n  代码\n\\`\\`\\`\n\n\n具体语言用哪个可以看这个列表: https://prismjs.com/#languages-list\n例如 Objective-C 要用 objectivec\n\n<br/>\n\n# 文章tag显示修改\n在文章底部的tag，显示样子，默认是 #tag 改成 图片tag\n\n修改主题模板文件：\n\n```\n\\themes\\next\\layout\\_macro\\post.swig\n将 <a href=\"{{ url_for(tag.path) }}\" rel=\"tag\">#\n替换成 <a href=\"{{ url_for(tag.path) }}\" rel=\"tag\"><i class=\"fa fa-tag\"></i>\n```\n\n<br/>\n\n# 超链接样式\n将文章内的超链接样式修改一下，默认显示一个颜色，鼠标移动到链接上显示另一种颜色。\n\n修改主题模板文件：\n\n```\nthemes\\next\\source\\css\\_common\\components\\post\\post.styl\n添加相应修改：\n\n// 文章内链接文本样式\n.post-body p a{               /*  修改文本内的内容  p是为了不影响首页 阅读全文的样式 */\n  color: #0593d3;             /*  默认显示文本颜色    */\n  border-bottom: 1px solid #0593d3;     /*  底部下划线 1像素 实线 颜色 */\n  &:hover {                 /*  鼠标移动上去后显示的文本颜色  */\n    color: #fc6423;       \n    border-bottom: 1px solid #fc6423;\n  }\n}\n```\n\n<br/>\n\n# 添加文章版权信息\n将主题配置文件的copytright打开，并修改license相关\n\n```\n# Declare license on posts\npost_copyright:\n  enable: true\n  license: CC BY-NC-SA 3.0 CN\n  license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/cn/\n```\n\n修改copytright的链接地址：\n```\nthemes\\next\\layout\\_macro\\post-copyright.swig\n```\n将其中链接部分，修改一下：\n```\n<a href=\"http://www.lt-tree.com/{{ post.path | default(post.permalink) }}\" title=\"{{ post.title }}\">http://www.lt-tree.com/{{ post.path | default(post.permalink) }}</a>\n```","slug":"TreeHouse装修指南之文章","published":1,"updated":"2018-08-12T15:42:47.474Z","_id":"cjkr0dbc5000kesvqz6oy0buq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。<br>（通俗点说，就是hexo的相关搭建及应用的各效果的实现）</p>\n<p>文章相关</p>\n<a id=\"more\"></a>\n<p><br></p>\n<h1 id=\"添加摘要图片-在正文不显示\"><a href=\"#添加摘要图片-在正文不显示\" class=\"headerlink\" title=\"添加摘要图片, 在正文不显示\"></a>添加摘要图片, 在正文不显示</h1><p>首先加入相关配置设定<br>在 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\layout\\_macro\\post.swing</span><br></pre></td></tr></table></figure>\n<p>中加入配置代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if post.summary_img  %&#125;</span><br><span class=\"line\">  &lt;div class=&quot;out-img-topic&quot;&gt;</span><br><span class=\"line\">    &lt;img src=&#123;&#123; post.summary_img &#125;&#125; class=&quot;img-topic&quot;&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>添加位置是:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if is_index %&#125;</span><br><span class=\"line\">    在这里插入代码</span><br><span class=\"line\">    &#123;% if post.description and theme.excerpt_description %&#125;</span><br><span class=\"line\">      &#123;&#123; post.description &#125;&#125;</span><br><span class=\"line\">      &lt;!--noindex--&gt;</span><br><span class=\"line\">      &lt;div class=&quot;post-button text-center&quot;&gt;</span><br><span class=\"line\">        &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;</span><br><span class=\"line\">          &#123;&#123; __(&apos;post.read_more&apos;) &#125;&#125; &amp;raquo;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;!--/noindex--&gt;</span><br><span class=\"line\">    &#123;% elif post.excerpt  %&#125;</span><br><span class=\"line\">      &#123;&#123; post.excerpt &#125;&#125;</span><br><span class=\"line\">      &lt;!--noindex--&gt;</span><br><span class=\"line\">      &lt;div class=&quot;post-button text-center&quot;&gt;</span><br><span class=\"line\">        &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&#123;% if theme.scroll_to_more %&#125;#&#123;&#123; __(&apos;post.more&apos;) &#125;&#125;&#123;% endif %&#125;&quot; rel=&quot;contents&quot;&gt;</span><br><span class=\"line\">          &#123;&#123; __(&apos;post.read_more&apos;) &#125;&#125; &amp;raquo;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;!--/noindex--&gt;</span><br><span class=\"line\">    &#123;% elif theme.auto_excerpt.enable %&#125;</span><br><span class=\"line\">      &#123;% set content = post.content | striptags %&#125;</span><br><span class=\"line\">      &#123;&#123; content.substring(0, theme.auto_excerpt.length) &#125;&#125;</span><br><span class=\"line\">      &#123;% if content.length &gt; theme.auto_excerpt.length %&#125;...&#123;% endif %&#125;</span><br><span class=\"line\">      &lt;!--noindex--&gt;</span><br><span class=\"line\">      &lt;div class=&quot;post-button text-center&quot;&gt;</span><br><span class=\"line\">        &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&#123;% if theme.scroll_to_more %&#125;#&#123;&#123; __(&apos;post.more&apos;) &#125;&#125;&#123;% endif %&#125;&quot; rel=&quot;contents&quot;&gt;</span><br><span class=\"line\">          &#123;&#123; __(&apos;post.read_more&apos;) &#125;&#125; &amp;raquo;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;!--/noindex--&gt;</span><br><span class=\"line\">    &#123;% else %&#125;</span><br><span class=\"line\">      &#123;% if post.type === &apos;picture&apos; %&#125;</span><br><span class=\"line\">        &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;&#123;&#123; post.content &#125;&#125;&lt;/a&gt;</span><br><span class=\"line\">      &#123;% else %&#125;</span><br><span class=\"line\">        &#123;&#123; post.content &#125;&#125;</span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">  &#123;% else %&#125;</span><br><span class=\"line\">    &#123;&#123; post.content &#125;&#125;</span><br><span class=\"line\">&#123;% endif  %&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在文章那部分加字段及图片位置名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">summary_img: image_url</span><br></pre></td></tr></table></figure>\n<p>image_url 是public文件夹下的相对路径</p>\n<p><br></p>\n<h1 id=\"添加摘要图片-在正文显示\"><a href=\"#添加摘要图片-在正文显示\" class=\"headerlink\" title=\"添加摘要图片, 在正文显示\"></a>添加摘要图片, 在正文显示</h1><p>直接在相应位置加入图片即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src= image_url&gt;</span><br></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](image_url)</span><br></pre></td></tr></table></figure></p>\n<p>image_url 可以是public文件夹下的相对路径，也可以是网络地址。</p>\n<p><br></p>\n<h1 id=\"代码块相关设置\"><a href=\"#代码块相关设置\" class=\"headerlink\" title=\"代码块相关设置\"></a>代码块相关设置</h1><p>主题配置文件: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\_config.yml</span><br></pre></td></tr></table></figure>\n<p>代码块高亮，共五种模式，效果展示可以看注释里面的网址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Code Highlight theme</span><br><span class=\"line\"># Available value:</span><br><span class=\"line\">#    normal | night | night eighties | night blue | night bright</span><br><span class=\"line\"># https://github.com/chriskempson/tomorrow-theme</span><br><span class=\"line\">highlight_theme: night</span><br></pre></td></tr></table></figure>\n<p>要让代码各种颜色，就需要注意格式</p>\n<p>```语言<br>  代码<br>```</p>\n<p>具体语言用哪个可以看这个列表: <a href=\"https://prismjs.com/#languages-list\" target=\"_blank\" rel=\"noopener\">https://prismjs.com/#languages-list</a><br>例如 Objective-C 要用 objectivec</p>\n<p><br></p>\n<h1 id=\"文章tag显示修改\"><a href=\"#文章tag显示修改\" class=\"headerlink\" title=\"文章tag显示修改\"></a>文章tag显示修改</h1><p>在文章底部的tag，显示样子，默认是 #tag 改成 图片tag</p>\n<p>修改主题模板文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\layout\\_macro\\post.swig</span><br><span class=\"line\">将 &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;#</span><br><span class=\"line\">替换成 &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"超链接样式\"><a href=\"#超链接样式\" class=\"headerlink\" title=\"超链接样式\"></a>超链接样式</h1><p>将文章内的超链接样式修改一下，默认显示一个颜色，鼠标移动到链接上显示另一种颜色。</p>\n<p>修改主题模板文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">themes\\next\\source\\css\\_common\\components\\post\\post.styl</span><br><span class=\"line\">添加相应修改：</span><br><span class=\"line\"></span><br><span class=\"line\">// 文章内链接文本样式</span><br><span class=\"line\">.post-body p a&#123;               /*  修改文本内的内容  p是为了不影响首页 阅读全文的样式 */</span><br><span class=\"line\">  color: #0593d3;             /*  默认显示文本颜色    */</span><br><span class=\"line\">  border-bottom: 1px solid #0593d3;     /*  底部下划线 1像素 实线 颜色 */</span><br><span class=\"line\">  &amp;:hover &#123;                 /*  鼠标移动上去后显示的文本颜色  */</span><br><span class=\"line\">    color: #fc6423;       </span><br><span class=\"line\">    border-bottom: 1px solid #fc6423;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"添加文章版权信息\"><a href=\"#添加文章版权信息\" class=\"headerlink\" title=\"添加文章版权信息\"></a>添加文章版权信息</h1><p>将主题配置文件的copytright打开，并修改license相关</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Declare license on posts</span><br><span class=\"line\">post_copyright:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  license: CC BY-NC-SA 3.0 CN</span><br><span class=\"line\">  license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/cn/</span><br></pre></td></tr></table></figure>\n<p>修改copytright的链接地址：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">themes\\next\\layout\\_macro\\post-copyright.swig</span><br></pre></td></tr></table></figure></p>\n<p>将其中链接部分，修改一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;http://www.lt-tree.com/&#123;&#123; post.path | default(post.permalink) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot;&gt;http://www.lt-tree.com/&#123;&#123; post.path | default(post.permalink) &#125;&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。<br>（通俗点说，就是hexo的相关搭建及应用的各效果的实现）</p>\n<p>文章相关</p>","more":"<p><br></p>\n<h1 id=\"添加摘要图片-在正文不显示\"><a href=\"#添加摘要图片-在正文不显示\" class=\"headerlink\" title=\"添加摘要图片, 在正文不显示\"></a>添加摘要图片, 在正文不显示</h1><p>首先加入相关配置设定<br>在 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\layout\\_macro\\post.swing</span><br></pre></td></tr></table></figure>\n<p>中加入配置代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if post.summary_img  %&#125;</span><br><span class=\"line\">  &lt;div class=&quot;out-img-topic&quot;&gt;</span><br><span class=\"line\">    &lt;img src=&#123;&#123; post.summary_img &#125;&#125; class=&quot;img-topic&quot;&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>添加位置是:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if is_index %&#125;</span><br><span class=\"line\">    在这里插入代码</span><br><span class=\"line\">    &#123;% if post.description and theme.excerpt_description %&#125;</span><br><span class=\"line\">      &#123;&#123; post.description &#125;&#125;</span><br><span class=\"line\">      &lt;!--noindex--&gt;</span><br><span class=\"line\">      &lt;div class=&quot;post-button text-center&quot;&gt;</span><br><span class=\"line\">        &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;</span><br><span class=\"line\">          &#123;&#123; __(&apos;post.read_more&apos;) &#125;&#125; &amp;raquo;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;!--/noindex--&gt;</span><br><span class=\"line\">    &#123;% elif post.excerpt  %&#125;</span><br><span class=\"line\">      &#123;&#123; post.excerpt &#125;&#125;</span><br><span class=\"line\">      &lt;!--noindex--&gt;</span><br><span class=\"line\">      &lt;div class=&quot;post-button text-center&quot;&gt;</span><br><span class=\"line\">        &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&#123;% if theme.scroll_to_more %&#125;#&#123;&#123; __(&apos;post.more&apos;) &#125;&#125;&#123;% endif %&#125;&quot; rel=&quot;contents&quot;&gt;</span><br><span class=\"line\">          &#123;&#123; __(&apos;post.read_more&apos;) &#125;&#125; &amp;raquo;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;!--/noindex--&gt;</span><br><span class=\"line\">    &#123;% elif theme.auto_excerpt.enable %&#125;</span><br><span class=\"line\">      &#123;% set content = post.content | striptags %&#125;</span><br><span class=\"line\">      &#123;&#123; content.substring(0, theme.auto_excerpt.length) &#125;&#125;</span><br><span class=\"line\">      &#123;% if content.length &gt; theme.auto_excerpt.length %&#125;...&#123;% endif %&#125;</span><br><span class=\"line\">      &lt;!--noindex--&gt;</span><br><span class=\"line\">      &lt;div class=&quot;post-button text-center&quot;&gt;</span><br><span class=\"line\">        &lt;a class=&quot;btn&quot; href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&#123;% if theme.scroll_to_more %&#125;#&#123;&#123; __(&apos;post.more&apos;) &#125;&#125;&#123;% endif %&#125;&quot; rel=&quot;contents&quot;&gt;</span><br><span class=\"line\">          &#123;&#123; __(&apos;post.read_more&apos;) &#125;&#125; &amp;raquo;</span><br><span class=\"line\">        &lt;/a&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;!--/noindex--&gt;</span><br><span class=\"line\">    &#123;% else %&#125;</span><br><span class=\"line\">      &#123;% if post.type === &apos;picture&apos; %&#125;</span><br><span class=\"line\">        &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;&#123;&#123; post.content &#125;&#125;&lt;/a&gt;</span><br><span class=\"line\">      &#123;% else %&#125;</span><br><span class=\"line\">        &#123;&#123; post.content &#125;&#125;</span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">  &#123;% else %&#125;</span><br><span class=\"line\">    &#123;&#123; post.content &#125;&#125;</span><br><span class=\"line\">&#123;% endif  %&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在文章那部分加字段及图片位置名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">summary_img: image_url</span><br></pre></td></tr></table></figure>\n<p>image_url 是public文件夹下的相对路径</p>\n<p><br></p>\n<h1 id=\"添加摘要图片-在正文显示\"><a href=\"#添加摘要图片-在正文显示\" class=\"headerlink\" title=\"添加摘要图片, 在正文显示\"></a>添加摘要图片, 在正文显示</h1><p>直接在相应位置加入图片即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src= image_url&gt;</span><br></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![](image_url)</span><br></pre></td></tr></table></figure></p>\n<p>image_url 可以是public文件夹下的相对路径，也可以是网络地址。</p>\n<p><br></p>\n<h1 id=\"代码块相关设置\"><a href=\"#代码块相关设置\" class=\"headerlink\" title=\"代码块相关设置\"></a>代码块相关设置</h1><p>主题配置文件: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\_config.yml</span><br></pre></td></tr></table></figure>\n<p>代码块高亮，共五种模式，效果展示可以看注释里面的网址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Code Highlight theme</span><br><span class=\"line\"># Available value:</span><br><span class=\"line\">#    normal | night | night eighties | night blue | night bright</span><br><span class=\"line\"># https://github.com/chriskempson/tomorrow-theme</span><br><span class=\"line\">highlight_theme: night</span><br></pre></td></tr></table></figure>\n<p>要让代码各种颜色，就需要注意格式</p>\n<p>```语言<br>  代码<br>```</p>\n<p>具体语言用哪个可以看这个列表: <a href=\"https://prismjs.com/#languages-list\" target=\"_blank\" rel=\"noopener\">https://prismjs.com/#languages-list</a><br>例如 Objective-C 要用 objectivec</p>\n<p><br></p>\n<h1 id=\"文章tag显示修改\"><a href=\"#文章tag显示修改\" class=\"headerlink\" title=\"文章tag显示修改\"></a>文章tag显示修改</h1><p>在文章底部的tag，显示样子，默认是 #tag 改成 图片tag</p>\n<p>修改主题模板文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\next\\layout\\_macro\\post.swig</span><br><span class=\"line\">将 &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;#</span><br><span class=\"line\">替换成 &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"超链接样式\"><a href=\"#超链接样式\" class=\"headerlink\" title=\"超链接样式\"></a>超链接样式</h1><p>将文章内的超链接样式修改一下，默认显示一个颜色，鼠标移动到链接上显示另一种颜色。</p>\n<p>修改主题模板文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">themes\\next\\source\\css\\_common\\components\\post\\post.styl</span><br><span class=\"line\">添加相应修改：</span><br><span class=\"line\"></span><br><span class=\"line\">// 文章内链接文本样式</span><br><span class=\"line\">.post-body p a&#123;               /*  修改文本内的内容  p是为了不影响首页 阅读全文的样式 */</span><br><span class=\"line\">  color: #0593d3;             /*  默认显示文本颜色    */</span><br><span class=\"line\">  border-bottom: 1px solid #0593d3;     /*  底部下划线 1像素 实线 颜色 */</span><br><span class=\"line\">  &amp;:hover &#123;                 /*  鼠标移动上去后显示的文本颜色  */</span><br><span class=\"line\">    color: #fc6423;       </span><br><span class=\"line\">    border-bottom: 1px solid #fc6423;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"添加文章版权信息\"><a href=\"#添加文章版权信息\" class=\"headerlink\" title=\"添加文章版权信息\"></a>添加文章版权信息</h1><p>将主题配置文件的copytright打开，并修改license相关</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Declare license on posts</span><br><span class=\"line\">post_copyright:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  license: CC BY-NC-SA 3.0 CN</span><br><span class=\"line\">  license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/cn/</span><br></pre></td></tr></table></figure>\n<p>修改copytright的链接地址：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">themes\\next\\layout\\_macro\\post-copyright.swig</span><br></pre></td></tr></table></figure></p>\n<p>将其中链接部分，修改一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;http://www.lt-tree.com/&#123;&#123; post.path | default(post.permalink) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot;&gt;http://www.lt-tree.com/&#123;&#123; post.path | default(post.permalink) &#125;&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>"},{"title":"TreeHouse装修指南之菜单","date":"2018-07-17T14:43:00.000Z","_content":"\n本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。\n（通俗点说，就是hexo的相关搭建及应用的各效果的实现）\n\n菜单相关\n\n<!-- more -->\n\n<br/>\n\n# 公益404\n腾讯公益404页面，寻找丢失儿童，做一些力所能及的事情。\n需要新建 404.html 页面，放到主题的 source 目录下：\n\n```\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n```\n<br/>\n\n# 友链\n修改文件： \\themes\\next\\\\\\_config.yml\n\n```\n# Blog rolls\nlinks_icon: link \t\t\t\t\ticon名字\nlinks_title: Links \t\t\t\t\t标题名字\nlinks_layout: block \t\t\t\t排版：竖排，一个链接一行\n# links_layout: inline  \t\t\t排版：横排，n个链接一行\nlinks:\n  #Title: http://example.com/\t\t名称（可以是中文）：网址\n```\n\n<br/>\n\n# 添加个人头像&头像旋转\n## 添加\n修改next主题配置文件 \\_config.yml\n\n```\navatar: image_url\n```\nimage_url 可以是public文件夹下的相对路径，也可以是网络地址。\n\n## 头像旋转\n修改文件： \\themes\\next\\source\\css\\\\\\_common\\components\\sidebar\\sidebar-author.styl\n\n```stylus\n.site-author-image {\n  display: block;\n  margin: 0 auto;\n  padding: $site-author-image-padding;\n  max-width: $site-author-image-width;\n  height: $site-author-image-height;\n  border: $site-author-image-border-width solid $site-author-image-border-color;\n\n  /* 设置圆形头像 */\n  border-radius: 58px;\n  -webkit-border-radius: 58px;\n  -moz-border-radius: 58px;\n  box-shadow: inset 0 -1px 0 #333sf;\n\n  /* 鼠标经过头像旋转360度 */\n  -webkit-transition: -webkit-transform 1.0s ease-out;\n  -moz-transition: -moz-transform 1.0s ease-out;\n  transition: transform 1.0s ease-out;\n}\n\nimg:hover {\n  /* 鼠标经过头像旋转360度 */\n  -webkit-transform: rotateY(360deg);\n  -moz-transform: rotateY(360deg);\n  transform: rotateY(360deg);\n}\n\n/* Z 轴旋转动画 */\n@-webkit-keyframes play {\n  0% {\n    -webkit-transform: rotateY(0deg);\n  }\n  100% {\n    -webkit-transform: rotateY(-360deg);\n  }\n}\n@-moz-keyframes play {\n  0% {\n    -moz-transform: rotateY(0deg);\n  }\n  100% {\n    -moz-transform: rotateY(-360deg);\n  }\n}\n@keyframes play {\n  0% {\n    transform: rotateY(0deg);\n  }\n  100% {\n    transform: rotateY(-360deg);\n  }\n}\n\n.site-author-name {\n  margin: $site-author-name-margin;\n  text-align: $site-author-name-align;\n  color: $site-author-name-color;\n  font-weight: $site-author-name-weight;\n}\n\n.site-description {\n  margin-top: $site-description-margin-top;\n  text-align: $site-description-align;\n  font-size: $site-description-font-size;\n  color: $site-description-color;\n}\n```\n\n<br/>\n\n# 社交小图标相关\n修改文件： \\themes\\next\\\\\\_config.yml\n\n```\nsocial:\n  GitHub: github_address || github\n  CSDN: csdn_address || copyright\n  E-Mail: mailto:email_address || envelope\n  微博: weibo_address || weibo\n\nsocial_icons:\n  enable: true\n\n  GitHub: github\n  CSDN: copyright\n  E-Mail: envelope\n  微博: weibo\n\n  icons_only: false\n  transition: false\n```\n\nsocial每行||后为图标名称，具体名称可以在 https://fontawesome.com/icons?d=gallery 中查到。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/TreeHouse装修指南之菜单.md","raw":"---\ntitle: TreeHouse装修指南之菜单\ndate: 2018-07-17 22:43:00\ntags: 想就做\n\n---\n\n本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。\n（通俗点说，就是hexo的相关搭建及应用的各效果的实现）\n\n菜单相关\n\n<!-- more -->\n\n<br/>\n\n# 公益404\n腾讯公益404页面，寻找丢失儿童，做一些力所能及的事情。\n需要新建 404.html 页面，放到主题的 source 目录下：\n\n```\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n```\n<br/>\n\n# 友链\n修改文件： \\themes\\next\\\\\\_config.yml\n\n```\n# Blog rolls\nlinks_icon: link \t\t\t\t\ticon名字\nlinks_title: Links \t\t\t\t\t标题名字\nlinks_layout: block \t\t\t\t排版：竖排，一个链接一行\n# links_layout: inline  \t\t\t排版：横排，n个链接一行\nlinks:\n  #Title: http://example.com/\t\t名称（可以是中文）：网址\n```\n\n<br/>\n\n# 添加个人头像&头像旋转\n## 添加\n修改next主题配置文件 \\_config.yml\n\n```\navatar: image_url\n```\nimage_url 可以是public文件夹下的相对路径，也可以是网络地址。\n\n## 头像旋转\n修改文件： \\themes\\next\\source\\css\\\\\\_common\\components\\sidebar\\sidebar-author.styl\n\n```stylus\n.site-author-image {\n  display: block;\n  margin: 0 auto;\n  padding: $site-author-image-padding;\n  max-width: $site-author-image-width;\n  height: $site-author-image-height;\n  border: $site-author-image-border-width solid $site-author-image-border-color;\n\n  /* 设置圆形头像 */\n  border-radius: 58px;\n  -webkit-border-radius: 58px;\n  -moz-border-radius: 58px;\n  box-shadow: inset 0 -1px 0 #333sf;\n\n  /* 鼠标经过头像旋转360度 */\n  -webkit-transition: -webkit-transform 1.0s ease-out;\n  -moz-transition: -moz-transform 1.0s ease-out;\n  transition: transform 1.0s ease-out;\n}\n\nimg:hover {\n  /* 鼠标经过头像旋转360度 */\n  -webkit-transform: rotateY(360deg);\n  -moz-transform: rotateY(360deg);\n  transform: rotateY(360deg);\n}\n\n/* Z 轴旋转动画 */\n@-webkit-keyframes play {\n  0% {\n    -webkit-transform: rotateY(0deg);\n  }\n  100% {\n    -webkit-transform: rotateY(-360deg);\n  }\n}\n@-moz-keyframes play {\n  0% {\n    -moz-transform: rotateY(0deg);\n  }\n  100% {\n    -moz-transform: rotateY(-360deg);\n  }\n}\n@keyframes play {\n  0% {\n    transform: rotateY(0deg);\n  }\n  100% {\n    transform: rotateY(-360deg);\n  }\n}\n\n.site-author-name {\n  margin: $site-author-name-margin;\n  text-align: $site-author-name-align;\n  color: $site-author-name-color;\n  font-weight: $site-author-name-weight;\n}\n\n.site-description {\n  margin-top: $site-description-margin-top;\n  text-align: $site-description-align;\n  font-size: $site-description-font-size;\n  color: $site-description-color;\n}\n```\n\n<br/>\n\n# 社交小图标相关\n修改文件： \\themes\\next\\\\\\_config.yml\n\n```\nsocial:\n  GitHub: github_address || github\n  CSDN: csdn_address || copyright\n  E-Mail: mailto:email_address || envelope\n  微博: weibo_address || weibo\n\nsocial_icons:\n  enable: true\n\n  GitHub: github\n  CSDN: copyright\n  E-Mail: envelope\n  微博: weibo\n\n  icons_only: false\n  transition: false\n```\n\nsocial每行||后为图标名称，具体名称可以在 https://fontawesome.com/icons?d=gallery 中查到。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"TreeHouse装修指南之菜单","published":1,"updated":"2018-08-12T15:40:44.864Z","_id":"cjkr0dbc6000lesvq3uryxygd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。<br>（通俗点说，就是hexo的相关搭建及应用的各效果的实现）</p>\n<p>菜单相关</p>\n<a id=\"more\"></a>\n<p><br></p>\n<h1 id=\"公益404\"><a href=\"#公益404\" class=\"headerlink\" title=\"公益404\"></a>公益404</h1><p>腾讯公益404页面，寻找丢失儿童，做一些力所能及的事情。<br>需要新建 404.html 页面，放到主题的 source 目录下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class=\"line\">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class=\"line\">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class=\"line\">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</span><br><span class=\"line\">          charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot;</span><br><span class=\"line\">          homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"友链\"><a href=\"#友链\" class=\"headerlink\" title=\"友链\"></a>友链</h1><p>修改文件： \\themes\\next\\_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Blog rolls</span><br><span class=\"line\">links_icon: link \t\t\t\t\ticon名字</span><br><span class=\"line\">links_title: Links \t\t\t\t\t标题名字</span><br><span class=\"line\">links_layout: block \t\t\t\t排版：竖排，一个链接一行</span><br><span class=\"line\"># links_layout: inline  \t\t\t排版：横排，n个链接一行</span><br><span class=\"line\">links:</span><br><span class=\"line\">  #Title: http://example.com/\t\t名称（可以是中文）：网址</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"添加个人头像-amp-头像旋转\"><a href=\"#添加个人头像-amp-头像旋转\" class=\"headerlink\" title=\"添加个人头像&amp;头像旋转\"></a>添加个人头像&amp;头像旋转</h1><h2 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h2><p>修改next主题配置文件 _config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar: image_url</span><br></pre></td></tr></table></figure>\n<p>image_url 可以是public文件夹下的相对路径，也可以是网络地址。</p>\n<h2 id=\"头像旋转\"><a href=\"#头像旋转\" class=\"headerlink\" title=\"头像旋转\"></a>头像旋转</h2><p>修改文件： \\themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-author.styl</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.site-author-image</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"variable\">$site</span>-author-image-padding;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"variable\">$site</span>-author-image-width;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"variable\">$site</span>-author-image-height;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"variable\">$site</span>-author-image-border-width solid <span class=\"variable\">$site</span>-author-image-border-color;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 设置圆形头像 */</span></span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">58px</span>;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">58px</span>;</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">58px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">0</span> -<span class=\"number\">1px</span> <span class=\"number\">0</span> <span class=\"number\">#333</span>sf;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 鼠标经过头像旋转360度 */</span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transition</span>: -webkit-transform <span class=\"number\">1.0s</span> ease-out;</span><br><span class=\"line\">  -moz-<span class=\"attribute\">transition</span>: -moz-transform <span class=\"number\">1.0s</span> ease-out;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">1.0s</span> ease-out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">img</span>:hover &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 鼠标经过头像旋转360度 */</span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transform</span>: rotateY(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">  -moz-<span class=\"attribute\">transform</span>: rotateY(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: rotateY(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Z 轴旋转动画 */</span></span><br><span class=\"line\">@-webkit-keyframes play &#123;</span><br><span class=\"line\">  <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">transform</span>: rotateY(<span class=\"number\">0deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">transform</span>: rotateY(-<span class=\"number\">360deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@-moz-keyframes play &#123;</span><br><span class=\"line\">  <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">    -moz-<span class=\"attribute\">transform</span>: rotateY(<span class=\"number\">0deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">    -moz-<span class=\"attribute\">transform</span>: rotateY(-<span class=\"number\">360deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes play &#123;</span><br><span class=\"line\">  <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: rotateY(<span class=\"number\">0deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: rotateY(-<span class=\"number\">360deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.site-author-name</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"variable\">$site</span>-author-name-margin;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: <span class=\"variable\">$site</span>-author-name-align;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$site</span>-author-name-color;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"variable\">$site</span>-author-name-weight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.site-description</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"variable\">$site</span>-description-margin-top;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: <span class=\"variable\">$site</span>-description-align;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$site</span>-description-font-size;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$site</span>-description-color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"社交小图标相关\"><a href=\"#社交小图标相关\" class=\"headerlink\" title=\"社交小图标相关\"></a>社交小图标相关</h1><p>修改文件： \\themes\\next\\_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">social:</span><br><span class=\"line\">  GitHub: github_address || github</span><br><span class=\"line\">  CSDN: csdn_address || copyright</span><br><span class=\"line\">  E-Mail: mailto:email_address || envelope</span><br><span class=\"line\">  微博: weibo_address || weibo</span><br><span class=\"line\"></span><br><span class=\"line\">social_icons:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\"></span><br><span class=\"line\">  GitHub: github</span><br><span class=\"line\">  CSDN: copyright</span><br><span class=\"line\">  E-Mail: envelope</span><br><span class=\"line\">  微博: weibo</span><br><span class=\"line\"></span><br><span class=\"line\">  icons_only: false</span><br><span class=\"line\">  transition: false</span><br></pre></td></tr></table></figure>\n<p>social每行||后为图标名称，具体名称可以在 <a href=\"https://fontawesome.com/icons?d=gallery\" target=\"_blank\" rel=\"noopener\">https://fontawesome.com/icons?d=gallery</a> 中查到。</p>\n","site":{"data":{}},"excerpt":"<p>本文章讲述了TreeHouse由无到有, 不断开枝散叶的过程。<br>（通俗点说，就是hexo的相关搭建及应用的各效果的实现）</p>\n<p>菜单相关</p>","more":"<p><br></p>\n<h1 id=\"公益404\"><a href=\"#公益404\" class=\"headerlink\" title=\"公益404\"></a>公益404</h1><p>腾讯公益404页面，寻找丢失儿童，做一些力所能及的事情。<br>需要新建 404.html 页面，放到主题的 source 目录下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class=\"line\">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class=\"line\">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class=\"line\">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</span><br><span class=\"line\">          charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot;</span><br><span class=\"line\">          homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"友链\"><a href=\"#友链\" class=\"headerlink\" title=\"友链\"></a>友链</h1><p>修改文件： \\themes\\next\\_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Blog rolls</span><br><span class=\"line\">links_icon: link \t\t\t\t\ticon名字</span><br><span class=\"line\">links_title: Links \t\t\t\t\t标题名字</span><br><span class=\"line\">links_layout: block \t\t\t\t排版：竖排，一个链接一行</span><br><span class=\"line\"># links_layout: inline  \t\t\t排版：横排，n个链接一行</span><br><span class=\"line\">links:</span><br><span class=\"line\">  #Title: http://example.com/\t\t名称（可以是中文）：网址</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"添加个人头像-amp-头像旋转\"><a href=\"#添加个人头像-amp-头像旋转\" class=\"headerlink\" title=\"添加个人头像&amp;头像旋转\"></a>添加个人头像&amp;头像旋转</h1><h2 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h2><p>修改next主题配置文件 _config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar: image_url</span><br></pre></td></tr></table></figure>\n<p>image_url 可以是public文件夹下的相对路径，也可以是网络地址。</p>\n<h2 id=\"头像旋转\"><a href=\"#头像旋转\" class=\"headerlink\" title=\"头像旋转\"></a>头像旋转</h2><p>修改文件： \\themes\\next\\source\\css\\_common\\components\\sidebar\\sidebar-author.styl</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.site-author-image</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"variable\">$site</span>-author-image-padding;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"variable\">$site</span>-author-image-width;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"variable\">$site</span>-author-image-height;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"variable\">$site</span>-author-image-border-width solid <span class=\"variable\">$site</span>-author-image-border-color;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 设置圆形头像 */</span></span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">58px</span>;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">58px</span>;</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">58px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">0</span> -<span class=\"number\">1px</span> <span class=\"number\">0</span> <span class=\"number\">#333</span>sf;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 鼠标经过头像旋转360度 */</span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transition</span>: -webkit-transform <span class=\"number\">1.0s</span> ease-out;</span><br><span class=\"line\">  -moz-<span class=\"attribute\">transition</span>: -moz-transform <span class=\"number\">1.0s</span> ease-out;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">1.0s</span> ease-out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">img</span>:hover &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 鼠标经过头像旋转360度 */</span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transform</span>: rotateY(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">  -moz-<span class=\"attribute\">transform</span>: rotateY(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: rotateY(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Z 轴旋转动画 */</span></span><br><span class=\"line\">@-webkit-keyframes play &#123;</span><br><span class=\"line\">  <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">transform</span>: rotateY(<span class=\"number\">0deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">    -webkit-<span class=\"attribute\">transform</span>: rotateY(-<span class=\"number\">360deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@-moz-keyframes play &#123;</span><br><span class=\"line\">  <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">    -moz-<span class=\"attribute\">transform</span>: rotateY(<span class=\"number\">0deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">    -moz-<span class=\"attribute\">transform</span>: rotateY(-<span class=\"number\">360deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes play &#123;</span><br><span class=\"line\">  <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: rotateY(<span class=\"number\">0deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: rotateY(-<span class=\"number\">360deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.site-author-name</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"variable\">$site</span>-author-name-margin;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: <span class=\"variable\">$site</span>-author-name-align;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$site</span>-author-name-color;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"variable\">$site</span>-author-name-weight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.site-description</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"variable\">$site</span>-description-margin-top;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: <span class=\"variable\">$site</span>-description-align;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"variable\">$site</span>-description-font-size;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$site</span>-description-color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"社交小图标相关\"><a href=\"#社交小图标相关\" class=\"headerlink\" title=\"社交小图标相关\"></a>社交小图标相关</h1><p>修改文件： \\themes\\next\\_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">social:</span><br><span class=\"line\">  GitHub: github_address || github</span><br><span class=\"line\">  CSDN: csdn_address || copyright</span><br><span class=\"line\">  E-Mail: mailto:email_address || envelope</span><br><span class=\"line\">  微博: weibo_address || weibo</span><br><span class=\"line\"></span><br><span class=\"line\">social_icons:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\"></span><br><span class=\"line\">  GitHub: github</span><br><span class=\"line\">  CSDN: copyright</span><br><span class=\"line\">  E-Mail: envelope</span><br><span class=\"line\">  微博: weibo</span><br><span class=\"line\"></span><br><span class=\"line\">  icons_only: false</span><br><span class=\"line\">  transition: false</span><br></pre></td></tr></table></figure>\n<p>social每行||后为图标名称，具体名称可以在 <a href=\"https://fontawesome.com/icons?d=gallery\" target=\"_blank\" rel=\"noopener\">https://fontawesome.com/icons?d=gallery</a> 中查到。</p>"},{"title":"python dictionary & lua table","date":"2018-05-28T15:23:35.000Z","_content":"\npython dictionary 与 lua table\n\n<!-- more -->\n\n<br/>\n\n# 遇到的问题\n公司前端的技术栈是 C++ & lua & python, C++、lua做业务开发，python做工具。\nlua特别好用的东西就是load, 将某些数据（一般是excel）转成lua的table存储，用的时候直接load进来。\n但是，有些数据，并不是excel转过来的，通过多个excel来组成。\n\n例如：\n描述: 一个卡牌游戏，肯定有一张卡牌表，在表中我可以知道每张卡牌属于哪个职业。\n\nQuestion: 在游戏中，我想知道某职业所有卡牌，怎么办呢?\n我需要遍历这个卡牌表，然后把相应职业的卡牌筛选出来。\n但是，这个方法随着卡牌库的增加，所花费的时间也不断增加，早晚会出事呀。\n当然，可以通过各种人为规定，算法设计来加快速度。\n可是，都没有根本去解决问题。\n回过头来，可以发现，当我们有了这张卡牌表，我就可以知道某职业都有哪些牌。\n这就是像卡牌表一样，不需要在游戏中动态去生成，直接可以本地存储静态的一个职业对应卡牌的表。\n这样，即使生成这张表再慢，也不会消耗游戏运行中的时间和性能。\n\n<br/>\n\n# 解决问题\n\n## 分析\n\n现在目标很明确了，我要把n个表，根据需求组合拼装成1个表。\n麻烦的是，表的生成这些东西，我们都已经做成脚本，交给策划生成了。\n这个东西，肯定也需要交给策划进行。\n不可能让策划打完表以后，程序再去执行一遍lua脚本。\n（PS：这种东西一定要规避掉，一定要学会自动化，工具化。不要把我们的时间浪费在这些可以自动化、工具化的东西上。）\n\n所以，目前状况是：\n语言：python\n输入：n张lua表\n输出：1张lua表\n逻辑：一系列插入、查找、遍历等\n\n中间的逻辑就不用多说了，python的dict 和 lua的table用法也挺像的。\n主要处理两个问题：\n\n1. 将lua table 转换成 python dict\n2. 将python dict 转换成 lua table\n\n## 大概思路\n在动手前，肯定要看有没有好的现成的轮子。重复造轮子还是不要了吧，不一定造的比人家好呢。\n经过一番查找，发现了 slpp[ https://github.com/SirAnthony/slpp ]\n它可以实现lua table 和 python dict之间的转换。\n但是，它是python2.x版本。\n然后，在推送请求上看到，有人已经做了python3.x版本。 slpp-23[ https://github.com/IlyaSkriblovsky/slpp-23 ]\n\n\n## 一些细节\n大概的方向差不多了，剩下的就是符合我所需要的格式。\n因为，我的文件格式是这样的:\n\n```lua\n\t\tlocal xx_xx = {\n\t\t\t[1] = {\n\t\t\t\t...\n\t\t\t},\n\t\t\t[2] = {\n\t\t\t\t...\n\t\t\t},\n\t\t\t...\n\t\t}\n\t\treturn xx_xx\n```\n\n对于输入要求，还简单一些：\n\t\t\n```python\n\t\t\"\"\"\n\t\t    描述:\n\t\t        将lua的table转成python的dict\n\t\t    \n\t\t    参数:\n\t\t        table_file_name - string\n\t\t            文件名（需要加后缀）\n\n\t\t    返回:\n\t\t        dict格式的table\n\t\t\"\"\"\n\t\tdef convertLuaTableToPythonDict(table_file_name):\n\t\t    content = \"\"\n\t\t    with open(table_file_name, 'r', encoding='utf-8') as f:\n\t\t        content = f.read()\n\n\t\t    content = content[content.find('{') : content.rfind('}')+1]\n\t\t    content = lua.decode(content)\n\n\t\t    return content\n```\n\n但是输出，就不能用 lua.encode 了，因为它输出东西是这样子的：\n\t\n```lua\t\n\t\t{\n\t\t{\n\t\t\t{\n\t\t\t\t\tz = 335,\n\t\t\t\t\tx = 1322,\n\t\t\t\t\tcityId = 2,\n\t\t\t\t\tid = 4\n\t\t\t\t},\n\t\t\t{\n\t\t\t\t\tz = 140,\n\t\t\t\t\tx = 3396,\n\t\t\t\t\tcityId = 4,\n\t\t\t\t\tid = 3\n\t\t\t\t}\n\t\t\t},\n\t\t{\n\t\t\t{\n\t\t\t\t\tz = 267.9,\n\t\t\t\t\tx = 2639.4,\n\t\t\t\t\tcityId = 3,\n\t\t\t\t\tid = 3\n\t\t\t\t},\n\t\t\t{\n\t\t\t\t\tz = -1.2,\n\t\t\t\t\tx = 2006,\n\t\t\t\t\tcityId = 1,\n\t\t\t\t\tid = 8\n\t\t\t\t}\n\t\t\t},\n\t\t{\n\t\t\t{\n\t\t\t\t\tcityId = 5,\n\t\t\t\t\tid = 6\n\t\t\t\t},\n\t\t\t{\n\t\t\t\t\tcityId = 2,\n\t\t\t\t\tid = 5\n\t\t\t\t}\n\t\t\t},\n\t\t{\n\t\t\t{\n\t\t\t\t\tz = 122,\n\t\t\t\t\tx = 968,\n\t\t\t\t\tcityId = 5,\n\t\t\t\t\tid = 6\n\t\t\t\t},\n\t\t\t{\n\t\t\t\t\tcityId = 1,\n\t\t\t\t\tid = 5\n\t\t\t\t}\n\t\t\t},\n\t\t{\n\t\t\t{\n\t\t\t\t\tcityId = 4,\n\t\t\t\t\tid = 5\n\t\t\t\t}\n\t\t\t},\n\t\t{\n\t\t\t\tinfo = \t{\n\t\t\t\t\t123 = 123,\n\t\t\t\t\tage = 98,\n\t\t\t\t\tsex = \"man\",\n\t\t\t\t\thobby = \"basketball\",\n\t\t\t\t\tother = \t\t{\n\t\t\t\t\t\taddr = \"China\",\n\t\t\t\t\t\tid_card = \"1234567890abc\"\n\t\t\t\t\t},\n\t\t\t\t\tname = \"ltree98\"\n\t\t\t\t},\n\t\t\t\t2 = \"hello ltree98\",\n\t\t\t\tid = \"12345\"\n\t\t\t}\n\t\t}\n```\n\n没错，它的格式就是这样的，包括对齐。\n只能说能用。\n我想了一下，发现我需要的输出格式其实很简单，递归的输出就行。\n我也懒得改它的源码了，直接手撸了一个。\n\n```python\n\t\t# 根据递归深度输出 制表符\n\t\tdef outPutTab(depth, outputHandler):\n\t\t    for i in range(0, depth):\n\t\t        outputHandler.write('\\t')\n\n\t\t# 将字典递归转化输出\n\t\tdef RecursiveSerachDict(depth, dic, outputHandler):\n\t\t    for key, val in dic.items():\n\t\t        # output key\n\t\t        outPutTab(depth, outputHandler)\n\n\t\t        if isinstance(key, Number):   \n\t\t            outputHandler.write('[%s] = ' % str(key))\n\t\t        elif isinstance(key, str):\n\t\t            outputHandler.write('%s = ' % key)\n\n\t\t        # output val\n\t\t        if isinstance(val, dict):\n\t\t            outputHandler.write('{\\n')\n\t\t            RecursiveSerachDict(depth+1, val, outputHandler)\n\t\t            outPutTab(depth, outputHandler)\n\t\t            outputHandler.write('},')\n\t\t        elif isinstance(val, Number):\n\t\t            outputHandler.write('%s,' % str(val))\n\t\t        elif isinstance(val, str):\n\t\t            outputHandler.write('\\'%s\\',' % val)\n\n\t\t        outputHandler.write('\\n')\n\n\t\t# 将字典写入lua\n\t\tdef write_dict_lua(dict_tmp, table_name, file_path):\n\t\t    if(type(dict_tmp) != dict):\n\t\t        print(\"ERROR: only parse dict type!\")\n\t\t        return\n\n\t\t    table_file_path = os.path.join(file_path, '%s.lua' % table_name)\n\t\t    outputHandler = codecs.open(table_file_path, 'w', encoding='utf-8')\n\n\t\t    outputHandler.write('\\nlocal %s = {\\n' % table_name)\n\n\t\t    RecursiveSerachDict(1, dict_tmp, outputHandler)\n\n\t\t    outputHandler.write('}\\n')\n\t\t    outputHandler.write('\\nreturn %s\\n\\n' % table_name)\n\t\t    outputHandler.close()\n```\n\n我的输出：\n\n```lua\n\t\tlocal dict_portal_group = {\n\t\t\t[1] = {\n\t\t\t\t[1] = {\n\t\t\t\t\tz = 335,\n\t\t\t\t\tx = 1322,\n\t\t\t\t\tcityId = 2,\n\t\t\t\t\tid = 4,\n\t\t\t\t},\n\t\t\t\t[2] = {\n\t\t\t\t\tz = 140,\n\t\t\t\t\tx = 3396,\n\t\t\t\t\tcityId = 4,\n\t\t\t\t\tid = 3,\n\t\t\t\t},\n\t\t\t},\n\t\t\t[2] = {\n\t\t\t\t[1] = {\n\t\t\t\t\tz = 267.9,\n\t\t\t\t\tx = 2639.4,\n\t\t\t\t\tcityId = 3,\n\t\t\t\t\tid = 3,\n\t\t\t\t},\n\t\t\t\t[2] = {\n\t\t\t\t\tz = -1.2,\n\t\t\t\t\tx = 2006,\n\t\t\t\t\tcityId = 1,\n\t\t\t\t\tid = 8,\n\t\t\t\t},\n\t\t\t},\n\t\t\t[3] = {\n\t\t\t\t[1] = {\n\t\t\t\t\tcityId = 5,\n\t\t\t\t\tid = 6,\n\t\t\t\t},\n\t\t\t\t[2] = {\n\t\t\t\t\tcityId = 2,\n\t\t\t\t\tid = 5,\n\t\t\t\t},\n\t\t\t},\n\t\t\t[4] = {\n\t\t\t\t[1] = {\n\t\t\t\t\tz = 122,\n\t\t\t\t\tx = 968,\n\t\t\t\t\tcityId = 5,\n\t\t\t\t\tid = 6,\n\t\t\t\t},\n\t\t\t\t[2] = {\n\t\t\t\t\tcityId = 1,\n\t\t\t\t\tid = 5,\n\t\t\t\t},\n\t\t\t},\n\t\t\t[5] = {\n\t\t\t\t[1] = {\n\t\t\t\t\tcityId = 4,\n\t\t\t\t\tid = 5,\n\t\t\t\t},\n\t\t\t},\n\t\t\t[6] = {\n\t\t\t\tinfo = {\n\t\t\t\t\t[123] = 123,\n\t\t\t\t\tage = 98,\n\t\t\t\t\tsex = 'man',\n\t\t\t\t\thobby = 'basketball',\n\t\t\t\t\tother = {\n\t\t\t\t\t\taddr = 'China',\n\t\t\t\t\t\tid_card = '1234567890abc',\n\t\t\t\t\t},\n\t\t\t\t\tname = 'ltree98',\n\t\t\t\t},\n\t\t\t\t[2] = 'hello ltree98',\n\t\t\t\tid = '12345',\n\t\t\t},\n\t\t}\n\n\t\treturn dict_portal_group\n```\n\n嗯，大概就是这样了。\n\n<br/>\n\n# 总结\n首先，就要遵循一个思路，**静态的数据结构尽量不要再游戏过程中动态生成**。\n然后，前端要负责的东西太多了，**尽量要把这些东西工具化、脚本化**。\n最后，**代码不止能用，还要能看**。","source":"_posts/python dictionary & lua table.md","raw":"---\ntitle: python dictionary & lua table\ndate: 2018-05-28 23:23:35\ntags: 想就做\n\n---\n\npython dictionary 与 lua table\n\n<!-- more -->\n\n<br/>\n\n# 遇到的问题\n公司前端的技术栈是 C++ & lua & python, C++、lua做业务开发，python做工具。\nlua特别好用的东西就是load, 将某些数据（一般是excel）转成lua的table存储，用的时候直接load进来。\n但是，有些数据，并不是excel转过来的，通过多个excel来组成。\n\n例如：\n描述: 一个卡牌游戏，肯定有一张卡牌表，在表中我可以知道每张卡牌属于哪个职业。\n\nQuestion: 在游戏中，我想知道某职业所有卡牌，怎么办呢?\n我需要遍历这个卡牌表，然后把相应职业的卡牌筛选出来。\n但是，这个方法随着卡牌库的增加，所花费的时间也不断增加，早晚会出事呀。\n当然，可以通过各种人为规定，算法设计来加快速度。\n可是，都没有根本去解决问题。\n回过头来，可以发现，当我们有了这张卡牌表，我就可以知道某职业都有哪些牌。\n这就是像卡牌表一样，不需要在游戏中动态去生成，直接可以本地存储静态的一个职业对应卡牌的表。\n这样，即使生成这张表再慢，也不会消耗游戏运行中的时间和性能。\n\n<br/>\n\n# 解决问题\n\n## 分析\n\n现在目标很明确了，我要把n个表，根据需求组合拼装成1个表。\n麻烦的是，表的生成这些东西，我们都已经做成脚本，交给策划生成了。\n这个东西，肯定也需要交给策划进行。\n不可能让策划打完表以后，程序再去执行一遍lua脚本。\n（PS：这种东西一定要规避掉，一定要学会自动化，工具化。不要把我们的时间浪费在这些可以自动化、工具化的东西上。）\n\n所以，目前状况是：\n语言：python\n输入：n张lua表\n输出：1张lua表\n逻辑：一系列插入、查找、遍历等\n\n中间的逻辑就不用多说了，python的dict 和 lua的table用法也挺像的。\n主要处理两个问题：\n\n1. 将lua table 转换成 python dict\n2. 将python dict 转换成 lua table\n\n## 大概思路\n在动手前，肯定要看有没有好的现成的轮子。重复造轮子还是不要了吧，不一定造的比人家好呢。\n经过一番查找，发现了 slpp[ https://github.com/SirAnthony/slpp ]\n它可以实现lua table 和 python dict之间的转换。\n但是，它是python2.x版本。\n然后，在推送请求上看到，有人已经做了python3.x版本。 slpp-23[ https://github.com/IlyaSkriblovsky/slpp-23 ]\n\n\n## 一些细节\n大概的方向差不多了，剩下的就是符合我所需要的格式。\n因为，我的文件格式是这样的:\n\n```lua\n\t\tlocal xx_xx = {\n\t\t\t[1] = {\n\t\t\t\t...\n\t\t\t},\n\t\t\t[2] = {\n\t\t\t\t...\n\t\t\t},\n\t\t\t...\n\t\t}\n\t\treturn xx_xx\n```\n\n对于输入要求，还简单一些：\n\t\t\n```python\n\t\t\"\"\"\n\t\t    描述:\n\t\t        将lua的table转成python的dict\n\t\t    \n\t\t    参数:\n\t\t        table_file_name - string\n\t\t            文件名（需要加后缀）\n\n\t\t    返回:\n\t\t        dict格式的table\n\t\t\"\"\"\n\t\tdef convertLuaTableToPythonDict(table_file_name):\n\t\t    content = \"\"\n\t\t    with open(table_file_name, 'r', encoding='utf-8') as f:\n\t\t        content = f.read()\n\n\t\t    content = content[content.find('{') : content.rfind('}')+1]\n\t\t    content = lua.decode(content)\n\n\t\t    return content\n```\n\n但是输出，就不能用 lua.encode 了，因为它输出东西是这样子的：\n\t\n```lua\t\n\t\t{\n\t\t{\n\t\t\t{\n\t\t\t\t\tz = 335,\n\t\t\t\t\tx = 1322,\n\t\t\t\t\tcityId = 2,\n\t\t\t\t\tid = 4\n\t\t\t\t},\n\t\t\t{\n\t\t\t\t\tz = 140,\n\t\t\t\t\tx = 3396,\n\t\t\t\t\tcityId = 4,\n\t\t\t\t\tid = 3\n\t\t\t\t}\n\t\t\t},\n\t\t{\n\t\t\t{\n\t\t\t\t\tz = 267.9,\n\t\t\t\t\tx = 2639.4,\n\t\t\t\t\tcityId = 3,\n\t\t\t\t\tid = 3\n\t\t\t\t},\n\t\t\t{\n\t\t\t\t\tz = -1.2,\n\t\t\t\t\tx = 2006,\n\t\t\t\t\tcityId = 1,\n\t\t\t\t\tid = 8\n\t\t\t\t}\n\t\t\t},\n\t\t{\n\t\t\t{\n\t\t\t\t\tcityId = 5,\n\t\t\t\t\tid = 6\n\t\t\t\t},\n\t\t\t{\n\t\t\t\t\tcityId = 2,\n\t\t\t\t\tid = 5\n\t\t\t\t}\n\t\t\t},\n\t\t{\n\t\t\t{\n\t\t\t\t\tz = 122,\n\t\t\t\t\tx = 968,\n\t\t\t\t\tcityId = 5,\n\t\t\t\t\tid = 6\n\t\t\t\t},\n\t\t\t{\n\t\t\t\t\tcityId = 1,\n\t\t\t\t\tid = 5\n\t\t\t\t}\n\t\t\t},\n\t\t{\n\t\t\t{\n\t\t\t\t\tcityId = 4,\n\t\t\t\t\tid = 5\n\t\t\t\t}\n\t\t\t},\n\t\t{\n\t\t\t\tinfo = \t{\n\t\t\t\t\t123 = 123,\n\t\t\t\t\tage = 98,\n\t\t\t\t\tsex = \"man\",\n\t\t\t\t\thobby = \"basketball\",\n\t\t\t\t\tother = \t\t{\n\t\t\t\t\t\taddr = \"China\",\n\t\t\t\t\t\tid_card = \"1234567890abc\"\n\t\t\t\t\t},\n\t\t\t\t\tname = \"ltree98\"\n\t\t\t\t},\n\t\t\t\t2 = \"hello ltree98\",\n\t\t\t\tid = \"12345\"\n\t\t\t}\n\t\t}\n```\n\n没错，它的格式就是这样的，包括对齐。\n只能说能用。\n我想了一下，发现我需要的输出格式其实很简单，递归的输出就行。\n我也懒得改它的源码了，直接手撸了一个。\n\n```python\n\t\t# 根据递归深度输出 制表符\n\t\tdef outPutTab(depth, outputHandler):\n\t\t    for i in range(0, depth):\n\t\t        outputHandler.write('\\t')\n\n\t\t# 将字典递归转化输出\n\t\tdef RecursiveSerachDict(depth, dic, outputHandler):\n\t\t    for key, val in dic.items():\n\t\t        # output key\n\t\t        outPutTab(depth, outputHandler)\n\n\t\t        if isinstance(key, Number):   \n\t\t            outputHandler.write('[%s] = ' % str(key))\n\t\t        elif isinstance(key, str):\n\t\t            outputHandler.write('%s = ' % key)\n\n\t\t        # output val\n\t\t        if isinstance(val, dict):\n\t\t            outputHandler.write('{\\n')\n\t\t            RecursiveSerachDict(depth+1, val, outputHandler)\n\t\t            outPutTab(depth, outputHandler)\n\t\t            outputHandler.write('},')\n\t\t        elif isinstance(val, Number):\n\t\t            outputHandler.write('%s,' % str(val))\n\t\t        elif isinstance(val, str):\n\t\t            outputHandler.write('\\'%s\\',' % val)\n\n\t\t        outputHandler.write('\\n')\n\n\t\t# 将字典写入lua\n\t\tdef write_dict_lua(dict_tmp, table_name, file_path):\n\t\t    if(type(dict_tmp) != dict):\n\t\t        print(\"ERROR: only parse dict type!\")\n\t\t        return\n\n\t\t    table_file_path = os.path.join(file_path, '%s.lua' % table_name)\n\t\t    outputHandler = codecs.open(table_file_path, 'w', encoding='utf-8')\n\n\t\t    outputHandler.write('\\nlocal %s = {\\n' % table_name)\n\n\t\t    RecursiveSerachDict(1, dict_tmp, outputHandler)\n\n\t\t    outputHandler.write('}\\n')\n\t\t    outputHandler.write('\\nreturn %s\\n\\n' % table_name)\n\t\t    outputHandler.close()\n```\n\n我的输出：\n\n```lua\n\t\tlocal dict_portal_group = {\n\t\t\t[1] = {\n\t\t\t\t[1] = {\n\t\t\t\t\tz = 335,\n\t\t\t\t\tx = 1322,\n\t\t\t\t\tcityId = 2,\n\t\t\t\t\tid = 4,\n\t\t\t\t},\n\t\t\t\t[2] = {\n\t\t\t\t\tz = 140,\n\t\t\t\t\tx = 3396,\n\t\t\t\t\tcityId = 4,\n\t\t\t\t\tid = 3,\n\t\t\t\t},\n\t\t\t},\n\t\t\t[2] = {\n\t\t\t\t[1] = {\n\t\t\t\t\tz = 267.9,\n\t\t\t\t\tx = 2639.4,\n\t\t\t\t\tcityId = 3,\n\t\t\t\t\tid = 3,\n\t\t\t\t},\n\t\t\t\t[2] = {\n\t\t\t\t\tz = -1.2,\n\t\t\t\t\tx = 2006,\n\t\t\t\t\tcityId = 1,\n\t\t\t\t\tid = 8,\n\t\t\t\t},\n\t\t\t},\n\t\t\t[3] = {\n\t\t\t\t[1] = {\n\t\t\t\t\tcityId = 5,\n\t\t\t\t\tid = 6,\n\t\t\t\t},\n\t\t\t\t[2] = {\n\t\t\t\t\tcityId = 2,\n\t\t\t\t\tid = 5,\n\t\t\t\t},\n\t\t\t},\n\t\t\t[4] = {\n\t\t\t\t[1] = {\n\t\t\t\t\tz = 122,\n\t\t\t\t\tx = 968,\n\t\t\t\t\tcityId = 5,\n\t\t\t\t\tid = 6,\n\t\t\t\t},\n\t\t\t\t[2] = {\n\t\t\t\t\tcityId = 1,\n\t\t\t\t\tid = 5,\n\t\t\t\t},\n\t\t\t},\n\t\t\t[5] = {\n\t\t\t\t[1] = {\n\t\t\t\t\tcityId = 4,\n\t\t\t\t\tid = 5,\n\t\t\t\t},\n\t\t\t},\n\t\t\t[6] = {\n\t\t\t\tinfo = {\n\t\t\t\t\t[123] = 123,\n\t\t\t\t\tage = 98,\n\t\t\t\t\tsex = 'man',\n\t\t\t\t\thobby = 'basketball',\n\t\t\t\t\tother = {\n\t\t\t\t\t\taddr = 'China',\n\t\t\t\t\t\tid_card = '1234567890abc',\n\t\t\t\t\t},\n\t\t\t\t\tname = 'ltree98',\n\t\t\t\t},\n\t\t\t\t[2] = 'hello ltree98',\n\t\t\t\tid = '12345',\n\t\t\t},\n\t\t}\n\n\t\treturn dict_portal_group\n```\n\n嗯，大概就是这样了。\n\n<br/>\n\n# 总结\n首先，就要遵循一个思路，**静态的数据结构尽量不要再游戏过程中动态生成**。\n然后，前端要负责的东西太多了，**尽量要把这些东西工具化、脚本化**。\n最后，**代码不止能用，还要能看**。","slug":"python dictionary & lua table","published":1,"updated":"2018-07-19T16:43:49.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbc7000nesvqerr5fqsl","content":"<p>python dictionary 与 lua table</p>\n<a id=\"more\"></a>\n<p><br></p>\n<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><p>公司前端的技术栈是 C++ &amp; lua &amp; python, C++、lua做业务开发，python做工具。<br>lua特别好用的东西就是load, 将某些数据（一般是excel）转成lua的table存储，用的时候直接load进来。<br>但是，有些数据，并不是excel转过来的，通过多个excel来组成。</p>\n<p>例如：<br>描述: 一个卡牌游戏，肯定有一张卡牌表，在表中我可以知道每张卡牌属于哪个职业。</p>\n<p>Question: 在游戏中，我想知道某职业所有卡牌，怎么办呢?<br>我需要遍历这个卡牌表，然后把相应职业的卡牌筛选出来。<br>但是，这个方法随着卡牌库的增加，所花费的时间也不断增加，早晚会出事呀。<br>当然，可以通过各种人为规定，算法设计来加快速度。<br>可是，都没有根本去解决问题。<br>回过头来，可以发现，当我们有了这张卡牌表，我就可以知道某职业都有哪些牌。<br>这就是像卡牌表一样，不需要在游戏中动态去生成，直接可以本地存储静态的一个职业对应卡牌的表。<br>这样，即使生成这张表再慢，也不会消耗游戏运行中的时间和性能。</p>\n<p><br></p>\n<h1 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h1><h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>现在目标很明确了，我要把n个表，根据需求组合拼装成1个表。<br>麻烦的是，表的生成这些东西，我们都已经做成脚本，交给策划生成了。<br>这个东西，肯定也需要交给策划进行。<br>不可能让策划打完表以后，程序再去执行一遍lua脚本。<br>（PS：这种东西一定要规避掉，一定要学会自动化，工具化。不要把我们的时间浪费在这些可以自动化、工具化的东西上。）</p>\n<p>所以，目前状况是：<br>语言：python<br>输入：n张lua表<br>输出：1张lua表<br>逻辑：一系列插入、查找、遍历等</p>\n<p>中间的逻辑就不用多说了，python的dict 和 lua的table用法也挺像的。<br>主要处理两个问题：</p>\n<ol>\n<li>将lua table 转换成 python dict</li>\n<li>将python dict 转换成 lua table</li>\n</ol>\n<h2 id=\"大概思路\"><a href=\"#大概思路\" class=\"headerlink\" title=\"大概思路\"></a>大概思路</h2><p>在动手前，肯定要看有没有好的现成的轮子。重复造轮子还是不要了吧，不一定造的比人家好呢。<br>经过一番查找，发现了 slpp[ <a href=\"https://github.com/SirAnthony/slpp\" target=\"_blank\" rel=\"noopener\">https://github.com/SirAnthony/slpp</a> ]<br>它可以实现lua table 和 python dict之间的转换。<br>但是，它是python2.x版本。<br>然后，在推送请求上看到，有人已经做了python3.x版本。 slpp-23[ <a href=\"https://github.com/IlyaSkriblovsky/slpp-23\" target=\"_blank\" rel=\"noopener\">https://github.com/IlyaSkriblovsky/slpp-23</a> ]</p>\n<h2 id=\"一些细节\"><a href=\"#一些细节\" class=\"headerlink\" title=\"一些细节\"></a>一些细节</h2><p>大概的方向差不多了，剩下的就是符合我所需要的格式。<br>因为，我的文件格式是这样的:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> xx_xx = &#123;</span><br><span class=\"line\">\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t[<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> xx_xx</span><br></pre></td></tr></table></figure>\n<p>对于输入要求，还简单一些：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    描述:</span></span><br><span class=\"line\"><span class=\"string\">        将lua的table转成python的dict</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    参数:</span></span><br><span class=\"line\"><span class=\"string\">        table_file_name - string</span></span><br><span class=\"line\"><span class=\"string\">            文件名（需要加后缀）</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    返回:</span></span><br><span class=\"line\"><span class=\"string\">        dict格式的table</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convertLuaTableToPythonDict</span><span class=\"params\">(table_file_name)</span>:</span></span><br><span class=\"line\">    content = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(table_file_name, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        content = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    content = content[content.find(<span class=\"string\">'&#123;'</span>) : content.rfind(<span class=\"string\">'&#125;'</span>)+<span class=\"number\">1</span>]</span><br><span class=\"line\">    content = lua.decode(content)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> content</span><br></pre></td></tr></table></figure>\n<p>但是输出，就不能用 lua.encode 了，因为它输出东西是这样子的：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">335</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">1322</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">4</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">140</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">3396</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">3</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">267.9</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">2639.4</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">3</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">-1.2</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">2006</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">8</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">6</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">122</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">968</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">6</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\tinfo = \t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"number\">123</span> = <span class=\"number\">123</span>,</span><br><span class=\"line\">\t\t\tage = <span class=\"number\">98</span>,</span><br><span class=\"line\">\t\t\tsex = <span class=\"string\">\"man\"</span>,</span><br><span class=\"line\">\t\t\thobby = <span class=\"string\">\"basketball\"</span>,</span><br><span class=\"line\">\t\t\tother = \t\t&#123;</span><br><span class=\"line\">\t\t\t\taddr = <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">\t\t\t\tid_card = <span class=\"string\">\"1234567890abc\"</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tname = <span class=\"string\">\"ltree98\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"number\">2</span> = <span class=\"string\">\"hello ltree98\"</span>,</span><br><span class=\"line\">\t\tid = <span class=\"string\">\"12345\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没错，它的格式就是这样的，包括对齐。<br>只能说能用。<br>我想了一下，发现我需要的输出格式其实很简单，递归的输出就行。<br>我也懒得改它的源码了，直接手撸了一个。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 根据递归深度输出 制表符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outPutTab</span><span class=\"params\">(depth, outputHandler)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, depth):</span><br><span class=\"line\">        outputHandler.write(<span class=\"string\">'\\t'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将字典递归转化输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">RecursiveSerachDict</span><span class=\"params\">(depth, dic, outputHandler)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, val <span class=\"keyword\">in</span> dic.items():</span><br><span class=\"line\">        <span class=\"comment\"># output key</span></span><br><span class=\"line\">        outPutTab(depth, outputHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(key, Number):   </span><br><span class=\"line\">            outputHandler.write(<span class=\"string\">'[%s] = '</span> % str(key))</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> isinstance(key, str):</span><br><span class=\"line\">            outputHandler.write(<span class=\"string\">'%s = '</span> % key)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># output val</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(val, dict):</span><br><span class=\"line\">            outputHandler.write(<span class=\"string\">'&#123;\\n'</span>)</span><br><span class=\"line\">            RecursiveSerachDict(depth+<span class=\"number\">1</span>, val, outputHandler)</span><br><span class=\"line\">            outPutTab(depth, outputHandler)</span><br><span class=\"line\">            outputHandler.write(<span class=\"string\">'&#125;,'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> isinstance(val, Number):</span><br><span class=\"line\">            outputHandler.write(<span class=\"string\">'%s,'</span> % str(val))</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> isinstance(val, str):</span><br><span class=\"line\">            outputHandler.write(<span class=\"string\">'\\'%s\\','</span> % val)</span><br><span class=\"line\"></span><br><span class=\"line\">        outputHandler.write(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将字典写入lua</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_dict_lua</span><span class=\"params\">(dict_tmp, table_name, file_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type(dict_tmp) != dict):</span><br><span class=\"line\">        print(<span class=\"string\">\"ERROR: only parse dict type!\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    table_file_path = os.path.join(file_path, <span class=\"string\">'%s.lua'</span> % table_name)</span><br><span class=\"line\">    outputHandler = codecs.open(table_file_path, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    outputHandler.write(<span class=\"string\">'\\nlocal %s = &#123;\\n'</span> % table_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    RecursiveSerachDict(<span class=\"number\">1</span>, dict_tmp, outputHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">    outputHandler.write(<span class=\"string\">'&#125;\\n'</span>)</span><br><span class=\"line\">    outputHandler.write(<span class=\"string\">'\\nreturn %s\\n\\n'</span> % table_name)</span><br><span class=\"line\">    outputHandler.close()</span><br></pre></td></tr></table></figure>\n<p>我的输出：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> dict_portal_group = &#123;</span><br><span class=\"line\">\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">335</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">1322</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">140</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">3396</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t[<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">267.9</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">2639.4</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">-1.2</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">2006</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">8</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t[<span class=\"number\">3</span>] = &#123;</span><br><span class=\"line\">\t\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">6</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t[<span class=\"number\">4</span>] = &#123;</span><br><span class=\"line\">\t\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">122</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">968</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">6</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t[<span class=\"number\">5</span>] = &#123;</span><br><span class=\"line\">\t\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t[<span class=\"number\">6</span>] = &#123;</span><br><span class=\"line\">\t\tinfo = &#123;</span><br><span class=\"line\">\t\t\t[<span class=\"number\">123</span>] = <span class=\"number\">123</span>,</span><br><span class=\"line\">\t\t\tage = <span class=\"number\">98</span>,</span><br><span class=\"line\">\t\t\tsex = <span class=\"string\">'man'</span>,</span><br><span class=\"line\">\t\t\thobby = <span class=\"string\">'basketball'</span>,</span><br><span class=\"line\">\t\t\tother = &#123;</span><br><span class=\"line\">\t\t\t\taddr = <span class=\"string\">'China'</span>,</span><br><span class=\"line\">\t\t\t\tid_card = <span class=\"string\">'1234567890abc'</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tname = <span class=\"string\">'ltree98'</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>] = <span class=\"string\">'hello ltree98'</span>,</span><br><span class=\"line\">\t\tid = <span class=\"string\">'12345'</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> dict_portal_group</span><br></pre></td></tr></table></figure>\n<p>嗯，大概就是这样了。</p>\n<p><br></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>首先，就要遵循一个思路，<strong>静态的数据结构尽量不要再游戏过程中动态生成</strong>。<br>然后，前端要负责的东西太多了，<strong>尽量要把这些东西工具化、脚本化</strong>。<br>最后，<strong>代码不止能用，还要能看</strong>。</p>\n","site":{"data":{}},"excerpt":"<p>python dictionary 与 lua table</p>","more":"<p><br></p>\n<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><p>公司前端的技术栈是 C++ &amp; lua &amp; python, C++、lua做业务开发，python做工具。<br>lua特别好用的东西就是load, 将某些数据（一般是excel）转成lua的table存储，用的时候直接load进来。<br>但是，有些数据，并不是excel转过来的，通过多个excel来组成。</p>\n<p>例如：<br>描述: 一个卡牌游戏，肯定有一张卡牌表，在表中我可以知道每张卡牌属于哪个职业。</p>\n<p>Question: 在游戏中，我想知道某职业所有卡牌，怎么办呢?<br>我需要遍历这个卡牌表，然后把相应职业的卡牌筛选出来。<br>但是，这个方法随着卡牌库的增加，所花费的时间也不断增加，早晚会出事呀。<br>当然，可以通过各种人为规定，算法设计来加快速度。<br>可是，都没有根本去解决问题。<br>回过头来，可以发现，当我们有了这张卡牌表，我就可以知道某职业都有哪些牌。<br>这就是像卡牌表一样，不需要在游戏中动态去生成，直接可以本地存储静态的一个职业对应卡牌的表。<br>这样，即使生成这张表再慢，也不会消耗游戏运行中的时间和性能。</p>\n<p><br></p>\n<h1 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h1><h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>现在目标很明确了，我要把n个表，根据需求组合拼装成1个表。<br>麻烦的是，表的生成这些东西，我们都已经做成脚本，交给策划生成了。<br>这个东西，肯定也需要交给策划进行。<br>不可能让策划打完表以后，程序再去执行一遍lua脚本。<br>（PS：这种东西一定要规避掉，一定要学会自动化，工具化。不要把我们的时间浪费在这些可以自动化、工具化的东西上。）</p>\n<p>所以，目前状况是：<br>语言：python<br>输入：n张lua表<br>输出：1张lua表<br>逻辑：一系列插入、查找、遍历等</p>\n<p>中间的逻辑就不用多说了，python的dict 和 lua的table用法也挺像的。<br>主要处理两个问题：</p>\n<ol>\n<li>将lua table 转换成 python dict</li>\n<li>将python dict 转换成 lua table</li>\n</ol>\n<h2 id=\"大概思路\"><a href=\"#大概思路\" class=\"headerlink\" title=\"大概思路\"></a>大概思路</h2><p>在动手前，肯定要看有没有好的现成的轮子。重复造轮子还是不要了吧，不一定造的比人家好呢。<br>经过一番查找，发现了 slpp[ <a href=\"https://github.com/SirAnthony/slpp\" target=\"_blank\" rel=\"noopener\">https://github.com/SirAnthony/slpp</a> ]<br>它可以实现lua table 和 python dict之间的转换。<br>但是，它是python2.x版本。<br>然后，在推送请求上看到，有人已经做了python3.x版本。 slpp-23[ <a href=\"https://github.com/IlyaSkriblovsky/slpp-23\" target=\"_blank\" rel=\"noopener\">https://github.com/IlyaSkriblovsky/slpp-23</a> ]</p>\n<h2 id=\"一些细节\"><a href=\"#一些细节\" class=\"headerlink\" title=\"一些细节\"></a>一些细节</h2><p>大概的方向差不多了，剩下的就是符合我所需要的格式。<br>因为，我的文件格式是这样的:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> xx_xx = &#123;</span><br><span class=\"line\">\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t[<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> xx_xx</span><br></pre></td></tr></table></figure>\n<p>对于输入要求，还简单一些：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    描述:</span></span><br><span class=\"line\"><span class=\"string\">        将lua的table转成python的dict</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    参数:</span></span><br><span class=\"line\"><span class=\"string\">        table_file_name - string</span></span><br><span class=\"line\"><span class=\"string\">            文件名（需要加后缀）</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    返回:</span></span><br><span class=\"line\"><span class=\"string\">        dict格式的table</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convertLuaTableToPythonDict</span><span class=\"params\">(table_file_name)</span>:</span></span><br><span class=\"line\">    content = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(table_file_name, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        content = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    content = content[content.find(<span class=\"string\">'&#123;'</span>) : content.rfind(<span class=\"string\">'&#125;'</span>)+<span class=\"number\">1</span>]</span><br><span class=\"line\">    content = lua.decode(content)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> content</span><br></pre></td></tr></table></figure>\n<p>但是输出，就不能用 lua.encode 了，因为它输出东西是这样子的：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">335</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">1322</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">4</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">140</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">3396</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">3</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">267.9</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">2639.4</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">3</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">-1.2</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">2006</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">8</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">6</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">122</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">968</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">6</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\tinfo = \t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"number\">123</span> = <span class=\"number\">123</span>,</span><br><span class=\"line\">\t\t\tage = <span class=\"number\">98</span>,</span><br><span class=\"line\">\t\t\tsex = <span class=\"string\">\"man\"</span>,</span><br><span class=\"line\">\t\t\thobby = <span class=\"string\">\"basketball\"</span>,</span><br><span class=\"line\">\t\t\tother = \t\t&#123;</span><br><span class=\"line\">\t\t\t\taddr = <span class=\"string\">\"China\"</span>,</span><br><span class=\"line\">\t\t\t\tid_card = <span class=\"string\">\"1234567890abc\"</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tname = <span class=\"string\">\"ltree98\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"number\">2</span> = <span class=\"string\">\"hello ltree98\"</span>,</span><br><span class=\"line\">\t\tid = <span class=\"string\">\"12345\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没错，它的格式就是这样的，包括对齐。<br>只能说能用。<br>我想了一下，发现我需要的输出格式其实很简单，递归的输出就行。<br>我也懒得改它的源码了，直接手撸了一个。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 根据递归深度输出 制表符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outPutTab</span><span class=\"params\">(depth, outputHandler)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, depth):</span><br><span class=\"line\">        outputHandler.write(<span class=\"string\">'\\t'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将字典递归转化输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">RecursiveSerachDict</span><span class=\"params\">(depth, dic, outputHandler)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, val <span class=\"keyword\">in</span> dic.items():</span><br><span class=\"line\">        <span class=\"comment\"># output key</span></span><br><span class=\"line\">        outPutTab(depth, outputHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(key, Number):   </span><br><span class=\"line\">            outputHandler.write(<span class=\"string\">'[%s] = '</span> % str(key))</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> isinstance(key, str):</span><br><span class=\"line\">            outputHandler.write(<span class=\"string\">'%s = '</span> % key)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># output val</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(val, dict):</span><br><span class=\"line\">            outputHandler.write(<span class=\"string\">'&#123;\\n'</span>)</span><br><span class=\"line\">            RecursiveSerachDict(depth+<span class=\"number\">1</span>, val, outputHandler)</span><br><span class=\"line\">            outPutTab(depth, outputHandler)</span><br><span class=\"line\">            outputHandler.write(<span class=\"string\">'&#125;,'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> isinstance(val, Number):</span><br><span class=\"line\">            outputHandler.write(<span class=\"string\">'%s,'</span> % str(val))</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> isinstance(val, str):</span><br><span class=\"line\">            outputHandler.write(<span class=\"string\">'\\'%s\\','</span> % val)</span><br><span class=\"line\"></span><br><span class=\"line\">        outputHandler.write(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将字典写入lua</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_dict_lua</span><span class=\"params\">(dict_tmp, table_name, file_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type(dict_tmp) != dict):</span><br><span class=\"line\">        print(<span class=\"string\">\"ERROR: only parse dict type!\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    table_file_path = os.path.join(file_path, <span class=\"string\">'%s.lua'</span> % table_name)</span><br><span class=\"line\">    outputHandler = codecs.open(table_file_path, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    outputHandler.write(<span class=\"string\">'\\nlocal %s = &#123;\\n'</span> % table_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    RecursiveSerachDict(<span class=\"number\">1</span>, dict_tmp, outputHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">    outputHandler.write(<span class=\"string\">'&#125;\\n'</span>)</span><br><span class=\"line\">    outputHandler.write(<span class=\"string\">'\\nreturn %s\\n\\n'</span> % table_name)</span><br><span class=\"line\">    outputHandler.close()</span><br></pre></td></tr></table></figure>\n<p>我的输出：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> dict_portal_group = &#123;</span><br><span class=\"line\">\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">335</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">1322</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">140</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">3396</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t[<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">267.9</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">2639.4</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">3</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">-1.2</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">2006</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">8</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t[<span class=\"number\">3</span>] = &#123;</span><br><span class=\"line\">\t\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">6</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t[<span class=\"number\">4</span>] = &#123;</span><br><span class=\"line\">\t\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t\tz = <span class=\"number\">122</span>,</span><br><span class=\"line\">\t\t\tx = <span class=\"number\">968</span>,</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">6</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t[<span class=\"number\">5</span>] = &#123;</span><br><span class=\"line\">\t\t[<span class=\"number\">1</span>] = &#123;</span><br><span class=\"line\">\t\t\tcityId = <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\t\tid = <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t[<span class=\"number\">6</span>] = &#123;</span><br><span class=\"line\">\t\tinfo = &#123;</span><br><span class=\"line\">\t\t\t[<span class=\"number\">123</span>] = <span class=\"number\">123</span>,</span><br><span class=\"line\">\t\t\tage = <span class=\"number\">98</span>,</span><br><span class=\"line\">\t\t\tsex = <span class=\"string\">'man'</span>,</span><br><span class=\"line\">\t\t\thobby = <span class=\"string\">'basketball'</span>,</span><br><span class=\"line\">\t\t\tother = &#123;</span><br><span class=\"line\">\t\t\t\taddr = <span class=\"string\">'China'</span>,</span><br><span class=\"line\">\t\t\t\tid_card = <span class=\"string\">'1234567890abc'</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tname = <span class=\"string\">'ltree98'</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>] = <span class=\"string\">'hello ltree98'</span>,</span><br><span class=\"line\">\t\tid = <span class=\"string\">'12345'</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> dict_portal_group</span><br></pre></td></tr></table></figure>\n<p>嗯，大概就是这样了。</p>\n<p><br></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>首先，就要遵循一个思路，<strong>静态的数据结构尽量不要再游戏过程中动态生成</strong>。<br>然后，前端要负责的东西太多了，<strong>尽量要把这些东西工具化、脚本化</strong>。<br>最后，<strong>代码不止能用，还要能看</strong>。</p>"},{"title":"cocos2d-x 接入 GameCenter 排行榜与成就","date":"2017-04-29T04:13:11.000Z","_content":"\ncocos2d-x 接入 GameCenter 排行榜与成就\n[mac - XCode 8.3 - cocos2d-x lua]\n\n<!-- more -->\n\n<br/>\n\n# 前言\n\n要求接入GameCenter的排行榜和成就。\n\nGameCenter 是苹果推出的一个社交平台，\n它主要提供了以下几个功能：\n- 排行榜\n- 成就\n- 挑战\n\n而且，苹果同时提供了GameKit框架来让GameCenter更易集成。\n可能是因为GameCenter的热度过去了吧，相关的东西都比较早期。\n整理总结了一下，希望对他人有所帮助。\n\n我的环境：\nmac - XCode 8.3 - cocos2d-x lua\n\n<br/>\n\n# 公共的处理\n## 配置 iTunes Connect 排行榜与成就的位置。\n登录iTunes Connect, 找到要处理的APP。\n选择 功能->GameCenter\n可以看到三个大项：\n- 移动群组\n- 排行榜\n- 成就\n\n## 添加GameKit框架\n打开项目工程，将 Capabilities 的 GameCenter 打开。\n这样，XCode就会将GameKit框架加到我们的工程中。\n\n## 登录GameCenter\n登录GameCenter:  【这个步骤在我们加载完游戏时进行即可】\n\n```objectivec\n        -(void) authenticateLocalPlayer {\n            // 获取本地用户\n            GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];\n        \n            // 认证登录\n            localPlayer.authenticateHandler = ^(UIViewController *viewController, NSError *error) {\n                [self setLastError:error];\n        \n                if (localPlayer.authenticated) {                        // 本地用户已经登录\n                    _gameCenterFeaturesEnabled = YES;                   // 此变量是判断是否已经登录上GameCenter\n                } else if(viewController) {                             // 没有用户，弹出登录界面\n                    [self presentViewController:viewController];        \n                } else {                                                // 没有用户，并且没有登录界面\n                    _gameCenterFeaturesEnabled = NO;\n                }\n            };\n        }\n```\n\n## 关于lua调用object-c\n因为我的环境是 cocos2d-x lua，所以，用通过lua来调用object-c。\ncocos2d-x其实已经有相关的调用结构 —— LuaObjcBridge, 可以直接用 callStaticMethod来调用：\n\n```lua\n        LuaObjcBridge.callStaticMethod(methodName className,args)\n```\n\n## GameKit辅助处理类\nGameKitHelper.h:\n\n\n```objectivec\n        #import <GameKit/GameKit.h>\n        #import \"cocos2d.h\"\n        \n        // 方便lua调用\n        #include \"CCLuaEngine.h\"\n        #include \"CCLuaBridge.h\"\n        \n        @interface GameKitHelper : NSObject\n        // 处理错误\n        @property (nonatomic, readonly) NSError* lastError;\n        \n        // 初始化\n        + (id) sharedGameKitHelper;\n        \n        // Player authentication, info\n        -(void) authenticateLocalPlayer;\n        @end\n```\n\n\nGameKitHelper.mm\n\n```objectivec\n        #import \"GameKitHelper.h\"\n        \n        @interface GameKitHelper ()\n                <GKGameCenterControllerDelegate> {\n            BOOL _gameCenterFeaturesEnabled;\n        }\n        @end\n        \n        @implementation GameKitHelper\n        \n        #pragma mark Singleton stuff\n        \n        +(id) sharedGameKitHelper {\n            static GameKitHelper *sharedGameKitHelper;\n            static dispatch_once_t onceToken;\n            dispatch_once(&onceToken, ^{\n                sharedGameKitHelper =\n                        [[GameKitHelper alloc] init];\n            });\n            return sharedGameKitHelper;\n        }\n        \n        #pragma mark Player Authentication\n        \n        -(void) authenticateLocalPlayer {\n            GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];\n        \n            localPlayer.authenticateHandler = ^(UIViewController *viewController, NSError *error) {\n                [self setLastError:error];\n                if (localPlayer.authenticated) {\n                    _gameCenterFeaturesEnabled = YES;\n                } else if(viewController) {\n                    [self presentViewController:viewController];\n                } else {\n                    _gameCenterFeaturesEnabled = NO;\n                }\n            };\n        }\n        \n        #pragma mark Property setters\n        \n        -(void) setLastError:(NSError*)error {\n            _lastError = [error copy];\n            if (_lastError) {\n                NSLog(@\"GameCenter -- setLastError -- ERROR: %@\", [[_lastError userInfo] \n                  description]);\n            }\n        }\n        \n        #pragma mark UIViewController stuff\n        \n        -(UIViewController*) getRootViewController {\n            return [UIApplication \n              sharedApplication].keyWindow.rootViewController;\n        }\n        \n        -(void)presentViewController:(UIViewController*)vc {\n            UIViewController* rootVC = [self getRootViewController];\n            [rootVC presentViewController:vc animated:YES \n              completion:nil];\n        }\n        \n        @end\n```\n\n## 登录GameCenter时机\n由你决定，可以放在 AppDelegate 中 applicationDidFinishLaunching时。\n\n<br/>\n\n# 关于排行榜\n## 配置 iTunes Connect\n\n在iTunes Connect 找到 排行榜。\n\n简单说一下流程吧：\n配置排行榜的结构，然后我们在游戏中将数据上传到这个结构，最后显示到GameCenter中。\n\n排行榜分为 单个排行榜 与 组合排行榜。(顾名思义，区别就不需要解释了吧？)\n里面需要配置的相应属性，可参考本文末尾的关于。\n\n要注意两点：\n1. 排行榜ID，因为只有它是在创建后无法更改的。（而且，要记住这个ID，因为后面程序要用到）\n2. 排行榜只要发布了（经过审批发布），就无法删除了。\n\n接下来就看属性去配置它吧。\n\n## XCode工程配置\n\n模拟这个流程：登录GameCenter -> 提交排行榜数据 ( -> 如果需要，弹出GameCenter排行榜)\n提交排行榜数据:\n\n```objectivec\n        -(void) submitScore:(int64_t)score category:(NSString*)category {       // 这里两个参数 score是数据， category是ID，就是我们创建排行榜以后，不可更改的那个ID。\n            // 检查是否在登录状态\n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitScore -- Player not authenticated\");\n                return;\n            }\n        \n            // 创建一个分数对象\n            GKScore* gkScore = [[GKScore alloc] initWithCategory:category];\n        \n            // 设置分数对象的值\n            gkScore.value = score;\n        \n            // 向GameCenter提交数据\n            [gkScore reportScoreWithCompletionHandler: ^(NSError* error)    {\n                [self setLastError:error];\n            }];\n        }\n```\n\n## 实践使用\n在公用部分，已经添加了GameCenter的登录验证相关的东西了。\n* 将排行榜数据提交的函数\n\nGameKitHelper.h\n\n```objectivec\n        -(void) submitScore:(int64_t)score category:(NSString*)category;\n```\n\nGameKitHelper.mm\n\n```objectivec\n        -(void) submitScore:(int64_t)score category:(NSString*)category {\n        \n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitScore -- Player not authenticated\");\n                return;\n            }\n        \n            GKScore* gkScore = [[GKScore alloc] initWithCategory:category];\n        \n            gkScore.value = score;\n        \n            [gkScore reportScoreWithCompletionHandler: ^(NSError* error)    {\n                [self setLastError:error];\n            }];\n        }\n```\n\n* 给lua调用的函数\n\nGameKitHelper.h\n\n```objectivec\n        +(void) getScore:(NSDictionary *)dict;\n```\n\nGameKitHelper.mm\n\n```objectivec\n        +(void) getScore:(NSDictionary *)dict {\n            NSString* rID = [dict objectForKey:@\"id\"];\n            int score = [[dict objectForKey:@\"score\"] intValue];\n            \n            [[GameKitHelper sharedGameKitHelper] submitScore:(int64_t)score category:rID];\n        }\n```\n\n\n* lua调用\n\n```lua\n        LuaObjcBridge.callStaticMethod(\"GameKitHelper\", \"getScore\", {id = 排行榜的ID, score = 分数值})\n```\n\n<br/>\n\n# 关于成就\n## 配置 iTunes Connect\n\n还是老位置，之前看的排行榜，这次点成就。\n还是老样子，成就的ID，创建后不可修改，成就发布后不可删除。\n但是，成就还要多一点，就是每个游戏总共有2000点成就分（为什么是2000？你问老乔去。。），你可以给每个成就分配一些成就分。\n成就还有是否隐藏的选项，但是它的隐藏并不是看不到这个成就了，而是有一个成就名称为隐藏的成就显示在列表中。\n还有，它的进度是一个顺时针扇形来表示，就是你的图标刚开始是被遮掩的，随着进度的增加，会逐渐显现出图标，方向是顺时针扇形。\n\n其他相关参数，可参考本文末尾的关于。\n\n## XCode工程配置\n流程与排行榜的一样，但是这次提交的不是分数了，而是成就完成的百分比。\n\n```objectivec\n        // 提交成就数据\n        -(void) submitAchievment:(NSString *)identifier percent:(double) percentComplete {          // identifier 成就ID, percentComplete: 成就完成百分比\n            // 判断登录认证\n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitAchievment -- Player not authenticated\");\n                return;\n            }\n        \n            // 创建成就结构，注入成就ID\n            GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  \n            \n            // 设置成就百分比\n            [achievement setPercentComplete:percentComplete];  \n            \n            // 提交成就数据\n            [achievement reportAchievementWithCompletionHandler:^(NSError *error) {  \n                if(error != nil){  \n                    NSLog(@\"GameCenter -- submitAchievment --  error:%@\", [error localizedDescription]);  \n                }else{  \n                    NSLog(@\"GameCenter -- submitAchievment --  提交成就成功\");  \n                }  \n            }];  \n        } \n```\n\n## 实践使用\n同排行榜一样。\n* 将成就数据提交的函数\n\nGameKitHelper.h\n\n```objectivec\n        - (void)submitAchievment:(NSString *)identifier percent:(double)percentComplete;\n```\n\nGameKitHelper.mm\n\n```objectivec\n        -(void) submitAchievment:(NSString *)identifier percent:(double) percentComplete {\n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitAchievment -- Player not authenticated\");\n                return;\n            }\n        \n            GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  \n              \n            [achievement setPercentComplete:percentComplete];  \n              \n            [achievement reportAchievementWithCompletionHandler:^(NSError *error) {  \n                if(error != nil){  \n                    NSLog(@\"GameCenter -- submitAchievment --  error:%@\", [error localizedDescription]);  \n                }else{  \n                    NSLog(@\"GameCenter -- submitAchievment --  提交成就成功\");  \n                }  \n            }];  \n        } \n```\n\n* 给lua调用的函数\n\nGameKitHelper.h\n\n```objectivec\n        +(void) getAchievement:(NSDictionary *)dict;\n```\n\nGameKitHelper.mm\n\n```objectivec\n        +(void) getAchievement:(NSDictionary *)dict {\n            NSString* aID = [dict objectForKey:@\"id\"];\n            double percent = [[dict objectForKey:@\"percent\"] doubleValue];\n            \n            [[GameKitHelper sharedGameKitHelper] submitAchievment:(NSString *)aID percent:percent];\n        }\n```\n\n\n* lua调用\n\n```lua        \n        LuaObjcBridge.callStaticMethod(\"GameKitHelper\", \"getAchievement\", {id = 成就ID, percent = 成就百分比})\n```\n\n<br/>\n\n# 最后\nGameCenter还是挺好的一个东西。\n它还有一个好友挑战功能，但这个主要适合之前 Flappy Bird，别踩白块 那些游戏来弄。\n或许，这也是这个平台没落了的原因吧。\n\n\n<br/>\n<br/>\n<br/>\n\n---\n\n1. 关于\n\n- [关于 LuaObjcBridge](http://www.cocos2d-x.org/reference/native-cpp/V3.5/d6/d59/classcocos2d_1_1_lua_objc_bridge.html)\n- [关于 iTunes Connect](https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide_zh_CN/Chapters/About.html#//apple_ref/doc/uid/TP40016325-CH1-SW1)\n- [中文版 排行榜及成就 配置属性](https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectGameCenter_Guide_SCh/Chapters/Leaderboards.html#//apple_ref/doc/uid/TP40014490-CH2-SW1)\n\n<br/>\n\n2. 参考\n\n- https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6\n- http://www.jianshu.com/p/4279f84d8340\n- http://blog.csdn.net/shenjie12345678/article/details/45025403/\n","source":"_posts/cocos2d-x 接入 GameCenter 排行榜与成就.md","raw":"---\ntitle: cocos2d-x 接入 GameCenter 排行榜与成就\ndate: 2017-04-29 12:13:11\ntags: [cocos2d, 想就做]\n\n---\n\ncocos2d-x 接入 GameCenter 排行榜与成就\n[mac - XCode 8.3 - cocos2d-x lua]\n\n<!-- more -->\n\n<br/>\n\n# 前言\n\n要求接入GameCenter的排行榜和成就。\n\nGameCenter 是苹果推出的一个社交平台，\n它主要提供了以下几个功能：\n- 排行榜\n- 成就\n- 挑战\n\n而且，苹果同时提供了GameKit框架来让GameCenter更易集成。\n可能是因为GameCenter的热度过去了吧，相关的东西都比较早期。\n整理总结了一下，希望对他人有所帮助。\n\n我的环境：\nmac - XCode 8.3 - cocos2d-x lua\n\n<br/>\n\n# 公共的处理\n## 配置 iTunes Connect 排行榜与成就的位置。\n登录iTunes Connect, 找到要处理的APP。\n选择 功能->GameCenter\n可以看到三个大项：\n- 移动群组\n- 排行榜\n- 成就\n\n## 添加GameKit框架\n打开项目工程，将 Capabilities 的 GameCenter 打开。\n这样，XCode就会将GameKit框架加到我们的工程中。\n\n## 登录GameCenter\n登录GameCenter:  【这个步骤在我们加载完游戏时进行即可】\n\n```objectivec\n        -(void) authenticateLocalPlayer {\n            // 获取本地用户\n            GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];\n        \n            // 认证登录\n            localPlayer.authenticateHandler = ^(UIViewController *viewController, NSError *error) {\n                [self setLastError:error];\n        \n                if (localPlayer.authenticated) {                        // 本地用户已经登录\n                    _gameCenterFeaturesEnabled = YES;                   // 此变量是判断是否已经登录上GameCenter\n                } else if(viewController) {                             // 没有用户，弹出登录界面\n                    [self presentViewController:viewController];        \n                } else {                                                // 没有用户，并且没有登录界面\n                    _gameCenterFeaturesEnabled = NO;\n                }\n            };\n        }\n```\n\n## 关于lua调用object-c\n因为我的环境是 cocos2d-x lua，所以，用通过lua来调用object-c。\ncocos2d-x其实已经有相关的调用结构 —— LuaObjcBridge, 可以直接用 callStaticMethod来调用：\n\n```lua\n        LuaObjcBridge.callStaticMethod(methodName className,args)\n```\n\n## GameKit辅助处理类\nGameKitHelper.h:\n\n\n```objectivec\n        #import <GameKit/GameKit.h>\n        #import \"cocos2d.h\"\n        \n        // 方便lua调用\n        #include \"CCLuaEngine.h\"\n        #include \"CCLuaBridge.h\"\n        \n        @interface GameKitHelper : NSObject\n        // 处理错误\n        @property (nonatomic, readonly) NSError* lastError;\n        \n        // 初始化\n        + (id) sharedGameKitHelper;\n        \n        // Player authentication, info\n        -(void) authenticateLocalPlayer;\n        @end\n```\n\n\nGameKitHelper.mm\n\n```objectivec\n        #import \"GameKitHelper.h\"\n        \n        @interface GameKitHelper ()\n                <GKGameCenterControllerDelegate> {\n            BOOL _gameCenterFeaturesEnabled;\n        }\n        @end\n        \n        @implementation GameKitHelper\n        \n        #pragma mark Singleton stuff\n        \n        +(id) sharedGameKitHelper {\n            static GameKitHelper *sharedGameKitHelper;\n            static dispatch_once_t onceToken;\n            dispatch_once(&onceToken, ^{\n                sharedGameKitHelper =\n                        [[GameKitHelper alloc] init];\n            });\n            return sharedGameKitHelper;\n        }\n        \n        #pragma mark Player Authentication\n        \n        -(void) authenticateLocalPlayer {\n            GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];\n        \n            localPlayer.authenticateHandler = ^(UIViewController *viewController, NSError *error) {\n                [self setLastError:error];\n                if (localPlayer.authenticated) {\n                    _gameCenterFeaturesEnabled = YES;\n                } else if(viewController) {\n                    [self presentViewController:viewController];\n                } else {\n                    _gameCenterFeaturesEnabled = NO;\n                }\n            };\n        }\n        \n        #pragma mark Property setters\n        \n        -(void) setLastError:(NSError*)error {\n            _lastError = [error copy];\n            if (_lastError) {\n                NSLog(@\"GameCenter -- setLastError -- ERROR: %@\", [[_lastError userInfo] \n                  description]);\n            }\n        }\n        \n        #pragma mark UIViewController stuff\n        \n        -(UIViewController*) getRootViewController {\n            return [UIApplication \n              sharedApplication].keyWindow.rootViewController;\n        }\n        \n        -(void)presentViewController:(UIViewController*)vc {\n            UIViewController* rootVC = [self getRootViewController];\n            [rootVC presentViewController:vc animated:YES \n              completion:nil];\n        }\n        \n        @end\n```\n\n## 登录GameCenter时机\n由你决定，可以放在 AppDelegate 中 applicationDidFinishLaunching时。\n\n<br/>\n\n# 关于排行榜\n## 配置 iTunes Connect\n\n在iTunes Connect 找到 排行榜。\n\n简单说一下流程吧：\n配置排行榜的结构，然后我们在游戏中将数据上传到这个结构，最后显示到GameCenter中。\n\n排行榜分为 单个排行榜 与 组合排行榜。(顾名思义，区别就不需要解释了吧？)\n里面需要配置的相应属性，可参考本文末尾的关于。\n\n要注意两点：\n1. 排行榜ID，因为只有它是在创建后无法更改的。（而且，要记住这个ID，因为后面程序要用到）\n2. 排行榜只要发布了（经过审批发布），就无法删除了。\n\n接下来就看属性去配置它吧。\n\n## XCode工程配置\n\n模拟这个流程：登录GameCenter -> 提交排行榜数据 ( -> 如果需要，弹出GameCenter排行榜)\n提交排行榜数据:\n\n```objectivec\n        -(void) submitScore:(int64_t)score category:(NSString*)category {       // 这里两个参数 score是数据， category是ID，就是我们创建排行榜以后，不可更改的那个ID。\n            // 检查是否在登录状态\n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitScore -- Player not authenticated\");\n                return;\n            }\n        \n            // 创建一个分数对象\n            GKScore* gkScore = [[GKScore alloc] initWithCategory:category];\n        \n            // 设置分数对象的值\n            gkScore.value = score;\n        \n            // 向GameCenter提交数据\n            [gkScore reportScoreWithCompletionHandler: ^(NSError* error)    {\n                [self setLastError:error];\n            }];\n        }\n```\n\n## 实践使用\n在公用部分，已经添加了GameCenter的登录验证相关的东西了。\n* 将排行榜数据提交的函数\n\nGameKitHelper.h\n\n```objectivec\n        -(void) submitScore:(int64_t)score category:(NSString*)category;\n```\n\nGameKitHelper.mm\n\n```objectivec\n        -(void) submitScore:(int64_t)score category:(NSString*)category {\n        \n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitScore -- Player not authenticated\");\n                return;\n            }\n        \n            GKScore* gkScore = [[GKScore alloc] initWithCategory:category];\n        \n            gkScore.value = score;\n        \n            [gkScore reportScoreWithCompletionHandler: ^(NSError* error)    {\n                [self setLastError:error];\n            }];\n        }\n```\n\n* 给lua调用的函数\n\nGameKitHelper.h\n\n```objectivec\n        +(void) getScore:(NSDictionary *)dict;\n```\n\nGameKitHelper.mm\n\n```objectivec\n        +(void) getScore:(NSDictionary *)dict {\n            NSString* rID = [dict objectForKey:@\"id\"];\n            int score = [[dict objectForKey:@\"score\"] intValue];\n            \n            [[GameKitHelper sharedGameKitHelper] submitScore:(int64_t)score category:rID];\n        }\n```\n\n\n* lua调用\n\n```lua\n        LuaObjcBridge.callStaticMethod(\"GameKitHelper\", \"getScore\", {id = 排行榜的ID, score = 分数值})\n```\n\n<br/>\n\n# 关于成就\n## 配置 iTunes Connect\n\n还是老位置，之前看的排行榜，这次点成就。\n还是老样子，成就的ID，创建后不可修改，成就发布后不可删除。\n但是，成就还要多一点，就是每个游戏总共有2000点成就分（为什么是2000？你问老乔去。。），你可以给每个成就分配一些成就分。\n成就还有是否隐藏的选项，但是它的隐藏并不是看不到这个成就了，而是有一个成就名称为隐藏的成就显示在列表中。\n还有，它的进度是一个顺时针扇形来表示，就是你的图标刚开始是被遮掩的，随着进度的增加，会逐渐显现出图标，方向是顺时针扇形。\n\n其他相关参数，可参考本文末尾的关于。\n\n## XCode工程配置\n流程与排行榜的一样，但是这次提交的不是分数了，而是成就完成的百分比。\n\n```objectivec\n        // 提交成就数据\n        -(void) submitAchievment:(NSString *)identifier percent:(double) percentComplete {          // identifier 成就ID, percentComplete: 成就完成百分比\n            // 判断登录认证\n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitAchievment -- Player not authenticated\");\n                return;\n            }\n        \n            // 创建成就结构，注入成就ID\n            GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  \n            \n            // 设置成就百分比\n            [achievement setPercentComplete:percentComplete];  \n            \n            // 提交成就数据\n            [achievement reportAchievementWithCompletionHandler:^(NSError *error) {  \n                if(error != nil){  \n                    NSLog(@\"GameCenter -- submitAchievment --  error:%@\", [error localizedDescription]);  \n                }else{  \n                    NSLog(@\"GameCenter -- submitAchievment --  提交成就成功\");  \n                }  \n            }];  \n        } \n```\n\n## 实践使用\n同排行榜一样。\n* 将成就数据提交的函数\n\nGameKitHelper.h\n\n```objectivec\n        - (void)submitAchievment:(NSString *)identifier percent:(double)percentComplete;\n```\n\nGameKitHelper.mm\n\n```objectivec\n        -(void) submitAchievment:(NSString *)identifier percent:(double) percentComplete {\n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitAchievment -- Player not authenticated\");\n                return;\n            }\n        \n            GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  \n              \n            [achievement setPercentComplete:percentComplete];  \n              \n            [achievement reportAchievementWithCompletionHandler:^(NSError *error) {  \n                if(error != nil){  \n                    NSLog(@\"GameCenter -- submitAchievment --  error:%@\", [error localizedDescription]);  \n                }else{  \n                    NSLog(@\"GameCenter -- submitAchievment --  提交成就成功\");  \n                }  \n            }];  \n        } \n```\n\n* 给lua调用的函数\n\nGameKitHelper.h\n\n```objectivec\n        +(void) getAchievement:(NSDictionary *)dict;\n```\n\nGameKitHelper.mm\n\n```objectivec\n        +(void) getAchievement:(NSDictionary *)dict {\n            NSString* aID = [dict objectForKey:@\"id\"];\n            double percent = [[dict objectForKey:@\"percent\"] doubleValue];\n            \n            [[GameKitHelper sharedGameKitHelper] submitAchievment:(NSString *)aID percent:percent];\n        }\n```\n\n\n* lua调用\n\n```lua        \n        LuaObjcBridge.callStaticMethod(\"GameKitHelper\", \"getAchievement\", {id = 成就ID, percent = 成就百分比})\n```\n\n<br/>\n\n# 最后\nGameCenter还是挺好的一个东西。\n它还有一个好友挑战功能，但这个主要适合之前 Flappy Bird，别踩白块 那些游戏来弄。\n或许，这也是这个平台没落了的原因吧。\n\n\n<br/>\n<br/>\n<br/>\n\n---\n\n1. 关于\n\n- [关于 LuaObjcBridge](http://www.cocos2d-x.org/reference/native-cpp/V3.5/d6/d59/classcocos2d_1_1_lua_objc_bridge.html)\n- [关于 iTunes Connect](https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide_zh_CN/Chapters/About.html#//apple_ref/doc/uid/TP40016325-CH1-SW1)\n- [中文版 排行榜及成就 配置属性](https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectGameCenter_Guide_SCh/Chapters/Leaderboards.html#//apple_ref/doc/uid/TP40014490-CH2-SW1)\n\n<br/>\n\n2. 参考\n\n- https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6\n- http://www.jianshu.com/p/4279f84d8340\n- http://blog.csdn.net/shenjie12345678/article/details/45025403/\n","slug":"cocos2d-x 接入 GameCenter 排行榜与成就","published":1,"updated":"2018-07-19T17:26:29.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbc8000oesvq8qrl7gat","content":"<p>cocos2d-x 接入 GameCenter 排行榜与成就<br>[mac - XCode 8.3 - cocos2d-x lua]</p>\n<a id=\"more\"></a>\n<p><br></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>要求接入GameCenter的排行榜和成就。</p>\n<p>GameCenter 是苹果推出的一个社交平台，<br>它主要提供了以下几个功能：</p>\n<ul>\n<li>排行榜</li>\n<li>成就</li>\n<li>挑战</li>\n</ul>\n<p>而且，苹果同时提供了GameKit框架来让GameCenter更易集成。<br>可能是因为GameCenter的热度过去了吧，相关的东西都比较早期。<br>整理总结了一下，希望对他人有所帮助。</p>\n<p>我的环境：<br>mac - XCode 8.3 - cocos2d-x lua</p>\n<p><br></p>\n<h1 id=\"公共的处理\"><a href=\"#公共的处理\" class=\"headerlink\" title=\"公共的处理\"></a>公共的处理</h1><h2 id=\"配置-iTunes-Connect-排行榜与成就的位置。\"><a href=\"#配置-iTunes-Connect-排行榜与成就的位置。\" class=\"headerlink\" title=\"配置 iTunes Connect 排行榜与成就的位置。\"></a>配置 iTunes Connect 排行榜与成就的位置。</h2><p>登录iTunes Connect, 找到要处理的APP。<br>选择 功能-&gt;GameCenter<br>可以看到三个大项：</p>\n<ul>\n<li>移动群组</li>\n<li>排行榜</li>\n<li>成就</li>\n</ul>\n<h2 id=\"添加GameKit框架\"><a href=\"#添加GameKit框架\" class=\"headerlink\" title=\"添加GameKit框架\"></a>添加GameKit框架</h2><p>打开项目工程，将 Capabilities 的 GameCenter 打开。<br>这样，XCode就会将GameKit框架加到我们的工程中。</p>\n<h2 id=\"登录GameCenter\"><a href=\"#登录GameCenter\" class=\"headerlink\" title=\"登录GameCenter\"></a>登录GameCenter</h2><p>登录GameCenter:  【这个步骤在我们加载完游戏时进行即可】</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>) authenticateLocalPlayer &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取本地用户</span></span><br><span class=\"line\">    GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 认证登录</span></span><br><span class=\"line\">    localPlayer.authenticateHandler = ^(<span class=\"built_in\">UIViewController</span> *viewController, <span class=\"built_in\">NSError</span> *error) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> setLastError:error];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (localPlayer.authenticated) &#123;                        <span class=\"comment\">// 本地用户已经登录</span></span><br><span class=\"line\">            _gameCenterFeaturesEnabled = <span class=\"literal\">YES</span>;                   <span class=\"comment\">// 此变量是判断是否已经登录上GameCenter</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(viewController) &#123;                             <span class=\"comment\">// 没有用户，弹出登录界面</span></span><br><span class=\"line\">            [<span class=\"keyword\">self</span> presentViewController:viewController];        </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;                                                <span class=\"comment\">// 没有用户，并且没有登录界面</span></span><br><span class=\"line\">            _gameCenterFeaturesEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于lua调用object-c\"><a href=\"#关于lua调用object-c\" class=\"headerlink\" title=\"关于lua调用object-c\"></a>关于lua调用object-c</h2><p>因为我的环境是 cocos2d-x lua，所以，用通过lua来调用object-c。<br>cocos2d-x其实已经有相关的调用结构 —— LuaObjcBridge, 可以直接用 callStaticMethod来调用：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LuaObjcBridge.callStaticMethod(methodName className,args)</span><br></pre></td></tr></table></figure>\n<h2 id=\"GameKit辅助处理类\"><a href=\"#GameKit辅助处理类\" class=\"headerlink\" title=\"GameKit辅助处理类\"></a>GameKit辅助处理类</h2><p>GameKitHelper.h:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;GameKit/GameKit.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"cocos2d.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方便lua调用</span></span><br><span class=\"line\"><span class=\"meta\">#include <span class=\"meta-string\">\"CCLuaEngine.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#include <span class=\"meta-string\">\"CCLuaBridge.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GameKitHelper</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"comment\">// 处理错误</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSError</span>* lastError;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">+ (<span class=\"keyword\">id</span>) sharedGameKitHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Player authentication, info</span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) authenticateLocalPlayer;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>GameKitHelper.mm</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"GameKitHelper.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GameKitHelper</span> ()</span></span><br><span class=\"line\">        &lt;GKGameCenterControllerDelegate&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">BOOL</span> _gameCenterFeaturesEnabled;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GameKitHelper</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#pragma mark Singleton stuff</span></span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"keyword\">id</span>) sharedGameKitHelper &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> GameKitHelper *sharedGameKitHelper;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        sharedGameKitHelper =</span><br><span class=\"line\">                [[GameKitHelper alloc] init];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sharedGameKitHelper;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#pragma mark Player Authentication</span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) authenticateLocalPlayer &#123;</span><br><span class=\"line\">    GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];</span><br><span class=\"line\"></span><br><span class=\"line\">    localPlayer.authenticateHandler = ^(<span class=\"built_in\">UIViewController</span> *viewController, <span class=\"built_in\">NSError</span> *error) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> setLastError:error];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (localPlayer.authenticated) &#123;</span><br><span class=\"line\">            _gameCenterFeaturesEnabled = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(viewController) &#123;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> presentViewController:viewController];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            _gameCenterFeaturesEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#pragma mark Property setters</span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) setLastError:(<span class=\"built_in\">NSError</span>*)error &#123;</span><br><span class=\"line\">    _lastError = [error <span class=\"keyword\">copy</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_lastError) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- setLastError -- ERROR: %@\"</span>, [[_lastError userInfo] </span><br><span class=\"line\">          description]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#pragma mark UIViewController stuff</span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"built_in\">UIViewController</span>*) getRootViewController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">UIApplication</span> </span><br><span class=\"line\">      sharedApplication].keyWindow.rootViewController;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)presentViewController:(<span class=\"built_in\">UIViewController</span>*)vc &#123;</span><br><span class=\"line\">    <span class=\"built_in\">UIViewController</span>* rootVC = [<span class=\"keyword\">self</span> getRootViewController];</span><br><span class=\"line\">    [rootVC presentViewController:vc animated:<span class=\"literal\">YES</span> </span><br><span class=\"line\">      completion:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"登录GameCenter时机\"><a href=\"#登录GameCenter时机\" class=\"headerlink\" title=\"登录GameCenter时机\"></a>登录GameCenter时机</h2><p>由你决定，可以放在 AppDelegate 中 applicationDidFinishLaunching时。</p>\n<p><br></p>\n<h1 id=\"关于排行榜\"><a href=\"#关于排行榜\" class=\"headerlink\" title=\"关于排行榜\"></a>关于排行榜</h1><h2 id=\"配置-iTunes-Connect\"><a href=\"#配置-iTunes-Connect\" class=\"headerlink\" title=\"配置 iTunes Connect\"></a>配置 iTunes Connect</h2><p>在iTunes Connect 找到 排行榜。</p>\n<p>简单说一下流程吧：<br>配置排行榜的结构，然后我们在游戏中将数据上传到这个结构，最后显示到GameCenter中。</p>\n<p>排行榜分为 单个排行榜 与 组合排行榜。(顾名思义，区别就不需要解释了吧？)<br>里面需要配置的相应属性，可参考本文末尾的关于。</p>\n<p>要注意两点：</p>\n<ol>\n<li>排行榜ID，因为只有它是在创建后无法更改的。（而且，要记住这个ID，因为后面程序要用到）</li>\n<li>排行榜只要发布了（经过审批发布），就无法删除了。</li>\n</ol>\n<p>接下来就看属性去配置它吧。</p>\n<h2 id=\"XCode工程配置\"><a href=\"#XCode工程配置\" class=\"headerlink\" title=\"XCode工程配置\"></a>XCode工程配置</h2><p>模拟这个流程：登录GameCenter -&gt; 提交排行榜数据 ( -&gt; 如果需要，弹出GameCenter排行榜)<br>提交排行榜数据:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>) submitScore:(int64_t)score category:(<span class=\"built_in\">NSString</span>*)category &#123;       <span class=\"comment\">// 这里两个参数 score是数据， category是ID，就是我们创建排行榜以后，不可更改的那个ID。</span></span><br><span class=\"line\">    <span class=\"comment\">// 检查是否在登录状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_gameCenterFeaturesEnabled)    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitScore -- Player not authenticated\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个分数对象</span></span><br><span class=\"line\">    GKScore* gkScore = [[GKScore alloc] initWithCategory:category];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置分数对象的值</span></span><br><span class=\"line\">    gkScore.value = score;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向GameCenter提交数据</span></span><br><span class=\"line\">    [gkScore reportScoreWithCompletionHandler: ^(<span class=\"built_in\">NSError</span>* error)    &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> setLastError:error];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实践使用\"><a href=\"#实践使用\" class=\"headerlink\" title=\"实践使用\"></a>实践使用</h2><p>在公用部分，已经添加了GameCenter的登录验证相关的东西了。</p>\n<ul>\n<li>将排行榜数据提交的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>) submitScore:(int64_t)score category:(<span class=\"built_in\">NSString</span>*)category;</span><br></pre></td></tr></table></figure>\n<p>GameKitHelper.mm</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>) submitScore:(int64_t)score category:(<span class=\"built_in\">NSString</span>*)category &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_gameCenterFeaturesEnabled)    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitScore -- Player not authenticated\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    GKScore* gkScore = [[GKScore alloc] initWithCategory:category];</span><br><span class=\"line\"></span><br><span class=\"line\">    gkScore.value = score;</span><br><span class=\"line\"></span><br><span class=\"line\">    [gkScore reportScoreWithCompletionHandler: ^(<span class=\"built_in\">NSError</span>* error)    &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> setLastError:error];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>给lua调用的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(<span class=\"keyword\">void</span>) getScore:(<span class=\"built_in\">NSDictionary</span> *)dict;</span><br></pre></td></tr></table></figure>\n<p>GameKitHelper.mm</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(<span class=\"keyword\">void</span>) getScore:(<span class=\"built_in\">NSDictionary</span> *)dict &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span>* rID = [dict objectForKey:<span class=\"string\">@\"id\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> score = [[dict objectForKey:<span class=\"string\">@\"score\"</span>] intValue];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [[GameKitHelper sharedGameKitHelper] submitScore:(int64_t)score category:rID];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>lua调用</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LuaObjcBridge.callStaticMethod(<span class=\"string\">\"GameKitHelper\"</span>, <span class=\"string\">\"getScore\"</span>, &#123;id = 排行榜的ID, score = 分数值&#125;)</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"关于成就\"><a href=\"#关于成就\" class=\"headerlink\" title=\"关于成就\"></a>关于成就</h1><h2 id=\"配置-iTunes-Connect-1\"><a href=\"#配置-iTunes-Connect-1\" class=\"headerlink\" title=\"配置 iTunes Connect\"></a>配置 iTunes Connect</h2><p>还是老位置，之前看的排行榜，这次点成就。<br>还是老样子，成就的ID，创建后不可修改，成就发布后不可删除。<br>但是，成就还要多一点，就是每个游戏总共有2000点成就分（为什么是2000？你问老乔去。。），你可以给每个成就分配一些成就分。<br>成就还有是否隐藏的选项，但是它的隐藏并不是看不到这个成就了，而是有一个成就名称为隐藏的成就显示在列表中。<br>还有，它的进度是一个顺时针扇形来表示，就是你的图标刚开始是被遮掩的，随着进度的增加，会逐渐显现出图标，方向是顺时针扇形。</p>\n<p>其他相关参数，可参考本文末尾的关于。</p>\n<h2 id=\"XCode工程配置-1\"><a href=\"#XCode工程配置-1\" class=\"headerlink\" title=\"XCode工程配置\"></a>XCode工程配置</h2><p>流程与排行榜的一样，但是这次提交的不是分数了，而是成就完成的百分比。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提交成就数据</span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) submitAchievment:(<span class=\"built_in\">NSString</span> *)identifier percent:(<span class=\"keyword\">double</span>) percentComplete &#123;          <span class=\"comment\">// identifier 成就ID, percentComplete: 成就完成百分比</span></span><br><span class=\"line\">    <span class=\"comment\">// 判断登录认证</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_gameCenterFeaturesEnabled)    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitAchievment -- Player not authenticated\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建成就结构，注入成就ID</span></span><br><span class=\"line\">    GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 设置成就百分比</span></span><br><span class=\"line\">    [achievement setPercentComplete:percentComplete];  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 提交成就数据</span></span><br><span class=\"line\">    [achievement reportAchievementWithCompletionHandler:^(<span class=\"built_in\">NSError</span> *error) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(error != <span class=\"literal\">nil</span>)&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitAchievment --  error:%@\"</span>, [error localizedDescription]);  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitAchievment --  提交成就成功\"</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;];  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实践使用-1\"><a href=\"#实践使用-1\" class=\"headerlink\" title=\"实践使用\"></a>实践使用</h2><p>同排行榜一样。</p>\n<ul>\n<li>将成就数据提交的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)submitAchievment:(<span class=\"built_in\">NSString</span> *)identifier percent:(<span class=\"keyword\">double</span>)percentComplete;</span><br></pre></td></tr></table></figure>\n<p>GameKitHelper.mm</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>) submitAchievment:(<span class=\"built_in\">NSString</span> *)identifier percent:(<span class=\"keyword\">double</span>) percentComplete &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_gameCenterFeaturesEnabled)    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitAchievment -- Player not authenticated\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  </span><br><span class=\"line\">      </span><br><span class=\"line\">    [achievement setPercentComplete:percentComplete];  </span><br><span class=\"line\">      </span><br><span class=\"line\">    [achievement reportAchievementWithCompletionHandler:^(<span class=\"built_in\">NSError</span> *error) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(error != <span class=\"literal\">nil</span>)&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitAchievment --  error:%@\"</span>, [error localizedDescription]);  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitAchievment --  提交成就成功\"</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;];  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>给lua调用的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(<span class=\"keyword\">void</span>) getAchievement:(<span class=\"built_in\">NSDictionary</span> *)dict;</span><br></pre></td></tr></table></figure>\n<p>GameKitHelper.mm</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(<span class=\"keyword\">void</span>) getAchievement:(<span class=\"built_in\">NSDictionary</span> *)dict &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span>* aID = [dict objectForKey:<span class=\"string\">@\"id\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> percent = [[dict objectForKey:<span class=\"string\">@\"percent\"</span>] doubleValue];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [[GameKitHelper sharedGameKitHelper] submitAchievment:(<span class=\"built_in\">NSString</span> *)aID percent:percent];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>lua调用</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LuaObjcBridge.callStaticMethod(<span class=\"string\">\"GameKitHelper\"</span>, <span class=\"string\">\"getAchievement\"</span>, &#123;id = 成就ID, percent = 成就百分比&#125;)</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>GameCenter还是挺好的一个东西。<br>它还有一个好友挑战功能，但这个主要适合之前 Flappy Bird，别踩白块 那些游戏来弄。<br>或许，这也是这个平台没落了的原因吧。</p>\n<p><br><br><br><br><br></p>\n<hr>\n<ol>\n<li>关于</li>\n</ol>\n<ul>\n<li><a href=\"http://www.cocos2d-x.org/reference/native-cpp/V3.5/d6/d59/classcocos2d_1_1_lua_objc_bridge.html\" target=\"_blank\" rel=\"noopener\">关于 LuaObjcBridge</a></li>\n<li><a href=\"https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide_zh_CN/Chapters/About.html#//apple_ref/doc/uid/TP40016325-CH1-SW1\" target=\"_blank\" rel=\"noopener\">关于 iTunes Connect</a></li>\n<li><a href=\"https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectGameCenter_Guide_SCh/Chapters/Leaderboards.html#//apple_ref/doc/uid/TP40014490-CH2-SW1\" target=\"_blank\" rel=\"noopener\">中文版 排行榜及成就 配置属性</a></li>\n</ul>\n<p><br></p>\n<ol start=\"2\">\n<li>参考</li>\n</ol>\n<ul>\n<li><a href=\"https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6\" target=\"_blank\" rel=\"noopener\">https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6</a></li>\n<li><a href=\"http://www.jianshu.com/p/4279f84d8340\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/4279f84d8340</a></li>\n<li><a href=\"http://blog.csdn.net/shenjie12345678/article/details/45025403/\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shenjie12345678/article/details/45025403/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>cocos2d-x 接入 GameCenter 排行榜与成就<br>[mac - XCode 8.3 - cocos2d-x lua]</p>","more":"<p><br></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>要求接入GameCenter的排行榜和成就。</p>\n<p>GameCenter 是苹果推出的一个社交平台，<br>它主要提供了以下几个功能：</p>\n<ul>\n<li>排行榜</li>\n<li>成就</li>\n<li>挑战</li>\n</ul>\n<p>而且，苹果同时提供了GameKit框架来让GameCenter更易集成。<br>可能是因为GameCenter的热度过去了吧，相关的东西都比较早期。<br>整理总结了一下，希望对他人有所帮助。</p>\n<p>我的环境：<br>mac - XCode 8.3 - cocos2d-x lua</p>\n<p><br></p>\n<h1 id=\"公共的处理\"><a href=\"#公共的处理\" class=\"headerlink\" title=\"公共的处理\"></a>公共的处理</h1><h2 id=\"配置-iTunes-Connect-排行榜与成就的位置。\"><a href=\"#配置-iTunes-Connect-排行榜与成就的位置。\" class=\"headerlink\" title=\"配置 iTunes Connect 排行榜与成就的位置。\"></a>配置 iTunes Connect 排行榜与成就的位置。</h2><p>登录iTunes Connect, 找到要处理的APP。<br>选择 功能-&gt;GameCenter<br>可以看到三个大项：</p>\n<ul>\n<li>移动群组</li>\n<li>排行榜</li>\n<li>成就</li>\n</ul>\n<h2 id=\"添加GameKit框架\"><a href=\"#添加GameKit框架\" class=\"headerlink\" title=\"添加GameKit框架\"></a>添加GameKit框架</h2><p>打开项目工程，将 Capabilities 的 GameCenter 打开。<br>这样，XCode就会将GameKit框架加到我们的工程中。</p>\n<h2 id=\"登录GameCenter\"><a href=\"#登录GameCenter\" class=\"headerlink\" title=\"登录GameCenter\"></a>登录GameCenter</h2><p>登录GameCenter:  【这个步骤在我们加载完游戏时进行即可】</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>) authenticateLocalPlayer &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取本地用户</span></span><br><span class=\"line\">    GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 认证登录</span></span><br><span class=\"line\">    localPlayer.authenticateHandler = ^(<span class=\"built_in\">UIViewController</span> *viewController, <span class=\"built_in\">NSError</span> *error) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> setLastError:error];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (localPlayer.authenticated) &#123;                        <span class=\"comment\">// 本地用户已经登录</span></span><br><span class=\"line\">            _gameCenterFeaturesEnabled = <span class=\"literal\">YES</span>;                   <span class=\"comment\">// 此变量是判断是否已经登录上GameCenter</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(viewController) &#123;                             <span class=\"comment\">// 没有用户，弹出登录界面</span></span><br><span class=\"line\">            [<span class=\"keyword\">self</span> presentViewController:viewController];        </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;                                                <span class=\"comment\">// 没有用户，并且没有登录界面</span></span><br><span class=\"line\">            _gameCenterFeaturesEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于lua调用object-c\"><a href=\"#关于lua调用object-c\" class=\"headerlink\" title=\"关于lua调用object-c\"></a>关于lua调用object-c</h2><p>因为我的环境是 cocos2d-x lua，所以，用通过lua来调用object-c。<br>cocos2d-x其实已经有相关的调用结构 —— LuaObjcBridge, 可以直接用 callStaticMethod来调用：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LuaObjcBridge.callStaticMethod(methodName className,args)</span><br></pre></td></tr></table></figure>\n<h2 id=\"GameKit辅助处理类\"><a href=\"#GameKit辅助处理类\" class=\"headerlink\" title=\"GameKit辅助处理类\"></a>GameKit辅助处理类</h2><p>GameKitHelper.h:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;GameKit/GameKit.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"cocos2d.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方便lua调用</span></span><br><span class=\"line\"><span class=\"meta\">#include <span class=\"meta-string\">\"CCLuaEngine.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#include <span class=\"meta-string\">\"CCLuaBridge.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GameKitHelper</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"><span class=\"comment\">// 处理错误</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSError</span>* lastError;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">+ (<span class=\"keyword\">id</span>) sharedGameKitHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Player authentication, info</span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) authenticateLocalPlayer;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>GameKitHelper.mm</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"GameKitHelper.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GameKitHelper</span> ()</span></span><br><span class=\"line\">        &lt;GKGameCenterControllerDelegate&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">BOOL</span> _gameCenterFeaturesEnabled;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GameKitHelper</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#pragma mark Singleton stuff</span></span><br><span class=\"line\"></span><br><span class=\"line\">+(<span class=\"keyword\">id</span>) sharedGameKitHelper &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> GameKitHelper *sharedGameKitHelper;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        sharedGameKitHelper =</span><br><span class=\"line\">                [[GameKitHelper alloc] init];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sharedGameKitHelper;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#pragma mark Player Authentication</span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) authenticateLocalPlayer &#123;</span><br><span class=\"line\">    GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];</span><br><span class=\"line\"></span><br><span class=\"line\">    localPlayer.authenticateHandler = ^(<span class=\"built_in\">UIViewController</span> *viewController, <span class=\"built_in\">NSError</span> *error) &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> setLastError:error];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (localPlayer.authenticated) &#123;</span><br><span class=\"line\">            _gameCenterFeaturesEnabled = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(viewController) &#123;</span><br><span class=\"line\">            [<span class=\"keyword\">self</span> presentViewController:viewController];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            _gameCenterFeaturesEnabled = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#pragma mark Property setters</span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) setLastError:(<span class=\"built_in\">NSError</span>*)error &#123;</span><br><span class=\"line\">    _lastError = [error <span class=\"keyword\">copy</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_lastError) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- setLastError -- ERROR: %@\"</span>, [[_lastError userInfo] </span><br><span class=\"line\">          description]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#pragma mark UIViewController stuff</span></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"built_in\">UIViewController</span>*) getRootViewController &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">UIApplication</span> </span><br><span class=\"line\">      sharedApplication].keyWindow.rootViewController;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)presentViewController:(<span class=\"built_in\">UIViewController</span>*)vc &#123;</span><br><span class=\"line\">    <span class=\"built_in\">UIViewController</span>* rootVC = [<span class=\"keyword\">self</span> getRootViewController];</span><br><span class=\"line\">    [rootVC presentViewController:vc animated:<span class=\"literal\">YES</span> </span><br><span class=\"line\">      completion:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"登录GameCenter时机\"><a href=\"#登录GameCenter时机\" class=\"headerlink\" title=\"登录GameCenter时机\"></a>登录GameCenter时机</h2><p>由你决定，可以放在 AppDelegate 中 applicationDidFinishLaunching时。</p>\n<p><br></p>\n<h1 id=\"关于排行榜\"><a href=\"#关于排行榜\" class=\"headerlink\" title=\"关于排行榜\"></a>关于排行榜</h1><h2 id=\"配置-iTunes-Connect\"><a href=\"#配置-iTunes-Connect\" class=\"headerlink\" title=\"配置 iTunes Connect\"></a>配置 iTunes Connect</h2><p>在iTunes Connect 找到 排行榜。</p>\n<p>简单说一下流程吧：<br>配置排行榜的结构，然后我们在游戏中将数据上传到这个结构，最后显示到GameCenter中。</p>\n<p>排行榜分为 单个排行榜 与 组合排行榜。(顾名思义，区别就不需要解释了吧？)<br>里面需要配置的相应属性，可参考本文末尾的关于。</p>\n<p>要注意两点：</p>\n<ol>\n<li>排行榜ID，因为只有它是在创建后无法更改的。（而且，要记住这个ID，因为后面程序要用到）</li>\n<li>排行榜只要发布了（经过审批发布），就无法删除了。</li>\n</ol>\n<p>接下来就看属性去配置它吧。</p>\n<h2 id=\"XCode工程配置\"><a href=\"#XCode工程配置\" class=\"headerlink\" title=\"XCode工程配置\"></a>XCode工程配置</h2><p>模拟这个流程：登录GameCenter -&gt; 提交排行榜数据 ( -&gt; 如果需要，弹出GameCenter排行榜)<br>提交排行榜数据:</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>) submitScore:(int64_t)score category:(<span class=\"built_in\">NSString</span>*)category &#123;       <span class=\"comment\">// 这里两个参数 score是数据， category是ID，就是我们创建排行榜以后，不可更改的那个ID。</span></span><br><span class=\"line\">    <span class=\"comment\">// 检查是否在登录状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_gameCenterFeaturesEnabled)    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitScore -- Player not authenticated\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个分数对象</span></span><br><span class=\"line\">    GKScore* gkScore = [[GKScore alloc] initWithCategory:category];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置分数对象的值</span></span><br><span class=\"line\">    gkScore.value = score;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向GameCenter提交数据</span></span><br><span class=\"line\">    [gkScore reportScoreWithCompletionHandler: ^(<span class=\"built_in\">NSError</span>* error)    &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> setLastError:error];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实践使用\"><a href=\"#实践使用\" class=\"headerlink\" title=\"实践使用\"></a>实践使用</h2><p>在公用部分，已经添加了GameCenter的登录验证相关的东西了。</p>\n<ul>\n<li>将排行榜数据提交的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>) submitScore:(int64_t)score category:(<span class=\"built_in\">NSString</span>*)category;</span><br></pre></td></tr></table></figure>\n<p>GameKitHelper.mm</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>) submitScore:(int64_t)score category:(<span class=\"built_in\">NSString</span>*)category &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_gameCenterFeaturesEnabled)    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitScore -- Player not authenticated\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    GKScore* gkScore = [[GKScore alloc] initWithCategory:category];</span><br><span class=\"line\"></span><br><span class=\"line\">    gkScore.value = score;</span><br><span class=\"line\"></span><br><span class=\"line\">    [gkScore reportScoreWithCompletionHandler: ^(<span class=\"built_in\">NSError</span>* error)    &#123;</span><br><span class=\"line\">        [<span class=\"keyword\">self</span> setLastError:error];</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>给lua调用的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(<span class=\"keyword\">void</span>) getScore:(<span class=\"built_in\">NSDictionary</span> *)dict;</span><br></pre></td></tr></table></figure>\n<p>GameKitHelper.mm</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(<span class=\"keyword\">void</span>) getScore:(<span class=\"built_in\">NSDictionary</span> *)dict &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span>* rID = [dict objectForKey:<span class=\"string\">@\"id\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> score = [[dict objectForKey:<span class=\"string\">@\"score\"</span>] intValue];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [[GameKitHelper sharedGameKitHelper] submitScore:(int64_t)score category:rID];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>lua调用</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LuaObjcBridge.callStaticMethod(<span class=\"string\">\"GameKitHelper\"</span>, <span class=\"string\">\"getScore\"</span>, &#123;id = 排行榜的ID, score = 分数值&#125;)</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"关于成就\"><a href=\"#关于成就\" class=\"headerlink\" title=\"关于成就\"></a>关于成就</h1><h2 id=\"配置-iTunes-Connect-1\"><a href=\"#配置-iTunes-Connect-1\" class=\"headerlink\" title=\"配置 iTunes Connect\"></a>配置 iTunes Connect</h2><p>还是老位置，之前看的排行榜，这次点成就。<br>还是老样子，成就的ID，创建后不可修改，成就发布后不可删除。<br>但是，成就还要多一点，就是每个游戏总共有2000点成就分（为什么是2000？你问老乔去。。），你可以给每个成就分配一些成就分。<br>成就还有是否隐藏的选项，但是它的隐藏并不是看不到这个成就了，而是有一个成就名称为隐藏的成就显示在列表中。<br>还有，它的进度是一个顺时针扇形来表示，就是你的图标刚开始是被遮掩的，随着进度的增加，会逐渐显现出图标，方向是顺时针扇形。</p>\n<p>其他相关参数，可参考本文末尾的关于。</p>\n<h2 id=\"XCode工程配置-1\"><a href=\"#XCode工程配置-1\" class=\"headerlink\" title=\"XCode工程配置\"></a>XCode工程配置</h2><p>流程与排行榜的一样，但是这次提交的不是分数了，而是成就完成的百分比。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提交成就数据</span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) submitAchievment:(<span class=\"built_in\">NSString</span> *)identifier percent:(<span class=\"keyword\">double</span>) percentComplete &#123;          <span class=\"comment\">// identifier 成就ID, percentComplete: 成就完成百分比</span></span><br><span class=\"line\">    <span class=\"comment\">// 判断登录认证</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_gameCenterFeaturesEnabled)    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitAchievment -- Player not authenticated\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建成就结构，注入成就ID</span></span><br><span class=\"line\">    GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 设置成就百分比</span></span><br><span class=\"line\">    [achievement setPercentComplete:percentComplete];  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 提交成就数据</span></span><br><span class=\"line\">    [achievement reportAchievementWithCompletionHandler:^(<span class=\"built_in\">NSError</span> *error) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(error != <span class=\"literal\">nil</span>)&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitAchievment --  error:%@\"</span>, [error localizedDescription]);  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitAchievment --  提交成就成功\"</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;];  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实践使用-1\"><a href=\"#实践使用-1\" class=\"headerlink\" title=\"实践使用\"></a>实践使用</h2><p>同排行榜一样。</p>\n<ul>\n<li>将成就数据提交的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)submitAchievment:(<span class=\"built_in\">NSString</span> *)identifier percent:(<span class=\"keyword\">double</span>)percentComplete;</span><br></pre></td></tr></table></figure>\n<p>GameKitHelper.mm</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>) submitAchievment:(<span class=\"built_in\">NSString</span> *)identifier percent:(<span class=\"keyword\">double</span>) percentComplete &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_gameCenterFeaturesEnabled)    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitAchievment -- Player not authenticated\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  </span><br><span class=\"line\">      </span><br><span class=\"line\">    [achievement setPercentComplete:percentComplete];  </span><br><span class=\"line\">      </span><br><span class=\"line\">    [achievement reportAchievementWithCompletionHandler:^(<span class=\"built_in\">NSError</span> *error) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(error != <span class=\"literal\">nil</span>)&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitAchievment --  error:%@\"</span>, [error localizedDescription]);  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"GameCenter -- submitAchievment --  提交成就成功\"</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;];  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>给lua调用的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(<span class=\"keyword\">void</span>) getAchievement:(<span class=\"built_in\">NSDictionary</span> *)dict;</span><br></pre></td></tr></table></figure>\n<p>GameKitHelper.mm</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(<span class=\"keyword\">void</span>) getAchievement:(<span class=\"built_in\">NSDictionary</span> *)dict &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span>* aID = [dict objectForKey:<span class=\"string\">@\"id\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> percent = [[dict objectForKey:<span class=\"string\">@\"percent\"</span>] doubleValue];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [[GameKitHelper sharedGameKitHelper] submitAchievment:(<span class=\"built_in\">NSString</span> *)aID percent:percent];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>lua调用</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LuaObjcBridge.callStaticMethod(<span class=\"string\">\"GameKitHelper\"</span>, <span class=\"string\">\"getAchievement\"</span>, &#123;id = 成就ID, percent = 成就百分比&#125;)</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>GameCenter还是挺好的一个东西。<br>它还有一个好友挑战功能，但这个主要适合之前 Flappy Bird，别踩白块 那些游戏来弄。<br>或许，这也是这个平台没落了的原因吧。</p>\n<p><br><br><br><br><br></p>\n<hr>\n<ol>\n<li>关于</li>\n</ol>\n<ul>\n<li><a href=\"http://www.cocos2d-x.org/reference/native-cpp/V3.5/d6/d59/classcocos2d_1_1_lua_objc_bridge.html\" target=\"_blank\" rel=\"noopener\">关于 LuaObjcBridge</a></li>\n<li><a href=\"https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide_zh_CN/Chapters/About.html#//apple_ref/doc/uid/TP40016325-CH1-SW1\" target=\"_blank\" rel=\"noopener\">关于 iTunes Connect</a></li>\n<li><a href=\"https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectGameCenter_Guide_SCh/Chapters/Leaderboards.html#//apple_ref/doc/uid/TP40014490-CH2-SW1\" target=\"_blank\" rel=\"noopener\">中文版 排行榜及成就 配置属性</a></li>\n</ul>\n<p><br></p>\n<ol start=\"2\">\n<li>参考</li>\n</ol>\n<ul>\n<li><a href=\"https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6\" target=\"_blank\" rel=\"noopener\">https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6</a></li>\n<li><a href=\"http://www.jianshu.com/p/4279f84d8340\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/4279f84d8340</a></li>\n<li><a href=\"http://blog.csdn.net/shenjie12345678/article/details/45025403/\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shenjie12345678/article/details/45025403/</a></li>\n</ul>"},{"title":"python学习笔记","date":"2016-11-22T13:00:00.000Z","_content":"\npython脚本学习记录\n\n\n<!-- more -->\n\n<br/>\n\n---\n\n动机：\n脚本可以省很多事情，\n开发游戏用了lua，\n但是，\n真正日常要做一些东西脚本的时候，\n发现用lua还是比较麻烦些，\n所以，\n就瞄上了python，\n恩，\n说学就学。\n\n注意：\n- 用的是python3\n- 适合有一定脚本语言基础的人看（很多脚本语言的共性没有记录）\n\n---\n\n<br/>\n\n# 基础\n\n## 输出语句 print\n**注意多个参数的格式**\n\n```python\n\t\tprint('hello python!')\n\t\tx = 100\n\t\ty = 'hello'\n\t\tprint('%s user, your score is %d' % (y, x))\n\t\tprint(r'')\t\t\t\t\t\t\t# 在''内的字符不转义\n```\n\n## list、tuple、dict、set\n1. list\t列表，有序的集合，随时添加删除元素\nL = []\n常用方法:\t\t\n访问元素 - L[index] - index支持负数\n末尾加入元素 - L.append(val)\n某位置插入元素 - L.insert(index, val)\n删除末尾元素 - L.pop()\n删除某位置元素 - del L[index]\n\n2. tuple 元组，初始化后不可修改 **[ 初始化一个元素的元组时，元素后要加, : t = (1, ) ]**\nT = ()\n**list 与 tuple 可相互嵌套，tuple中的list可以增删，因为存的是地址**\n\t\t\n3. dict 字典（你也可以叫它map)\nD = {'key': value, }\n\n4. set 集合，无序不重复\nS = set([])\n\n\n## 条件 与 循环\npython的语法很简单，通过缩进来显示。\n最重要的是**:**\n\n```python\n\t\tif <条件>:\n\t\t\tcontinue\n\t\telif <条件>:\n\t\t\tbreak\n\t\telse:\n\t\t\tpass\n\n\t\tfor < > in <对象集合>:\n\t\t\tpass\n\t\t\n\t\twhile <条件>:\n\t\t\tpass\n```\n\n## 函数\n\n```python\n\t\t# 定义\n\t\tdef function_name(parameters):\n\t\t\tpass\t\t\t\t\t\t\t\t# 一旦定义一个函数，不可以什么都不写，但可以像这样\n\t\t\t\t\t\t\t\t\t\t\t\t# 用pass来占位，先让代码运行起来。\n```\n\n当然，默认参数值，返回多个值，都是支持的\n额外要注意的应该是 **参数** 部分，包括：必选参数、默认参数、可变参数、命名关键字参数、关键字参数。\n可变参数允许传入0个或任意个参数，这些会被自动组装为一个tuple；\n关键字参数允许传入0个或任意个含参数名的参数，这些被自动组装为1个dict。\n\n```python\t\t\n\t\tdef book(name, author, **kw):\n\t\t\tif 'language' in kw: \t\t\t\t\t\t# 判断关键字参数中是否有 language 字段\n\t\t\t\tpass\n\n\t\t\tprint('name: ', name, 'author: ', author, 'other: ', kw)\n\n\t\t# methon1\n\t\tbook('From Grass To Tree', 'ltree98', language = 'CHN')\n\t\tbook('How To Study Python', 'ltree98', language = 'ENG', pages = 100)\n\n\t\t# method2\n\t\textra = {'language': 'KOR', 'class': 'novel'}\n\t\tbook('lalala', 'tree', **extra)\n```\n\nPS：如果参数中已经有了一个可变参数，那么后面的命名关键字参数就不需要特殊分隔符'\\*'了。\n**参数顺序： 必选参数、默认参数、可变参数、命名关键字参数、关键字参数。**\n\n```python\t\t\n\t\tdef f(a, b = 0, *args, **kw):\t\t# 必选参数、默认参数、可变参数、关键字参数\n\t\t\tpass\n\t\tdef f2(a, b = 0, *, d, **kw):\t\t# 必选参数、默认参数、可变参数、命名关键字参数、关键字参数\n\t\t\tpass\n```\n\n**对于任意函数，都可以通过func(\\*args, \\*\\*kw)的形式来调用它，无论参数是如何定义的。**\n\n\n## others:\n- range([start = 0,] stop, [, step = 1]]), 生成从start开始（默认为0）到stop（不等于stop）,步长为step（默认为1）的整数序列；\nstart 与 step都是可选参数。\n\n\n<br/>\n\n# 进阶\n\n## 一些特性（切片、迭代、列表生成式、生成器）\n\n### 切片\n针对截取操作\nL[start: stop: step]  \n截取从start序号开始到stop序号，步长为step的值成一个list返回。\n\n```python\n\t\t>>> L = list(range(10))\n\t\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\t\t>>> L1 = L[:5]\n\t\t[0, 1, 2, 3, 4]\n\n\t\t>>> L2 = L[2:7]\n\t\t[2, 3, 4, 5, 6]\n\n\t\t>>> L3 = L[:-1:2]\n\t\t[0, 2, 4, 6, 8]\n\n\t\t>>> L4 = L[:]\n\t\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\t\t\n\n### 迭代\n给定一个list或tuple，通过for循环来遍历它，这种遍历叫做 迭代（iteration）\n很多语言的迭代是通过下标来进行的，但python里，并不是。\n当然，顺序可能就不是你当初定义它时的顺序了。\n\t\t\n```python\n\t\tweekday = {'Mon': 1, 'Tue': 2, 'Wed': 3}\n\t\t\n\t\tif isinstance(weekday, Iterable):\n\t\t\tfor w in weekday:\n\t\t\t\tprint(w)\n```\n\nisinstance(..., Iterable) 判断一个数据类型是否可迭代\n一般可以可迭代对象是 集合数据类型（如 list、tuple、dict、set、str等），他们都是Iterable类型。\n\n\n### 列表生成式\n顾名思义，就是一个创建list的方式，\n通过这种方式创建list比较便捷\n\n```python\n\t\t[x + y for x in 'ABC' for y in 'XYZ' if x != 'B']\n\t\t\n\t\t# 其实上面那个等价于下面\n\n\t\tL = []\n\t\tfor x in 'ABC':\n\t\t\tfor y in 'XYZ':\n\t\t\t\tif x != 'B':\n\t\t\t\t\tL.append(x+y)\n```\n\n### 生成器\n针对于列表容量有限的缺陷，\n生成器就是一边循环一边计算。\n与列表生成式的区别是，列表生成时最外层是 []，而生成器最外层是 ()\n而且，得到的generator，需要不停next得到下一个元素。（一般会通过for循环来迭代获取）\n\t\t\n```python\n\t\tg = (x + y for x in 'ABC' for y in 'XYZ' if x != 'B')\n\t\tfor v in g:\n\t\t\tprint(v)\n```\n\n可以作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列。\nIterator类型主要就两种，一种就是这个生成器，还有就是含yield的generator function\n\n\n## 关于函数式编程 （ lambda、map、reduce、filter、 装饰器）\n\n\n### lambda [arg1 [, arg2, arg3, ...]]: expression\n也叫匿名函数，通过它可以非常方便快捷的定义使用一个函数。\n具体效果，下面会给出。\n\n\n### map(func, seq1[, seq2...])\n将func作用于seq中的每一个元素，并用一个列表给出返回值。\n\n```python\t\n\t\tdef f(x):\n\t\t\treturn x * x\n\t\tm = map(f, [1, 2, 3, 4, 5])\n\t\t# m 将会是一个列表 [1, 4, 9, 16, 25]\n```\n\n其实，用lambda更方便简洁\n\n```python\n\t\tm = map(lambda x: x*x, range(1, 6))\n```\n\n### reduce(func, seq[, init])\n这是一个二元操作函数，它用来将一个集合中所有数据进行从前到后的二元操作。\n\n```python\n\t\tfrom fuctools import reduce\n\t\tdef specialAdd(x, y):\n\t\t\treturn x*10 + y\n\t\tval = reduce(specialAdd, [1, 2, 3, 4, 5])\n\t\t# val将会是一个数字 12345\n```\n\nreduce要提前导入，\n当然，也可以用lambda\n\n```python\n\t\tval = reduce(lambda x, y: x*10 + y, range(1, 6))\n```\n\n### filter(func, seq)\n可以当做过滤器，将集合中的每个数都传入函数，根据函数返回的bool变量来决定是否留下。\n\n```python\t\n\t\tdef bigger_than_five(n):\n\t\t\treturn n > 5\n\t\tf = list(filter(bigger_than_five, [3, 4, 5, 6, 7, 8]))\n\t\t# f 将会是一个列表 [6, 7, 8]\n\n\t\tf2 = list(filter(lambda n: n > 5, range(3, 9)))\n```\n\n### 装饰器\n装饰器的作用就像它名字一样，给函数以装饰，做一个更大一范围的修饰。\n比如，有A、B、C三个果汁工厂，现在要在每瓶果汁上印一个小商标。\n我们可以在每个工厂内建立一个流水线来印商标，\n也可以专门建立一个工厂D来印商标。\n装饰器，就像后者，工厂D。\n\n```python\n\t\tdef myLog(func):\n\t\t\tdef wrapper(*args, **kw):\n\t\t\t\tprint('--- this is my log')\n\t\t\t\treturn func(*args, **kw)\n\t\t\treturn wrapper\n\t\t\n\t\t@myLog\n\t\tdef demo():\n\t\t\tprint('\\n\\ndemo is running\\n\\n')\n\t\t\n\t\tdemo()\n```\n\n注意要加语法糖 @装饰器函数\n本装饰器的作用是在函数调用前输出一段log。\n\n如果想让装饰器函数带参数，那就要进行三层嵌套。\n\n```python\t\t\n\t\tdef myLog(logText):\n\t\t\tdef decorator(func):\n\t\t\t\tdef wrapper(*args, **kw):\n\t\t\t\t\tprint(logText)\n\t\t\t\t\treturn func(*args, **kw)\n\t\t\t\treturn wrapper\n\t\t\treturn decorator\n\n\t\t@myLog(\"hello log\")\n\t\tdef demo():\n\t\t\tprint('\\n\\ndemo is running\\n\\n')\n\t\t\n\t\tdemo()\n```\n\n但是，这里的函数名已经发生了更改，demo名称其实已经发生了更改，\ndemo.\\_\\_name\\_\\_ 是 wrapper\n可以通过加\nwrapper.\\_\\_name\\_\\_ = func.\\_\\_name\\_\\_\n来改回来，\n但是，过于繁琐，python提供了更好的方法\n\n```python\n\t\timport functools\n\t\t\n\t\tdef myLog(logText):\n\t\t\tdef decorator(func):\n\t\t\t\t@functools.wraps(func)\n\t\t\t\tdef wrapper(*args, **kw):\n\t\t\t\t\tprint(logText)\n\t\t\t\t\treturn func(*args, **kw)\n\t\t\t\treturn wrapper\n\t\t\treturn decorator\n\t\t\n\t\t@myLog(\"hello log\")\n\t\tdef demo():\n\t\t\tprint('\\n\\ndemo is running\\n\\n')\n\t\t\n\t\tdemo()\n\t\tprint(demo.__name__)\n```\n\n## 关于面向对象编程\n\npython中是有类这个结构的。\n还有一些命名规则：\n变量名以 \\_  开头，代表私有变量（非强制）\n变量名以 \\_\\_ 开头，代表私有变量 （强制）\n变量名以 \\_\\_ 开头，并且以 \\_\\_ 结尾，代表特殊变量\n\n```python\n\t\tclass Person(object):\n\t\t\tdef __init__(self, name, age):\n\t\t\t\tself.__name = name\n\t\t\t\tself.age = age\n\t\t\tdef eat(self):\n\t\t\t\tprint('Person Eating...')\n\n\n\t\tclass Student(Person):\n\t\t\tdef eat(self):\n\t\t\t\tprint('Student Eating...')\n\t\t\tdef study(self):\n\t\t\t\tprint('Student Study...')\n```\n\n也可以对实例进行一些属性的绑定，当然，不会对类造成影响。\n当然也可以对类进行方法绑定，其所有的实例均受影响\n\n```python\t\t\n\t\tdef set_height(self, height):\n\t\t\tself.height = height\n\t\tclass Person(object):\n\t\t\tname = 'tree'\n\t\t\n\t\tp = Person()\n\t\tprint('p name is: ', p.name)\n\t\tprint('person name is: ', Person.name)\n\t\t\n\t\tp.age = 20\n\t\tprint('p age is: ', p.age)\n\t\tprint('person age is: ', Person.age\n\t\t\n\t\tPerson.set_height = set_height\n\t\tp.set_height(180)\n\t\tprint(p.height)\n```\n\n最后，可以通过在类内设置一些函数来使类更加完善:\n- \\_\\_init\\_\\_ \t\t\t\t\n初始化方法\n- \\_\\_slots\\_\\_ \t\t\t\t\n设定允许绑定的变量名（子类会继承父类）\n- \\_\\_len\\_\\_\n让类可以作用于len函数，设定计算类大小的方法\n- \\_\\_str\\_\\_ 与 \\_\\_repr\\_\\_\n都是用来当 print实例对象时 显示出来的字符串。\n\\_\\_str\\_\\_是给用户看的，\\_\\_repr\\_\\_是给开发者看的（但一般都一样）\n- \\_\\_iter\\_\\_ 与 \\_\\_next\\_\\_\n可以让类作用于 for...in 循环\n- \\_\\_getitem\\_\\_\n可以像list一样实现按照下标取元素\n- \\_\\_getattr\\_\\_\n预设某属性默认值\n- \\_\\_call\\_\\_\n实现在实例本身的调用方法。\n- 装饰器实现get/set方法\t\t\n\n```python\t\t\n\t\tclass Person(object):\n\t\t\t@property\n\t\t\tdef age(self):\n\t\t\t    return self._age\n\t\t\t@age.setter\n\t\t\tdef age(self, value):\n\t\t\t    self._age = value\n```\n\n<br/>\n\n# 归纳\n\npython的一些基础东西，基本就这些了。\n接下来，就可以去做一些东西来边练手边加深理解。\n最后， \n工具是死的，\n人是活得，\n不要局限自己，\n放飞思维，\n大胆去做。\n\n\n<br/>\n<br/>\n<br/>\n\n---\n\n参考：\n着重推荐： http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000 \nhttp://www.pythoner.com/46.html","source":"_posts/python学习笔记.md","raw":"---\ntitle: python学习笔记\ndate: 2016-11-22 21:00:00\ntags: 跟着学\n\n---\n\npython脚本学习记录\n\n\n<!-- more -->\n\n<br/>\n\n---\n\n动机：\n脚本可以省很多事情，\n开发游戏用了lua，\n但是，\n真正日常要做一些东西脚本的时候，\n发现用lua还是比较麻烦些，\n所以，\n就瞄上了python，\n恩，\n说学就学。\n\n注意：\n- 用的是python3\n- 适合有一定脚本语言基础的人看（很多脚本语言的共性没有记录）\n\n---\n\n<br/>\n\n# 基础\n\n## 输出语句 print\n**注意多个参数的格式**\n\n```python\n\t\tprint('hello python!')\n\t\tx = 100\n\t\ty = 'hello'\n\t\tprint('%s user, your score is %d' % (y, x))\n\t\tprint(r'')\t\t\t\t\t\t\t# 在''内的字符不转义\n```\n\n## list、tuple、dict、set\n1. list\t列表，有序的集合，随时添加删除元素\nL = []\n常用方法:\t\t\n访问元素 - L[index] - index支持负数\n末尾加入元素 - L.append(val)\n某位置插入元素 - L.insert(index, val)\n删除末尾元素 - L.pop()\n删除某位置元素 - del L[index]\n\n2. tuple 元组，初始化后不可修改 **[ 初始化一个元素的元组时，元素后要加, : t = (1, ) ]**\nT = ()\n**list 与 tuple 可相互嵌套，tuple中的list可以增删，因为存的是地址**\n\t\t\n3. dict 字典（你也可以叫它map)\nD = {'key': value, }\n\n4. set 集合，无序不重复\nS = set([])\n\n\n## 条件 与 循环\npython的语法很简单，通过缩进来显示。\n最重要的是**:**\n\n```python\n\t\tif <条件>:\n\t\t\tcontinue\n\t\telif <条件>:\n\t\t\tbreak\n\t\telse:\n\t\t\tpass\n\n\t\tfor < > in <对象集合>:\n\t\t\tpass\n\t\t\n\t\twhile <条件>:\n\t\t\tpass\n```\n\n## 函数\n\n```python\n\t\t# 定义\n\t\tdef function_name(parameters):\n\t\t\tpass\t\t\t\t\t\t\t\t# 一旦定义一个函数，不可以什么都不写，但可以像这样\n\t\t\t\t\t\t\t\t\t\t\t\t# 用pass来占位，先让代码运行起来。\n```\n\n当然，默认参数值，返回多个值，都是支持的\n额外要注意的应该是 **参数** 部分，包括：必选参数、默认参数、可变参数、命名关键字参数、关键字参数。\n可变参数允许传入0个或任意个参数，这些会被自动组装为一个tuple；\n关键字参数允许传入0个或任意个含参数名的参数，这些被自动组装为1个dict。\n\n```python\t\t\n\t\tdef book(name, author, **kw):\n\t\t\tif 'language' in kw: \t\t\t\t\t\t# 判断关键字参数中是否有 language 字段\n\t\t\t\tpass\n\n\t\t\tprint('name: ', name, 'author: ', author, 'other: ', kw)\n\n\t\t# methon1\n\t\tbook('From Grass To Tree', 'ltree98', language = 'CHN')\n\t\tbook('How To Study Python', 'ltree98', language = 'ENG', pages = 100)\n\n\t\t# method2\n\t\textra = {'language': 'KOR', 'class': 'novel'}\n\t\tbook('lalala', 'tree', **extra)\n```\n\nPS：如果参数中已经有了一个可变参数，那么后面的命名关键字参数就不需要特殊分隔符'\\*'了。\n**参数顺序： 必选参数、默认参数、可变参数、命名关键字参数、关键字参数。**\n\n```python\t\t\n\t\tdef f(a, b = 0, *args, **kw):\t\t# 必选参数、默认参数、可变参数、关键字参数\n\t\t\tpass\n\t\tdef f2(a, b = 0, *, d, **kw):\t\t# 必选参数、默认参数、可变参数、命名关键字参数、关键字参数\n\t\t\tpass\n```\n\n**对于任意函数，都可以通过func(\\*args, \\*\\*kw)的形式来调用它，无论参数是如何定义的。**\n\n\n## others:\n- range([start = 0,] stop, [, step = 1]]), 生成从start开始（默认为0）到stop（不等于stop）,步长为step（默认为1）的整数序列；\nstart 与 step都是可选参数。\n\n\n<br/>\n\n# 进阶\n\n## 一些特性（切片、迭代、列表生成式、生成器）\n\n### 切片\n针对截取操作\nL[start: stop: step]  \n截取从start序号开始到stop序号，步长为step的值成一个list返回。\n\n```python\n\t\t>>> L = list(range(10))\n\t\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\t\t>>> L1 = L[:5]\n\t\t[0, 1, 2, 3, 4]\n\n\t\t>>> L2 = L[2:7]\n\t\t[2, 3, 4, 5, 6]\n\n\t\t>>> L3 = L[:-1:2]\n\t\t[0, 2, 4, 6, 8]\n\n\t\t>>> L4 = L[:]\n\t\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\t\t\n\n### 迭代\n给定一个list或tuple，通过for循环来遍历它，这种遍历叫做 迭代（iteration）\n很多语言的迭代是通过下标来进行的，但python里，并不是。\n当然，顺序可能就不是你当初定义它时的顺序了。\n\t\t\n```python\n\t\tweekday = {'Mon': 1, 'Tue': 2, 'Wed': 3}\n\t\t\n\t\tif isinstance(weekday, Iterable):\n\t\t\tfor w in weekday:\n\t\t\t\tprint(w)\n```\n\nisinstance(..., Iterable) 判断一个数据类型是否可迭代\n一般可以可迭代对象是 集合数据类型（如 list、tuple、dict、set、str等），他们都是Iterable类型。\n\n\n### 列表生成式\n顾名思义，就是一个创建list的方式，\n通过这种方式创建list比较便捷\n\n```python\n\t\t[x + y for x in 'ABC' for y in 'XYZ' if x != 'B']\n\t\t\n\t\t# 其实上面那个等价于下面\n\n\t\tL = []\n\t\tfor x in 'ABC':\n\t\t\tfor y in 'XYZ':\n\t\t\t\tif x != 'B':\n\t\t\t\t\tL.append(x+y)\n```\n\n### 生成器\n针对于列表容量有限的缺陷，\n生成器就是一边循环一边计算。\n与列表生成式的区别是，列表生成时最外层是 []，而生成器最外层是 ()\n而且，得到的generator，需要不停next得到下一个元素。（一般会通过for循环来迭代获取）\n\t\t\n```python\n\t\tg = (x + y for x in 'ABC' for y in 'XYZ' if x != 'B')\n\t\tfor v in g:\n\t\t\tprint(v)\n```\n\n可以作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列。\nIterator类型主要就两种，一种就是这个生成器，还有就是含yield的generator function\n\n\n## 关于函数式编程 （ lambda、map、reduce、filter、 装饰器）\n\n\n### lambda [arg1 [, arg2, arg3, ...]]: expression\n也叫匿名函数，通过它可以非常方便快捷的定义使用一个函数。\n具体效果，下面会给出。\n\n\n### map(func, seq1[, seq2...])\n将func作用于seq中的每一个元素，并用一个列表给出返回值。\n\n```python\t\n\t\tdef f(x):\n\t\t\treturn x * x\n\t\tm = map(f, [1, 2, 3, 4, 5])\n\t\t# m 将会是一个列表 [1, 4, 9, 16, 25]\n```\n\n其实，用lambda更方便简洁\n\n```python\n\t\tm = map(lambda x: x*x, range(1, 6))\n```\n\n### reduce(func, seq[, init])\n这是一个二元操作函数，它用来将一个集合中所有数据进行从前到后的二元操作。\n\n```python\n\t\tfrom fuctools import reduce\n\t\tdef specialAdd(x, y):\n\t\t\treturn x*10 + y\n\t\tval = reduce(specialAdd, [1, 2, 3, 4, 5])\n\t\t# val将会是一个数字 12345\n```\n\nreduce要提前导入，\n当然，也可以用lambda\n\n```python\n\t\tval = reduce(lambda x, y: x*10 + y, range(1, 6))\n```\n\n### filter(func, seq)\n可以当做过滤器，将集合中的每个数都传入函数，根据函数返回的bool变量来决定是否留下。\n\n```python\t\n\t\tdef bigger_than_five(n):\n\t\t\treturn n > 5\n\t\tf = list(filter(bigger_than_five, [3, 4, 5, 6, 7, 8]))\n\t\t# f 将会是一个列表 [6, 7, 8]\n\n\t\tf2 = list(filter(lambda n: n > 5, range(3, 9)))\n```\n\n### 装饰器\n装饰器的作用就像它名字一样，给函数以装饰，做一个更大一范围的修饰。\n比如，有A、B、C三个果汁工厂，现在要在每瓶果汁上印一个小商标。\n我们可以在每个工厂内建立一个流水线来印商标，\n也可以专门建立一个工厂D来印商标。\n装饰器，就像后者，工厂D。\n\n```python\n\t\tdef myLog(func):\n\t\t\tdef wrapper(*args, **kw):\n\t\t\t\tprint('--- this is my log')\n\t\t\t\treturn func(*args, **kw)\n\t\t\treturn wrapper\n\t\t\n\t\t@myLog\n\t\tdef demo():\n\t\t\tprint('\\n\\ndemo is running\\n\\n')\n\t\t\n\t\tdemo()\n```\n\n注意要加语法糖 @装饰器函数\n本装饰器的作用是在函数调用前输出一段log。\n\n如果想让装饰器函数带参数，那就要进行三层嵌套。\n\n```python\t\t\n\t\tdef myLog(logText):\n\t\t\tdef decorator(func):\n\t\t\t\tdef wrapper(*args, **kw):\n\t\t\t\t\tprint(logText)\n\t\t\t\t\treturn func(*args, **kw)\n\t\t\t\treturn wrapper\n\t\t\treturn decorator\n\n\t\t@myLog(\"hello log\")\n\t\tdef demo():\n\t\t\tprint('\\n\\ndemo is running\\n\\n')\n\t\t\n\t\tdemo()\n```\n\n但是，这里的函数名已经发生了更改，demo名称其实已经发生了更改，\ndemo.\\_\\_name\\_\\_ 是 wrapper\n可以通过加\nwrapper.\\_\\_name\\_\\_ = func.\\_\\_name\\_\\_\n来改回来，\n但是，过于繁琐，python提供了更好的方法\n\n```python\n\t\timport functools\n\t\t\n\t\tdef myLog(logText):\n\t\t\tdef decorator(func):\n\t\t\t\t@functools.wraps(func)\n\t\t\t\tdef wrapper(*args, **kw):\n\t\t\t\t\tprint(logText)\n\t\t\t\t\treturn func(*args, **kw)\n\t\t\t\treturn wrapper\n\t\t\treturn decorator\n\t\t\n\t\t@myLog(\"hello log\")\n\t\tdef demo():\n\t\t\tprint('\\n\\ndemo is running\\n\\n')\n\t\t\n\t\tdemo()\n\t\tprint(demo.__name__)\n```\n\n## 关于面向对象编程\n\npython中是有类这个结构的。\n还有一些命名规则：\n变量名以 \\_  开头，代表私有变量（非强制）\n变量名以 \\_\\_ 开头，代表私有变量 （强制）\n变量名以 \\_\\_ 开头，并且以 \\_\\_ 结尾，代表特殊变量\n\n```python\n\t\tclass Person(object):\n\t\t\tdef __init__(self, name, age):\n\t\t\t\tself.__name = name\n\t\t\t\tself.age = age\n\t\t\tdef eat(self):\n\t\t\t\tprint('Person Eating...')\n\n\n\t\tclass Student(Person):\n\t\t\tdef eat(self):\n\t\t\t\tprint('Student Eating...')\n\t\t\tdef study(self):\n\t\t\t\tprint('Student Study...')\n```\n\n也可以对实例进行一些属性的绑定，当然，不会对类造成影响。\n当然也可以对类进行方法绑定，其所有的实例均受影响\n\n```python\t\t\n\t\tdef set_height(self, height):\n\t\t\tself.height = height\n\t\tclass Person(object):\n\t\t\tname = 'tree'\n\t\t\n\t\tp = Person()\n\t\tprint('p name is: ', p.name)\n\t\tprint('person name is: ', Person.name)\n\t\t\n\t\tp.age = 20\n\t\tprint('p age is: ', p.age)\n\t\tprint('person age is: ', Person.age\n\t\t\n\t\tPerson.set_height = set_height\n\t\tp.set_height(180)\n\t\tprint(p.height)\n```\n\n最后，可以通过在类内设置一些函数来使类更加完善:\n- \\_\\_init\\_\\_ \t\t\t\t\n初始化方法\n- \\_\\_slots\\_\\_ \t\t\t\t\n设定允许绑定的变量名（子类会继承父类）\n- \\_\\_len\\_\\_\n让类可以作用于len函数，设定计算类大小的方法\n- \\_\\_str\\_\\_ 与 \\_\\_repr\\_\\_\n都是用来当 print实例对象时 显示出来的字符串。\n\\_\\_str\\_\\_是给用户看的，\\_\\_repr\\_\\_是给开发者看的（但一般都一样）\n- \\_\\_iter\\_\\_ 与 \\_\\_next\\_\\_\n可以让类作用于 for...in 循环\n- \\_\\_getitem\\_\\_\n可以像list一样实现按照下标取元素\n- \\_\\_getattr\\_\\_\n预设某属性默认值\n- \\_\\_call\\_\\_\n实现在实例本身的调用方法。\n- 装饰器实现get/set方法\t\t\n\n```python\t\t\n\t\tclass Person(object):\n\t\t\t@property\n\t\t\tdef age(self):\n\t\t\t    return self._age\n\t\t\t@age.setter\n\t\t\tdef age(self, value):\n\t\t\t    self._age = value\n```\n\n<br/>\n\n# 归纳\n\npython的一些基础东西，基本就这些了。\n接下来，就可以去做一些东西来边练手边加深理解。\n最后， \n工具是死的，\n人是活得，\n不要局限自己，\n放飞思维，\n大胆去做。\n\n\n<br/>\n<br/>\n<br/>\n\n---\n\n参考：\n着重推荐： http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000 \nhttp://www.pythoner.com/46.html","slug":"python学习笔记","published":1,"updated":"2018-07-19T16:46:23.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbc9000resvq1pnm7bdv","content":"<p>python脚本学习记录</p>\n<a id=\"more\"></a>\n<p><br></p>\n<hr>\n<p>动机：<br>脚本可以省很多事情，<br>开发游戏用了lua，<br>但是，<br>真正日常要做一些东西脚本的时候，<br>发现用lua还是比较麻烦些，<br>所以，<br>就瞄上了python，<br>恩，<br>说学就学。</p>\n<p>注意：</p>\n<ul>\n<li>用的是python3</li>\n<li>适合有一定脚本语言基础的人看（很多脚本语言的共性没有记录）</li>\n</ul>\n<hr>\n<p><br></p>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><h2 id=\"输出语句-print\"><a href=\"#输出语句-print\" class=\"headerlink\" title=\"输出语句 print\"></a>输出语句 print</h2><p><strong>注意多个参数的格式</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'hello python!'</span>)</span><br><span class=\"line\">x = <span class=\"number\">100</span></span><br><span class=\"line\">y = <span class=\"string\">'hello'</span></span><br><span class=\"line\">print(<span class=\"string\">'%s user, your score is %d'</span> % (y, x))</span><br><span class=\"line\">print(<span class=\"string\">r''</span>)\t\t\t\t\t\t\t<span class=\"comment\"># 在''内的字符不转义</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"list、tuple、dict、set\"><a href=\"#list、tuple、dict、set\" class=\"headerlink\" title=\"list、tuple、dict、set\"></a>list、tuple、dict、set</h2><ol>\n<li><p>list    列表，有序的集合，随时添加删除元素<br>L = []<br>常用方法:<br>访问元素 - L[index] - index支持负数<br>末尾加入元素 - L.append(val)<br>某位置插入元素 - L.insert(index, val)<br>删除末尾元素 - L.pop()<br>删除某位置元素 - del L[index]</p>\n</li>\n<li><p>tuple 元组，初始化后不可修改 <strong>[ 初始化一个元素的元组时，元素后要加, : t = (1, ) ]</strong><br>T = ()<br><strong>list 与 tuple 可相互嵌套，tuple中的list可以增删，因为存的是地址</strong></p>\n</li>\n<li><p>dict 字典（你也可以叫它map)<br>D = {‘key’: value, }</p>\n</li>\n<li><p>set 集合，无序不重复<br>S = set([])</p>\n</li>\n</ol>\n<h2 id=\"条件-与-循环\"><a href=\"#条件-与-循环\" class=\"headerlink\" title=\"条件 与 循环\"></a>条件 与 循环</h2><p>python的语法很简单，通过缩进来显示。<br>最重要的是<strong>:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> &lt;条件&gt;:</span><br><span class=\"line\">\t<span class=\"keyword\">continue</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> &lt;条件&gt;:</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> &lt; &gt; <span class=\"keyword\">in</span> &lt;对象集合&gt;:</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> &lt;条件&gt;:</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function_name</span><span class=\"params\">(parameters)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">pass</span>\t\t\t\t\t\t\t\t<span class=\"comment\"># 一旦定义一个函数，不可以什么都不写，但可以像这样</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\"># 用pass来占位，先让代码运行起来。</span></span><br></pre></td></tr></table></figure>\n<p>当然，默认参数值，返回多个值，都是支持的<br>额外要注意的应该是 <strong>参数</strong> 部分，包括：必选参数、默认参数、可变参数、命名关键字参数、关键字参数。<br>可变参数允许传入0个或任意个参数，这些会被自动组装为一个tuple；<br>关键字参数允许传入0个或任意个含参数名的参数，这些被自动组装为1个dict。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">book</span><span class=\"params\">(name, author, **kw)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"string\">'language'</span> <span class=\"keyword\">in</span> kw: \t\t\t\t\t\t<span class=\"comment\"># 判断关键字参数中是否有 language 字段</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tprint(<span class=\"string\">'name: '</span>, name, <span class=\"string\">'author: '</span>, author, <span class=\"string\">'other: '</span>, kw)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># methon1</span></span><br><span class=\"line\">book(<span class=\"string\">'From Grass To Tree'</span>, <span class=\"string\">'ltree98'</span>, language = <span class=\"string\">'CHN'</span>)</span><br><span class=\"line\">book(<span class=\"string\">'How To Study Python'</span>, <span class=\"string\">'ltree98'</span>, language = <span class=\"string\">'ENG'</span>, pages = <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># method2</span></span><br><span class=\"line\">extra = &#123;<span class=\"string\">'language'</span>: <span class=\"string\">'KOR'</span>, <span class=\"string\">'class'</span>: <span class=\"string\">'novel'</span>&#125;</span><br><span class=\"line\">book(<span class=\"string\">'lalala'</span>, <span class=\"string\">'tree'</span>, **extra)</span><br></pre></td></tr></table></figure>\n<p>PS：如果参数中已经有了一个可变参数，那么后面的命名关键字参数就不需要特殊分隔符’*‘了。<br><strong>参数顺序： 必选参数、默认参数、可变参数、命名关键字参数、关键字参数。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(a, b = <span class=\"number\">0</span>, *args, **kw)</span>:</span>\t\t<span class=\"comment\"># 必选参数、默认参数、可变参数、关键字参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(a, b = <span class=\"number\">0</span>, *, d, **kw)</span>:</span>\t\t<span class=\"comment\"># 必选参数、默认参数、可变参数、命名关键字参数、关键字参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p><strong>对于任意函数，都可以通过func(*args, **kw)的形式来调用它，无论参数是如何定义的。</strong></p>\n<h2 id=\"others\"><a href=\"#others\" class=\"headerlink\" title=\"others:\"></a>others:</h2><ul>\n<li>range([start = 0,] stop, [, step = 1]]), 生成从start开始（默认为0）到stop（不等于stop）,步长为step（默认为1）的整数序列；<br>start 与 step都是可选参数。</li>\n</ul>\n<p><br></p>\n<h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><h2 id=\"一些特性（切片、迭代、列表生成式、生成器）\"><a href=\"#一些特性（切片、迭代、列表生成式、生成器）\" class=\"headerlink\" title=\"一些特性（切片、迭代、列表生成式、生成器）\"></a>一些特性（切片、迭代、列表生成式、生成器）</h2><h3 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h3><p>针对截取操作<br>L[start: stop: step]<br>截取从start序号开始到stop序号，步长为step的值成一个list返回。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&gt;&gt;&gt; L = list(range(<span class=\"number\">10</span>))</span><br><span class=\"line\">\t\t[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&gt;&gt;&gt; L1 = L[:<span class=\"number\">5</span>]</span><br><span class=\"line\">\t\t[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&gt;&gt;&gt; L2 = L[<span class=\"number\">2</span>:<span class=\"number\">7</span>]</span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&gt;&gt;&gt; L3 = L[:<span class=\"number\">-1</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">\t\t[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&gt;&gt;&gt; L4 = L[:]</span><br><span class=\"line\">\t\t[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">```\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 迭代</span></span><br><span class=\"line\">给定一个list或tuple，通过<span class=\"keyword\">for</span>循环来遍历它，这种遍历叫做 迭代（iteration）</span><br><span class=\"line\">很多语言的迭代是通过下标来进行的，但python里，并不是。</span><br><span class=\"line\">当然，顺序可能就不是你当初定义它时的顺序了。</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">```python</span><br><span class=\"line\">\t\tweekday = &#123;<span class=\"string\">'Mon'</span>: <span class=\"number\">1</span>, <span class=\"string\">'Tue'</span>: <span class=\"number\">2</span>, <span class=\"string\">'Wed'</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> isinstance(weekday, Iterable):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> weekday:</span><br><span class=\"line\">\t\t\t\tprint(w)</span><br></pre></td></tr></table></figure>\n<p>isinstance(…, Iterable) 判断一个数据类型是否可迭代<br>一般可以可迭代对象是 集合数据类型（如 list、tuple、dict、set、str等），他们都是Iterable类型。</p>\n<h3 id=\"列表生成式\"><a href=\"#列表生成式\" class=\"headerlink\" title=\"列表生成式\"></a>列表生成式</h3><p>顾名思义，就是一个创建list的方式，<br>通过这种方式创建list比较便捷</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[x + y <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'ABC'</span> <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"string\">'XYZ'</span> <span class=\"keyword\">if</span> x != <span class=\"string\">'B'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其实上面那个等价于下面</span></span><br><span class=\"line\"></span><br><span class=\"line\">L = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'ABC'</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"string\">'XYZ'</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> x != <span class=\"string\">'B'</span>:</span><br><span class=\"line\">\t\t\tL.append(x+y)</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><p>针对于列表容量有限的缺陷，<br>生成器就是一边循环一边计算。<br>与列表生成式的区别是，列表生成时最外层是 []，而生成器最外层是 ()<br>而且，得到的generator，需要不停next得到下一个元素。（一般会通过for循环来迭代获取）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g = (x + y <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'ABC'</span> <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"string\">'XYZ'</span> <span class=\"keyword\">if</span> x != <span class=\"string\">'B'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> g:</span><br><span class=\"line\">\tprint(v)</span><br></pre></td></tr></table></figure>\n<p>可以作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列。<br>Iterator类型主要就两种，一种就是这个生成器，还有就是含yield的generator function</p>\n<h2 id=\"关于函数式编程-（-lambda、map、reduce、filter、-装饰器）\"><a href=\"#关于函数式编程-（-lambda、map、reduce、filter、-装饰器）\" class=\"headerlink\" title=\"关于函数式编程 （ lambda、map、reduce、filter、 装饰器）\"></a>关于函数式编程 （ lambda、map、reduce、filter、 装饰器）</h2><h3 id=\"lambda-arg1-arg2-arg3-…-expression\"><a href=\"#lambda-arg1-arg2-arg3-…-expression\" class=\"headerlink\" title=\"lambda [arg1 [, arg2, arg3, …]]: expression\"></a>lambda [arg1 [, arg2, arg3, …]]: expression</h3><p>也叫匿名函数，通过它可以非常方便快捷的定义使用一个函数。<br>具体效果，下面会给出。</p>\n<h3 id=\"map-func-seq1-seq2…\"><a href=\"#map-func-seq1-seq2…\" class=\"headerlink\" title=\"map(func, seq1[, seq2…])\"></a>map(func, seq1[, seq2…])</h3><p>将func作用于seq中的每一个元素，并用一个列表给出返回值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * x</span><br><span class=\"line\">m = map(f, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"comment\"># m 将会是一个列表 [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>\n<p>其实，用lambda更方便简洁</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m = map(<span class=\"keyword\">lambda</span> x: x*x, range(<span class=\"number\">1</span>, <span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce-func-seq-init\"><a href=\"#reduce-func-seq-init\" class=\"headerlink\" title=\"reduce(func, seq[, init])\"></a>reduce(func, seq[, init])</h3><p>这是一个二元操作函数，它用来将一个集合中所有数据进行从前到后的二元操作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fuctools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">specialAdd</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*<span class=\"number\">10</span> + y</span><br><span class=\"line\">val = reduce(specialAdd, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"comment\"># val将会是一个数字 12345</span></span><br></pre></td></tr></table></figure>\n<p>reduce要提前导入，<br>当然，也可以用lambda</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val = reduce(<span class=\"keyword\">lambda</span> x, y: x*<span class=\"number\">10</span> + y, range(<span class=\"number\">1</span>, <span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"filter-func-seq\"><a href=\"#filter-func-seq\" class=\"headerlink\" title=\"filter(func, seq)\"></a>filter(func, seq)</h3><p>可以当做过滤器，将集合中的每个数都传入函数，根据函数返回的bool变量来决定是否留下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bigger_than_five</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n &gt; <span class=\"number\">5</span></span><br><span class=\"line\">f = list(filter(bigger_than_five, [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]))</span><br><span class=\"line\"><span class=\"comment\"># f 将会是一个列表 [6, 7, 8]</span></span><br><span class=\"line\"></span><br><span class=\"line\">f2 = list(filter(<span class=\"keyword\">lambda</span> n: n &gt; <span class=\"number\">5</span>, range(<span class=\"number\">3</span>, <span class=\"number\">9</span>)))</span><br></pre></td></tr></table></figure>\n<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><p>装饰器的作用就像它名字一样，给函数以装饰，做一个更大一范围的修饰。<br>比如，有A、B、C三个果汁工厂，现在要在每瓶果汁上印一个小商标。<br>我们可以在每个工厂内建立一个流水线来印商标，<br>也可以专门建立一个工厂D来印商标。<br>装饰器，就像后者，工厂D。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myLog</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">'--- this is my log'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@myLog</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tprint(<span class=\"string\">'\\n\\ndemo is running\\n\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">demo()</span><br></pre></td></tr></table></figure>\n<p>注意要加语法糖 @装饰器函数<br>本装饰器的作用是在函数调用前输出一段log。</p>\n<p>如果想让装饰器函数带参数，那就要进行三层嵌套。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myLog</span><span class=\"params\">(logText)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">\t\t\tprint(logText)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> decorator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@myLog(\"hello log\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tprint(<span class=\"string\">'\\n\\ndemo is running\\n\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">demo()</span><br></pre></td></tr></table></figure>\n<p>但是，这里的函数名已经发生了更改，demo名称其实已经发生了更改，<br>demo.__name__ 是 wrapper<br>可以通过加<br>wrapper.__name__ = func.__name__<br>来改回来，<br>但是，过于繁琐，python提供了更好的方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myLog</span><span class=\"params\">(logText)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">\t\t@functools.wraps(func)</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">\t\t\tprint(logText)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> decorator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@myLog(\"hello log\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tprint(<span class=\"string\">'\\n\\ndemo is running\\n\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">demo()</span><br><span class=\"line\">print(demo.__name__)</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于面向对象编程\"><a href=\"#关于面向对象编程\" class=\"headerlink\" title=\"关于面向对象编程\"></a>关于面向对象编程</h2><p>python中是有类这个结构的。<br>还有一些命名规则：<br>变量名以 _  开头，代表私有变量（非强制）<br>变量名以 __ 开头，代表私有变量 （强制）<br>变量名以 __ 开头，并且以 __ 结尾，代表特殊变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age)</span>:</span></span><br><span class=\"line\">\t\tself.__name = name</span><br><span class=\"line\">\t\tself.age = age</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">'Person Eating...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(Person)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">'Student Eating...'</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">study</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">'Student Study...'</span>)</span><br></pre></td></tr></table></figure>\n<p>也可以对实例进行一些属性的绑定，当然，不会对类造成影响。<br>当然也可以对类进行方法绑定，其所有的实例均受影响</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_height</span><span class=\"params\">(self, height)</span>:</span></span><br><span class=\"line\">\tself.height = height</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\tname = <span class=\"string\">'tree'</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = Person()</span><br><span class=\"line\">print(<span class=\"string\">'p name is: '</span>, p.name)</span><br><span class=\"line\">print(<span class=\"string\">'person name is: '</span>, Person.name)</span><br><span class=\"line\"></span><br><span class=\"line\">p.age = <span class=\"number\">20</span></span><br><span class=\"line\">print(<span class=\"string\">'p age is: '</span>, p.age)</span><br><span class=\"line\">print(<span class=\"string\">'person age is: '</span>, Person.age</span><br><span class=\"line\"></span><br><span class=\"line\">Person.set_height = set_height</span><br><span class=\"line\">p.set_height(<span class=\"number\">180</span>)</span><br><span class=\"line\">print(p.height)</span><br></pre></td></tr></table></figure>\n<p>最后，可以通过在类内设置一些函数来使类更加完善:</p>\n<ul>\n<li>__init__<br>初始化方法</li>\n<li>__slots__<br>设定允许绑定的变量名（子类会继承父类）</li>\n<li>__len__<br>让类可以作用于len函数，设定计算类大小的方法</li>\n<li>__str__ 与 __repr__<br>都是用来当 print实例对象时 显示出来的字符串。<br>__str__是给用户看的，__repr__是给开发者看的（但一般都一样）</li>\n<li>__iter__ 与 __next__<br>可以让类作用于 for…in 循环</li>\n<li>__getitem__<br>可以像list一样实现按照下标取元素</li>\n<li>__getattr__<br>预设某属性默认值</li>\n<li>__call__<br>实现在实例本身的调用方法。</li>\n<li>装饰器实现get/set方法        </li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">\t@property</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> self._age</span><br><span class=\"line\"><span class=\"meta\">\t@age.setter</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">\t    self._age = value</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"归纳\"><a href=\"#归纳\" class=\"headerlink\" title=\"归纳\"></a>归纳</h1><p>python的一些基础东西，基本就这些了。<br>接下来，就可以去做一些东西来边练手边加深理解。<br>最后，<br>工具是死的，<br>人是活得，<br>不要局限自己，<br>放飞思维，<br>大胆去做。</p>\n<p><br><br><br><br><br></p>\n<hr>\n<p>参考：<br>着重推荐： <a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\" rel=\"noopener\">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000</a><br><a href=\"http://www.pythoner.com/46.html\" target=\"_blank\" rel=\"noopener\">http://www.pythoner.com/46.html</a></p>\n","site":{"data":{}},"excerpt":"<p>python脚本学习记录</p>","more":"<p><br></p>\n<hr>\n<p>动机：<br>脚本可以省很多事情，<br>开发游戏用了lua，<br>但是，<br>真正日常要做一些东西脚本的时候，<br>发现用lua还是比较麻烦些，<br>所以，<br>就瞄上了python，<br>恩，<br>说学就学。</p>\n<p>注意：</p>\n<ul>\n<li>用的是python3</li>\n<li>适合有一定脚本语言基础的人看（很多脚本语言的共性没有记录）</li>\n</ul>\n<hr>\n<p><br></p>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><h2 id=\"输出语句-print\"><a href=\"#输出语句-print\" class=\"headerlink\" title=\"输出语句 print\"></a>输出语句 print</h2><p><strong>注意多个参数的格式</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'hello python!'</span>)</span><br><span class=\"line\">x = <span class=\"number\">100</span></span><br><span class=\"line\">y = <span class=\"string\">'hello'</span></span><br><span class=\"line\">print(<span class=\"string\">'%s user, your score is %d'</span> % (y, x))</span><br><span class=\"line\">print(<span class=\"string\">r''</span>)\t\t\t\t\t\t\t<span class=\"comment\"># 在''内的字符不转义</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"list、tuple、dict、set\"><a href=\"#list、tuple、dict、set\" class=\"headerlink\" title=\"list、tuple、dict、set\"></a>list、tuple、dict、set</h2><ol>\n<li><p>list    列表，有序的集合，随时添加删除元素<br>L = []<br>常用方法:<br>访问元素 - L[index] - index支持负数<br>末尾加入元素 - L.append(val)<br>某位置插入元素 - L.insert(index, val)<br>删除末尾元素 - L.pop()<br>删除某位置元素 - del L[index]</p>\n</li>\n<li><p>tuple 元组，初始化后不可修改 <strong>[ 初始化一个元素的元组时，元素后要加, : t = (1, ) ]</strong><br>T = ()<br><strong>list 与 tuple 可相互嵌套，tuple中的list可以增删，因为存的是地址</strong></p>\n</li>\n<li><p>dict 字典（你也可以叫它map)<br>D = {‘key’: value, }</p>\n</li>\n<li><p>set 集合，无序不重复<br>S = set([])</p>\n</li>\n</ol>\n<h2 id=\"条件-与-循环\"><a href=\"#条件-与-循环\" class=\"headerlink\" title=\"条件 与 循环\"></a>条件 与 循环</h2><p>python的语法很简单，通过缩进来显示。<br>最重要的是<strong>:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> &lt;条件&gt;:</span><br><span class=\"line\">\t<span class=\"keyword\">continue</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> &lt;条件&gt;:</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> &lt; &gt; <span class=\"keyword\">in</span> &lt;对象集合&gt;:</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> &lt;条件&gt;:</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function_name</span><span class=\"params\">(parameters)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">pass</span>\t\t\t\t\t\t\t\t<span class=\"comment\"># 一旦定义一个函数，不可以什么都不写，但可以像这样</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"comment\"># 用pass来占位，先让代码运行起来。</span></span><br></pre></td></tr></table></figure>\n<p>当然，默认参数值，返回多个值，都是支持的<br>额外要注意的应该是 <strong>参数</strong> 部分，包括：必选参数、默认参数、可变参数、命名关键字参数、关键字参数。<br>可变参数允许传入0个或任意个参数，这些会被自动组装为一个tuple；<br>关键字参数允许传入0个或任意个含参数名的参数，这些被自动组装为1个dict。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">book</span><span class=\"params\">(name, author, **kw)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"string\">'language'</span> <span class=\"keyword\">in</span> kw: \t\t\t\t\t\t<span class=\"comment\"># 判断关键字参数中是否有 language 字段</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tprint(<span class=\"string\">'name: '</span>, name, <span class=\"string\">'author: '</span>, author, <span class=\"string\">'other: '</span>, kw)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># methon1</span></span><br><span class=\"line\">book(<span class=\"string\">'From Grass To Tree'</span>, <span class=\"string\">'ltree98'</span>, language = <span class=\"string\">'CHN'</span>)</span><br><span class=\"line\">book(<span class=\"string\">'How To Study Python'</span>, <span class=\"string\">'ltree98'</span>, language = <span class=\"string\">'ENG'</span>, pages = <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># method2</span></span><br><span class=\"line\">extra = &#123;<span class=\"string\">'language'</span>: <span class=\"string\">'KOR'</span>, <span class=\"string\">'class'</span>: <span class=\"string\">'novel'</span>&#125;</span><br><span class=\"line\">book(<span class=\"string\">'lalala'</span>, <span class=\"string\">'tree'</span>, **extra)</span><br></pre></td></tr></table></figure>\n<p>PS：如果参数中已经有了一个可变参数，那么后面的命名关键字参数就不需要特殊分隔符’*‘了。<br><strong>参数顺序： 必选参数、默认参数、可变参数、命名关键字参数、关键字参数。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(a, b = <span class=\"number\">0</span>, *args, **kw)</span>:</span>\t\t<span class=\"comment\"># 必选参数、默认参数、可变参数、关键字参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(a, b = <span class=\"number\">0</span>, *, d, **kw)</span>:</span>\t\t<span class=\"comment\"># 必选参数、默认参数、可变参数、命名关键字参数、关键字参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p><strong>对于任意函数，都可以通过func(*args, **kw)的形式来调用它，无论参数是如何定义的。</strong></p>\n<h2 id=\"others\"><a href=\"#others\" class=\"headerlink\" title=\"others:\"></a>others:</h2><ul>\n<li>range([start = 0,] stop, [, step = 1]]), 生成从start开始（默认为0）到stop（不等于stop）,步长为step（默认为1）的整数序列；<br>start 与 step都是可选参数。</li>\n</ul>\n<p><br></p>\n<h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><h2 id=\"一些特性（切片、迭代、列表生成式、生成器）\"><a href=\"#一些特性（切片、迭代、列表生成式、生成器）\" class=\"headerlink\" title=\"一些特性（切片、迭代、列表生成式、生成器）\"></a>一些特性（切片、迭代、列表生成式、生成器）</h2><h3 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h3><p>针对截取操作<br>L[start: stop: step]<br>截取从start序号开始到stop序号，步长为step的值成一个list返回。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&gt;&gt;&gt; L = list(range(<span class=\"number\">10</span>))</span><br><span class=\"line\">\t\t[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&gt;&gt;&gt; L1 = L[:<span class=\"number\">5</span>]</span><br><span class=\"line\">\t\t[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&gt;&gt;&gt; L2 = L[<span class=\"number\">2</span>:<span class=\"number\">7</span>]</span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&gt;&gt;&gt; L3 = L[:<span class=\"number\">-1</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">\t\t[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&gt;&gt;&gt; L4 = L[:]</span><br><span class=\"line\">\t\t[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">```\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 迭代</span></span><br><span class=\"line\">给定一个list或tuple，通过<span class=\"keyword\">for</span>循环来遍历它，这种遍历叫做 迭代（iteration）</span><br><span class=\"line\">很多语言的迭代是通过下标来进行的，但python里，并不是。</span><br><span class=\"line\">当然，顺序可能就不是你当初定义它时的顺序了。</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">```python</span><br><span class=\"line\">\t\tweekday = &#123;<span class=\"string\">'Mon'</span>: <span class=\"number\">1</span>, <span class=\"string\">'Tue'</span>: <span class=\"number\">2</span>, <span class=\"string\">'Wed'</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> isinstance(weekday, Iterable):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> weekday:</span><br><span class=\"line\">\t\t\t\tprint(w)</span><br></pre></td></tr></table></figure>\n<p>isinstance(…, Iterable) 判断一个数据类型是否可迭代<br>一般可以可迭代对象是 集合数据类型（如 list、tuple、dict、set、str等），他们都是Iterable类型。</p>\n<h3 id=\"列表生成式\"><a href=\"#列表生成式\" class=\"headerlink\" title=\"列表生成式\"></a>列表生成式</h3><p>顾名思义，就是一个创建list的方式，<br>通过这种方式创建list比较便捷</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[x + y <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'ABC'</span> <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"string\">'XYZ'</span> <span class=\"keyword\">if</span> x != <span class=\"string\">'B'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其实上面那个等价于下面</span></span><br><span class=\"line\"></span><br><span class=\"line\">L = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'ABC'</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"string\">'XYZ'</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> x != <span class=\"string\">'B'</span>:</span><br><span class=\"line\">\t\t\tL.append(x+y)</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><p>针对于列表容量有限的缺陷，<br>生成器就是一边循环一边计算。<br>与列表生成式的区别是，列表生成时最外层是 []，而生成器最外层是 ()<br>而且，得到的generator，需要不停next得到下一个元素。（一般会通过for循环来迭代获取）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g = (x + y <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'ABC'</span> <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"string\">'XYZ'</span> <span class=\"keyword\">if</span> x != <span class=\"string\">'B'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> g:</span><br><span class=\"line\">\tprint(v)</span><br></pre></td></tr></table></figure>\n<p>可以作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列。<br>Iterator类型主要就两种，一种就是这个生成器，还有就是含yield的generator function</p>\n<h2 id=\"关于函数式编程-（-lambda、map、reduce、filter、-装饰器）\"><a href=\"#关于函数式编程-（-lambda、map、reduce、filter、-装饰器）\" class=\"headerlink\" title=\"关于函数式编程 （ lambda、map、reduce、filter、 装饰器）\"></a>关于函数式编程 （ lambda、map、reduce、filter、 装饰器）</h2><h3 id=\"lambda-arg1-arg2-arg3-…-expression\"><a href=\"#lambda-arg1-arg2-arg3-…-expression\" class=\"headerlink\" title=\"lambda [arg1 [, arg2, arg3, …]]: expression\"></a>lambda [arg1 [, arg2, arg3, …]]: expression</h3><p>也叫匿名函数，通过它可以非常方便快捷的定义使用一个函数。<br>具体效果，下面会给出。</p>\n<h3 id=\"map-func-seq1-seq2…\"><a href=\"#map-func-seq1-seq2…\" class=\"headerlink\" title=\"map(func, seq1[, seq2…])\"></a>map(func, seq1[, seq2…])</h3><p>将func作用于seq中的每一个元素，并用一个列表给出返回值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * x</span><br><span class=\"line\">m = map(f, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"comment\"># m 将会是一个列表 [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure>\n<p>其实，用lambda更方便简洁</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m = map(<span class=\"keyword\">lambda</span> x: x*x, range(<span class=\"number\">1</span>, <span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce-func-seq-init\"><a href=\"#reduce-func-seq-init\" class=\"headerlink\" title=\"reduce(func, seq[, init])\"></a>reduce(func, seq[, init])</h3><p>这是一个二元操作函数，它用来将一个集合中所有数据进行从前到后的二元操作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fuctools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">specialAdd</span><span class=\"params\">(x, y)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*<span class=\"number\">10</span> + y</span><br><span class=\"line\">val = reduce(specialAdd, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"comment\"># val将会是一个数字 12345</span></span><br></pre></td></tr></table></figure>\n<p>reduce要提前导入，<br>当然，也可以用lambda</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val = reduce(<span class=\"keyword\">lambda</span> x, y: x*<span class=\"number\">10</span> + y, range(<span class=\"number\">1</span>, <span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"filter-func-seq\"><a href=\"#filter-func-seq\" class=\"headerlink\" title=\"filter(func, seq)\"></a>filter(func, seq)</h3><p>可以当做过滤器，将集合中的每个数都传入函数，根据函数返回的bool变量来决定是否留下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bigger_than_five</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n &gt; <span class=\"number\">5</span></span><br><span class=\"line\">f = list(filter(bigger_than_five, [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]))</span><br><span class=\"line\"><span class=\"comment\"># f 将会是一个列表 [6, 7, 8]</span></span><br><span class=\"line\"></span><br><span class=\"line\">f2 = list(filter(<span class=\"keyword\">lambda</span> n: n &gt; <span class=\"number\">5</span>, range(<span class=\"number\">3</span>, <span class=\"number\">9</span>)))</span><br></pre></td></tr></table></figure>\n<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><p>装饰器的作用就像它名字一样，给函数以装饰，做一个更大一范围的修饰。<br>比如，有A、B、C三个果汁工厂，现在要在每瓶果汁上印一个小商标。<br>我们可以在每个工厂内建立一个流水线来印商标，<br>也可以专门建立一个工厂D来印商标。<br>装饰器，就像后者，工厂D。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myLog</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">'--- this is my log'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@myLog</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tprint(<span class=\"string\">'\\n\\ndemo is running\\n\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">demo()</span><br></pre></td></tr></table></figure>\n<p>注意要加语法糖 @装饰器函数<br>本装饰器的作用是在函数调用前输出一段log。</p>\n<p>如果想让装饰器函数带参数，那就要进行三层嵌套。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myLog</span><span class=\"params\">(logText)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">\t\t\tprint(logText)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> decorator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@myLog(\"hello log\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tprint(<span class=\"string\">'\\n\\ndemo is running\\n\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">demo()</span><br></pre></td></tr></table></figure>\n<p>但是，这里的函数名已经发生了更改，demo名称其实已经发生了更改，<br>demo.__name__ 是 wrapper<br>可以通过加<br>wrapper.__name__ = func.__name__<br>来改回来，<br>但是，过于繁琐，python提供了更好的方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myLog</span><span class=\"params\">(logText)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">\t\t@functools.wraps(func)</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">\t\t\tprint(logText)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> decorator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@myLog(\"hello log\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tprint(<span class=\"string\">'\\n\\ndemo is running\\n\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">demo()</span><br><span class=\"line\">print(demo.__name__)</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于面向对象编程\"><a href=\"#关于面向对象编程\" class=\"headerlink\" title=\"关于面向对象编程\"></a>关于面向对象编程</h2><p>python中是有类这个结构的。<br>还有一些命名规则：<br>变量名以 _  开头，代表私有变量（非强制）<br>变量名以 __ 开头，代表私有变量 （强制）<br>变量名以 __ 开头，并且以 __ 结尾，代表特殊变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age)</span>:</span></span><br><span class=\"line\">\t\tself.__name = name</span><br><span class=\"line\">\t\tself.age = age</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">'Person Eating...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(Person)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">'Student Eating...'</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">study</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tprint(<span class=\"string\">'Student Study...'</span>)</span><br></pre></td></tr></table></figure>\n<p>也可以对实例进行一些属性的绑定，当然，不会对类造成影响。<br>当然也可以对类进行方法绑定，其所有的实例均受影响</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_height</span><span class=\"params\">(self, height)</span>:</span></span><br><span class=\"line\">\tself.height = height</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\tname = <span class=\"string\">'tree'</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = Person()</span><br><span class=\"line\">print(<span class=\"string\">'p name is: '</span>, p.name)</span><br><span class=\"line\">print(<span class=\"string\">'person name is: '</span>, Person.name)</span><br><span class=\"line\"></span><br><span class=\"line\">p.age = <span class=\"number\">20</span></span><br><span class=\"line\">print(<span class=\"string\">'p age is: '</span>, p.age)</span><br><span class=\"line\">print(<span class=\"string\">'person age is: '</span>, Person.age</span><br><span class=\"line\"></span><br><span class=\"line\">Person.set_height = set_height</span><br><span class=\"line\">p.set_height(<span class=\"number\">180</span>)</span><br><span class=\"line\">print(p.height)</span><br></pre></td></tr></table></figure>\n<p>最后，可以通过在类内设置一些函数来使类更加完善:</p>\n<ul>\n<li>__init__<br>初始化方法</li>\n<li>__slots__<br>设定允许绑定的变量名（子类会继承父类）</li>\n<li>__len__<br>让类可以作用于len函数，设定计算类大小的方法</li>\n<li>__str__ 与 __repr__<br>都是用来当 print实例对象时 显示出来的字符串。<br>__str__是给用户看的，__repr__是给开发者看的（但一般都一样）</li>\n<li>__iter__ 与 __next__<br>可以让类作用于 for…in 循环</li>\n<li>__getitem__<br>可以像list一样实现按照下标取元素</li>\n<li>__getattr__<br>预设某属性默认值</li>\n<li>__call__<br>实现在实例本身的调用方法。</li>\n<li>装饰器实现get/set方法        </li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">\t@property</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> self._age</span><br><span class=\"line\"><span class=\"meta\">\t@age.setter</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">\t    self._age = value</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h1 id=\"归纳\"><a href=\"#归纳\" class=\"headerlink\" title=\"归纳\"></a>归纳</h1><p>python的一些基础东西，基本就这些了。<br>接下来，就可以去做一些东西来边练手边加深理解。<br>最后，<br>工具是死的，<br>人是活得，<br>不要局限自己，<br>放飞思维，<br>大胆去做。</p>\n<p><br><br><br><br><br></p>\n<hr>\n<p>参考：<br>着重推荐： <a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\" rel=\"noopener\">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000</a><br><a href=\"http://www.pythoner.com/46.html\" target=\"_blank\" rel=\"noopener\">http://www.pythoner.com/46.html</a></p>"},{"title":"《REWORK》读记","date":"2016-11-20T13:00:00.000Z","_content":"\nJason Friend 与 David Heinemeier Hansson 的 《REWORK》\n\n<!-- more -->\n\n<br/>\n\n好喜欢这种结构的书籍，\n每段都不是很长，\n很多段之间没有特别强大的关联性，\n特别适合在坐公交、坐地铁时候看一看。\n\n这本书感觉就像是给准备创业的人的一个个小TIP，\n作者把他们创业中遇到的想到的总结起来，供后人参考。\n还有，这本书的插图，真是赞的很。\n\n这其中，我最喜欢的一小段，\n就是 —— Tone is in your fingers\n你的思想，你的东西，通过改变工具是变不了的。\n\n作者之后也发布了另一部新作 《REMOTE》，\n评价好像不是很好。\n但是，还是要看一看的。\n\n最最后，这本书中文名叫 —— 重来\n额...好吧。","source":"_posts/《REWORK》读记.md","raw":"---\ntitle: 《REWORK》读记\ndate: 2016-11-20 21:00:00\ntags: 看着读\n\n---\n\nJason Friend 与 David Heinemeier Hansson 的 《REWORK》\n\n<!-- more -->\n\n<br/>\n\n好喜欢这种结构的书籍，\n每段都不是很长，\n很多段之间没有特别强大的关联性，\n特别适合在坐公交、坐地铁时候看一看。\n\n这本书感觉就像是给准备创业的人的一个个小TIP，\n作者把他们创业中遇到的想到的总结起来，供后人参考。\n还有，这本书的插图，真是赞的很。\n\n这其中，我最喜欢的一小段，\n就是 —— Tone is in your fingers\n你的思想，你的东西，通过改变工具是变不了的。\n\n作者之后也发布了另一部新作 《REMOTE》，\n评价好像不是很好。\n但是，还是要看一看的。\n\n最最后，这本书中文名叫 —— 重来\n额...好吧。","slug":"《REWORK》读记","published":1,"updated":"2018-07-17T17:05:10.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbca000tesvq1q8fuxpk","content":"<p>Jason Friend 与 David Heinemeier Hansson 的 《REWORK》</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>好喜欢这种结构的书籍，<br>每段都不是很长，<br>很多段之间没有特别强大的关联性，<br>特别适合在坐公交、坐地铁时候看一看。</p>\n<p>这本书感觉就像是给准备创业的人的一个个小TIP，<br>作者把他们创业中遇到的想到的总结起来，供后人参考。<br>还有，这本书的插图，真是赞的很。</p>\n<p>这其中，我最喜欢的一小段，<br>就是 —— Tone is in your fingers<br>你的思想，你的东西，通过改变工具是变不了的。</p>\n<p>作者之后也发布了另一部新作 《REMOTE》，<br>评价好像不是很好。<br>但是，还是要看一看的。</p>\n<p>最最后，这本书中文名叫 —— 重来<br>额…好吧。</p>\n","site":{"data":{}},"excerpt":"<p>Jason Friend 与 David Heinemeier Hansson 的 《REWORK》</p>","more":"<p><br></p>\n<p>好喜欢这种结构的书籍，<br>每段都不是很长，<br>很多段之间没有特别强大的关联性，<br>特别适合在坐公交、坐地铁时候看一看。</p>\n<p>这本书感觉就像是给准备创业的人的一个个小TIP，<br>作者把他们创业中遇到的想到的总结起来，供后人参考。<br>还有，这本书的插图，真是赞的很。</p>\n<p>这其中，我最喜欢的一小段，<br>就是 —— Tone is in your fingers<br>你的思想，你的东西，通过改变工具是变不了的。</p>\n<p>作者之后也发布了另一部新作 《REMOTE》，<br>评价好像不是很好。<br>但是，还是要看一看的。</p>\n<p>最最后，这本书中文名叫 —— 重来<br>额…好吧。</p>"},{"title":"《三体》读感","date":"2017-02-13T13:37:35.000Z","_content":"\n《三体》 第一部，读感\n\n<!-- more -->\n\n<br/>\n\n这是我看的第一部科幻小说，\n正如同事所言: 起点那么高，也不怕扯到裆= =..\n但是，自小阅历无数网络鸦片小说的我，历经各种玄幻校园修真异世穿越等毒害，当然不至于败倒在此。\n\n<br/>\n\n我知道这本书还是因为电影《超体》，当时好像挺乱。\n我看过电影，也看完了这本书第一部，\n个人感觉这两者好像没大有啥关系呀？如果同为科幻类也算关系的话，那它们倒还是有点儿关系的。\n\n<br/>\n\n第一部看完，还好，没有上来就一堆理论压死我。\n最开始台球问题的启蒙，瞬间就打开了我的思维。\n后面看到汪淼面对各种离奇的事物的恐慌，当时还有些不理解，\n后来才明白，这大概就是敬畏吧，无知的人才无所畏惧，知道的越多，就越敬畏。\n当然，这里面还是有一些理论术语什么的，还是不懂。\n但也没有去苛求，也没有去深究，\n才不管死亡倒计时的原理呢？别耽误我往后看！（傲娇小脸 ┗|｀O′|┛ ）\n\n<br/>\n\n整本书看完，\n印象最深刻的还是那个三体游戏以及它背后的三体文明，\n乱纪元与恒纪元的交替，\n文明一次次出现，一次次毁灭，\n但不变的是它们的目标，为了生存。\n为了生存，一次次脱水；\n为了生存，不断追求纪元规律；\n但是，找到规律后发现，自己的星球随时可能灰飞烟灭。\n于是，为了生存，它们前往地球。\n但是，怕到了地球，自己文明被压制，被地球文明毁灭，所以要压制地球文明。\n一切都是为了生存。\n但是，生存下去后呢？\n大概就是地球如今的模样，陷入内斗了。\n这时，会不会又有其他的文明来替代呢？\n\n<br/>\n\n最后，就是这本书的后记：\n如果存在外星文明，那么宇宙中有共同的道德标准吗？\n我翻来覆去的想，还是觉得不会有。\n（本来想了一堆，但是还是不写了，太负面太消极，我自己消极消极就够了..)\n\n<br/>\n\n最后的最后：\n\t我们都只是虫子而已。\n\n<br/>\n\n期待拜读后两部作品。\n","source":"_posts/《三体》读感.md","raw":"---\ntitle: 《三体》读感\ndate: 2017-02-13 21:37:35\ntags: 看着读\n\n---\n\n《三体》 第一部，读感\n\n<!-- more -->\n\n<br/>\n\n这是我看的第一部科幻小说，\n正如同事所言: 起点那么高，也不怕扯到裆= =..\n但是，自小阅历无数网络鸦片小说的我，历经各种玄幻校园修真异世穿越等毒害，当然不至于败倒在此。\n\n<br/>\n\n我知道这本书还是因为电影《超体》，当时好像挺乱。\n我看过电影，也看完了这本书第一部，\n个人感觉这两者好像没大有啥关系呀？如果同为科幻类也算关系的话，那它们倒还是有点儿关系的。\n\n<br/>\n\n第一部看完，还好，没有上来就一堆理论压死我。\n最开始台球问题的启蒙，瞬间就打开了我的思维。\n后面看到汪淼面对各种离奇的事物的恐慌，当时还有些不理解，\n后来才明白，这大概就是敬畏吧，无知的人才无所畏惧，知道的越多，就越敬畏。\n当然，这里面还是有一些理论术语什么的，还是不懂。\n但也没有去苛求，也没有去深究，\n才不管死亡倒计时的原理呢？别耽误我往后看！（傲娇小脸 ┗|｀O′|┛ ）\n\n<br/>\n\n整本书看完，\n印象最深刻的还是那个三体游戏以及它背后的三体文明，\n乱纪元与恒纪元的交替，\n文明一次次出现，一次次毁灭，\n但不变的是它们的目标，为了生存。\n为了生存，一次次脱水；\n为了生存，不断追求纪元规律；\n但是，找到规律后发现，自己的星球随时可能灰飞烟灭。\n于是，为了生存，它们前往地球。\n但是，怕到了地球，自己文明被压制，被地球文明毁灭，所以要压制地球文明。\n一切都是为了生存。\n但是，生存下去后呢？\n大概就是地球如今的模样，陷入内斗了。\n这时，会不会又有其他的文明来替代呢？\n\n<br/>\n\n最后，就是这本书的后记：\n如果存在外星文明，那么宇宙中有共同的道德标准吗？\n我翻来覆去的想，还是觉得不会有。\n（本来想了一堆，但是还是不写了，太负面太消极，我自己消极消极就够了..)\n\n<br/>\n\n最后的最后：\n\t我们都只是虫子而已。\n\n<br/>\n\n期待拜读后两部作品。\n","slug":"《三体》读感","published":1,"updated":"2018-07-17T17:05:10.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbcc000wesvqd670jaku","content":"<p>《三体》 第一部，读感</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>这是我看的第一部科幻小说，<br>正如同事所言: 起点那么高，也不怕扯到裆= =..<br>但是，自小阅历无数网络鸦片小说的我，历经各种玄幻校园修真异世穿越等毒害，当然不至于败倒在此。</p>\n<p><br></p>\n<p>我知道这本书还是因为电影《超体》，当时好像挺乱。<br>我看过电影，也看完了这本书第一部，<br>个人感觉这两者好像没大有啥关系呀？如果同为科幻类也算关系的话，那它们倒还是有点儿关系的。</p>\n<p><br></p>\n<p>第一部看完，还好，没有上来就一堆理论压死我。<br>最开始台球问题的启蒙，瞬间就打开了我的思维。<br>后面看到汪淼面对各种离奇的事物的恐慌，当时还有些不理解，<br>后来才明白，这大概就是敬畏吧，无知的人才无所畏惧，知道的越多，就越敬畏。<br>当然，这里面还是有一些理论术语什么的，还是不懂。<br>但也没有去苛求，也没有去深究，<br>才不管死亡倒计时的原理呢？别耽误我往后看！（傲娇小脸 ┗|｀O′|┛ ）</p>\n<p><br></p>\n<p>整本书看完，<br>印象最深刻的还是那个三体游戏以及它背后的三体文明，<br>乱纪元与恒纪元的交替，<br>文明一次次出现，一次次毁灭，<br>但不变的是它们的目标，为了生存。<br>为了生存，一次次脱水；<br>为了生存，不断追求纪元规律；<br>但是，找到规律后发现，自己的星球随时可能灰飞烟灭。<br>于是，为了生存，它们前往地球。<br>但是，怕到了地球，自己文明被压制，被地球文明毁灭，所以要压制地球文明。<br>一切都是为了生存。<br>但是，生存下去后呢？<br>大概就是地球如今的模样，陷入内斗了。<br>这时，会不会又有其他的文明来替代呢？</p>\n<p><br></p>\n<p>最后，就是这本书的后记：<br>如果存在外星文明，那么宇宙中有共同的道德标准吗？<br>我翻来覆去的想，还是觉得不会有。<br>（本来想了一堆，但是还是不写了，太负面太消极，我自己消极消极就够了..)</p>\n<p><br></p>\n<p>最后的最后：<br>    我们都只是虫子而已。</p>\n<p><br></p>\n<p>期待拜读后两部作品。</p>\n","site":{"data":{}},"excerpt":"<p>《三体》 第一部，读感</p>","more":"<p><br></p>\n<p>这是我看的第一部科幻小说，<br>正如同事所言: 起点那么高，也不怕扯到裆= =..<br>但是，自小阅历无数网络鸦片小说的我，历经各种玄幻校园修真异世穿越等毒害，当然不至于败倒在此。</p>\n<p><br></p>\n<p>我知道这本书还是因为电影《超体》，当时好像挺乱。<br>我看过电影，也看完了这本书第一部，<br>个人感觉这两者好像没大有啥关系呀？如果同为科幻类也算关系的话，那它们倒还是有点儿关系的。</p>\n<p><br></p>\n<p>第一部看完，还好，没有上来就一堆理论压死我。<br>最开始台球问题的启蒙，瞬间就打开了我的思维。<br>后面看到汪淼面对各种离奇的事物的恐慌，当时还有些不理解，<br>后来才明白，这大概就是敬畏吧，无知的人才无所畏惧，知道的越多，就越敬畏。<br>当然，这里面还是有一些理论术语什么的，还是不懂。<br>但也没有去苛求，也没有去深究，<br>才不管死亡倒计时的原理呢？别耽误我往后看！（傲娇小脸 ┗|｀O′|┛ ）</p>\n<p><br></p>\n<p>整本书看完，<br>印象最深刻的还是那个三体游戏以及它背后的三体文明，<br>乱纪元与恒纪元的交替，<br>文明一次次出现，一次次毁灭，<br>但不变的是它们的目标，为了生存。<br>为了生存，一次次脱水；<br>为了生存，不断追求纪元规律；<br>但是，找到规律后发现，自己的星球随时可能灰飞烟灭。<br>于是，为了生存，它们前往地球。<br>但是，怕到了地球，自己文明被压制，被地球文明毁灭，所以要压制地球文明。<br>一切都是为了生存。<br>但是，生存下去后呢？<br>大概就是地球如今的模样，陷入内斗了。<br>这时，会不会又有其他的文明来替代呢？</p>\n<p><br></p>\n<p>最后，就是这本书的后记：<br>如果存在外星文明，那么宇宙中有共同的道德标准吗？<br>我翻来覆去的想，还是觉得不会有。<br>（本来想了一堆，但是还是不写了，太负面太消极，我自己消极消极就够了..)</p>\n<p><br></p>\n<p>最后的最后：<br>    我们都只是虫子而已。</p>\n<p><br></p>\n<p>期待拜读后两部作品。</p>"},{"title":"《天才在左, 疯子在右》读记","date":"2017-07-30T14:59:16.000Z","_content":"\n想看到真正的世界，\n就要\n用天的眼睛去看天，\n用云的眼睛去看云，\n用风的眼睛去看风，\n用花草树木的眼睛去看花草树木，\n用石头的眼睛看石头，\n用大海的眼睛去看大海，\n用动物的眼睛去看动物，\n用人的眼睛去看人。 \n\n<!-- more -->\n\n<br/>\n\n# 读感\n\n最早看到这本书，是在亚马逊2016年度畅销榜单中。 \n然后看了下简介，是介绍作者接触采访”非常态人群”，整理出来的。 \n看完介绍，就感觉，应该会有点意思，然后读了这本书； \n结果，没用了三天，就读完了(上下班路上及午休间隙)。\n\n在阅读这本书期间，及刚读完的时候，感觉真的很棒，非常棒。 \n但是，过了一段时间再审视一下，感觉有些怪。 \n在阅读的过程中，越看越像小说一般，每一章精彩绝伦，引人入胜。 \n或许是为了发行，作者对采访内容有修饰；或许是作者发挥过多，导致文章少了些真实。\n\n再说说，里面的一些章节， \n给我印象最深的一个是[大风]，尤其最后那一句 ———— 如果那是只有灵魂才能感受到的大风… \n读完这一句，头皮都有点发麻了。\n\n最后，这本书， \n给我感觉还是观点与想象的结合， \n观点依旧是它们的观点， \n但，内容和文章，就不一定有这么的…\n\n<br/>\n<br/>\n\n# 文中片段\n\n跨越时间地看，我们是一个很长很长的虫子怪物，从床上延伸到大街上，延伸到学校，延伸到公司，延伸到商场，延伸到好多地方。因为我们的动作在每个时间段都是不同的，所以跨越时间来看，我们都是一条条虫子。从某一个时间段开始，到某一个时间段结束。 \n———— [四维虫子]\n\n<br/>\n\n指尖的戒指不再闪亮 \n婚纱在衣柜早已尘封 \n我们的容颜都已慢慢地苍老 \n但那份心情，却依旧没有改变 \n感谢你带给我的每一天 \n正是因为你 \n我才有勇气说 \n“永远, 永远” \n———— [永远, 永远]\n\n<br/>\n\n想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛看石头，用大海的眼睛去看大海，用动物的眼睛去看动物，用人的眼睛去看人。 \n———— [真正的世界]\n\n<br/>\n\n每当我想起这位患者，除了那些离奇的偷取时间者，好像还能看到她认真吃东西的样子——我从未见过有人那么认真的吃东西。每一口，每一次都是那么谨慎仔细的态度，仿佛整个世界都不存在了，存在的只是自己和手中的那条巧克力，以及嘴里那慢慢融化的味道。 \n———— [偷取时间]","source":"_posts/《天才在左，疯子在右》读记.md","raw":"---\ntitle: 《天才在左, 疯子在右》读记\ndate: 2017-7-30 22:59:16\ntags: 看着读\n\n---\n\n想看到真正的世界，\n就要\n用天的眼睛去看天，\n用云的眼睛去看云，\n用风的眼睛去看风，\n用花草树木的眼睛去看花草树木，\n用石头的眼睛看石头，\n用大海的眼睛去看大海，\n用动物的眼睛去看动物，\n用人的眼睛去看人。 \n\n<!-- more -->\n\n<br/>\n\n# 读感\n\n最早看到这本书，是在亚马逊2016年度畅销榜单中。 \n然后看了下简介，是介绍作者接触采访”非常态人群”，整理出来的。 \n看完介绍，就感觉，应该会有点意思，然后读了这本书； \n结果，没用了三天，就读完了(上下班路上及午休间隙)。\n\n在阅读这本书期间，及刚读完的时候，感觉真的很棒，非常棒。 \n但是，过了一段时间再审视一下，感觉有些怪。 \n在阅读的过程中，越看越像小说一般，每一章精彩绝伦，引人入胜。 \n或许是为了发行，作者对采访内容有修饰；或许是作者发挥过多，导致文章少了些真实。\n\n再说说，里面的一些章节， \n给我印象最深的一个是[大风]，尤其最后那一句 ———— 如果那是只有灵魂才能感受到的大风… \n读完这一句，头皮都有点发麻了。\n\n最后，这本书， \n给我感觉还是观点与想象的结合， \n观点依旧是它们的观点， \n但，内容和文章，就不一定有这么的…\n\n<br/>\n<br/>\n\n# 文中片段\n\n跨越时间地看，我们是一个很长很长的虫子怪物，从床上延伸到大街上，延伸到学校，延伸到公司，延伸到商场，延伸到好多地方。因为我们的动作在每个时间段都是不同的，所以跨越时间来看，我们都是一条条虫子。从某一个时间段开始，到某一个时间段结束。 \n———— [四维虫子]\n\n<br/>\n\n指尖的戒指不再闪亮 \n婚纱在衣柜早已尘封 \n我们的容颜都已慢慢地苍老 \n但那份心情，却依旧没有改变 \n感谢你带给我的每一天 \n正是因为你 \n我才有勇气说 \n“永远, 永远” \n———— [永远, 永远]\n\n<br/>\n\n想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛看石头，用大海的眼睛去看大海，用动物的眼睛去看动物，用人的眼睛去看人。 \n———— [真正的世界]\n\n<br/>\n\n每当我想起这位患者，除了那些离奇的偷取时间者，好像还能看到她认真吃东西的样子——我从未见过有人那么认真的吃东西。每一口，每一次都是那么谨慎仔细的态度，仿佛整个世界都不存在了，存在的只是自己和手中的那条巧克力，以及嘴里那慢慢融化的味道。 \n———— [偷取时间]","slug":"《天才在左，疯子在右》读记","published":1,"updated":"2018-07-17T17:05:10.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbcd000yesvq0dos3utx","content":"<p>想看到真正的世界，<br>就要<br>用天的眼睛去看天，<br>用云的眼睛去看云，<br>用风的眼睛去看风，<br>用花草树木的眼睛去看花草树木，<br>用石头的眼睛看石头，<br>用大海的眼睛去看大海，<br>用动物的眼睛去看动物，<br>用人的眼睛去看人。 </p>\n<a id=\"more\"></a>\n<p><br></p>\n<h1 id=\"读感\"><a href=\"#读感\" class=\"headerlink\" title=\"读感\"></a>读感</h1><p>最早看到这本书，是在亚马逊2016年度畅销榜单中。<br>然后看了下简介，是介绍作者接触采访”非常态人群”，整理出来的。<br>看完介绍，就感觉，应该会有点意思，然后读了这本书；<br>结果，没用了三天，就读完了(上下班路上及午休间隙)。</p>\n<p>在阅读这本书期间，及刚读完的时候，感觉真的很棒，非常棒。<br>但是，过了一段时间再审视一下，感觉有些怪。<br>在阅读的过程中，越看越像小说一般，每一章精彩绝伦，引人入胜。<br>或许是为了发行，作者对采访内容有修饰；或许是作者发挥过多，导致文章少了些真实。</p>\n<p>再说说，里面的一些章节，<br>给我印象最深的一个是[大风]，尤其最后那一句 ———— 如果那是只有灵魂才能感受到的大风…<br>读完这一句，头皮都有点发麻了。</p>\n<p>最后，这本书，<br>给我感觉还是观点与想象的结合，<br>观点依旧是它们的观点，<br>但，内容和文章，就不一定有这么的…</p>\n<p><br><br><br></p>\n<h1 id=\"文中片段\"><a href=\"#文中片段\" class=\"headerlink\" title=\"文中片段\"></a>文中片段</h1><p>跨越时间地看，我们是一个很长很长的虫子怪物，从床上延伸到大街上，延伸到学校，延伸到公司，延伸到商场，延伸到好多地方。因为我们的动作在每个时间段都是不同的，所以跨越时间来看，我们都是一条条虫子。从某一个时间段开始，到某一个时间段结束。<br>———— [四维虫子]</p>\n<p><br></p>\n<p>指尖的戒指不再闪亮<br>婚纱在衣柜早已尘封<br>我们的容颜都已慢慢地苍老<br>但那份心情，却依旧没有改变<br>感谢你带给我的每一天<br>正是因为你<br>我才有勇气说<br>“永远, 永远”<br>———— [永远, 永远]</p>\n<p><br></p>\n<p>想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛看石头，用大海的眼睛去看大海，用动物的眼睛去看动物，用人的眼睛去看人。<br>———— [真正的世界]</p>\n<p><br></p>\n<p>每当我想起这位患者，除了那些离奇的偷取时间者，好像还能看到她认真吃东西的样子——我从未见过有人那么认真的吃东西。每一口，每一次都是那么谨慎仔细的态度，仿佛整个世界都不存在了，存在的只是自己和手中的那条巧克力，以及嘴里那慢慢融化的味道。<br>———— [偷取时间]</p>\n","site":{"data":{}},"excerpt":"<p>想看到真正的世界，<br>就要<br>用天的眼睛去看天，<br>用云的眼睛去看云，<br>用风的眼睛去看风，<br>用花草树木的眼睛去看花草树木，<br>用石头的眼睛看石头，<br>用大海的眼睛去看大海，<br>用动物的眼睛去看动物，<br>用人的眼睛去看人。 </p>","more":"<p><br></p>\n<h1 id=\"读感\"><a href=\"#读感\" class=\"headerlink\" title=\"读感\"></a>读感</h1><p>最早看到这本书，是在亚马逊2016年度畅销榜单中。<br>然后看了下简介，是介绍作者接触采访”非常态人群”，整理出来的。<br>看完介绍，就感觉，应该会有点意思，然后读了这本书；<br>结果，没用了三天，就读完了(上下班路上及午休间隙)。</p>\n<p>在阅读这本书期间，及刚读完的时候，感觉真的很棒，非常棒。<br>但是，过了一段时间再审视一下，感觉有些怪。<br>在阅读的过程中，越看越像小说一般，每一章精彩绝伦，引人入胜。<br>或许是为了发行，作者对采访内容有修饰；或许是作者发挥过多，导致文章少了些真实。</p>\n<p>再说说，里面的一些章节，<br>给我印象最深的一个是[大风]，尤其最后那一句 ———— 如果那是只有灵魂才能感受到的大风…<br>读完这一句，头皮都有点发麻了。</p>\n<p>最后，这本书，<br>给我感觉还是观点与想象的结合，<br>观点依旧是它们的观点，<br>但，内容和文章，就不一定有这么的…</p>\n<p><br><br><br></p>\n<h1 id=\"文中片段\"><a href=\"#文中片段\" class=\"headerlink\" title=\"文中片段\"></a>文中片段</h1><p>跨越时间地看，我们是一个很长很长的虫子怪物，从床上延伸到大街上，延伸到学校，延伸到公司，延伸到商场，延伸到好多地方。因为我们的动作在每个时间段都是不同的，所以跨越时间来看，我们都是一条条虫子。从某一个时间段开始，到某一个时间段结束。<br>———— [四维虫子]</p>\n<p><br></p>\n<p>指尖的戒指不再闪亮<br>婚纱在衣柜早已尘封<br>我们的容颜都已慢慢地苍老<br>但那份心情，却依旧没有改变<br>感谢你带给我的每一天<br>正是因为你<br>我才有勇气说<br>“永远, 永远”<br>———— [永远, 永远]</p>\n<p><br></p>\n<p>想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛看石头，用大海的眼睛去看大海，用动物的眼睛去看动物，用人的眼睛去看人。<br>———— [真正的世界]</p>\n<p><br></p>\n<p>每当我想起这位患者，除了那些离奇的偷取时间者，好像还能看到她认真吃东西的样子——我从未见过有人那么认真的吃东西。每一口，每一次都是那么谨慎仔细的态度，仿佛整个世界都不存在了，存在的只是自己和手中的那条巧克力，以及嘴里那慢慢融化的味道。<br>———— [偷取时间]</p>"},{"title":"《我们仨》读记","date":"2017-05-30T13:00:00.000Z","_content":"\n很多东西，想做，能做，却又做不到。\n\n<!-- more -->\n\n<br/>\n\n这本书，本来是为了给女朋友培养读书兴趣而买的。\n但是，发现，好像不是她的菜（虽然，她磕磕绊绊的也读完了）。\n我也就每天临睡前读一些，慢慢也读完了。\n\n<br/>\n\n《我们仨》是杨绛老师在失去自己唯一女儿与丈夫后，写的一篇回忆录。\n总共三部分：\n- 我们俩老了\n- 我们仨失散了\n- 我一个人思念我们仨\n前两部分，用一个\"万里长梦\"来委婉的表达自己所经历的这些。\n最后一部分，回忆这些年来的一切。\n\n<br/>\n\n每次拿起这本书，再浮躁的心都会平静下来，慢慢的看，慢慢的感受，慢慢的品。\n其实我对这一家并没有多少了解，只是隐约记得她们的名气很大。\n通过这本书，感受到的就是一个老人，仔细的，缓慢的回忆这一切；所用的文字、语句没有过于粉饰，很朴素，很淡然；所写的情节，详则多叙，略则少言，不空洞，很流畅。\n有几段文字，我挺喜欢的：\n\n1. 我疑疑惑惑地在古驿道上一脚一脚走。柳树一年四季变化最勤。秋风刚刚一吹，柳叶就开始黄落，随着一阵一阵风，落下一批又一批叶子，冬天都变成光秃秃的寒柳。春风还没有吹，柳条上已经发芽，远看着已有绿意；柳树在春风里，就飘荡着嫩绿的长条。然后蒙蒙飞絮，要飞上一两个月。飞絮还没有飞完，柳树都已绿叶成荫。然后又一片片黄落，又变成光秃秃的寒柳。我在古驿道上，一脚一脚的，走了一年多。\n\n2. 看动物吃东西很有趣，狮子喂肉之前，得把同笼的分开，因为狮子见了肉就不顾夫妻情分。猪类动物吃花生，连皮带壳；熊吐出壳带皮吃；猴子剥了壳还捻去皮。可是大象食肠粗，饲养员喂大象，大团的粮食、整只的苹果、整条的萝卜、连皮的香蕉，都一口吞之。可是它自己进食却很精细；吃稻草，先从大捆稻草中拈出一小束，拍打干净，筑筑整齐，才送入口中。我们断不定最聪明的是灵活的猴子还是笨重的大象。我们爱大象。\n\n<br/>\n\n最喜欢的还有书前后的书信，现在都是微信QQ的时代，看到这些书信，真的别有一番风趣。\n\n<br/>\n\n\"我们仨其实是最平凡不过的。我们这个家，很朴素；我们三个人，很单纯。我们与世无求，与人无争，只求相聚在一起，相守在一起，各自做力所能及的事。\"\n但是，这种最朴素最平凡的家，也是最令人羡慕的。\n即使，想去做，并且能做到，却又做不到的。\n","source":"_posts/《我们仨》读记.md","raw":"---\ntitle: 《我们仨》读记\ndate: 2017-05-30 21:00:00\ntags: 看着读\n\n---\n\n很多东西，想做，能做，却又做不到。\n\n<!-- more -->\n\n<br/>\n\n这本书，本来是为了给女朋友培养读书兴趣而买的。\n但是，发现，好像不是她的菜（虽然，她磕磕绊绊的也读完了）。\n我也就每天临睡前读一些，慢慢也读完了。\n\n<br/>\n\n《我们仨》是杨绛老师在失去自己唯一女儿与丈夫后，写的一篇回忆录。\n总共三部分：\n- 我们俩老了\n- 我们仨失散了\n- 我一个人思念我们仨\n前两部分，用一个\"万里长梦\"来委婉的表达自己所经历的这些。\n最后一部分，回忆这些年来的一切。\n\n<br/>\n\n每次拿起这本书，再浮躁的心都会平静下来，慢慢的看，慢慢的感受，慢慢的品。\n其实我对这一家并没有多少了解，只是隐约记得她们的名气很大。\n通过这本书，感受到的就是一个老人，仔细的，缓慢的回忆这一切；所用的文字、语句没有过于粉饰，很朴素，很淡然；所写的情节，详则多叙，略则少言，不空洞，很流畅。\n有几段文字，我挺喜欢的：\n\n1. 我疑疑惑惑地在古驿道上一脚一脚走。柳树一年四季变化最勤。秋风刚刚一吹，柳叶就开始黄落，随着一阵一阵风，落下一批又一批叶子，冬天都变成光秃秃的寒柳。春风还没有吹，柳条上已经发芽，远看着已有绿意；柳树在春风里，就飘荡着嫩绿的长条。然后蒙蒙飞絮，要飞上一两个月。飞絮还没有飞完，柳树都已绿叶成荫。然后又一片片黄落，又变成光秃秃的寒柳。我在古驿道上，一脚一脚的，走了一年多。\n\n2. 看动物吃东西很有趣，狮子喂肉之前，得把同笼的分开，因为狮子见了肉就不顾夫妻情分。猪类动物吃花生，连皮带壳；熊吐出壳带皮吃；猴子剥了壳还捻去皮。可是大象食肠粗，饲养员喂大象，大团的粮食、整只的苹果、整条的萝卜、连皮的香蕉，都一口吞之。可是它自己进食却很精细；吃稻草，先从大捆稻草中拈出一小束，拍打干净，筑筑整齐，才送入口中。我们断不定最聪明的是灵活的猴子还是笨重的大象。我们爱大象。\n\n<br/>\n\n最喜欢的还有书前后的书信，现在都是微信QQ的时代，看到这些书信，真的别有一番风趣。\n\n<br/>\n\n\"我们仨其实是最平凡不过的。我们这个家，很朴素；我们三个人，很单纯。我们与世无求，与人无争，只求相聚在一起，相守在一起，各自做力所能及的事。\"\n但是，这种最朴素最平凡的家，也是最令人羡慕的。\n即使，想去做，并且能做到，却又做不到的。\n","slug":"《我们仨》读记","published":1,"updated":"2018-07-17T17:05:10.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbce0011esvq4dmybe7u","content":"<p>很多东西，想做，能做，却又做不到。</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>这本书，本来是为了给女朋友培养读书兴趣而买的。<br>但是，发现，好像不是她的菜（虽然，她磕磕绊绊的也读完了）。<br>我也就每天临睡前读一些，慢慢也读完了。</p>\n<p><br></p>\n<p>《我们仨》是杨绛老师在失去自己唯一女儿与丈夫后，写的一篇回忆录。<br>总共三部分：</p>\n<ul>\n<li>我们俩老了</li>\n<li>我们仨失散了</li>\n<li>我一个人思念我们仨<br>前两部分，用一个”万里长梦”来委婉的表达自己所经历的这些。<br>最后一部分，回忆这些年来的一切。</li>\n</ul>\n<p><br></p>\n<p>每次拿起这本书，再浮躁的心都会平静下来，慢慢的看，慢慢的感受，慢慢的品。<br>其实我对这一家并没有多少了解，只是隐约记得她们的名气很大。<br>通过这本书，感受到的就是一个老人，仔细的，缓慢的回忆这一切；所用的文字、语句没有过于粉饰，很朴素，很淡然；所写的情节，详则多叙，略则少言，不空洞，很流畅。<br>有几段文字，我挺喜欢的：</p>\n<ol>\n<li><p>我疑疑惑惑地在古驿道上一脚一脚走。柳树一年四季变化最勤。秋风刚刚一吹，柳叶就开始黄落，随着一阵一阵风，落下一批又一批叶子，冬天都变成光秃秃的寒柳。春风还没有吹，柳条上已经发芽，远看着已有绿意；柳树在春风里，就飘荡着嫩绿的长条。然后蒙蒙飞絮，要飞上一两个月。飞絮还没有飞完，柳树都已绿叶成荫。然后又一片片黄落，又变成光秃秃的寒柳。我在古驿道上，一脚一脚的，走了一年多。</p>\n</li>\n<li><p>看动物吃东西很有趣，狮子喂肉之前，得把同笼的分开，因为狮子见了肉就不顾夫妻情分。猪类动物吃花生，连皮带壳；熊吐出壳带皮吃；猴子剥了壳还捻去皮。可是大象食肠粗，饲养员喂大象，大团的粮食、整只的苹果、整条的萝卜、连皮的香蕉，都一口吞之。可是它自己进食却很精细；吃稻草，先从大捆稻草中拈出一小束，拍打干净，筑筑整齐，才送入口中。我们断不定最聪明的是灵活的猴子还是笨重的大象。我们爱大象。</p>\n</li>\n</ol>\n<p><br></p>\n<p>最喜欢的还有书前后的书信，现在都是微信QQ的时代，看到这些书信，真的别有一番风趣。</p>\n<p><br></p>\n<p>“我们仨其实是最平凡不过的。我们这个家，很朴素；我们三个人，很单纯。我们与世无求，与人无争，只求相聚在一起，相守在一起，各自做力所能及的事。”<br>但是，这种最朴素最平凡的家，也是最令人羡慕的。<br>即使，想去做，并且能做到，却又做不到的。</p>\n","site":{"data":{}},"excerpt":"<p>很多东西，想做，能做，却又做不到。</p>","more":"<p><br></p>\n<p>这本书，本来是为了给女朋友培养读书兴趣而买的。<br>但是，发现，好像不是她的菜（虽然，她磕磕绊绊的也读完了）。<br>我也就每天临睡前读一些，慢慢也读完了。</p>\n<p><br></p>\n<p>《我们仨》是杨绛老师在失去自己唯一女儿与丈夫后，写的一篇回忆录。<br>总共三部分：</p>\n<ul>\n<li>我们俩老了</li>\n<li>我们仨失散了</li>\n<li>我一个人思念我们仨<br>前两部分，用一个”万里长梦”来委婉的表达自己所经历的这些。<br>最后一部分，回忆这些年来的一切。</li>\n</ul>\n<p><br></p>\n<p>每次拿起这本书，再浮躁的心都会平静下来，慢慢的看，慢慢的感受，慢慢的品。<br>其实我对这一家并没有多少了解，只是隐约记得她们的名气很大。<br>通过这本书，感受到的就是一个老人，仔细的，缓慢的回忆这一切；所用的文字、语句没有过于粉饰，很朴素，很淡然；所写的情节，详则多叙，略则少言，不空洞，很流畅。<br>有几段文字，我挺喜欢的：</p>\n<ol>\n<li><p>我疑疑惑惑地在古驿道上一脚一脚走。柳树一年四季变化最勤。秋风刚刚一吹，柳叶就开始黄落，随着一阵一阵风，落下一批又一批叶子，冬天都变成光秃秃的寒柳。春风还没有吹，柳条上已经发芽，远看着已有绿意；柳树在春风里，就飘荡着嫩绿的长条。然后蒙蒙飞絮，要飞上一两个月。飞絮还没有飞完，柳树都已绿叶成荫。然后又一片片黄落，又变成光秃秃的寒柳。我在古驿道上，一脚一脚的，走了一年多。</p>\n</li>\n<li><p>看动物吃东西很有趣，狮子喂肉之前，得把同笼的分开，因为狮子见了肉就不顾夫妻情分。猪类动物吃花生，连皮带壳；熊吐出壳带皮吃；猴子剥了壳还捻去皮。可是大象食肠粗，饲养员喂大象，大团的粮食、整只的苹果、整条的萝卜、连皮的香蕉，都一口吞之。可是它自己进食却很精细；吃稻草，先从大捆稻草中拈出一小束，拍打干净，筑筑整齐，才送入口中。我们断不定最聪明的是灵活的猴子还是笨重的大象。我们爱大象。</p>\n</li>\n</ol>\n<p><br></p>\n<p>最喜欢的还有书前后的书信，现在都是微信QQ的时代，看到这些书信，真的别有一番风趣。</p>\n<p><br></p>\n<p>“我们仨其实是最平凡不过的。我们这个家，很朴素；我们三个人，很单纯。我们与世无求，与人无争，只求相聚在一起，相守在一起，各自做力所能及的事。”<br>但是，这种最朴素最平凡的家，也是最令人羡慕的。<br>即使，想去做，并且能做到，却又做不到的。</p>"},{"title":"《代码的整洁之道》读记","date":"2016-10-13T13:59:16.000Z","_content":"\n读这本书之前做了一些功课，很多人反映，书是一本好书，无奈作者废话太多。。。\n刚开始，我是不信的，但自己读下来才发现，古人诚不欺我啊。\n来划一下重点吧，写的这些或者是作者所描述的重点，或者是我感触比较深的东西。\n\n**Later equals never！**\n**稍后等于永不！**\n\n\n<!-- more -->\n\n<br/>\n\n# 章节小记\n\n## 第一章、关于整洁的代码\n- 代码的逻辑应该直截了当，让缺陷难以隐藏；尽量去减少依赖关系，从而便于维护；依据某种分层战略完善错误处理代码；性能调到最优，避免他人污染。\n- 糟糕的代码会引发混乱，别人修改糟糕的代码时，往往会越改越烂。\n- 每个函数、每个类、每个模块 都全神贯注去解决一件事\n- 代码应该通过其字面表达含义，因为不同的语言导致并非所有必需信息均可通过代码自身清晰表达。\n- 重要顺序：         \n\t- 能通过所有测试        \n\t- 没有重复代码         \n\t- 体现系统中的全部设计理念         \n\t- 包括尽量少的实体\n\n<br/>\n\n## 第二章、关于命名\n\n- 名副其实，见名知意\n- 使用可以读的出来的、可以被搜索的名称\n- 匈牙利命名法、去掉成员前缀\n- 类名、对象名 应该是名词或名词短语；    方法名应该是动词或动词短语\n- 不要抖机灵，每个概念对应一个词，不用双关语（add、insert）\n- 分离解决方案领域和问题领域的概念，与所涉问题领域更为贴近的代码，应当采用源自问题领域的名称\n- 添加有意义的语境\n\n<br/>\n\n## 第三章、关于函数\n- 函数的第一规则是短小，第二条规则是更短小！\n- 第一章节有提到过的： 每个函数尽量只做一件事。\n- 自顶向下阅读代码，向下规则\n- 函数参数，最理想为零，其次单参、双参、三参...（除非有足够特殊的理由，不要三参数+）\n- 不要向函数传入bool，因为这叫要求该函数不止做一件事\n- 不要有副作用，比如让你洗个苹果，你别洗完了然后吃了它。\n- 普遍而言，应避免使用输出参数。\n- 分隔指令与询问，要么让它干什么，要么让它回答什么。\n\n<br/>\n\n## 第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）\n- 代码会一直被维护更新，但是注释不一定。\n- 注释不能改变根本问题，它不能优化糟糕的代码。\n- 值得写的注释：       \n\t- 版权及著作权声明等        \n\t- 对你的意图的解释        \n\t- 警示        \n\t- TODO注释，为以后编写查找方便\n- 废注释：        \n\t- 没有规范化，过于局部的注释（需要纵览全文，才能知晓其意）        \n\t- 多余的注释（ getMaxNumber(num1, num2) ,还需要写这个函数是干啥的吗？）        \n\t- 误导性注释        \n\t- 循规式注释（例如：要求每个函数都要像API文档一样写一套注释来说明函数作用，参数意义。）        \n\t- 日志式注释（之前不是说光维护代码，不维护注释吗？现在我维护注释，而且把每次修改的时间、内容都加上。有那时间干啥不好，100行的文件，80行注释日志？）        \n\t- 归属与署名        \n\t- 注释掉的代码（除了注释的人，其他人都不敢删的东西）        \n\t- 信息过多，无条理\n\n<br/>\n\n## 第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)\n- 用空白行来区分你的模块\n- 关系应该密切的东西：        \n\t- 变量声明，应该尽可能的靠近其使用位置        \n\t- 实体变量，应该在类的顶部声明        \n\t- 相关函数，函数A调用了函数B，应该让A和B放到一起，A尽可能的放在B的上面        \n\t- 概念相关，概念相关的代码 应该放在一起，相关性与距离成正比\n- 尽量让代码行短小，最好以80个字符为上限，但最多不要超过120\n- 水平方向上的区隔：        \n\t- 赋值操作周围加上空格        \n\t- 不在函数名和左圆括号之间加空格        \n\t- 逗号后加空格       \n\t- 加减周围加空格，优先级高的乘除周围不加空格；当然，如果只有优先级相同的运算符，还是可以在周围加空格的\n\n<br/>\n\n## 第六章、 关于对象与数据结构\n- 不要将类内变量设置为私有，然后又添加赋值器和取值器，将它公之于众\n- 对象与数据结构之间的二分原理：        \n\t- 过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数，        \n\t- 面向对象代码便于在不改动既有函数的前提下添加新类    \n反过来说就是：        \n\t- 过程代码难以添加新数据结构，因为必须修改所有函数        \n\t- 面向对象代码难以添加新函数，因为必须修改所有类\n- Demeter律，模块不应了解它所操作对象的内部情形\n- 最为精炼的数据结构，是一个只有公共变量、没有函数的类\n\n<br/>\n\n## 第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\n- 使用异常处理而非返回错误码\n- 先写出 try-catch-finally语句\n- 给出异常发生的环境说明，方便定位\n- 依调用者需要定义异常类\n- 不要返回、传递NULL值\n\n<br/>\n\n## 第八章、关于边界（将其他代码整合到自己代码中）\n- 使用类似Map的边界接口，就把它保留在类或近亲类中；避免从公共API中返回边界接口，或将边界接口作为参数传递给公共API。\n- 学习性测试很有必要\n\n<br/>\n\n## 第九章、关于单元测试\n- TDD（测试驱动开发）三定律：        \n\t- 在编写不能通过的单元测试前，不可编写生产代码        \n\t- 只可编写刚好无法通过的单元测试，不能编译也算不通过        \n\t- 只可编写刚好足以通过当前失败测试的生产代码\n- 脏测试 等同于 没测试\n- 测试代码与生产代码一样重要，它需要被思考、被设计和被照料，它该像生产代码一样保持整洁。\n- 整洁的测试的要素 \t- 可读性！！！\n- 整洁测试的五条规则 \t- FIRST        \n\t- F：Fast，测试应该能够快速的运行。        \n\t- I：Independent，测试应该相互独立。        \n\t- R：Repeatable，测试应该可以在任何环境中重复通过。        \n\t- S：Self-Validating，测试应该有布尔值输出。        \n\t- T：Timely，测试应及时编写。\n\n<br/>\n\n## 第十章、关于类\n- 类应该由一组变量列表开始，公共静态常量优先于私有静态变量\n- 类应该通函数一样要短小\n- 类或模块应有且只有一条加以修改的理由\n- 单一全责：系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个全责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为\n- 内聚：类应该只有少量实体变量\n- 既然修改会一直持续，那么就更应该对类加以组织，以降低修改的风险\n- 类应当依赖于抽象而不是依赖于具体细节\n\n<br/>\n\n## 第十一章、关于系统\n- 软件系统应将起始过程与之后的运行时逻辑分离开。    就比如我做一个玩家信息面板，在起始过程，需要创建很多Text、Image来存储玩家一些状态信息及玩家的形象。    但是，我用这个界面的时候，只需要改动里面的值、或者切换形象。    \n这时，就可以有两个函数，init来负责起始过程的创建；refresh来负责更新玩家的状态。（当然不能把所有具体实现都放在一个函数里，每个函数负责一个小模块是必要的）\n- 软件系统与物理系统可以类比，它们的架构都可以递增式地增长，只要我们持续将关注面恰当的切分。\n- 最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯Java(或其他语言）对象实现。不同领域之间用最不具有亲还行的方面或类方面工具整合起来。\n\n<br/>\n\n## 第十二章、关于迭代\n- Kent Beck关于简单设计的四条规则    \n\t- 运行所有测试    \n\t- 不可重复    \n\t- 表达了程序员的意图    \n\t- 尽可能减少类和方法的数量    \n\t以上规则按其重要程度排列\n- 遵循有关编写测试并持续运行测试的简单、明确的规则，系统就会更贴近OO低耦合度、高内聚度的目标。编写测试引致更好的设计。\n- 测试消除了对清理代码就会破坏代码的恐惧，所以可以放心的去重构。\n- 重复是良好系统设计的大敌，它代表着额外工作、额外风险和额外且不必要的复杂度。\n- 增强表达力方法：    \n\t- 选用好的名称    \n\t- 保持函数和类的尺寸短小    \n\t- 采用标准命名法    \n\t- 编写良好的单元测试    \n\t- 最重要的就是去尝试去做\n- 尽可能减少类和方法的数量，这条规则优先级是最低的，要让步于测试、消除重复和增强表达力。\n\n<br/>\n\n## 第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\n- 并发是一种解耦策略，它将**目的**和**时机**分解开，而在单线程中，两者紧密耦合。\n- 解耦目的与时机可以显著的改进程序的**吞吐量**和**结构**\n- 一些迷思与误解    \n\t- 并发总能改进系能。    并发有时能改进性能，但只在多个线程或处理器之间能分享大量等待时间的时候管用。    \n\t- 编写并发程序无需修改设计。    并发算法的设计有可能与单线程系统的设计极不相同，解耦目的与时机往往对系统结构产生巨大的影响。    \n\t- 在采用Web或EJB容器的时候，理解并发问题并不重要。    只有了解容器的运作，才可以对其产生的并发问题更好的解决。\n- 关于并发编程的中肯理解    \n\t- 并发会在性能和编写额外代码上增加一些开销    \n\t- 正确的并发是复杂的，即便对于简单的问题也是如此    \n\t-并发缺陷并非总能重现，所以常被看做偶发事件而忽略，未被当做真的缺陷看待   \n\t- 并发常常需要对设计策略的根本性修改\n- 防御并发代码问题的原则与技巧    \n\t- 单一权责原则（SRP)    \n\t分离并发相关代码与其他代码    \n\t- 限制数据作用域    \n\t谨记数据封装，严格限制对可能被共享的数据的访问    \n\t- 使用数据复本    从多个线程收集所有复本的结果，并在单个线程中合并这些结果    \n\t- 线程应尽可能的独立    尝试将数据分解到可被独立线程（可能在不同的处理器上）操作的独立子集\n- 一些基础定义    \n\t- 限定资源    \n\t并发环境中有着固定尺寸或数量的资源。    \n\t- 互斥    \n\t每一时刻仅有一个线程能访问共享数据或共享资源。    \n\t- 线程饥饿    \n\t一个或一组线程在很长时间内或永久被禁止。    \n\t- 死锁    \n\t两个或多个线程互相等待执行结束。    \n\t- 活锁    \n\t执行次序一致的线程，每个都想要起步，但发现其他线程已开始。\n- 一些执行模型    \n\t- 生产者-消费者模型    \n\t一个或多个生产者线程创建某些工作，并置于缓存或队列中。一个或多个消费者线程从队列中获取并完成这些工作。生产者和消费者之间的队列是一种限定资源。    \n\t- 读者-作者模型    \n\t当存在一个主要为读者线程提供信息源，但只偶尔被作者线程更新的共享资源，吞吐量就会是个问题。增加吞吐量，会导致线程饥饿和过时信息的累计。更新会影响吞吐量。协调读者线程，不去读作者线程正在更新的信息（反之亦然），这是一个辛苦的平衡工作。作者线程倾向于长期锁定许多读者线程，从而导致吞吐量问题。    \n\t- 经典的哲学家    一群哲学家环坐在圆桌旁。每个哲学家的左手边放了一把叉子。桌面中央摆着一大碗意大利面。每个哲学家在吃饭的时候都要拿起叉子吃饭。但除非手上有两把叉子，否则没法进食。如果左边或右边的哲学家已经取用一把叉子，中间这位就需要等到别人吃完，放回叉子。每位哲学家吃完后，就将两把叉子放回桌面，直到下次吃饭。\n- 避免使用一个共享对象的多个方法。当不得不使用时，写代码需要注意的方法。    \n\t- 基于客户端的锁定    \n\t客户端代码在调用第一个方法前锁定服务端，确保锁的范围覆盖了调用最后一个方法的代码。    \n\t- 基于服务端的锁定    \n\t在服务端创建锁定服务端的方法，调用所有方法，然后解锁。让客户端调用新方法。    \n\t- 适配服务端    \n\t创建执行锁定的中间层。这是一种基于服务端锁定的例子，但不修改原始服务端代码。\n- 尽可能减小同步区域\n- 尽早考虑关闭问题，尽早令其工作正常\n- 编写测试，测试线程代码\n关于测试代码的建议    \n\t- 将伪失败看做可能的线程问题    \n\t- 先使非线程代码可工作    \n\t- 编写可插拔的线程代码    \n\t- 编写可调整的线程代码    \n\t- 运行多于处理器数量的线程    \n\t- 在不同平台上运行    \n\t- 调整代码并强迫错误发生\n\n<br/>\n\n## 第十四章、关于逐步改进\n- 要编写整洁代码，必须先写肮脏代码，然后清理它。\n所以，不要害怕写的肮脏，只要去清理，就可以写出整洁的代码。\n但是，一定要去**清理它**！\n- 在改进程序过程中，要保持系统始终可以运行\n- 进度可以重订，需求可以重新定义，团队动态可以修正，但糟糕的代码只是一直腐败发酵，无情的拖后腿\n\n<br/>\n\n## 第十七章、味道与启发\n- 注释    \n\t- 不恰当的信息    \n\t让注释传达本该更好地在源代码控制系统、问题追踪系统或任何其他记录系统中保存的信息，是不恰当的。    \n\t- 废弃的注释    \n\t过时、无关或不正确的注释就是废弃的注释。    \n\t- 冗余注释 \n\t如果描述的是某种充分自我描述了的东西，那么注释就是多余的。    \n\t- 糟糕的注释    \n\t值得编写的注释，也值得好好写。不要画蛇添足，要保持整洁。    \n\t- 注释掉的代码    \n\t看到注释掉的代码，就删除它！\n\t源代码控制系统还会记得他，让注释的人回去找。    \n\t什么？不用源代码控制系统？    \n\t好吧，你已经不需要读这本书了。\n- 环境    \n\t- 需要多步才能实现的构建    \n\t构建系统应该是单步的小操作。    \n\t不应该从源代码控制系统中一点点签出代码；    \n\t不应该需要一系列神秘指令或环境依赖脚本来构建单个元素；    \n\t不应该四处寻找额外小JAR、XML文件和其他杂物；   \n\t应该能用单个命令签出系统，并用单个指令构建它。    \n\t- 需要多步才能做到的测试    \n\t应该能发出单个指令就可以运行全部单元测试。\n- 函数    \n\t- 过多的参数    \n\t函数的参数量应该少，三个以上绝对不可容忍。    \n\t- 输出参数    \n\t输出参数违反直觉，读者期望参数用于输入而非输出。    \n\t- 标识参数    \n\t布尔值参数等同于宣告该函数做了不知一件事，应该消灭。    \n\t- 死函数\n\t永不被调用的方法应该被丢弃。\n\t不要怕删除，源代码控制系统会帮你记住它。\n- 一般性问题    \n\t- 一个源文件中存在多种语言    \n\t理想的源文件包括且只包括一种语言，\n\t现实中，应该尽力减少源文件中额外语言的数量和范围。    \n\t- 明显的行为未被实现    \n\t遵循\"最小惊异原则\"，函数或类应该实现其他程序员有理由期待的行为。    \n\t- 不正确的边界行为    \n\t不要让代码只是能工作，应该追索每种边界条件，并编写测试。    \n\t- 忽视安全    \n\t关闭某些编译器警告，可能有助于构建；但更存在无穷无尽的调试风险。    \n\t- 重复    \n\t本书最重要的规则之一    \n\t尽可能找到并消除重复。    \n\t- 在错误的抽象层级上的代码    \n\t创建分离较高层级一般性概念与较低层级细节概念的抽象模型。    \n\t- 基类依赖于派生类    \n\t将概念分解到基类和派生类的最普遍的原因是较高层级基类概念可以不依赖于较低层级派生类概念。    \n\t- 信息过多    \n\t设计良好的模块有着非常小的接口，让你事半功倍。    \n\t设计低劣的模块有着广阔、深入的接口，让你事倍功半。    \n\t设计良好的接口并不提供许多需要依靠的函数，所以耦合度也较低。    \n\t设计低劣的接口提供大量必须调用的函数，耦合度较高。    \n\t- 死代码    \n\t死代码就是不执行的代码，可以在        \n\t\t- 不会发生的条件语句中        \n\t\t- 从不抛出异常的try语句的catch块中        \n\t\t- 在永久不会发生的switch/case条件中 \n\t\n\t找到这些代码。    \n\t然后，埋葬它！    \n\t- 垂直分隔    \n\t变量和函数应该在被靠近使用的地方定义。    \n\t私有函数应该刚好在其首次被使用的位置下面定义。    \n\t- 前后不一致    \n\t最小惊异原则，小心选择约定，一旦选中，就应该持续的遵循。    \n\t- 使用解释性变量名、函数名、类名    \n\t- 把逻辑依赖改为物理依赖    \n\t依赖者模块不应对被依赖者模块有假定，应该明确的询问候着全部信息。    \n\t- 用多态替代 if/else 或 switch/case    \n\t- 用命名常量替代魔术数    \n\t- 封装条件、边界    \n\t- 函数只做一件事\n- 关于类    \n\t- import package.*;  比80行的导入语句好看多了     \n\t- 不要继承常量\n- 名称    \n\t- 采用描述性的名称    \n\t- 名称应与抽象层级相符    \n\t- 尽可能用标准命名法    \n\t- 无歧义的名称    \n\t- 为较大作用范围选用较长名称    \n\t- 避免编码    \n\t- 名称应该说明副作用\n- 测试    \n\t- 多测试    \n\t- 使用覆盖率工具    \n\t- 别略过小测试    \n\t- 被忽略的测试就是对不确定事物的疑问    \n\t- 测试边界条件    \n\t- 全面测试相近的缺陷    \n\t- 测试应该快速\n\n<br/>\n<br/>\n\n# 本书总结\n\n终于把这本书啃完了。\n虽然作者比较啰嗦点，但是收获还是很大的。\n书中提到的，有些已经做到了；\n但有些不仅没做到，还是反面教材。\n多规范一下自己的代码，毕竟对于我们来说，代码的清晰度、整洁度还是很重要的。\n代码总要给别人看的，不要让自己的代码羞以示人。","source":"_posts/《代码的整洁之道》读记.md","raw":"---\ntitle: 《代码的整洁之道》读记\ndate: 2016-10-13 21:59:16\ntags: 看着读\n\n---\n\n读这本书之前做了一些功课，很多人反映，书是一本好书，无奈作者废话太多。。。\n刚开始，我是不信的，但自己读下来才发现，古人诚不欺我啊。\n来划一下重点吧，写的这些或者是作者所描述的重点，或者是我感触比较深的东西。\n\n**Later equals never！**\n**稍后等于永不！**\n\n\n<!-- more -->\n\n<br/>\n\n# 章节小记\n\n## 第一章、关于整洁的代码\n- 代码的逻辑应该直截了当，让缺陷难以隐藏；尽量去减少依赖关系，从而便于维护；依据某种分层战略完善错误处理代码；性能调到最优，避免他人污染。\n- 糟糕的代码会引发混乱，别人修改糟糕的代码时，往往会越改越烂。\n- 每个函数、每个类、每个模块 都全神贯注去解决一件事\n- 代码应该通过其字面表达含义，因为不同的语言导致并非所有必需信息均可通过代码自身清晰表达。\n- 重要顺序：         \n\t- 能通过所有测试        \n\t- 没有重复代码         \n\t- 体现系统中的全部设计理念         \n\t- 包括尽量少的实体\n\n<br/>\n\n## 第二章、关于命名\n\n- 名副其实，见名知意\n- 使用可以读的出来的、可以被搜索的名称\n- 匈牙利命名法、去掉成员前缀\n- 类名、对象名 应该是名词或名词短语；    方法名应该是动词或动词短语\n- 不要抖机灵，每个概念对应一个词，不用双关语（add、insert）\n- 分离解决方案领域和问题领域的概念，与所涉问题领域更为贴近的代码，应当采用源自问题领域的名称\n- 添加有意义的语境\n\n<br/>\n\n## 第三章、关于函数\n- 函数的第一规则是短小，第二条规则是更短小！\n- 第一章节有提到过的： 每个函数尽量只做一件事。\n- 自顶向下阅读代码，向下规则\n- 函数参数，最理想为零，其次单参、双参、三参...（除非有足够特殊的理由，不要三参数+）\n- 不要向函数传入bool，因为这叫要求该函数不止做一件事\n- 不要有副作用，比如让你洗个苹果，你别洗完了然后吃了它。\n- 普遍而言，应避免使用输出参数。\n- 分隔指令与询问，要么让它干什么，要么让它回答什么。\n\n<br/>\n\n## 第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）\n- 代码会一直被维护更新，但是注释不一定。\n- 注释不能改变根本问题，它不能优化糟糕的代码。\n- 值得写的注释：       \n\t- 版权及著作权声明等        \n\t- 对你的意图的解释        \n\t- 警示        \n\t- TODO注释，为以后编写查找方便\n- 废注释：        \n\t- 没有规范化，过于局部的注释（需要纵览全文，才能知晓其意）        \n\t- 多余的注释（ getMaxNumber(num1, num2) ,还需要写这个函数是干啥的吗？）        \n\t- 误导性注释        \n\t- 循规式注释（例如：要求每个函数都要像API文档一样写一套注释来说明函数作用，参数意义。）        \n\t- 日志式注释（之前不是说光维护代码，不维护注释吗？现在我维护注释，而且把每次修改的时间、内容都加上。有那时间干啥不好，100行的文件，80行注释日志？）        \n\t- 归属与署名        \n\t- 注释掉的代码（除了注释的人，其他人都不敢删的东西）        \n\t- 信息过多，无条理\n\n<br/>\n\n## 第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)\n- 用空白行来区分你的模块\n- 关系应该密切的东西：        \n\t- 变量声明，应该尽可能的靠近其使用位置        \n\t- 实体变量，应该在类的顶部声明        \n\t- 相关函数，函数A调用了函数B，应该让A和B放到一起，A尽可能的放在B的上面        \n\t- 概念相关，概念相关的代码 应该放在一起，相关性与距离成正比\n- 尽量让代码行短小，最好以80个字符为上限，但最多不要超过120\n- 水平方向上的区隔：        \n\t- 赋值操作周围加上空格        \n\t- 不在函数名和左圆括号之间加空格        \n\t- 逗号后加空格       \n\t- 加减周围加空格，优先级高的乘除周围不加空格；当然，如果只有优先级相同的运算符，还是可以在周围加空格的\n\n<br/>\n\n## 第六章、 关于对象与数据结构\n- 不要将类内变量设置为私有，然后又添加赋值器和取值器，将它公之于众\n- 对象与数据结构之间的二分原理：        \n\t- 过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数，        \n\t- 面向对象代码便于在不改动既有函数的前提下添加新类    \n反过来说就是：        \n\t- 过程代码难以添加新数据结构，因为必须修改所有函数        \n\t- 面向对象代码难以添加新函数，因为必须修改所有类\n- Demeter律，模块不应了解它所操作对象的内部情形\n- 最为精炼的数据结构，是一个只有公共变量、没有函数的类\n\n<br/>\n\n## 第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\n- 使用异常处理而非返回错误码\n- 先写出 try-catch-finally语句\n- 给出异常发生的环境说明，方便定位\n- 依调用者需要定义异常类\n- 不要返回、传递NULL值\n\n<br/>\n\n## 第八章、关于边界（将其他代码整合到自己代码中）\n- 使用类似Map的边界接口，就把它保留在类或近亲类中；避免从公共API中返回边界接口，或将边界接口作为参数传递给公共API。\n- 学习性测试很有必要\n\n<br/>\n\n## 第九章、关于单元测试\n- TDD（测试驱动开发）三定律：        \n\t- 在编写不能通过的单元测试前，不可编写生产代码        \n\t- 只可编写刚好无法通过的单元测试，不能编译也算不通过        \n\t- 只可编写刚好足以通过当前失败测试的生产代码\n- 脏测试 等同于 没测试\n- 测试代码与生产代码一样重要，它需要被思考、被设计和被照料，它该像生产代码一样保持整洁。\n- 整洁的测试的要素 \t- 可读性！！！\n- 整洁测试的五条规则 \t- FIRST        \n\t- F：Fast，测试应该能够快速的运行。        \n\t- I：Independent，测试应该相互独立。        \n\t- R：Repeatable，测试应该可以在任何环境中重复通过。        \n\t- S：Self-Validating，测试应该有布尔值输出。        \n\t- T：Timely，测试应及时编写。\n\n<br/>\n\n## 第十章、关于类\n- 类应该由一组变量列表开始，公共静态常量优先于私有静态变量\n- 类应该通函数一样要短小\n- 类或模块应有且只有一条加以修改的理由\n- 单一全责：系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个全责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为\n- 内聚：类应该只有少量实体变量\n- 既然修改会一直持续，那么就更应该对类加以组织，以降低修改的风险\n- 类应当依赖于抽象而不是依赖于具体细节\n\n<br/>\n\n## 第十一章、关于系统\n- 软件系统应将起始过程与之后的运行时逻辑分离开。    就比如我做一个玩家信息面板，在起始过程，需要创建很多Text、Image来存储玩家一些状态信息及玩家的形象。    但是，我用这个界面的时候，只需要改动里面的值、或者切换形象。    \n这时，就可以有两个函数，init来负责起始过程的创建；refresh来负责更新玩家的状态。（当然不能把所有具体实现都放在一个函数里，每个函数负责一个小模块是必要的）\n- 软件系统与物理系统可以类比，它们的架构都可以递增式地增长，只要我们持续将关注面恰当的切分。\n- 最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯Java(或其他语言）对象实现。不同领域之间用最不具有亲还行的方面或类方面工具整合起来。\n\n<br/>\n\n## 第十二章、关于迭代\n- Kent Beck关于简单设计的四条规则    \n\t- 运行所有测试    \n\t- 不可重复    \n\t- 表达了程序员的意图    \n\t- 尽可能减少类和方法的数量    \n\t以上规则按其重要程度排列\n- 遵循有关编写测试并持续运行测试的简单、明确的规则，系统就会更贴近OO低耦合度、高内聚度的目标。编写测试引致更好的设计。\n- 测试消除了对清理代码就会破坏代码的恐惧，所以可以放心的去重构。\n- 重复是良好系统设计的大敌，它代表着额外工作、额外风险和额外且不必要的复杂度。\n- 增强表达力方法：    \n\t- 选用好的名称    \n\t- 保持函数和类的尺寸短小    \n\t- 采用标准命名法    \n\t- 编写良好的单元测试    \n\t- 最重要的就是去尝试去做\n- 尽可能减少类和方法的数量，这条规则优先级是最低的，要让步于测试、消除重复和增强表达力。\n\n<br/>\n\n## 第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\n- 并发是一种解耦策略，它将**目的**和**时机**分解开，而在单线程中，两者紧密耦合。\n- 解耦目的与时机可以显著的改进程序的**吞吐量**和**结构**\n- 一些迷思与误解    \n\t- 并发总能改进系能。    并发有时能改进性能，但只在多个线程或处理器之间能分享大量等待时间的时候管用。    \n\t- 编写并发程序无需修改设计。    并发算法的设计有可能与单线程系统的设计极不相同，解耦目的与时机往往对系统结构产生巨大的影响。    \n\t- 在采用Web或EJB容器的时候，理解并发问题并不重要。    只有了解容器的运作，才可以对其产生的并发问题更好的解决。\n- 关于并发编程的中肯理解    \n\t- 并发会在性能和编写额外代码上增加一些开销    \n\t- 正确的并发是复杂的，即便对于简单的问题也是如此    \n\t-并发缺陷并非总能重现，所以常被看做偶发事件而忽略，未被当做真的缺陷看待   \n\t- 并发常常需要对设计策略的根本性修改\n- 防御并发代码问题的原则与技巧    \n\t- 单一权责原则（SRP)    \n\t分离并发相关代码与其他代码    \n\t- 限制数据作用域    \n\t谨记数据封装，严格限制对可能被共享的数据的访问    \n\t- 使用数据复本    从多个线程收集所有复本的结果，并在单个线程中合并这些结果    \n\t- 线程应尽可能的独立    尝试将数据分解到可被独立线程（可能在不同的处理器上）操作的独立子集\n- 一些基础定义    \n\t- 限定资源    \n\t并发环境中有着固定尺寸或数量的资源。    \n\t- 互斥    \n\t每一时刻仅有一个线程能访问共享数据或共享资源。    \n\t- 线程饥饿    \n\t一个或一组线程在很长时间内或永久被禁止。    \n\t- 死锁    \n\t两个或多个线程互相等待执行结束。    \n\t- 活锁    \n\t执行次序一致的线程，每个都想要起步，但发现其他线程已开始。\n- 一些执行模型    \n\t- 生产者-消费者模型    \n\t一个或多个生产者线程创建某些工作，并置于缓存或队列中。一个或多个消费者线程从队列中获取并完成这些工作。生产者和消费者之间的队列是一种限定资源。    \n\t- 读者-作者模型    \n\t当存在一个主要为读者线程提供信息源，但只偶尔被作者线程更新的共享资源，吞吐量就会是个问题。增加吞吐量，会导致线程饥饿和过时信息的累计。更新会影响吞吐量。协调读者线程，不去读作者线程正在更新的信息（反之亦然），这是一个辛苦的平衡工作。作者线程倾向于长期锁定许多读者线程，从而导致吞吐量问题。    \n\t- 经典的哲学家    一群哲学家环坐在圆桌旁。每个哲学家的左手边放了一把叉子。桌面中央摆着一大碗意大利面。每个哲学家在吃饭的时候都要拿起叉子吃饭。但除非手上有两把叉子，否则没法进食。如果左边或右边的哲学家已经取用一把叉子，中间这位就需要等到别人吃完，放回叉子。每位哲学家吃完后，就将两把叉子放回桌面，直到下次吃饭。\n- 避免使用一个共享对象的多个方法。当不得不使用时，写代码需要注意的方法。    \n\t- 基于客户端的锁定    \n\t客户端代码在调用第一个方法前锁定服务端，确保锁的范围覆盖了调用最后一个方法的代码。    \n\t- 基于服务端的锁定    \n\t在服务端创建锁定服务端的方法，调用所有方法，然后解锁。让客户端调用新方法。    \n\t- 适配服务端    \n\t创建执行锁定的中间层。这是一种基于服务端锁定的例子，但不修改原始服务端代码。\n- 尽可能减小同步区域\n- 尽早考虑关闭问题，尽早令其工作正常\n- 编写测试，测试线程代码\n关于测试代码的建议    \n\t- 将伪失败看做可能的线程问题    \n\t- 先使非线程代码可工作    \n\t- 编写可插拔的线程代码    \n\t- 编写可调整的线程代码    \n\t- 运行多于处理器数量的线程    \n\t- 在不同平台上运行    \n\t- 调整代码并强迫错误发生\n\n<br/>\n\n## 第十四章、关于逐步改进\n- 要编写整洁代码，必须先写肮脏代码，然后清理它。\n所以，不要害怕写的肮脏，只要去清理，就可以写出整洁的代码。\n但是，一定要去**清理它**！\n- 在改进程序过程中，要保持系统始终可以运行\n- 进度可以重订，需求可以重新定义，团队动态可以修正，但糟糕的代码只是一直腐败发酵，无情的拖后腿\n\n<br/>\n\n## 第十七章、味道与启发\n- 注释    \n\t- 不恰当的信息    \n\t让注释传达本该更好地在源代码控制系统、问题追踪系统或任何其他记录系统中保存的信息，是不恰当的。    \n\t- 废弃的注释    \n\t过时、无关或不正确的注释就是废弃的注释。    \n\t- 冗余注释 \n\t如果描述的是某种充分自我描述了的东西，那么注释就是多余的。    \n\t- 糟糕的注释    \n\t值得编写的注释，也值得好好写。不要画蛇添足，要保持整洁。    \n\t- 注释掉的代码    \n\t看到注释掉的代码，就删除它！\n\t源代码控制系统还会记得他，让注释的人回去找。    \n\t什么？不用源代码控制系统？    \n\t好吧，你已经不需要读这本书了。\n- 环境    \n\t- 需要多步才能实现的构建    \n\t构建系统应该是单步的小操作。    \n\t不应该从源代码控制系统中一点点签出代码；    \n\t不应该需要一系列神秘指令或环境依赖脚本来构建单个元素；    \n\t不应该四处寻找额外小JAR、XML文件和其他杂物；   \n\t应该能用单个命令签出系统，并用单个指令构建它。    \n\t- 需要多步才能做到的测试    \n\t应该能发出单个指令就可以运行全部单元测试。\n- 函数    \n\t- 过多的参数    \n\t函数的参数量应该少，三个以上绝对不可容忍。    \n\t- 输出参数    \n\t输出参数违反直觉，读者期望参数用于输入而非输出。    \n\t- 标识参数    \n\t布尔值参数等同于宣告该函数做了不知一件事，应该消灭。    \n\t- 死函数\n\t永不被调用的方法应该被丢弃。\n\t不要怕删除，源代码控制系统会帮你记住它。\n- 一般性问题    \n\t- 一个源文件中存在多种语言    \n\t理想的源文件包括且只包括一种语言，\n\t现实中，应该尽力减少源文件中额外语言的数量和范围。    \n\t- 明显的行为未被实现    \n\t遵循\"最小惊异原则\"，函数或类应该实现其他程序员有理由期待的行为。    \n\t- 不正确的边界行为    \n\t不要让代码只是能工作，应该追索每种边界条件，并编写测试。    \n\t- 忽视安全    \n\t关闭某些编译器警告，可能有助于构建；但更存在无穷无尽的调试风险。    \n\t- 重复    \n\t本书最重要的规则之一    \n\t尽可能找到并消除重复。    \n\t- 在错误的抽象层级上的代码    \n\t创建分离较高层级一般性概念与较低层级细节概念的抽象模型。    \n\t- 基类依赖于派生类    \n\t将概念分解到基类和派生类的最普遍的原因是较高层级基类概念可以不依赖于较低层级派生类概念。    \n\t- 信息过多    \n\t设计良好的模块有着非常小的接口，让你事半功倍。    \n\t设计低劣的模块有着广阔、深入的接口，让你事倍功半。    \n\t设计良好的接口并不提供许多需要依靠的函数，所以耦合度也较低。    \n\t设计低劣的接口提供大量必须调用的函数，耦合度较高。    \n\t- 死代码    \n\t死代码就是不执行的代码，可以在        \n\t\t- 不会发生的条件语句中        \n\t\t- 从不抛出异常的try语句的catch块中        \n\t\t- 在永久不会发生的switch/case条件中 \n\t\n\t找到这些代码。    \n\t然后，埋葬它！    \n\t- 垂直分隔    \n\t变量和函数应该在被靠近使用的地方定义。    \n\t私有函数应该刚好在其首次被使用的位置下面定义。    \n\t- 前后不一致    \n\t最小惊异原则，小心选择约定，一旦选中，就应该持续的遵循。    \n\t- 使用解释性变量名、函数名、类名    \n\t- 把逻辑依赖改为物理依赖    \n\t依赖者模块不应对被依赖者模块有假定，应该明确的询问候着全部信息。    \n\t- 用多态替代 if/else 或 switch/case    \n\t- 用命名常量替代魔术数    \n\t- 封装条件、边界    \n\t- 函数只做一件事\n- 关于类    \n\t- import package.*;  比80行的导入语句好看多了     \n\t- 不要继承常量\n- 名称    \n\t- 采用描述性的名称    \n\t- 名称应与抽象层级相符    \n\t- 尽可能用标准命名法    \n\t- 无歧义的名称    \n\t- 为较大作用范围选用较长名称    \n\t- 避免编码    \n\t- 名称应该说明副作用\n- 测试    \n\t- 多测试    \n\t- 使用覆盖率工具    \n\t- 别略过小测试    \n\t- 被忽略的测试就是对不确定事物的疑问    \n\t- 测试边界条件    \n\t- 全面测试相近的缺陷    \n\t- 测试应该快速\n\n<br/>\n<br/>\n\n# 本书总结\n\n终于把这本书啃完了。\n虽然作者比较啰嗦点，但是收获还是很大的。\n书中提到的，有些已经做到了；\n但有些不仅没做到，还是反面教材。\n多规范一下自己的代码，毕竟对于我们来说，代码的清晰度、整洁度还是很重要的。\n代码总要给别人看的，不要让自己的代码羞以示人。","slug":"《代码的整洁之道》读记","published":1,"updated":"2018-07-17T17:05:10.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbcf0013esvq7u42v8qy","content":"<p>读这本书之前做了一些功课，很多人反映，书是一本好书，无奈作者废话太多。。。<br>刚开始，我是不信的，但自己读下来才发现，古人诚不欺我啊。<br>来划一下重点吧，写的这些或者是作者所描述的重点，或者是我感触比较深的东西。</p>\n<p><strong>Later equals never！</strong><br><strong>稍后等于永不！</strong></p>\n<a id=\"more\"></a>\n<p><br></p>\n<h1 id=\"章节小记\"><a href=\"#章节小记\" class=\"headerlink\" title=\"章节小记\"></a>章节小记</h1><h2 id=\"第一章、关于整洁的代码\"><a href=\"#第一章、关于整洁的代码\" class=\"headerlink\" title=\"第一章、关于整洁的代码\"></a>第一章、关于整洁的代码</h2><ul>\n<li>代码的逻辑应该直截了当，让缺陷难以隐藏；尽量去减少依赖关系，从而便于维护；依据某种分层战略完善错误处理代码；性能调到最优，避免他人污染。</li>\n<li>糟糕的代码会引发混乱，别人修改糟糕的代码时，往往会越改越烂。</li>\n<li>每个函数、每个类、每个模块 都全神贯注去解决一件事</li>\n<li>代码应该通过其字面表达含义，因为不同的语言导致并非所有必需信息均可通过代码自身清晰表达。</li>\n<li>重要顺序：         <ul>\n<li>能通过所有测试        </li>\n<li>没有重复代码         </li>\n<li>体现系统中的全部设计理念         </li>\n<li>包括尽量少的实体</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"第二章、关于命名\"><a href=\"#第二章、关于命名\" class=\"headerlink\" title=\"第二章、关于命名\"></a>第二章、关于命名</h2><ul>\n<li>名副其实，见名知意</li>\n<li>使用可以读的出来的、可以被搜索的名称</li>\n<li>匈牙利命名法、去掉成员前缀</li>\n<li>类名、对象名 应该是名词或名词短语；    方法名应该是动词或动词短语</li>\n<li>不要抖机灵，每个概念对应一个词，不用双关语（add、insert）</li>\n<li>分离解决方案领域和问题领域的概念，与所涉问题领域更为贴近的代码，应当采用源自问题领域的名称</li>\n<li>添加有意义的语境</li>\n</ul>\n<p><br></p>\n<h2 id=\"第三章、关于函数\"><a href=\"#第三章、关于函数\" class=\"headerlink\" title=\"第三章、关于函数\"></a>第三章、关于函数</h2><ul>\n<li>函数的第一规则是短小，第二条规则是更短小！</li>\n<li>第一章节有提到过的： 每个函数尽量只做一件事。</li>\n<li>自顶向下阅读代码，向下规则</li>\n<li>函数参数，最理想为零，其次单参、双参、三参…（除非有足够特殊的理由，不要三参数+）</li>\n<li>不要向函数传入bool，因为这叫要求该函数不止做一件事</li>\n<li>不要有副作用，比如让你洗个苹果，你别洗完了然后吃了它。</li>\n<li>普遍而言，应避免使用输出参数。</li>\n<li>分隔指令与询问，要么让它干什么，要么让它回答什么。</li>\n</ul>\n<p><br></p>\n<h2 id=\"第四章、关于注释-（别给糟糕的代码加注释，重新写吧！）\"><a href=\"#第四章、关于注释-（别给糟糕的代码加注释，重新写吧！）\" class=\"headerlink\" title=\"第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）\"></a>第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）</h2><ul>\n<li>代码会一直被维护更新，但是注释不一定。</li>\n<li>注释不能改变根本问题，它不能优化糟糕的代码。</li>\n<li>值得写的注释：       <ul>\n<li>版权及著作权声明等        </li>\n<li>对你的意图的解释        </li>\n<li>警示        </li>\n<li>TODO注释，为以后编写查找方便</li>\n</ul>\n</li>\n<li>废注释：        <ul>\n<li>没有规范化，过于局部的注释（需要纵览全文，才能知晓其意）        </li>\n<li>多余的注释（ getMaxNumber(num1, num2) ,还需要写这个函数是干啥的吗？）        </li>\n<li>误导性注释        </li>\n<li>循规式注释（例如：要求每个函数都要像API文档一样写一套注释来说明函数作用，参数意义。）        </li>\n<li>日志式注释（之前不是说光维护代码，不维护注释吗？现在我维护注释，而且把每次修改的时间、内容都加上。有那时间干啥不好，100行的文件，80行注释日志？）        </li>\n<li>归属与署名        </li>\n<li>注释掉的代码（除了注释的人，其他人都不敢删的东西）        </li>\n<li>信息过多，无条理</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"第五章、关于格式-代码的格式是你代码的普通话，别让他说方言\"><a href=\"#第五章、关于格式-代码的格式是你代码的普通话，别让他说方言\" class=\"headerlink\" title=\"第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)\"></a>第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)</h2><ul>\n<li>用空白行来区分你的模块</li>\n<li>关系应该密切的东西：        <ul>\n<li>变量声明，应该尽可能的靠近其使用位置        </li>\n<li>实体变量，应该在类的顶部声明        </li>\n<li>相关函数，函数A调用了函数B，应该让A和B放到一起，A尽可能的放在B的上面        </li>\n<li>概念相关，概念相关的代码 应该放在一起，相关性与距离成正比</li>\n</ul>\n</li>\n<li>尽量让代码行短小，最好以80个字符为上限，但最多不要超过120</li>\n<li>水平方向上的区隔：        <ul>\n<li>赋值操作周围加上空格        </li>\n<li>不在函数名和左圆括号之间加空格        </li>\n<li>逗号后加空格       </li>\n<li>加减周围加空格，优先级高的乘除周围不加空格；当然，如果只有优先级相同的运算符，还是可以在周围加空格的</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"第六章、-关于对象与数据结构\"><a href=\"#第六章、-关于对象与数据结构\" class=\"headerlink\" title=\"第六章、 关于对象与数据结构\"></a>第六章、 关于对象与数据结构</h2><ul>\n<li>不要将类内变量设置为私有，然后又添加赋值器和取值器，将它公之于众</li>\n<li>对象与数据结构之间的二分原理：        <ul>\n<li>过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数，        </li>\n<li>面向对象代码便于在不改动既有函数的前提下添加新类<br>反过来说就是：        </li>\n<li>过程代码难以添加新数据结构，因为必须修改所有函数        </li>\n<li>面向对象代码难以添加新函数，因为必须修改所有类</li>\n</ul>\n</li>\n<li>Demeter律，模块不应了解它所操作对象的内部情形</li>\n<li>最为精炼的数据结构，是一个只有公共变量、没有函数的类</li>\n</ul>\n<p><br></p>\n<h2 id=\"第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\"><a href=\"#第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\" class=\"headerlink\" title=\"第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\"></a>第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）</h2><ul>\n<li>使用异常处理而非返回错误码</li>\n<li>先写出 try-catch-finally语句</li>\n<li>给出异常发生的环境说明，方便定位</li>\n<li>依调用者需要定义异常类</li>\n<li>不要返回、传递NULL值</li>\n</ul>\n<p><br></p>\n<h2 id=\"第八章、关于边界（将其他代码整合到自己代码中）\"><a href=\"#第八章、关于边界（将其他代码整合到自己代码中）\" class=\"headerlink\" title=\"第八章、关于边界（将其他代码整合到自己代码中）\"></a>第八章、关于边界（将其他代码整合到自己代码中）</h2><ul>\n<li>使用类似Map的边界接口，就把它保留在类或近亲类中；避免从公共API中返回边界接口，或将边界接口作为参数传递给公共API。</li>\n<li>学习性测试很有必要</li>\n</ul>\n<p><br></p>\n<h2 id=\"第九章、关于单元测试\"><a href=\"#第九章、关于单元测试\" class=\"headerlink\" title=\"第九章、关于单元测试\"></a>第九章、关于单元测试</h2><ul>\n<li>TDD（测试驱动开发）三定律：        <ul>\n<li>在编写不能通过的单元测试前，不可编写生产代码        </li>\n<li>只可编写刚好无法通过的单元测试，不能编译也算不通过        </li>\n<li>只可编写刚好足以通过当前失败测试的生产代码</li>\n</ul>\n</li>\n<li>脏测试 等同于 没测试</li>\n<li>测试代码与生产代码一样重要，它需要被思考、被设计和被照料，它该像生产代码一样保持整洁。</li>\n<li>整洁的测试的要素     - 可读性！！！</li>\n<li>整洁测试的五条规则     - FIRST        <ul>\n<li>F：Fast，测试应该能够快速的运行。        </li>\n<li>I：Independent，测试应该相互独立。        </li>\n<li>R：Repeatable，测试应该可以在任何环境中重复通过。        </li>\n<li>S：Self-Validating，测试应该有布尔值输出。        </li>\n<li>T：Timely，测试应及时编写。</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"第十章、关于类\"><a href=\"#第十章、关于类\" class=\"headerlink\" title=\"第十章、关于类\"></a>第十章、关于类</h2><ul>\n<li>类应该由一组变量列表开始，公共静态常量优先于私有静态变量</li>\n<li>类应该通函数一样要短小</li>\n<li>类或模块应有且只有一条加以修改的理由</li>\n<li>单一全责：系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个全责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为</li>\n<li>内聚：类应该只有少量实体变量</li>\n<li>既然修改会一直持续，那么就更应该对类加以组织，以降低修改的风险</li>\n<li>类应当依赖于抽象而不是依赖于具体细节</li>\n</ul>\n<p><br></p>\n<h2 id=\"第十一章、关于系统\"><a href=\"#第十一章、关于系统\" class=\"headerlink\" title=\"第十一章、关于系统\"></a>第十一章、关于系统</h2><ul>\n<li>软件系统应将起始过程与之后的运行时逻辑分离开。    就比如我做一个玩家信息面板，在起始过程，需要创建很多Text、Image来存储玩家一些状态信息及玩家的形象。    但是，我用这个界面的时候，只需要改动里面的值、或者切换形象。<br>这时，就可以有两个函数，init来负责起始过程的创建；refresh来负责更新玩家的状态。（当然不能把所有具体实现都放在一个函数里，每个函数负责一个小模块是必要的）</li>\n<li>软件系统与物理系统可以类比，它们的架构都可以递增式地增长，只要我们持续将关注面恰当的切分。</li>\n<li>最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯Java(或其他语言）对象实现。不同领域之间用最不具有亲还行的方面或类方面工具整合起来。</li>\n</ul>\n<p><br></p>\n<h2 id=\"第十二章、关于迭代\"><a href=\"#第十二章、关于迭代\" class=\"headerlink\" title=\"第十二章、关于迭代\"></a>第十二章、关于迭代</h2><ul>\n<li>Kent Beck关于简单设计的四条规则    <ul>\n<li>运行所有测试    </li>\n<li>不可重复    </li>\n<li>表达了程序员的意图    </li>\n<li>尽可能减少类和方法的数量<br>以上规则按其重要程度排列</li>\n</ul>\n</li>\n<li>遵循有关编写测试并持续运行测试的简单、明确的规则，系统就会更贴近OO低耦合度、高内聚度的目标。编写测试引致更好的设计。</li>\n<li>测试消除了对清理代码就会破坏代码的恐惧，所以可以放心的去重构。</li>\n<li>重复是良好系统设计的大敌，它代表着额外工作、额外风险和额外且不必要的复杂度。</li>\n<li>增强表达力方法：    <ul>\n<li>选用好的名称    </li>\n<li>保持函数和类的尺寸短小    </li>\n<li>采用标准命名法    </li>\n<li>编写良好的单元测试    </li>\n<li>最重要的就是去尝试去做</li>\n</ul>\n</li>\n<li>尽可能减少类和方法的数量，这条规则优先级是最低的，要让步于测试、消除重复和增强表达力。</li>\n</ul>\n<p><br></p>\n<h2 id=\"第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\"><a href=\"#第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\" class=\"headerlink\" title=\"第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\"></a>第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）</h2><ul>\n<li>并发是一种解耦策略，它将<strong>目的</strong>和<strong>时机</strong>分解开，而在单线程中，两者紧密耦合。</li>\n<li>解耦目的与时机可以显著的改进程序的<strong>吞吐量</strong>和<strong>结构</strong></li>\n<li>一些迷思与误解    <ul>\n<li>并发总能改进系能。    并发有时能改进性能，但只在多个线程或处理器之间能分享大量等待时间的时候管用。    </li>\n<li>编写并发程序无需修改设计。    并发算法的设计有可能与单线程系统的设计极不相同，解耦目的与时机往往对系统结构产生巨大的影响。    </li>\n<li>在采用Web或EJB容器的时候，理解并发问题并不重要。    只有了解容器的运作，才可以对其产生的并发问题更好的解决。</li>\n</ul>\n</li>\n<li>关于并发编程的中肯理解    <ul>\n<li>并发会在性能和编写额外代码上增加一些开销    </li>\n<li>正确的并发是复杂的，即便对于简单的问题也是如此<br>-并发缺陷并非总能重现，所以常被看做偶发事件而忽略，未被当做真的缺陷看待   </li>\n<li>并发常常需要对设计策略的根本性修改</li>\n</ul>\n</li>\n<li>防御并发代码问题的原则与技巧    <ul>\n<li>单一权责原则（SRP)<br>分离并发相关代码与其他代码    </li>\n<li>限制数据作用域<br>谨记数据封装，严格限制对可能被共享的数据的访问    </li>\n<li>使用数据复本    从多个线程收集所有复本的结果，并在单个线程中合并这些结果    </li>\n<li>线程应尽可能的独立    尝试将数据分解到可被独立线程（可能在不同的处理器上）操作的独立子集</li>\n</ul>\n</li>\n<li>一些基础定义    <ul>\n<li>限定资源<br>并发环境中有着固定尺寸或数量的资源。    </li>\n<li>互斥<br>每一时刻仅有一个线程能访问共享数据或共享资源。    </li>\n<li>线程饥饿<br>一个或一组线程在很长时间内或永久被禁止。    </li>\n<li>死锁<br>两个或多个线程互相等待执行结束。    </li>\n<li>活锁<br>执行次序一致的线程，每个都想要起步，但发现其他线程已开始。</li>\n</ul>\n</li>\n<li>一些执行模型    <ul>\n<li>生产者-消费者模型<br>一个或多个生产者线程创建某些工作，并置于缓存或队列中。一个或多个消费者线程从队列中获取并完成这些工作。生产者和消费者之间的队列是一种限定资源。    </li>\n<li>读者-作者模型<br>当存在一个主要为读者线程提供信息源，但只偶尔被作者线程更新的共享资源，吞吐量就会是个问题。增加吞吐量，会导致线程饥饿和过时信息的累计。更新会影响吞吐量。协调读者线程，不去读作者线程正在更新的信息（反之亦然），这是一个辛苦的平衡工作。作者线程倾向于长期锁定许多读者线程，从而导致吞吐量问题。    </li>\n<li>经典的哲学家    一群哲学家环坐在圆桌旁。每个哲学家的左手边放了一把叉子。桌面中央摆着一大碗意大利面。每个哲学家在吃饭的时候都要拿起叉子吃饭。但除非手上有两把叉子，否则没法进食。如果左边或右边的哲学家已经取用一把叉子，中间这位就需要等到别人吃完，放回叉子。每位哲学家吃完后，就将两把叉子放回桌面，直到下次吃饭。</li>\n</ul>\n</li>\n<li>避免使用一个共享对象的多个方法。当不得不使用时，写代码需要注意的方法。    <ul>\n<li>基于客户端的锁定<br>客户端代码在调用第一个方法前锁定服务端，确保锁的范围覆盖了调用最后一个方法的代码。    </li>\n<li>基于服务端的锁定<br>在服务端创建锁定服务端的方法，调用所有方法，然后解锁。让客户端调用新方法。    </li>\n<li>适配服务端<br>创建执行锁定的中间层。这是一种基于服务端锁定的例子，但不修改原始服务端代码。</li>\n</ul>\n</li>\n<li>尽可能减小同步区域</li>\n<li>尽早考虑关闭问题，尽早令其工作正常</li>\n<li>编写测试，测试线程代码<br>关于测试代码的建议    <ul>\n<li>将伪失败看做可能的线程问题    </li>\n<li>先使非线程代码可工作    </li>\n<li>编写可插拔的线程代码    </li>\n<li>编写可调整的线程代码    </li>\n<li>运行多于处理器数量的线程    </li>\n<li>在不同平台上运行    </li>\n<li>调整代码并强迫错误发生</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"第十四章、关于逐步改进\"><a href=\"#第十四章、关于逐步改进\" class=\"headerlink\" title=\"第十四章、关于逐步改进\"></a>第十四章、关于逐步改进</h2><ul>\n<li>要编写整洁代码，必须先写肮脏代码，然后清理它。<br>所以，不要害怕写的肮脏，只要去清理，就可以写出整洁的代码。<br>但是，一定要去<strong>清理它</strong>！</li>\n<li>在改进程序过程中，要保持系统始终可以运行</li>\n<li>进度可以重订，需求可以重新定义，团队动态可以修正，但糟糕的代码只是一直腐败发酵，无情的拖后腿</li>\n</ul>\n<p><br></p>\n<h2 id=\"第十七章、味道与启发\"><a href=\"#第十七章、味道与启发\" class=\"headerlink\" title=\"第十七章、味道与启发\"></a>第十七章、味道与启发</h2><ul>\n<li>注释    <ul>\n<li>不恰当的信息<br>让注释传达本该更好地在源代码控制系统、问题追踪系统或任何其他记录系统中保存的信息，是不恰当的。    </li>\n<li>废弃的注释<br>过时、无关或不正确的注释就是废弃的注释。    </li>\n<li>冗余注释<br>如果描述的是某种充分自我描述了的东西，那么注释就是多余的。    </li>\n<li>糟糕的注释<br>值得编写的注释，也值得好好写。不要画蛇添足，要保持整洁。    </li>\n<li>注释掉的代码<br>看到注释掉的代码，就删除它！<br>源代码控制系统还会记得他，让注释的人回去找。<br>什么？不用源代码控制系统？<br>好吧，你已经不需要读这本书了。</li>\n</ul>\n</li>\n<li>环境    <ul>\n<li>需要多步才能实现的构建<br>构建系统应该是单步的小操作。<br>不应该从源代码控制系统中一点点签出代码；<br>不应该需要一系列神秘指令或环境依赖脚本来构建单个元素；<br>不应该四处寻找额外小JAR、XML文件和其他杂物；<br>应该能用单个命令签出系统，并用单个指令构建它。    </li>\n<li>需要多步才能做到的测试<br>应该能发出单个指令就可以运行全部单元测试。</li>\n</ul>\n</li>\n<li>函数    <ul>\n<li>过多的参数<br>函数的参数量应该少，三个以上绝对不可容忍。    </li>\n<li>输出参数<br>输出参数违反直觉，读者期望参数用于输入而非输出。    </li>\n<li>标识参数<br>布尔值参数等同于宣告该函数做了不知一件事，应该消灭。    </li>\n<li>死函数<br>永不被调用的方法应该被丢弃。<br>不要怕删除，源代码控制系统会帮你记住它。</li>\n</ul>\n</li>\n<li><p>一般性问题    </p>\n<ul>\n<li>一个源文件中存在多种语言<br>理想的源文件包括且只包括一种语言，<br>现实中，应该尽力减少源文件中额外语言的数量和范围。    </li>\n<li>明显的行为未被实现<br>遵循”最小惊异原则”，函数或类应该实现其他程序员有理由期待的行为。    </li>\n<li>不正确的边界行为<br>不要让代码只是能工作，应该追索每种边界条件，并编写测试。    </li>\n<li>忽视安全<br>关闭某些编译器警告，可能有助于构建；但更存在无穷无尽的调试风险。    </li>\n<li>重复<br>本书最重要的规则之一<br>尽可能找到并消除重复。    </li>\n<li>在错误的抽象层级上的代码<br>创建分离较高层级一般性概念与较低层级细节概念的抽象模型。    </li>\n<li>基类依赖于派生类<br>将概念分解到基类和派生类的最普遍的原因是较高层级基类概念可以不依赖于较低层级派生类概念。    </li>\n<li>信息过多<br>设计良好的模块有着非常小的接口，让你事半功倍。<br>设计低劣的模块有着广阔、深入的接口，让你事倍功半。<br>设计良好的接口并不提供许多需要依靠的函数，所以耦合度也较低。<br>设计低劣的接口提供大量必须调用的函数，耦合度较高。    </li>\n<li><p>死代码<br>死代码就是不执行的代码，可以在        </p>\n<ul>\n<li>不会发生的条件语句中        </li>\n<li>从不抛出异常的try语句的catch块中        </li>\n<li>在永久不会发生的switch/case条件中 </li>\n</ul>\n<p>找到这些代码。<br>然后，埋葬它！    </p>\n</li>\n<li>垂直分隔<br>变量和函数应该在被靠近使用的地方定义。<br>私有函数应该刚好在其首次被使用的位置下面定义。    </li>\n<li>前后不一致<br>最小惊异原则，小心选择约定，一旦选中，就应该持续的遵循。    </li>\n<li>使用解释性变量名、函数名、类名    </li>\n<li>把逻辑依赖改为物理依赖<br>依赖者模块不应对被依赖者模块有假定，应该明确的询问候着全部信息。    </li>\n<li>用多态替代 if/else 或 switch/case    </li>\n<li>用命名常量替代魔术数    </li>\n<li>封装条件、边界    </li>\n<li>函数只做一件事</li>\n</ul>\n</li>\n<li>关于类    <ul>\n<li>import package.*;  比80行的导入语句好看多了     </li>\n<li>不要继承常量</li>\n</ul>\n</li>\n<li>名称    <ul>\n<li>采用描述性的名称    </li>\n<li>名称应与抽象层级相符    </li>\n<li>尽可能用标准命名法    </li>\n<li>无歧义的名称    </li>\n<li>为较大作用范围选用较长名称    </li>\n<li>避免编码    </li>\n<li>名称应该说明副作用</li>\n</ul>\n</li>\n<li>测试    <ul>\n<li>多测试    </li>\n<li>使用覆盖率工具    </li>\n<li>别略过小测试    </li>\n<li>被忽略的测试就是对不确定事物的疑问    </li>\n<li>测试边界条件    </li>\n<li>全面测试相近的缺陷    </li>\n<li>测试应该快速</li>\n</ul>\n</li>\n</ul>\n<p><br><br><br></p>\n<h1 id=\"本书总结\"><a href=\"#本书总结\" class=\"headerlink\" title=\"本书总结\"></a>本书总结</h1><p>终于把这本书啃完了。<br>虽然作者比较啰嗦点，但是收获还是很大的。<br>书中提到的，有些已经做到了；<br>但有些不仅没做到，还是反面教材。<br>多规范一下自己的代码，毕竟对于我们来说，代码的清晰度、整洁度还是很重要的。<br>代码总要给别人看的，不要让自己的代码羞以示人。</p>\n","site":{"data":{}},"excerpt":"<p>读这本书之前做了一些功课，很多人反映，书是一本好书，无奈作者废话太多。。。<br>刚开始，我是不信的，但自己读下来才发现，古人诚不欺我啊。<br>来划一下重点吧，写的这些或者是作者所描述的重点，或者是我感触比较深的东西。</p>\n<p><strong>Later equals never！</strong><br><strong>稍后等于永不！</strong></p>","more":"<p><br></p>\n<h1 id=\"章节小记\"><a href=\"#章节小记\" class=\"headerlink\" title=\"章节小记\"></a>章节小记</h1><h2 id=\"第一章、关于整洁的代码\"><a href=\"#第一章、关于整洁的代码\" class=\"headerlink\" title=\"第一章、关于整洁的代码\"></a>第一章、关于整洁的代码</h2><ul>\n<li>代码的逻辑应该直截了当，让缺陷难以隐藏；尽量去减少依赖关系，从而便于维护；依据某种分层战略完善错误处理代码；性能调到最优，避免他人污染。</li>\n<li>糟糕的代码会引发混乱，别人修改糟糕的代码时，往往会越改越烂。</li>\n<li>每个函数、每个类、每个模块 都全神贯注去解决一件事</li>\n<li>代码应该通过其字面表达含义，因为不同的语言导致并非所有必需信息均可通过代码自身清晰表达。</li>\n<li>重要顺序：         <ul>\n<li>能通过所有测试        </li>\n<li>没有重复代码         </li>\n<li>体现系统中的全部设计理念         </li>\n<li>包括尽量少的实体</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"第二章、关于命名\"><a href=\"#第二章、关于命名\" class=\"headerlink\" title=\"第二章、关于命名\"></a>第二章、关于命名</h2><ul>\n<li>名副其实，见名知意</li>\n<li>使用可以读的出来的、可以被搜索的名称</li>\n<li>匈牙利命名法、去掉成员前缀</li>\n<li>类名、对象名 应该是名词或名词短语；    方法名应该是动词或动词短语</li>\n<li>不要抖机灵，每个概念对应一个词，不用双关语（add、insert）</li>\n<li>分离解决方案领域和问题领域的概念，与所涉问题领域更为贴近的代码，应当采用源自问题领域的名称</li>\n<li>添加有意义的语境</li>\n</ul>\n<p><br></p>\n<h2 id=\"第三章、关于函数\"><a href=\"#第三章、关于函数\" class=\"headerlink\" title=\"第三章、关于函数\"></a>第三章、关于函数</h2><ul>\n<li>函数的第一规则是短小，第二条规则是更短小！</li>\n<li>第一章节有提到过的： 每个函数尽量只做一件事。</li>\n<li>自顶向下阅读代码，向下规则</li>\n<li>函数参数，最理想为零，其次单参、双参、三参…（除非有足够特殊的理由，不要三参数+）</li>\n<li>不要向函数传入bool，因为这叫要求该函数不止做一件事</li>\n<li>不要有副作用，比如让你洗个苹果，你别洗完了然后吃了它。</li>\n<li>普遍而言，应避免使用输出参数。</li>\n<li>分隔指令与询问，要么让它干什么，要么让它回答什么。</li>\n</ul>\n<p><br></p>\n<h2 id=\"第四章、关于注释-（别给糟糕的代码加注释，重新写吧！）\"><a href=\"#第四章、关于注释-（别给糟糕的代码加注释，重新写吧！）\" class=\"headerlink\" title=\"第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）\"></a>第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）</h2><ul>\n<li>代码会一直被维护更新，但是注释不一定。</li>\n<li>注释不能改变根本问题，它不能优化糟糕的代码。</li>\n<li>值得写的注释：       <ul>\n<li>版权及著作权声明等        </li>\n<li>对你的意图的解释        </li>\n<li>警示        </li>\n<li>TODO注释，为以后编写查找方便</li>\n</ul>\n</li>\n<li>废注释：        <ul>\n<li>没有规范化，过于局部的注释（需要纵览全文，才能知晓其意）        </li>\n<li>多余的注释（ getMaxNumber(num1, num2) ,还需要写这个函数是干啥的吗？）        </li>\n<li>误导性注释        </li>\n<li>循规式注释（例如：要求每个函数都要像API文档一样写一套注释来说明函数作用，参数意义。）        </li>\n<li>日志式注释（之前不是说光维护代码，不维护注释吗？现在我维护注释，而且把每次修改的时间、内容都加上。有那时间干啥不好，100行的文件，80行注释日志？）        </li>\n<li>归属与署名        </li>\n<li>注释掉的代码（除了注释的人，其他人都不敢删的东西）        </li>\n<li>信息过多，无条理</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"第五章、关于格式-代码的格式是你代码的普通话，别让他说方言\"><a href=\"#第五章、关于格式-代码的格式是你代码的普通话，别让他说方言\" class=\"headerlink\" title=\"第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)\"></a>第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)</h2><ul>\n<li>用空白行来区分你的模块</li>\n<li>关系应该密切的东西：        <ul>\n<li>变量声明，应该尽可能的靠近其使用位置        </li>\n<li>实体变量，应该在类的顶部声明        </li>\n<li>相关函数，函数A调用了函数B，应该让A和B放到一起，A尽可能的放在B的上面        </li>\n<li>概念相关，概念相关的代码 应该放在一起，相关性与距离成正比</li>\n</ul>\n</li>\n<li>尽量让代码行短小，最好以80个字符为上限，但最多不要超过120</li>\n<li>水平方向上的区隔：        <ul>\n<li>赋值操作周围加上空格        </li>\n<li>不在函数名和左圆括号之间加空格        </li>\n<li>逗号后加空格       </li>\n<li>加减周围加空格，优先级高的乘除周围不加空格；当然，如果只有优先级相同的运算符，还是可以在周围加空格的</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"第六章、-关于对象与数据结构\"><a href=\"#第六章、-关于对象与数据结构\" class=\"headerlink\" title=\"第六章、 关于对象与数据结构\"></a>第六章、 关于对象与数据结构</h2><ul>\n<li>不要将类内变量设置为私有，然后又添加赋值器和取值器，将它公之于众</li>\n<li>对象与数据结构之间的二分原理：        <ul>\n<li>过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数，        </li>\n<li>面向对象代码便于在不改动既有函数的前提下添加新类<br>反过来说就是：        </li>\n<li>过程代码难以添加新数据结构，因为必须修改所有函数        </li>\n<li>面向对象代码难以添加新函数，因为必须修改所有类</li>\n</ul>\n</li>\n<li>Demeter律，模块不应了解它所操作对象的内部情形</li>\n<li>最为精炼的数据结构，是一个只有公共变量、没有函数的类</li>\n</ul>\n<p><br></p>\n<h2 id=\"第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\"><a href=\"#第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\" class=\"headerlink\" title=\"第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\"></a>第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）</h2><ul>\n<li>使用异常处理而非返回错误码</li>\n<li>先写出 try-catch-finally语句</li>\n<li>给出异常发生的环境说明，方便定位</li>\n<li>依调用者需要定义异常类</li>\n<li>不要返回、传递NULL值</li>\n</ul>\n<p><br></p>\n<h2 id=\"第八章、关于边界（将其他代码整合到自己代码中）\"><a href=\"#第八章、关于边界（将其他代码整合到自己代码中）\" class=\"headerlink\" title=\"第八章、关于边界（将其他代码整合到自己代码中）\"></a>第八章、关于边界（将其他代码整合到自己代码中）</h2><ul>\n<li>使用类似Map的边界接口，就把它保留在类或近亲类中；避免从公共API中返回边界接口，或将边界接口作为参数传递给公共API。</li>\n<li>学习性测试很有必要</li>\n</ul>\n<p><br></p>\n<h2 id=\"第九章、关于单元测试\"><a href=\"#第九章、关于单元测试\" class=\"headerlink\" title=\"第九章、关于单元测试\"></a>第九章、关于单元测试</h2><ul>\n<li>TDD（测试驱动开发）三定律：        <ul>\n<li>在编写不能通过的单元测试前，不可编写生产代码        </li>\n<li>只可编写刚好无法通过的单元测试，不能编译也算不通过        </li>\n<li>只可编写刚好足以通过当前失败测试的生产代码</li>\n</ul>\n</li>\n<li>脏测试 等同于 没测试</li>\n<li>测试代码与生产代码一样重要，它需要被思考、被设计和被照料，它该像生产代码一样保持整洁。</li>\n<li>整洁的测试的要素     - 可读性！！！</li>\n<li>整洁测试的五条规则     - FIRST        <ul>\n<li>F：Fast，测试应该能够快速的运行。        </li>\n<li>I：Independent，测试应该相互独立。        </li>\n<li>R：Repeatable，测试应该可以在任何环境中重复通过。        </li>\n<li>S：Self-Validating，测试应该有布尔值输出。        </li>\n<li>T：Timely，测试应及时编写。</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"第十章、关于类\"><a href=\"#第十章、关于类\" class=\"headerlink\" title=\"第十章、关于类\"></a>第十章、关于类</h2><ul>\n<li>类应该由一组变量列表开始，公共静态常量优先于私有静态变量</li>\n<li>类应该通函数一样要短小</li>\n<li>类或模块应有且只有一条加以修改的理由</li>\n<li>单一全责：系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个全责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为</li>\n<li>内聚：类应该只有少量实体变量</li>\n<li>既然修改会一直持续，那么就更应该对类加以组织，以降低修改的风险</li>\n<li>类应当依赖于抽象而不是依赖于具体细节</li>\n</ul>\n<p><br></p>\n<h2 id=\"第十一章、关于系统\"><a href=\"#第十一章、关于系统\" class=\"headerlink\" title=\"第十一章、关于系统\"></a>第十一章、关于系统</h2><ul>\n<li>软件系统应将起始过程与之后的运行时逻辑分离开。    就比如我做一个玩家信息面板，在起始过程，需要创建很多Text、Image来存储玩家一些状态信息及玩家的形象。    但是，我用这个界面的时候，只需要改动里面的值、或者切换形象。<br>这时，就可以有两个函数，init来负责起始过程的创建；refresh来负责更新玩家的状态。（当然不能把所有具体实现都放在一个函数里，每个函数负责一个小模块是必要的）</li>\n<li>软件系统与物理系统可以类比，它们的架构都可以递增式地增长，只要我们持续将关注面恰当的切分。</li>\n<li>最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯Java(或其他语言）对象实现。不同领域之间用最不具有亲还行的方面或类方面工具整合起来。</li>\n</ul>\n<p><br></p>\n<h2 id=\"第十二章、关于迭代\"><a href=\"#第十二章、关于迭代\" class=\"headerlink\" title=\"第十二章、关于迭代\"></a>第十二章、关于迭代</h2><ul>\n<li>Kent Beck关于简单设计的四条规则    <ul>\n<li>运行所有测试    </li>\n<li>不可重复    </li>\n<li>表达了程序员的意图    </li>\n<li>尽可能减少类和方法的数量<br>以上规则按其重要程度排列</li>\n</ul>\n</li>\n<li>遵循有关编写测试并持续运行测试的简单、明确的规则，系统就会更贴近OO低耦合度、高内聚度的目标。编写测试引致更好的设计。</li>\n<li>测试消除了对清理代码就会破坏代码的恐惧，所以可以放心的去重构。</li>\n<li>重复是良好系统设计的大敌，它代表着额外工作、额外风险和额外且不必要的复杂度。</li>\n<li>增强表达力方法：    <ul>\n<li>选用好的名称    </li>\n<li>保持函数和类的尺寸短小    </li>\n<li>采用标准命名法    </li>\n<li>编写良好的单元测试    </li>\n<li>最重要的就是去尝试去做</li>\n</ul>\n</li>\n<li>尽可能减少类和方法的数量，这条规则优先级是最低的，要让步于测试、消除重复和增强表达力。</li>\n</ul>\n<p><br></p>\n<h2 id=\"第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\"><a href=\"#第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\" class=\"headerlink\" title=\"第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\"></a>第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）</h2><ul>\n<li>并发是一种解耦策略，它将<strong>目的</strong>和<strong>时机</strong>分解开，而在单线程中，两者紧密耦合。</li>\n<li>解耦目的与时机可以显著的改进程序的<strong>吞吐量</strong>和<strong>结构</strong></li>\n<li>一些迷思与误解    <ul>\n<li>并发总能改进系能。    并发有时能改进性能，但只在多个线程或处理器之间能分享大量等待时间的时候管用。    </li>\n<li>编写并发程序无需修改设计。    并发算法的设计有可能与单线程系统的设计极不相同，解耦目的与时机往往对系统结构产生巨大的影响。    </li>\n<li>在采用Web或EJB容器的时候，理解并发问题并不重要。    只有了解容器的运作，才可以对其产生的并发问题更好的解决。</li>\n</ul>\n</li>\n<li>关于并发编程的中肯理解    <ul>\n<li>并发会在性能和编写额外代码上增加一些开销    </li>\n<li>正确的并发是复杂的，即便对于简单的问题也是如此<br>-并发缺陷并非总能重现，所以常被看做偶发事件而忽略，未被当做真的缺陷看待   </li>\n<li>并发常常需要对设计策略的根本性修改</li>\n</ul>\n</li>\n<li>防御并发代码问题的原则与技巧    <ul>\n<li>单一权责原则（SRP)<br>分离并发相关代码与其他代码    </li>\n<li>限制数据作用域<br>谨记数据封装，严格限制对可能被共享的数据的访问    </li>\n<li>使用数据复本    从多个线程收集所有复本的结果，并在单个线程中合并这些结果    </li>\n<li>线程应尽可能的独立    尝试将数据分解到可被独立线程（可能在不同的处理器上）操作的独立子集</li>\n</ul>\n</li>\n<li>一些基础定义    <ul>\n<li>限定资源<br>并发环境中有着固定尺寸或数量的资源。    </li>\n<li>互斥<br>每一时刻仅有一个线程能访问共享数据或共享资源。    </li>\n<li>线程饥饿<br>一个或一组线程在很长时间内或永久被禁止。    </li>\n<li>死锁<br>两个或多个线程互相等待执行结束。    </li>\n<li>活锁<br>执行次序一致的线程，每个都想要起步，但发现其他线程已开始。</li>\n</ul>\n</li>\n<li>一些执行模型    <ul>\n<li>生产者-消费者模型<br>一个或多个生产者线程创建某些工作，并置于缓存或队列中。一个或多个消费者线程从队列中获取并完成这些工作。生产者和消费者之间的队列是一种限定资源。    </li>\n<li>读者-作者模型<br>当存在一个主要为读者线程提供信息源，但只偶尔被作者线程更新的共享资源，吞吐量就会是个问题。增加吞吐量，会导致线程饥饿和过时信息的累计。更新会影响吞吐量。协调读者线程，不去读作者线程正在更新的信息（反之亦然），这是一个辛苦的平衡工作。作者线程倾向于长期锁定许多读者线程，从而导致吞吐量问题。    </li>\n<li>经典的哲学家    一群哲学家环坐在圆桌旁。每个哲学家的左手边放了一把叉子。桌面中央摆着一大碗意大利面。每个哲学家在吃饭的时候都要拿起叉子吃饭。但除非手上有两把叉子，否则没法进食。如果左边或右边的哲学家已经取用一把叉子，中间这位就需要等到别人吃完，放回叉子。每位哲学家吃完后，就将两把叉子放回桌面，直到下次吃饭。</li>\n</ul>\n</li>\n<li>避免使用一个共享对象的多个方法。当不得不使用时，写代码需要注意的方法。    <ul>\n<li>基于客户端的锁定<br>客户端代码在调用第一个方法前锁定服务端，确保锁的范围覆盖了调用最后一个方法的代码。    </li>\n<li>基于服务端的锁定<br>在服务端创建锁定服务端的方法，调用所有方法，然后解锁。让客户端调用新方法。    </li>\n<li>适配服务端<br>创建执行锁定的中间层。这是一种基于服务端锁定的例子，但不修改原始服务端代码。</li>\n</ul>\n</li>\n<li>尽可能减小同步区域</li>\n<li>尽早考虑关闭问题，尽早令其工作正常</li>\n<li>编写测试，测试线程代码<br>关于测试代码的建议    <ul>\n<li>将伪失败看做可能的线程问题    </li>\n<li>先使非线程代码可工作    </li>\n<li>编写可插拔的线程代码    </li>\n<li>编写可调整的线程代码    </li>\n<li>运行多于处理器数量的线程    </li>\n<li>在不同平台上运行    </li>\n<li>调整代码并强迫错误发生</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"第十四章、关于逐步改进\"><a href=\"#第十四章、关于逐步改进\" class=\"headerlink\" title=\"第十四章、关于逐步改进\"></a>第十四章、关于逐步改进</h2><ul>\n<li>要编写整洁代码，必须先写肮脏代码，然后清理它。<br>所以，不要害怕写的肮脏，只要去清理，就可以写出整洁的代码。<br>但是，一定要去<strong>清理它</strong>！</li>\n<li>在改进程序过程中，要保持系统始终可以运行</li>\n<li>进度可以重订，需求可以重新定义，团队动态可以修正，但糟糕的代码只是一直腐败发酵，无情的拖后腿</li>\n</ul>\n<p><br></p>\n<h2 id=\"第十七章、味道与启发\"><a href=\"#第十七章、味道与启发\" class=\"headerlink\" title=\"第十七章、味道与启发\"></a>第十七章、味道与启发</h2><ul>\n<li>注释    <ul>\n<li>不恰当的信息<br>让注释传达本该更好地在源代码控制系统、问题追踪系统或任何其他记录系统中保存的信息，是不恰当的。    </li>\n<li>废弃的注释<br>过时、无关或不正确的注释就是废弃的注释。    </li>\n<li>冗余注释<br>如果描述的是某种充分自我描述了的东西，那么注释就是多余的。    </li>\n<li>糟糕的注释<br>值得编写的注释，也值得好好写。不要画蛇添足，要保持整洁。    </li>\n<li>注释掉的代码<br>看到注释掉的代码，就删除它！<br>源代码控制系统还会记得他，让注释的人回去找。<br>什么？不用源代码控制系统？<br>好吧，你已经不需要读这本书了。</li>\n</ul>\n</li>\n<li>环境    <ul>\n<li>需要多步才能实现的构建<br>构建系统应该是单步的小操作。<br>不应该从源代码控制系统中一点点签出代码；<br>不应该需要一系列神秘指令或环境依赖脚本来构建单个元素；<br>不应该四处寻找额外小JAR、XML文件和其他杂物；<br>应该能用单个命令签出系统，并用单个指令构建它。    </li>\n<li>需要多步才能做到的测试<br>应该能发出单个指令就可以运行全部单元测试。</li>\n</ul>\n</li>\n<li>函数    <ul>\n<li>过多的参数<br>函数的参数量应该少，三个以上绝对不可容忍。    </li>\n<li>输出参数<br>输出参数违反直觉，读者期望参数用于输入而非输出。    </li>\n<li>标识参数<br>布尔值参数等同于宣告该函数做了不知一件事，应该消灭。    </li>\n<li>死函数<br>永不被调用的方法应该被丢弃。<br>不要怕删除，源代码控制系统会帮你记住它。</li>\n</ul>\n</li>\n<li><p>一般性问题    </p>\n<ul>\n<li>一个源文件中存在多种语言<br>理想的源文件包括且只包括一种语言，<br>现实中，应该尽力减少源文件中额外语言的数量和范围。    </li>\n<li>明显的行为未被实现<br>遵循”最小惊异原则”，函数或类应该实现其他程序员有理由期待的行为。    </li>\n<li>不正确的边界行为<br>不要让代码只是能工作，应该追索每种边界条件，并编写测试。    </li>\n<li>忽视安全<br>关闭某些编译器警告，可能有助于构建；但更存在无穷无尽的调试风险。    </li>\n<li>重复<br>本书最重要的规则之一<br>尽可能找到并消除重复。    </li>\n<li>在错误的抽象层级上的代码<br>创建分离较高层级一般性概念与较低层级细节概念的抽象模型。    </li>\n<li>基类依赖于派生类<br>将概念分解到基类和派生类的最普遍的原因是较高层级基类概念可以不依赖于较低层级派生类概念。    </li>\n<li>信息过多<br>设计良好的模块有着非常小的接口，让你事半功倍。<br>设计低劣的模块有着广阔、深入的接口，让你事倍功半。<br>设计良好的接口并不提供许多需要依靠的函数，所以耦合度也较低。<br>设计低劣的接口提供大量必须调用的函数，耦合度较高。    </li>\n<li><p>死代码<br>死代码就是不执行的代码，可以在        </p>\n<ul>\n<li>不会发生的条件语句中        </li>\n<li>从不抛出异常的try语句的catch块中        </li>\n<li>在永久不会发生的switch/case条件中 </li>\n</ul>\n<p>找到这些代码。<br>然后，埋葬它！    </p>\n</li>\n<li>垂直分隔<br>变量和函数应该在被靠近使用的地方定义。<br>私有函数应该刚好在其首次被使用的位置下面定义。    </li>\n<li>前后不一致<br>最小惊异原则，小心选择约定，一旦选中，就应该持续的遵循。    </li>\n<li>使用解释性变量名、函数名、类名    </li>\n<li>把逻辑依赖改为物理依赖<br>依赖者模块不应对被依赖者模块有假定，应该明确的询问候着全部信息。    </li>\n<li>用多态替代 if/else 或 switch/case    </li>\n<li>用命名常量替代魔术数    </li>\n<li>封装条件、边界    </li>\n<li>函数只做一件事</li>\n</ul>\n</li>\n<li>关于类    <ul>\n<li>import package.*;  比80行的导入语句好看多了     </li>\n<li>不要继承常量</li>\n</ul>\n</li>\n<li>名称    <ul>\n<li>采用描述性的名称    </li>\n<li>名称应与抽象层级相符    </li>\n<li>尽可能用标准命名法    </li>\n<li>无歧义的名称    </li>\n<li>为较大作用范围选用较长名称    </li>\n<li>避免编码    </li>\n<li>名称应该说明副作用</li>\n</ul>\n</li>\n<li>测试    <ul>\n<li>多测试    </li>\n<li>使用覆盖率工具    </li>\n<li>别略过小测试    </li>\n<li>被忽略的测试就是对不确定事物的疑问    </li>\n<li>测试边界条件    </li>\n<li>全面测试相近的缺陷    </li>\n<li>测试应该快速</li>\n</ul>\n</li>\n</ul>\n<p><br><br><br></p>\n<h1 id=\"本书总结\"><a href=\"#本书总结\" class=\"headerlink\" title=\"本书总结\"></a>本书总结</h1><p>终于把这本书啃完了。<br>虽然作者比较啰嗦点，但是收获还是很大的。<br>书中提到的，有些已经做到了；<br>但有些不仅没做到，还是反面教材。<br>多规范一下自己的代码，毕竟对于我们来说，代码的清晰度、整洁度还是很重要的。<br>代码总要给别人看的，不要让自己的代码羞以示人。</p>"},{"title":"《时间简史》读感","date":"2017-03-14T13:37:35.000Z","_content":"\n《时间简史》 读感\n\n如果不进行外加干涉,事物总是倾向于增加它的无序度。\n\n<!-- more -->\n\n<br/>\n\n这段时间，读了一下霍金的《时间简史》。\n这本书把我带入了一个新的世界的感觉。\n前半段，带我温习了一下高中及大学的物理（PS：这里好想吐槽，之前学物理，就是告诉你一个定理、公式，去背去做题，根本不去想为什么，或许，这就是我学的那么吃力的原因吧。）\n后面，直接就是之前没有接触过的，几乎没有认知的领域了。\n\n<br/>\n\n给我印象最深刻的几个部分：\n1. CPT守恒。通过P守恒、CP守恒到CPT守恒，可以拓展到很多东西。\n2. 时间箭头。热力学时间箭头、心理学时间箭头、宇宙学时间箭头。尤其是热力学时间箭头，就是由有序到无序的过程，熵在不断增加的过程。\n3. 时空维度。曾经我一度困扰，四维空间以上的五维空间是什么样子呢？后来才知道，说四维空间，好像不是很合适，应该是三维+一维，三个空间维度加一个时间维度。\n然后，剩下的维度是我们之上，还是我们之下呢？（也就是说我们在五维空间内，还是四维就包含了五维呢？）反正，根据M理论，宇宙由三维可见空间维+一维时间维+七维不可见空间维构成。\n4. 不确定性原理。人们永远不能同时准确知道粒子的位置和速度；对其中一个知道的越精确，则对另一个就知道的越不准确。\n5. 人择原理。我们之所以看到宇宙是这个样子，只是因为如果它不是这样，我们就不会在这里去观察它。\n\n<br/>\n\n这本书看完以后，真如醍醐灌顶。\n理顺了之前既得已知的知识，扩展了后面的知识，虽然，没有细究（也不必细究），但是有了一个了解。\n对于物之上，物之下，更深层的了解，开拓了视野。\n\n<br/>\n\n最后，\n在相对论中并没有一个唯一的绝对时间，\n每个人都有自己的时间测度，这依赖于他在何处并如何运动。\n与自己最相近的，应该是反我（任何粒子都有会和它湮灭的反粒子,也可能存在由反粒子构成的整个反世界和反人）\n然而，如果你遇到了反自身，注意不要握手！\n否则，你们两人都会在一个巨大的闪光中消失殆尽。\n","source":"_posts/《时间简史》读感.md","raw":"---\ntitle: 《时间简史》读感\ndate: 2017-03-14 21:37:35\ntags: 看着读\n\n---\n\n《时间简史》 读感\n\n如果不进行外加干涉,事物总是倾向于增加它的无序度。\n\n<!-- more -->\n\n<br/>\n\n这段时间，读了一下霍金的《时间简史》。\n这本书把我带入了一个新的世界的感觉。\n前半段，带我温习了一下高中及大学的物理（PS：这里好想吐槽，之前学物理，就是告诉你一个定理、公式，去背去做题，根本不去想为什么，或许，这就是我学的那么吃力的原因吧。）\n后面，直接就是之前没有接触过的，几乎没有认知的领域了。\n\n<br/>\n\n给我印象最深刻的几个部分：\n1. CPT守恒。通过P守恒、CP守恒到CPT守恒，可以拓展到很多东西。\n2. 时间箭头。热力学时间箭头、心理学时间箭头、宇宙学时间箭头。尤其是热力学时间箭头，就是由有序到无序的过程，熵在不断增加的过程。\n3. 时空维度。曾经我一度困扰，四维空间以上的五维空间是什么样子呢？后来才知道，说四维空间，好像不是很合适，应该是三维+一维，三个空间维度加一个时间维度。\n然后，剩下的维度是我们之上，还是我们之下呢？（也就是说我们在五维空间内，还是四维就包含了五维呢？）反正，根据M理论，宇宙由三维可见空间维+一维时间维+七维不可见空间维构成。\n4. 不确定性原理。人们永远不能同时准确知道粒子的位置和速度；对其中一个知道的越精确，则对另一个就知道的越不准确。\n5. 人择原理。我们之所以看到宇宙是这个样子，只是因为如果它不是这样，我们就不会在这里去观察它。\n\n<br/>\n\n这本书看完以后，真如醍醐灌顶。\n理顺了之前既得已知的知识，扩展了后面的知识，虽然，没有细究（也不必细究），但是有了一个了解。\n对于物之上，物之下，更深层的了解，开拓了视野。\n\n<br/>\n\n最后，\n在相对论中并没有一个唯一的绝对时间，\n每个人都有自己的时间测度，这依赖于他在何处并如何运动。\n与自己最相近的，应该是反我（任何粒子都有会和它湮灭的反粒子,也可能存在由反粒子构成的整个反世界和反人）\n然而，如果你遇到了反自身，注意不要握手！\n否则，你们两人都会在一个巨大的闪光中消失殆尽。\n","slug":"《时间简史》读感","published":1,"updated":"2018-07-17T17:05:10.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbch0016esvqrm7qu2zh","content":"<p>《时间简史》 读感</p>\n<p>如果不进行外加干涉,事物总是倾向于增加它的无序度。</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>这段时间，读了一下霍金的《时间简史》。<br>这本书把我带入了一个新的世界的感觉。<br>前半段，带我温习了一下高中及大学的物理（PS：这里好想吐槽，之前学物理，就是告诉你一个定理、公式，去背去做题，根本不去想为什么，或许，这就是我学的那么吃力的原因吧。）<br>后面，直接就是之前没有接触过的，几乎没有认知的领域了。</p>\n<p><br></p>\n<p>给我印象最深刻的几个部分：</p>\n<ol>\n<li>CPT守恒。通过P守恒、CP守恒到CPT守恒，可以拓展到很多东西。</li>\n<li>时间箭头。热力学时间箭头、心理学时间箭头、宇宙学时间箭头。尤其是热力学时间箭头，就是由有序到无序的过程，熵在不断增加的过程。</li>\n<li>时空维度。曾经我一度困扰，四维空间以上的五维空间是什么样子呢？后来才知道，说四维空间，好像不是很合适，应该是三维+一维，三个空间维度加一个时间维度。<br>然后，剩下的维度是我们之上，还是我们之下呢？（也就是说我们在五维空间内，还是四维就包含了五维呢？）反正，根据M理论，宇宙由三维可见空间维+一维时间维+七维不可见空间维构成。</li>\n<li>不确定性原理。人们永远不能同时准确知道粒子的位置和速度；对其中一个知道的越精确，则对另一个就知道的越不准确。</li>\n<li>人择原理。我们之所以看到宇宙是这个样子，只是因为如果它不是这样，我们就不会在这里去观察它。</li>\n</ol>\n<p><br></p>\n<p>这本书看完以后，真如醍醐灌顶。<br>理顺了之前既得已知的知识，扩展了后面的知识，虽然，没有细究（也不必细究），但是有了一个了解。<br>对于物之上，物之下，更深层的了解，开拓了视野。</p>\n<p><br></p>\n<p>最后，<br>在相对论中并没有一个唯一的绝对时间，<br>每个人都有自己的时间测度，这依赖于他在何处并如何运动。<br>与自己最相近的，应该是反我（任何粒子都有会和它湮灭的反粒子,也可能存在由反粒子构成的整个反世界和反人）<br>然而，如果你遇到了反自身，注意不要握手！<br>否则，你们两人都会在一个巨大的闪光中消失殆尽。</p>\n","site":{"data":{}},"excerpt":"<p>《时间简史》 读感</p>\n<p>如果不进行外加干涉,事物总是倾向于增加它的无序度。</p>","more":"<p><br></p>\n<p>这段时间，读了一下霍金的《时间简史》。<br>这本书把我带入了一个新的世界的感觉。<br>前半段，带我温习了一下高中及大学的物理（PS：这里好想吐槽，之前学物理，就是告诉你一个定理、公式，去背去做题，根本不去想为什么，或许，这就是我学的那么吃力的原因吧。）<br>后面，直接就是之前没有接触过的，几乎没有认知的领域了。</p>\n<p><br></p>\n<p>给我印象最深刻的几个部分：</p>\n<ol>\n<li>CPT守恒。通过P守恒、CP守恒到CPT守恒，可以拓展到很多东西。</li>\n<li>时间箭头。热力学时间箭头、心理学时间箭头、宇宙学时间箭头。尤其是热力学时间箭头，就是由有序到无序的过程，熵在不断增加的过程。</li>\n<li>时空维度。曾经我一度困扰，四维空间以上的五维空间是什么样子呢？后来才知道，说四维空间，好像不是很合适，应该是三维+一维，三个空间维度加一个时间维度。<br>然后，剩下的维度是我们之上，还是我们之下呢？（也就是说我们在五维空间内，还是四维就包含了五维呢？）反正，根据M理论，宇宙由三维可见空间维+一维时间维+七维不可见空间维构成。</li>\n<li>不确定性原理。人们永远不能同时准确知道粒子的位置和速度；对其中一个知道的越精确，则对另一个就知道的越不准确。</li>\n<li>人择原理。我们之所以看到宇宙是这个样子，只是因为如果它不是这样，我们就不会在这里去观察它。</li>\n</ol>\n<p><br></p>\n<p>这本书看完以后，真如醍醐灌顶。<br>理顺了之前既得已知的知识，扩展了后面的知识，虽然，没有细究（也不必细究），但是有了一个了解。<br>对于物之上，物之下，更深层的了解，开拓了视野。</p>\n<p><br></p>\n<p>最后，<br>在相对论中并没有一个唯一的绝对时间，<br>每个人都有自己的时间测度，这依赖于他在何处并如何运动。<br>与自己最相近的，应该是反我（任何粒子都有会和它湮灭的反粒子,也可能存在由反粒子构成的整个反世界和反人）<br>然而，如果你遇到了反自身，注意不要握手！<br>否则，你们两人都会在一个巨大的闪光中消失殆尽。</p>"},{"title":"为什么要搞这个？","date":"2016-07-20T15:03:16.000Z","_content":"\n折腾啥呀？！！\n\n<!-- more -->\n\n<br/>\n\n为什么要搞这个东西呢？\n已经不写博文好长时间了，\n起因是到了大四，离开学校，一人奔赴帝都找工作，没有多少时间，（一个字，懒）\n之后，就是刚入职，要学习新的东西，没空出时间，（还是一个字，懒）\n等可以应付了以后，懒癌开始犯了，（已经找不出借口了）\n后来...后来就毕业了，又忙毕业...\n拖着，拖着，到了现在。\n\n<br/>\n\n想着，毕业了，\n该有个新的开始了，\n本来想做个个人网站，结果发现，好麻烦啊o(╯□╰)o...\n精力实在有限（还是懒呗..）\n忽然发现了这个，\n简约的风格，便捷的部署，还不用我去维护它，\n毅然，上了这辆车。\n\n<br/>\n\n最重要的是，\n搞这个东西，\n看起来是屌屌的呀。\n而且，年轻人，就是该多折腾折腾嘛。","source":"_posts/为什么要搞这个？.md","raw":"---\ntitle: 为什么要搞这个？\ndate: 2016-07-20 23:03:16\ntags: 抽空写\n\n---\n\n折腾啥呀？！！\n\n<!-- more -->\n\n<br/>\n\n为什么要搞这个东西呢？\n已经不写博文好长时间了，\n起因是到了大四，离开学校，一人奔赴帝都找工作，没有多少时间，（一个字，懒）\n之后，就是刚入职，要学习新的东西，没空出时间，（还是一个字，懒）\n等可以应付了以后，懒癌开始犯了，（已经找不出借口了）\n后来...后来就毕业了，又忙毕业...\n拖着，拖着，到了现在。\n\n<br/>\n\n想着，毕业了，\n该有个新的开始了，\n本来想做个个人网站，结果发现，好麻烦啊o(╯□╰)o...\n精力实在有限（还是懒呗..）\n忽然发现了这个，\n简约的风格，便捷的部署，还不用我去维护它，\n毅然，上了这辆车。\n\n<br/>\n\n最重要的是，\n搞这个东西，\n看起来是屌屌的呀。\n而且，年轻人，就是该多折腾折腾嘛。","slug":"为什么要搞这个？","published":1,"updated":"2018-07-17T17:05:10.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbch0017esvqcxkjs6z5","content":"<p>折腾啥呀？！！</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>为什么要搞这个东西呢？<br>已经不写博文好长时间了，<br>起因是到了大四，离开学校，一人奔赴帝都找工作，没有多少时间，（一个字，懒）<br>之后，就是刚入职，要学习新的东西，没空出时间，（还是一个字，懒）<br>等可以应付了以后，懒癌开始犯了，（已经找不出借口了）<br>后来…后来就毕业了，又忙毕业…<br>拖着，拖着，到了现在。</p>\n<p><br></p>\n<p>想着，毕业了，<br>该有个新的开始了，<br>本来想做个个人网站，结果发现，好麻烦啊o(╯□╰)o…<br>精力实在有限（还是懒呗..）<br>忽然发现了这个，<br>简约的风格，便捷的部署，还不用我去维护它，<br>毅然，上了这辆车。</p>\n<p><br></p>\n<p>最重要的是，<br>搞这个东西，<br>看起来是屌屌的呀。<br>而且，年轻人，就是该多折腾折腾嘛。</p>\n","site":{"data":{}},"excerpt":"<p>折腾啥呀？！！</p>","more":"<p><br></p>\n<p>为什么要搞这个东西呢？<br>已经不写博文好长时间了，<br>起因是到了大四，离开学校，一人奔赴帝都找工作，没有多少时间，（一个字，懒）<br>之后，就是刚入职，要学习新的东西，没空出时间，（还是一个字，懒）<br>等可以应付了以后，懒癌开始犯了，（已经找不出借口了）<br>后来…后来就毕业了，又忙毕业…<br>拖着，拖着，到了现在。</p>\n<p><br></p>\n<p>想着，毕业了，<br>该有个新的开始了，<br>本来想做个个人网站，结果发现，好麻烦啊o(╯□╰)o…<br>精力实在有限（还是懒呗..）<br>忽然发现了这个，<br>简约的风格，便捷的部署，还不用我去维护它，<br>毅然，上了这辆车。</p>\n<p><br></p>\n<p>最重要的是，<br>搞这个东西，<br>看起来是屌屌的呀。<br>而且，年轻人，就是该多折腾折腾嘛。</p>"},{"title":"《生死疲劳》读感","date":"2016-07-25T14:22:05.000Z","_content":"\n莫言的《生死疲劳》读感\n\n<!-- more -->\n\n经同事推荐，\n拜读了一下莫言的《生死疲劳》，\n按他的话：莫言获得诺贝尔文学奖，还是有他独到之处的，应该读一下他的文章。\n\n<br/>\n\n这本书，一是从大局上，中国农村从1950年到2000年间50年的变化，每一次的转世都是代表每个时代的特点，非常有标志性。\n二是从个人上，带着怨恨的人是无法转世为人的，西门闹那么深的仇怨，也被这一次次的转世磨没了脾性，从刚转世为驴的驴折腾，到最后为蓝千岁时，平静的叙述这一切。\n其实，不光是主人公西门闹，读者也饱受煎熬，读者也随着西门闹一起，一次次转世，一次次的经历着他所经历的一切。\n\n<br/>\n\n驴、牛、猪、狗 这四个中（猴 和 蓝千岁 的部分太少，主要是这四个），最不甘而且有人性的要属驴，\n正如其名——驴折腾，可是真能折腾，\n作为第一个顺序的动物，西门闹的怨恨还是很强的，\n不爽于自己为驴，不爽于蓝脸为己主，不爽于蓝脸与迎春的结合，等等。\n但，到了牛这里，牛犟劲，\n这犟劲的态度，不单指西门闹的不妥协，不服从，\n也配着蓝脸的单干行为的犟，即使到最后，\n被一鞭一鞭抽死，也不妥协。\n转世为猪这部分，则开始天马行空，这部分我读着最费力的部分，\n一是本书读到这里，已经经历两世，有些疲劳了，\n二是，这部分有些太扯了，总让我跳戏。\n转世为狗，已经是一个新的开始了，\n无论是西门闹，还是读者也快到极限了，\n所以，狗精神这部分，西门闹已经完全适应了为动物，\n不像为驴时，还有着人性，其实，在为猪时，他就已经有些忘却自己的人性了。\n\n<br/>\n\n遗憾的是，这本书，有些虎头蛇尾。\n后面很多东西，都能感觉的出来很仓促，\n尤其是到猴子和蓝千岁这两部分，跟前面比都少的贫瘠了。\n还有，最后，这些人死的...\n让我感觉回到了余华的《活着》的最后部分，\n只不过，《活着》中，一人一牛，在那田野中耕种着；\n而《生死疲劳》里，是那蓝千岁在一排长满杂草的墓前唏嘘着。\n\n<br/>\n\n噢，还有一点。\n本书中，男女关系，有些乱的我头晕...\n\n<br/>\n\n总之，莫先生的文笔还是很强的，那些细节的描写，都不需要多想，就能有幅画面在眼前。\n有很多，让我想拍大腿叫好的语句。\n对了，还有，本书内的莫言，是最让我跳戏的东西。","source":"_posts/《生死疲劳》读感.md","raw":"---\ntitle: 《生死疲劳》读感\ndate: 2016-07-25 22:22:05\ntags: 看着读\n\n---\n\n莫言的《生死疲劳》读感\n\n<!-- more -->\n\n经同事推荐，\n拜读了一下莫言的《生死疲劳》，\n按他的话：莫言获得诺贝尔文学奖，还是有他独到之处的，应该读一下他的文章。\n\n<br/>\n\n这本书，一是从大局上，中国农村从1950年到2000年间50年的变化，每一次的转世都是代表每个时代的特点，非常有标志性。\n二是从个人上，带着怨恨的人是无法转世为人的，西门闹那么深的仇怨，也被这一次次的转世磨没了脾性，从刚转世为驴的驴折腾，到最后为蓝千岁时，平静的叙述这一切。\n其实，不光是主人公西门闹，读者也饱受煎熬，读者也随着西门闹一起，一次次转世，一次次的经历着他所经历的一切。\n\n<br/>\n\n驴、牛、猪、狗 这四个中（猴 和 蓝千岁 的部分太少，主要是这四个），最不甘而且有人性的要属驴，\n正如其名——驴折腾，可是真能折腾，\n作为第一个顺序的动物，西门闹的怨恨还是很强的，\n不爽于自己为驴，不爽于蓝脸为己主，不爽于蓝脸与迎春的结合，等等。\n但，到了牛这里，牛犟劲，\n这犟劲的态度，不单指西门闹的不妥协，不服从，\n也配着蓝脸的单干行为的犟，即使到最后，\n被一鞭一鞭抽死，也不妥协。\n转世为猪这部分，则开始天马行空，这部分我读着最费力的部分，\n一是本书读到这里，已经经历两世，有些疲劳了，\n二是，这部分有些太扯了，总让我跳戏。\n转世为狗，已经是一个新的开始了，\n无论是西门闹，还是读者也快到极限了，\n所以，狗精神这部分，西门闹已经完全适应了为动物，\n不像为驴时，还有着人性，其实，在为猪时，他就已经有些忘却自己的人性了。\n\n<br/>\n\n遗憾的是，这本书，有些虎头蛇尾。\n后面很多东西，都能感觉的出来很仓促，\n尤其是到猴子和蓝千岁这两部分，跟前面比都少的贫瘠了。\n还有，最后，这些人死的...\n让我感觉回到了余华的《活着》的最后部分，\n只不过，《活着》中，一人一牛，在那田野中耕种着；\n而《生死疲劳》里，是那蓝千岁在一排长满杂草的墓前唏嘘着。\n\n<br/>\n\n噢，还有一点。\n本书中，男女关系，有些乱的我头晕...\n\n<br/>\n\n总之，莫先生的文笔还是很强的，那些细节的描写，都不需要多想，就能有幅画面在眼前。\n有很多，让我想拍大腿叫好的语句。\n对了，还有，本书内的莫言，是最让我跳戏的东西。","slug":"《生死疲劳》读感","published":1,"updated":"2018-07-17T17:05:10.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbcj0019esvqnupmcw16","content":"<p>莫言的《生死疲劳》读感</p>\n<a id=\"more\"></a>\n<p>经同事推荐，<br>拜读了一下莫言的《生死疲劳》，<br>按他的话：莫言获得诺贝尔文学奖，还是有他独到之处的，应该读一下他的文章。</p>\n<p><br></p>\n<p>这本书，一是从大局上，中国农村从1950年到2000年间50年的变化，每一次的转世都是代表每个时代的特点，非常有标志性。<br>二是从个人上，带着怨恨的人是无法转世为人的，西门闹那么深的仇怨，也被这一次次的转世磨没了脾性，从刚转世为驴的驴折腾，到最后为蓝千岁时，平静的叙述这一切。<br>其实，不光是主人公西门闹，读者也饱受煎熬，读者也随着西门闹一起，一次次转世，一次次的经历着他所经历的一切。</p>\n<p><br></p>\n<p>驴、牛、猪、狗 这四个中（猴 和 蓝千岁 的部分太少，主要是这四个），最不甘而且有人性的要属驴，<br>正如其名——驴折腾，可是真能折腾，<br>作为第一个顺序的动物，西门闹的怨恨还是很强的，<br>不爽于自己为驴，不爽于蓝脸为己主，不爽于蓝脸与迎春的结合，等等。<br>但，到了牛这里，牛犟劲，<br>这犟劲的态度，不单指西门闹的不妥协，不服从，<br>也配着蓝脸的单干行为的犟，即使到最后，<br>被一鞭一鞭抽死，也不妥协。<br>转世为猪这部分，则开始天马行空，这部分我读着最费力的部分，<br>一是本书读到这里，已经经历两世，有些疲劳了，<br>二是，这部分有些太扯了，总让我跳戏。<br>转世为狗，已经是一个新的开始了，<br>无论是西门闹，还是读者也快到极限了，<br>所以，狗精神这部分，西门闹已经完全适应了为动物，<br>不像为驴时，还有着人性，其实，在为猪时，他就已经有些忘却自己的人性了。</p>\n<p><br></p>\n<p>遗憾的是，这本书，有些虎头蛇尾。<br>后面很多东西，都能感觉的出来很仓促，<br>尤其是到猴子和蓝千岁这两部分，跟前面比都少的贫瘠了。<br>还有，最后，这些人死的…<br>让我感觉回到了余华的《活着》的最后部分，<br>只不过，《活着》中，一人一牛，在那田野中耕种着；<br>而《生死疲劳》里，是那蓝千岁在一排长满杂草的墓前唏嘘着。</p>\n<p><br></p>\n<p>噢，还有一点。<br>本书中，男女关系，有些乱的我头晕…</p>\n<p><br></p>\n<p>总之，莫先生的文笔还是很强的，那些细节的描写，都不需要多想，就能有幅画面在眼前。<br>有很多，让我想拍大腿叫好的语句。<br>对了，还有，本书内的莫言，是最让我跳戏的东西。</p>\n","site":{"data":{}},"excerpt":"<p>莫言的《生死疲劳》读感</p>","more":"<p>经同事推荐，<br>拜读了一下莫言的《生死疲劳》，<br>按他的话：莫言获得诺贝尔文学奖，还是有他独到之处的，应该读一下他的文章。</p>\n<p><br></p>\n<p>这本书，一是从大局上，中国农村从1950年到2000年间50年的变化，每一次的转世都是代表每个时代的特点，非常有标志性。<br>二是从个人上，带着怨恨的人是无法转世为人的，西门闹那么深的仇怨，也被这一次次的转世磨没了脾性，从刚转世为驴的驴折腾，到最后为蓝千岁时，平静的叙述这一切。<br>其实，不光是主人公西门闹，读者也饱受煎熬，读者也随着西门闹一起，一次次转世，一次次的经历着他所经历的一切。</p>\n<p><br></p>\n<p>驴、牛、猪、狗 这四个中（猴 和 蓝千岁 的部分太少，主要是这四个），最不甘而且有人性的要属驴，<br>正如其名——驴折腾，可是真能折腾，<br>作为第一个顺序的动物，西门闹的怨恨还是很强的，<br>不爽于自己为驴，不爽于蓝脸为己主，不爽于蓝脸与迎春的结合，等等。<br>但，到了牛这里，牛犟劲，<br>这犟劲的态度，不单指西门闹的不妥协，不服从，<br>也配着蓝脸的单干行为的犟，即使到最后，<br>被一鞭一鞭抽死，也不妥协。<br>转世为猪这部分，则开始天马行空，这部分我读着最费力的部分，<br>一是本书读到这里，已经经历两世，有些疲劳了，<br>二是，这部分有些太扯了，总让我跳戏。<br>转世为狗，已经是一个新的开始了，<br>无论是西门闹，还是读者也快到极限了，<br>所以，狗精神这部分，西门闹已经完全适应了为动物，<br>不像为驴时，还有着人性，其实，在为猪时，他就已经有些忘却自己的人性了。</p>\n<p><br></p>\n<p>遗憾的是，这本书，有些虎头蛇尾。<br>后面很多东西，都能感觉的出来很仓促，<br>尤其是到猴子和蓝千岁这两部分，跟前面比都少的贫瘠了。<br>还有，最后，这些人死的…<br>让我感觉回到了余华的《活着》的最后部分，<br>只不过，《活着》中，一人一牛，在那田野中耕种着；<br>而《生死疲劳》里，是那蓝千岁在一排长满杂草的墓前唏嘘着。</p>\n<p><br></p>\n<p>噢，还有一点。<br>本书中，男女关系，有些乱的我头晕…</p>\n<p><br></p>\n<p>总之，莫先生的文笔还是很强的，那些细节的描写，都不需要多想，就能有幅画面在眼前。<br>有很多，让我想拍大腿叫好的语句。<br>对了，还有，本书内的莫言，是最让我跳戏的东西。</p>"},{"title":"删除文件名中的空格","date":"2016-11-02T15:07:16.000Z","_content":"\n用lua、python3来删除文件名中的空格\n\n<!-- more -->\n\n<br/>\n\n工作不认真，\n目录下的文件名有空格，\n遇到这种就很烦躁呀，\n算了，\n还是搞个脚本解决下吧。\n\n<br/>\n做的很简单，\n处理的是**当前目录**下所有文件的文件名，\n通过**替换字符串**的方式将空格替换了。\n\n<br/>\n\n环境：MAC\n\n<br/>\n\n- lua方法\n\n```lua\n\t\tlocal files = {}\n\t\tlocal all = io.popen(\"ls \")\n\t\tfor filename in all:lines() do\n\t\t\tif string.find(filename, ' ') then\n\t\t\t\tlocal newName = string.gsub(filename, ' ', '')\n\t\t\t\tos.rename(filename, newName)\n\t\t\tend\n\t\tend\n```\n\n<br/>\n\n- python3方法\n\n```python\n\t\timport os\n\t\tfor parent, dirnames, filenames in os.walk(os.getcwd()):\n\t\t\tfor filename in filenames:\n\t\t\t\tos.rename(os.path.join(parent, filename), os.path.join(parent, filename.replace(' ', '')))\n```\n","source":"_posts/删除文件名中的空格.md","raw":"---\ntitle: 删除文件名中的空格\ndate: 2016-11-02 23:07:16\ntags: 想就做\n\n---\n\n用lua、python3来删除文件名中的空格\n\n<!-- more -->\n\n<br/>\n\n工作不认真，\n目录下的文件名有空格，\n遇到这种就很烦躁呀，\n算了，\n还是搞个脚本解决下吧。\n\n<br/>\n做的很简单，\n处理的是**当前目录**下所有文件的文件名，\n通过**替换字符串**的方式将空格替换了。\n\n<br/>\n\n环境：MAC\n\n<br/>\n\n- lua方法\n\n```lua\n\t\tlocal files = {}\n\t\tlocal all = io.popen(\"ls \")\n\t\tfor filename in all:lines() do\n\t\t\tif string.find(filename, ' ') then\n\t\t\t\tlocal newName = string.gsub(filename, ' ', '')\n\t\t\t\tos.rename(filename, newName)\n\t\t\tend\n\t\tend\n```\n\n<br/>\n\n- python3方法\n\n```python\n\t\timport os\n\t\tfor parent, dirnames, filenames in os.walk(os.getcwd()):\n\t\t\tfor filename in filenames:\n\t\t\t\tos.rename(os.path.join(parent, filename), os.path.join(parent, filename.replace(' ', '')))\n```\n","slug":"删除文件名中的空格","published":1,"updated":"2018-07-19T16:46:45.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbck001besvqqf5ynum5","content":"<p>用lua、python3来删除文件名中的空格</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>工作不认真，<br>目录下的文件名有空格，<br>遇到这种就很烦躁呀，<br>算了，<br>还是搞个脚本解决下吧。</p>\n<p><br><br>做的很简单，<br>处理的是<strong>当前目录</strong>下所有文件的文件名，<br>通过<strong>替换字符串</strong>的方式将空格替换了。</p>\n<p><br></p>\n<p>环境：MAC</p>\n<p><br></p>\n<ul>\n<li>lua方法</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> files = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">local</span> all = <span class=\"built_in\">io</span>.<span class=\"built_in\">popen</span>(<span class=\"string\">\"ls \"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> all:<span class=\"built_in\">lines</span>() <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(filename, <span class=\"string\">' '</span>) <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">local</span> newName = <span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(filename, <span class=\"string\">' '</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">os</span>.<span class=\"built_in\">rename</span>(filename, newName)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<ul>\n<li>python3方法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> parent, dirnames, filenames <span class=\"keyword\">in</span> os.walk(os.getcwd()):</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">\t\tos.rename(os.path.join(parent, filename), os.path.join(parent, filename.replace(<span class=\"string\">' '</span>, <span class=\"string\">''</span>)))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>用lua、python3来删除文件名中的空格</p>","more":"<p><br></p>\n<p>工作不认真，<br>目录下的文件名有空格，<br>遇到这种就很烦躁呀，<br>算了，<br>还是搞个脚本解决下吧。</p>\n<p><br><br>做的很简单，<br>处理的是<strong>当前目录</strong>下所有文件的文件名，<br>通过<strong>替换字符串</strong>的方式将空格替换了。</p>\n<p><br></p>\n<p>环境：MAC</p>\n<p><br></p>\n<ul>\n<li>lua方法</li>\n</ul>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> files = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">local</span> all = <span class=\"built_in\">io</span>.<span class=\"built_in\">popen</span>(<span class=\"string\">\"ls \"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> all:<span class=\"built_in\">lines</span>() <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(filename, <span class=\"string\">' '</span>) <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">local</span> newName = <span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(filename, <span class=\"string\">' '</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">os</span>.<span class=\"built_in\">rename</span>(filename, newName)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<ul>\n<li>python3方法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> parent, dirnames, filenames <span class=\"keyword\">in</span> os.walk(os.getcwd()):</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> filenames:</span><br><span class=\"line\">\t\tos.rename(os.path.join(parent, filename), os.path.join(parent, filename.replace(<span class=\"string\">' '</span>, <span class=\"string\">''</span>)))</span><br></pre></td></tr></table></figure>"},{"title":"用python发邮件","date":"2016-11-04T12:51:35.000Z","_content":"\nOne Step\n\n用python来发邮件\n\n<!-- more -->\n\n<br/>\n\n恩，\n学了python就不要浪费，\n公司要求每天都要写工作日志，\n每次都要:\n1. 打开浏览器\n2. 选择收藏夹里的邮箱\n3. 输入账号密码登陆\n4. 选择收件人\n5. 填写邮件抬头\n6. 填写当前日期，还要把鼠标移下去看看\n7. 写工作日志\n8. 点击发送\n\n很麻烦啊，\n写个脚本，\n\n1. 打开脚本\n2. 写你的工作日志（注意，只需要写日志，不需要写时间，title，收件人等）\n3. 编译\n\n惊！\n这难道就是传说中的 —— One Step ？！！\n\n<br/>\n\n唠叨完了，该整干货了。\n\n```python\n\t\timport smtplib\n\t\tfrom email.header import Header\n\t\tfrom email.mime.text import MIMEText\n\t\tfrom datetime import datetime\n\n\t\tsender = ''  \t\t\t\t\t\t\t# 此处填写发件人邮箱\n\t\tpassword = ''\t\t\t\t\t\t\t# 此处填写发件人邮箱密码   \t=>注释1\n\t\treceiver = ''\t\t\t\t\t\t\t# 此处填写收件人邮箱\n\t\tsmtp_server = ''\t\t\t\t\t\t# 此处填写smtp服务器地址\n\t\t\n\t\tDATE_FORMATE = '%Y-%m-%d %A'\t\t\t# 日期的格式\t\t\t\t=> 注释2\n\t\ttitle = ''\t\t\t\t\t\t\t\t# 此处填写邮件标题\n\n\t\tdef initialContent():\n\t\t\tnow = datetime.now()\n\t\t\treturn now.strftime(DATE_FORMATE)\n\n\t\tdef sendEmail(cont):\n\t\t\tcontent = initialContent() + '\\n' + cont\n\n\t\t\ttry:\n\t\t\t\tmsg = MIMEText(content, 'plain', 'utf-8') \t\t\t\t\t\n\t\t\t\tmsg['Subject'] = Header(title, 'utf-8')\t\t\t\t# => 注释3\n\t\t\t\tmsg['From'] = sender + ' <' + sender + '>'\t\t\t# => 注释3\n\t\t\t\tmsg['To'] = receiver\t\t\t\t\t\t\t\t# => 注释3\n\n\t\t\t\tserver = smtplib.SMTP(smtp_server, 25) \t\t\t\t# 连接服务器，默认端口均为25\n\t\t\t\tserver.set_debuglevel(1)  \t\t\t\t\t\t\t# 选择是否开启Debug，可以得到与服务端的反馈信息\n\t\t\t\tserver.login(sender, password)\n\t\t\t\tserver.sendmail(sender, [receiver], msg.as_string())\n\t\t\t\tserver.quit()\n\t\t\n\t\t\t\tprint('send email success')\n\t\t\texcept smtplib.SMTPException:\n\t\t\t\tpriint('send email fail')\n```\n\n关于上述代码的一些注释：\n- 注释1:\n关于邮箱密码，有些密码需要填写客户端授权码，比如163，当然，要用SMPT发邮件，需要将发信箱的SMTP服务打开。\n- 注释2:\n日期的格式，更详细的可参考官方文档：http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime\n- 注释3:\n这里的From、To、Subject是非常必要的\n\n**还有，最好不要用163邮箱测试发邮件，会出现很多乱七八糟的问题（并非是你代码的问题）**\n\n<br/>\n\n上面代码是用来发邮件的核心代码，\n写日志的地方加在里面是很不友好的行为，\n所以，\n再单独建一个新的友好的地方来写日志。\n\n```python\n\t\timport imp \n\t\ttool = imp.load_source('sendEmail', 'url')\t\t\t\t# 导入核心模块，url 填写你上面核心代码的位置\n\n\t\tcontent = \"\"\"\n\t\t在这里来写你的工作日志，\n\t\t支持多行。\n\t\t\"\"\"\n\n\t\ttool.sendEmail(content.strip()) \t\t\t\t\t\t# strip将首尾空白字符删除\n```\n\n<br/>\n\n这样就方便很多了。\n最后，\n这个只是初步版本，\n后期可以添加很多你想要的东西，\n比如多个联系人，一些判断。\n我因为自己用，所以没有加那些东西。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/用python发邮件.md","raw":"---\ntitle: 用python发邮件\ndate: 2016-11-04 20:51:35\ntags: 想就做\n\n---\n\nOne Step\n\n用python来发邮件\n\n<!-- more -->\n\n<br/>\n\n恩，\n学了python就不要浪费，\n公司要求每天都要写工作日志，\n每次都要:\n1. 打开浏览器\n2. 选择收藏夹里的邮箱\n3. 输入账号密码登陆\n4. 选择收件人\n5. 填写邮件抬头\n6. 填写当前日期，还要把鼠标移下去看看\n7. 写工作日志\n8. 点击发送\n\n很麻烦啊，\n写个脚本，\n\n1. 打开脚本\n2. 写你的工作日志（注意，只需要写日志，不需要写时间，title，收件人等）\n3. 编译\n\n惊！\n这难道就是传说中的 —— One Step ？！！\n\n<br/>\n\n唠叨完了，该整干货了。\n\n```python\n\t\timport smtplib\n\t\tfrom email.header import Header\n\t\tfrom email.mime.text import MIMEText\n\t\tfrom datetime import datetime\n\n\t\tsender = ''  \t\t\t\t\t\t\t# 此处填写发件人邮箱\n\t\tpassword = ''\t\t\t\t\t\t\t# 此处填写发件人邮箱密码   \t=>注释1\n\t\treceiver = ''\t\t\t\t\t\t\t# 此处填写收件人邮箱\n\t\tsmtp_server = ''\t\t\t\t\t\t# 此处填写smtp服务器地址\n\t\t\n\t\tDATE_FORMATE = '%Y-%m-%d %A'\t\t\t# 日期的格式\t\t\t\t=> 注释2\n\t\ttitle = ''\t\t\t\t\t\t\t\t# 此处填写邮件标题\n\n\t\tdef initialContent():\n\t\t\tnow = datetime.now()\n\t\t\treturn now.strftime(DATE_FORMATE)\n\n\t\tdef sendEmail(cont):\n\t\t\tcontent = initialContent() + '\\n' + cont\n\n\t\t\ttry:\n\t\t\t\tmsg = MIMEText(content, 'plain', 'utf-8') \t\t\t\t\t\n\t\t\t\tmsg['Subject'] = Header(title, 'utf-8')\t\t\t\t# => 注释3\n\t\t\t\tmsg['From'] = sender + ' <' + sender + '>'\t\t\t# => 注释3\n\t\t\t\tmsg['To'] = receiver\t\t\t\t\t\t\t\t# => 注释3\n\n\t\t\t\tserver = smtplib.SMTP(smtp_server, 25) \t\t\t\t# 连接服务器，默认端口均为25\n\t\t\t\tserver.set_debuglevel(1)  \t\t\t\t\t\t\t# 选择是否开启Debug，可以得到与服务端的反馈信息\n\t\t\t\tserver.login(sender, password)\n\t\t\t\tserver.sendmail(sender, [receiver], msg.as_string())\n\t\t\t\tserver.quit()\n\t\t\n\t\t\t\tprint('send email success')\n\t\t\texcept smtplib.SMTPException:\n\t\t\t\tpriint('send email fail')\n```\n\n关于上述代码的一些注释：\n- 注释1:\n关于邮箱密码，有些密码需要填写客户端授权码，比如163，当然，要用SMPT发邮件，需要将发信箱的SMTP服务打开。\n- 注释2:\n日期的格式，更详细的可参考官方文档：http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime\n- 注释3:\n这里的From、To、Subject是非常必要的\n\n**还有，最好不要用163邮箱测试发邮件，会出现很多乱七八糟的问题（并非是你代码的问题）**\n\n<br/>\n\n上面代码是用来发邮件的核心代码，\n写日志的地方加在里面是很不友好的行为，\n所以，\n再单独建一个新的友好的地方来写日志。\n\n```python\n\t\timport imp \n\t\ttool = imp.load_source('sendEmail', 'url')\t\t\t\t# 导入核心模块，url 填写你上面核心代码的位置\n\n\t\tcontent = \"\"\"\n\t\t在这里来写你的工作日志，\n\t\t支持多行。\n\t\t\"\"\"\n\n\t\ttool.sendEmail(content.strip()) \t\t\t\t\t\t# strip将首尾空白字符删除\n```\n\n<br/>\n\n这样就方便很多了。\n最后，\n这个只是初步版本，\n后期可以添加很多你想要的东西，\n比如多个联系人，一些判断。\n我因为自己用，所以没有加那些东西。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"用python发邮件","published":1,"updated":"2018-07-19T16:47:02.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkr0dbcl001eesvqfsuk65vb","content":"<p>One Step</p>\n<p>用python来发邮件</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>恩，<br>学了python就不要浪费，<br>公司要求每天都要写工作日志，<br>每次都要:</p>\n<ol>\n<li>打开浏览器</li>\n<li>选择收藏夹里的邮箱</li>\n<li>输入账号密码登陆</li>\n<li>选择收件人</li>\n<li>填写邮件抬头</li>\n<li>填写当前日期，还要把鼠标移下去看看</li>\n<li>写工作日志</li>\n<li>点击发送</li>\n</ol>\n<p>很麻烦啊，<br>写个脚本，</p>\n<ol>\n<li>打开脚本</li>\n<li>写你的工作日志（注意，只需要写日志，不需要写时间，title，收件人等）</li>\n<li>编译</li>\n</ol>\n<p>惊！<br>这难道就是传说中的 —— One Step ？！！</p>\n<p><br></p>\n<p>唠叨完了，该整干货了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\">sender = <span class=\"string\">''</span>  \t\t\t\t\t\t\t<span class=\"comment\"># 此处填写发件人邮箱</span></span><br><span class=\"line\">password = <span class=\"string\">''</span>\t\t\t\t\t\t\t<span class=\"comment\"># 此处填写发件人邮箱密码   \t=&gt;注释1</span></span><br><span class=\"line\">receiver = <span class=\"string\">''</span>\t\t\t\t\t\t\t<span class=\"comment\"># 此处填写收件人邮箱</span></span><br><span class=\"line\">smtp_server = <span class=\"string\">''</span>\t\t\t\t\t\t<span class=\"comment\"># 此处填写smtp服务器地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">DATE_FORMATE = <span class=\"string\">'%Y-%m-%d %A'</span>\t\t\t<span class=\"comment\"># 日期的格式\t\t\t\t=&gt; 注释2</span></span><br><span class=\"line\">title = <span class=\"string\">''</span>\t\t\t\t\t\t\t\t<span class=\"comment\"># 此处填写邮件标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialContent</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tnow = datetime.now()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> now.strftime(DATE_FORMATE)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendEmail</span><span class=\"params\">(cont)</span>:</span></span><br><span class=\"line\">\tcontent = initialContent() + <span class=\"string\">'\\n'</span> + cont</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\tmsg = MIMEText(content, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>) \t\t\t\t\t</span><br><span class=\"line\">\t\tmsg[<span class=\"string\">'Subject'</span>] = Header(title, <span class=\"string\">'utf-8'</span>)\t\t\t\t<span class=\"comment\"># =&gt; 注释3</span></span><br><span class=\"line\">\t\tmsg[<span class=\"string\">'From'</span>] = sender + <span class=\"string\">' &lt;'</span> + sender + <span class=\"string\">'&gt;'</span>\t\t\t<span class=\"comment\"># =&gt; 注释3</span></span><br><span class=\"line\">\t\tmsg[<span class=\"string\">'To'</span>] = receiver\t\t\t\t\t\t\t\t<span class=\"comment\"># =&gt; 注释3</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tserver = smtplib.SMTP(smtp_server, <span class=\"number\">25</span>) \t\t\t\t<span class=\"comment\"># 连接服务器，默认端口均为25</span></span><br><span class=\"line\">\t\tserver.set_debuglevel(<span class=\"number\">1</span>)  \t\t\t\t\t\t\t<span class=\"comment\"># 选择是否开启Debug，可以得到与服务端的反馈信息</span></span><br><span class=\"line\">\t\tserver.login(sender, password)</span><br><span class=\"line\">\t\tserver.sendmail(sender, [receiver], msg.as_string())</span><br><span class=\"line\">\t\tserver.quit()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tprint(<span class=\"string\">'send email success'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">except</span> smtplib.SMTPException:</span><br><span class=\"line\">\t\tpriint(<span class=\"string\">'send email fail'</span>)</span><br></pre></td></tr></table></figure>\n<p>关于上述代码的一些注释：</p>\n<ul>\n<li>注释1:<br>关于邮箱密码，有些密码需要填写客户端授权码，比如163，当然，要用SMPT发邮件，需要将发信箱的SMTP服务打开。</li>\n<li>注释2:<br>日期的格式，更详细的可参考官方文档：<a href=\"http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime</a></li>\n<li>注释3:<br>这里的From、To、Subject是非常必要的</li>\n</ul>\n<p><strong>还有，最好不要用163邮箱测试发邮件，会出现很多乱七八糟的问题（并非是你代码的问题）</strong></p>\n<p><br></p>\n<p>上面代码是用来发邮件的核心代码，<br>写日志的地方加在里面是很不友好的行为，<br>所以，<br>再单独建一个新的友好的地方来写日志。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> imp </span><br><span class=\"line\">tool = imp.load_source(<span class=\"string\">'sendEmail'</span>, <span class=\"string\">'url'</span>)\t\t\t\t<span class=\"comment\"># 导入核心模块，url 填写你上面核心代码的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">content = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">在这里来写你的工作日志，</span></span><br><span class=\"line\"><span class=\"string\">支持多行。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">tool.sendEmail(content.strip()) \t\t\t\t\t\t<span class=\"comment\"># strip将首尾空白字符删除</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>这样就方便很多了。<br>最后，<br>这个只是初步版本，<br>后期可以添加很多你想要的东西，<br>比如多个联系人，一些判断。<br>我因为自己用，所以没有加那些东西。</p>\n","site":{"data":{}},"excerpt":"<p>One Step</p>\n<p>用python来发邮件</p>","more":"<p><br></p>\n<p>恩，<br>学了python就不要浪费，<br>公司要求每天都要写工作日志，<br>每次都要:</p>\n<ol>\n<li>打开浏览器</li>\n<li>选择收藏夹里的邮箱</li>\n<li>输入账号密码登陆</li>\n<li>选择收件人</li>\n<li>填写邮件抬头</li>\n<li>填写当前日期，还要把鼠标移下去看看</li>\n<li>写工作日志</li>\n<li>点击发送</li>\n</ol>\n<p>很麻烦啊，<br>写个脚本，</p>\n<ol>\n<li>打开脚本</li>\n<li>写你的工作日志（注意，只需要写日志，不需要写时间，title，收件人等）</li>\n<li>编译</li>\n</ol>\n<p>惊！<br>这难道就是传说中的 —— One Step ？！！</p>\n<p><br></p>\n<p>唠叨完了，该整干货了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\">sender = <span class=\"string\">''</span>  \t\t\t\t\t\t\t<span class=\"comment\"># 此处填写发件人邮箱</span></span><br><span class=\"line\">password = <span class=\"string\">''</span>\t\t\t\t\t\t\t<span class=\"comment\"># 此处填写发件人邮箱密码   \t=&gt;注释1</span></span><br><span class=\"line\">receiver = <span class=\"string\">''</span>\t\t\t\t\t\t\t<span class=\"comment\"># 此处填写收件人邮箱</span></span><br><span class=\"line\">smtp_server = <span class=\"string\">''</span>\t\t\t\t\t\t<span class=\"comment\"># 此处填写smtp服务器地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">DATE_FORMATE = <span class=\"string\">'%Y-%m-%d %A'</span>\t\t\t<span class=\"comment\"># 日期的格式\t\t\t\t=&gt; 注释2</span></span><br><span class=\"line\">title = <span class=\"string\">''</span>\t\t\t\t\t\t\t\t<span class=\"comment\"># 此处填写邮件标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialContent</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tnow = datetime.now()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> now.strftime(DATE_FORMATE)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendEmail</span><span class=\"params\">(cont)</span>:</span></span><br><span class=\"line\">\tcontent = initialContent() + <span class=\"string\">'\\n'</span> + cont</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\tmsg = MIMEText(content, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>) \t\t\t\t\t</span><br><span class=\"line\">\t\tmsg[<span class=\"string\">'Subject'</span>] = Header(title, <span class=\"string\">'utf-8'</span>)\t\t\t\t<span class=\"comment\"># =&gt; 注释3</span></span><br><span class=\"line\">\t\tmsg[<span class=\"string\">'From'</span>] = sender + <span class=\"string\">' &lt;'</span> + sender + <span class=\"string\">'&gt;'</span>\t\t\t<span class=\"comment\"># =&gt; 注释3</span></span><br><span class=\"line\">\t\tmsg[<span class=\"string\">'To'</span>] = receiver\t\t\t\t\t\t\t\t<span class=\"comment\"># =&gt; 注释3</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tserver = smtplib.SMTP(smtp_server, <span class=\"number\">25</span>) \t\t\t\t<span class=\"comment\"># 连接服务器，默认端口均为25</span></span><br><span class=\"line\">\t\tserver.set_debuglevel(<span class=\"number\">1</span>)  \t\t\t\t\t\t\t<span class=\"comment\"># 选择是否开启Debug，可以得到与服务端的反馈信息</span></span><br><span class=\"line\">\t\tserver.login(sender, password)</span><br><span class=\"line\">\t\tserver.sendmail(sender, [receiver], msg.as_string())</span><br><span class=\"line\">\t\tserver.quit()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tprint(<span class=\"string\">'send email success'</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">except</span> smtplib.SMTPException:</span><br><span class=\"line\">\t\tpriint(<span class=\"string\">'send email fail'</span>)</span><br></pre></td></tr></table></figure>\n<p>关于上述代码的一些注释：</p>\n<ul>\n<li>注释1:<br>关于邮箱密码，有些密码需要填写客户端授权码，比如163，当然，要用SMPT发邮件，需要将发信箱的SMTP服务打开。</li>\n<li>注释2:<br>日期的格式，更详细的可参考官方文档：<a href=\"http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime</a></li>\n<li>注释3:<br>这里的From、To、Subject是非常必要的</li>\n</ul>\n<p><strong>还有，最好不要用163邮箱测试发邮件，会出现很多乱七八糟的问题（并非是你代码的问题）</strong></p>\n<p><br></p>\n<p>上面代码是用来发邮件的核心代码，<br>写日志的地方加在里面是很不友好的行为，<br>所以，<br>再单独建一个新的友好的地方来写日志。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> imp </span><br><span class=\"line\">tool = imp.load_source(<span class=\"string\">'sendEmail'</span>, <span class=\"string\">'url'</span>)\t\t\t\t<span class=\"comment\"># 导入核心模块，url 填写你上面核心代码的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">content = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">在这里来写你的工作日志，</span></span><br><span class=\"line\"><span class=\"string\">支持多行。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">tool.sendEmail(content.strip()) \t\t\t\t\t\t<span class=\"comment\"># strip将首尾空白字符删除</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>这样就方便很多了。<br>最后，<br>这个只是初步版本，<br>后期可以添加很多你想要的东西，<br>比如多个联系人，一些判断。<br>我因为自己用，所以没有加那些东西。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjkr0dbbm0001esvq2i68zj5f","tag_id":"cjkr0dbbs0004esvq4nqykfey","_id":"cjkr0dbbz000besvqjrf2mcfl"},{"post_id":"cjkr0dbbq0003esvqf2akovkn","tag_id":"cjkr0dbbs0004esvq4nqykfey","_id":"cjkr0dbc2000fesvqw1dxc0o4"},{"post_id":"cjkr0dbbu0006esvqumsovuo2","tag_id":"cjkr0dbbs0004esvq4nqykfey","_id":"cjkr0dbc5000jesvqrsznxfff"},{"post_id":"cjkr0dbc7000nesvqerr5fqsl","tag_id":"cjkr0dbc7000mesvqxby35dp6","_id":"cjkr0dbc9000qesvqwkf52rth"},{"post_id":"cjkr0dbbv0008esvqasfq2la8","tag_id":"cjkr0dbc4000iesvql2fm9m8b","_id":"cjkr0dbca000sesvqogfkzrw8"},{"post_id":"cjkr0dbbv0008esvqasfq2la8","tag_id":"cjkr0dbc7000mesvqxby35dp6","_id":"cjkr0dbcb000vesvqlk9i2yxa"},{"post_id":"cjkr0dbc8000oesvq8qrl7gat","tag_id":"cjkr0dbc4000iesvql2fm9m8b","_id":"cjkr0dbcd000xesvqj9qfv60r"},{"post_id":"cjkr0dbc8000oesvq8qrl7gat","tag_id":"cjkr0dbc7000mesvqxby35dp6","_id":"cjkr0dbce0010esvqzow5axe5"},{"post_id":"cjkr0dbbw0009esvq5bjcumk1","tag_id":"cjkr0dbc4000iesvql2fm9m8b","_id":"cjkr0dbcf0012esvqs3tjgrpx"},{"post_id":"cjkr0dbbw0009esvq5bjcumk1","tag_id":"cjkr0dbc7000mesvqxby35dp6","_id":"cjkr0dbcg0015esvq80e9sps5"},{"post_id":"cjkr0dbbz000cesvqjz97kmrz","tag_id":"cjkr0dbc4000iesvql2fm9m8b","_id":"cjkr0dbcj001aesvqqh2302dz"},{"post_id":"cjkr0dbbz000cesvqjz97kmrz","tag_id":"cjkr0dbc7000mesvqxby35dp6","_id":"cjkr0dbck001cesvqnn20eqdy"},{"post_id":"cjkr0dbch0017esvqcxkjs6z5","tag_id":"cjkr0dbbs0004esvq4nqykfey","_id":"cjkr0dbcm001fesvquxh2igj0"},{"post_id":"cjkr0dbck001besvqqf5ynum5","tag_id":"cjkr0dbc7000mesvqxby35dp6","_id":"cjkr0dbcm001gesvq3s931x4a"},{"post_id":"cjkr0dbcl001eesvqfsuk65vb","tag_id":"cjkr0dbc7000mesvqxby35dp6","_id":"cjkr0dbcn001iesvqeg4qhn0b"},{"post_id":"cjkr0dbc1000desvqy8387te3","tag_id":"cjkr0dbci0018esvqitm8gvsg","_id":"cjkr0dbcn001jesvqjba0s0k0"},{"post_id":"cjkr0dbc1000desvqy8387te3","tag_id":"cjkr0dbcl001desvq7yzekriv","_id":"cjkr0dbcn001lesvq9in4jtkf"},{"post_id":"cjkr0dbc4000hesvqhm7la72m","tag_id":"cjkr0dbcm001hesvqg0kzn3oc","_id":"cjkr0dbcq001resvqjypwztm5"},{"post_id":"cjkr0dbc4000hesvqhm7la72m","tag_id":"cjkr0dbc7000mesvqxby35dp6","_id":"cjkr0dbcq001sesvqjqo0ehsm"},{"post_id":"cjkr0dbc5000kesvqz6oy0buq","tag_id":"cjkr0dbcm001hesvqg0kzn3oc","_id":"cjkr0dbcs001vesvq4bmlh0zm"},{"post_id":"cjkr0dbc5000kesvqz6oy0buq","tag_id":"cjkr0dbc7000mesvqxby35dp6","_id":"cjkr0dbcs001wesvq97rgshjp"},{"post_id":"cjkr0dbc6000lesvq3uryxygd","tag_id":"cjkr0dbc7000mesvqxby35dp6","_id":"cjkr0dbcs001yesvqhre1q0y7"},{"post_id":"cjkr0dbc9000resvq1pnm7bdv","tag_id":"cjkr0dbci0018esvqitm8gvsg","_id":"cjkr0dbct0020esvqysvx06fk"},{"post_id":"cjkr0dbca000tesvq1q8fuxpk","tag_id":"cjkr0dbct001zesvq5oh0lq0f","_id":"cjkr0dbcu0022esvqv1sy5ax2"},{"post_id":"cjkr0dbcc000wesvqd670jaku","tag_id":"cjkr0dbct001zesvq5oh0lq0f","_id":"cjkr0dbcv0024esvqd3umnhtm"},{"post_id":"cjkr0dbcd000yesvq0dos3utx","tag_id":"cjkr0dbct001zesvq5oh0lq0f","_id":"cjkr0dbcw0026esvqmjcokgnh"},{"post_id":"cjkr0dbce0011esvq4dmybe7u","tag_id":"cjkr0dbct001zesvq5oh0lq0f","_id":"cjkr0dbcw0028esvq8nbr1q50"},{"post_id":"cjkr0dbcf0013esvq7u42v8qy","tag_id":"cjkr0dbct001zesvq5oh0lq0f","_id":"cjkr0dbcx002aesvqymy19wpn"},{"post_id":"cjkr0dbch0016esvqrm7qu2zh","tag_id":"cjkr0dbct001zesvq5oh0lq0f","_id":"cjkr0dbcy002cesvqy2qun1lc"},{"post_id":"cjkr0dbcj0019esvqnupmcw16","tag_id":"cjkr0dbct001zesvq5oh0lq0f","_id":"cjkr0dbcy002desvqzarguwz7"}],"Tag":[{"name":"抽空写","_id":"cjkr0dbbs0004esvq4nqykfey"},{"name":"cocos2d","_id":"cjkr0dbc4000iesvql2fm9m8b"},{"name":"想就做","_id":"cjkr0dbc7000mesvqxby35dp6"},{"name":"跟着学","_id":"cjkr0dbci0018esvqitm8gvsg"},{"name":"Go","_id":"cjkr0dbcl001desvq7yzekriv"},{"name":"hexo搭建","_id":"cjkr0dbcm001hesvqg0kzn3oc"},{"name":"看着读","_id":"cjkr0dbct001zesvq5oh0lq0f"}]}}