{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"source/assets/img/ltree98.png","path":"assets/img/ltree98.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"2cbf7f042411337b15fe994dd578fcb750146137","modified":1522603036000},{"_id":"source/CNAME","hash":"a8120c4aefba5810512dc03620ff6cdd8e08346f","modified":1522685171000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1522254780000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1522254780000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1522254780000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1522254780000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1522254780000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1522254780000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1522254780000},{"_id":"themes/yilia/_config.yml","hash":"85bb0785458a6710f11cfcdf233b36796c9971fc","modified":1522686709000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1522254780000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1522254780000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1522686188000},{"_id":"source/_posts/2015，学剑.md","hash":"b49a02fb2e5676082162f6fef1b1f118a70a512c","modified":1522687273000},{"_id":"source/_posts/2016，没走偏.md","hash":"8b192bf8ec9f318622e155aa6b50abe30009cb94","modified":1522686942000},{"_id":"source/_posts/Go环境搭建小记.md","hash":"ec32b976569a72d8b540024ee1b832ac58bb3586","modified":1522686606000},{"_id":"source/_posts/cocos2d-x 接入 GameCenter 排行榜与成就.md","hash":"992dbde97074cd6ec934e5a522abc8121473b7f9","modified":1522686639000},{"_id":"source/_posts/python学习笔记.md","hash":"5a9663a0fa564f3f03a5f6e2c4101b26e9471031","modified":1522686286000},{"_id":"source/_posts/《REWORK》读记.md","hash":"47a20afc445397a2d384f0ba7d49f2b45a408169","modified":1522686405000},{"_id":"source/_posts/《三体》读感.md","hash":"f9dcc56ff697160bdd5f77105bb51e92cfbe9411","modified":1522686471000},{"_id":"source/_posts/《代码的整洁之道》读记.md","hash":"d7344c760e6d36e65d70f1ab4566f17c253d5964","modified":1522686475000},{"_id":"source/_posts/《天才在左，疯子在右》读记.md","hash":"8d7f7a49e880a334458b9984f6c2e652c123a8a3","modified":1522686427000},{"_id":"source/_posts/《我们仨》读记.md","hash":"ae54ab161c41ce4804529cc34aa5d99ecbeeac2c","modified":1522686421000},{"_id":"source/_posts/《时间简史》读感.md","hash":"2c0569ab073d4d0d610f964a6869699d30ebecc1","modified":1522686446000},{"_id":"source/_posts/《生死疲劳》读感.md","hash":"cd71fd3e55fbe6765cd563b5652bc611a9d456b4","modified":1522686465000},{"_id":"source/_posts/为什么要搞这个？.md","hash":"2b9f2413395b058fa1b48e2463eb22c8f1478d24","modified":1522686589000},{"_id":"source/_posts/删除文件名中的空格.md","hash":"ee55ef6d611769d35ca9d05ad4e7aeb57e9d501d","modified":1522686388000},{"_id":"source/_posts/用python发邮件.md","hash":"9a745c41c34d8dc4aed8cb408a1adf53f531eb35","modified":1522686340000},{"_id":"source/assets/.DS_Store","hash":"80daa01c8651407bcc32bda269dcd08755d2f4b2","modified":1522603045000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1522254780000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1522254780000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1522254684000},{"_id":"themes/yilia/.git/index","hash":"02593d8f9f009813bd49e65c712bec7d3e79cf68","modified":1522685171000},{"_id":"themes/yilia/.git/packed-refs","hash":"83644c3638dafa38c817265c9207f098dd8aeee6","modified":1522254780000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1522254780000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1522254780000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1522254780000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1522254780000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1522254780000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1522254780000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1522254780000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1522254780000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1522254780000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1522254780000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1522254780000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1522254780000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1522254780000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1522254780000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1522254780000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1522254780000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1522254780000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522254780000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1522254780000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1522254780000},{"_id":"source/assets/img/ltree98.png","hash":"3a4a56f24cd563a01a57e65e2c2ad2d0a79fd1df","modified":1522685171000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1522254684000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1522254684000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1522254684000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1522254684000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1522254684000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1522254684000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1522254684000},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1522254684000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1522254684000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1522254684000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1522254684000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"643ee567c73b9bad21f53562371169f61f826a3a","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1522254780000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1522254780000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1522254780000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1522254780000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1522254780000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1522254780000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1522254780000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1522254780000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1522254780000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1522254780000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1522254780000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1522254780000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1522254780000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1522254780000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1522254780000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1522254780000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1522254780000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1522254780000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1522254780000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1522254780000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1522254780000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1522254780000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1522254780000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1522254780000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1522254780000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1522254780000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1522254780000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1522254780000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1522254780000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1522254780000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1522254780000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1522254780000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1522254780000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1522254780000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1522254780000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1522254780000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1522254780000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1522254780000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1522254780000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1522254780000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1522254780000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1522254780000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1522254780000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1522254780000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1522254780000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1522254780000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1522254780000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1522254780000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1522254780000},{"_id":"themes/yilia/.git/objects/pack/pack-a4a024724a50ae1e8ea0e0deab1aba91916d1344.idx","hash":"66fb8f29773daff89e17aceb7d91f5e53c6b8d47","modified":1522254780000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1522254780000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1522254780000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1522254780000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1522254780000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1522254780000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1522254780000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1522254780000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1522254780000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1522254780000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1522254780000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1522254780000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1522254780000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1522254780000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1522254780000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"643ee567c73b9bad21f53562371169f61f826a3a","modified":1522254780000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1522254780000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"643ee567c73b9bad21f53562371169f61f826a3a","modified":1522254780000},{"_id":"themes/yilia/.git/objects/pack/pack-a4a024724a50ae1e8ea0e0deab1aba91916d1344.pack","hash":"ad13c03f734dc6b2649043501fed63bd1714bfc3","modified":1522254780000},{"_id":"public/2017/07/30/《天才在左，疯子在右》读记/index.html","hash":"7db9b06c45532ff172af42b6586ec65847da5775","modified":1523292369013},{"_id":"public/2017/05/30/《我们仨》读记/index.html","hash":"531c0fb3e3498e73d63e44bbb8194deb927257bf","modified":1522687292201},{"_id":"public/2017/04/29/cocos2d-x 接入 GameCenter 排行榜与成就/index.html","hash":"db61aecfb2a44fb1bcae219de386e86f312956f3","modified":1522687292201},{"_id":"public/2017/03/23/Go环境搭建小记/index.html","hash":"d2abfd87b0b88716ffb14b29b4c17e0f8b08bd45","modified":1522687292201},{"_id":"public/2017/03/14/《时间简史》读感/index.html","hash":"a13ed99e17fb50c44949aed8bf71420716be90c7","modified":1522687292202},{"_id":"public/2017/02/13/《三体》读感/index.html","hash":"e6b6e017990cd90028796005bf4b93d0a53f4572","modified":1522687292202},{"_id":"public/2017/01/23/2016，没走偏/index.html","hash":"87ac471452b90c0647ecce5594ed24afbf65dfff","modified":1522687292202},{"_id":"public/2016/11/22/python学习笔记/index.html","hash":"ef3ec6ae81e3868c54cd952fa8beb86fe35671de","modified":1522687292202},{"_id":"public/2016/11/20/《REWORK》读记/index.html","hash":"bfba7aaf100bc25eb84789a6eba6cbad2b6b7891","modified":1522687292202},{"_id":"public/2016/11/04/用python发邮件/index.html","hash":"23e619b13828366be09aa37cad8f55a008056e57","modified":1522687292203},{"_id":"public/2016/11/02/删除文件名中的空格/index.html","hash":"a121f4cec8c2951a61da5eb2463395397b707944","modified":1522687292203},{"_id":"public/2016/10/13/《代码的整洁之道》读记/index.html","hash":"fff108a78876f4afc5bbf35dfca9b4a7d2811105","modified":1522687292204},{"_id":"public/2016/07/25/《生死疲劳》读感/index.html","hash":"ff366cdcc2a1fc5f68cb4f507a3459bc7a121602","modified":1522687292204},{"_id":"public/2016/07/20/为什么要搞这个？/index.html","hash":"dd7d9a1518dd412a2bd012999e60a212d68019c8","modified":1522687292204},{"_id":"public/2016/01/03/2015，学剑/index.html","hash":"93df6ceb5401d9f53942e0c6473d400db9832764","modified":1522687292204},{"_id":"public/archives/index.html","hash":"52cb2d3e3a0d469bcc131ac137a8b5d9b315d8b4","modified":1523292369023},{"_id":"public/archives/page/2/index.html","hash":"4863ec6004e79f218a14b1e821207fefe62ad54e","modified":1523291827857},{"_id":"public/archives/2016/index.html","hash":"554b62acddcaf27f3daf2fb8b52f5f7f94d507dc","modified":1522687292204},{"_id":"public/archives/2016/01/index.html","hash":"9f5b2f99852a34fe1858ffd5065c44a06e6c5e5e","modified":1522687292204},{"_id":"public/archives/2016/07/index.html","hash":"1f5ecd6d29d44bb8e901da7d5497e75766aed037","modified":1522687292204},{"_id":"public/archives/2016/10/index.html","hash":"539d7af330c4c8c793b8e4e282846de29a2e12bb","modified":1522687292205},{"_id":"public/archives/2016/11/index.html","hash":"1546986de1bca51242179913c949c038bfede816","modified":1522687292205},{"_id":"public/archives/2017/index.html","hash":"d9e703fee425f11b2430bc622d2d9abb972594b6","modified":1522687292205},{"_id":"public/archives/2017/01/index.html","hash":"ced74cfb59231ee6b5a835861eacb86972799645","modified":1522687292205},{"_id":"public/archives/2017/02/index.html","hash":"0bed9d4d043dc3fcc5e72f601438134dfc250674","modified":1522687292205},{"_id":"public/archives/2017/03/index.html","hash":"c2520860db898e54177ef0abe3a95c477c7b8ac6","modified":1522687292205},{"_id":"public/archives/2017/04/index.html","hash":"597f5b55525003eac94c556b721576e4026c9a47","modified":1522687292205},{"_id":"public/archives/2017/05/index.html","hash":"063aef1d850566fe06a32d354f0ca0c29261abf0","modified":1522687292206},{"_id":"public/archives/2017/07/index.html","hash":"fb4676bf3e6883d1e3c70e35cf9489842ee66134","modified":1522687292206},{"_id":"public/index.html","hash":"31b240011f60866144e1e209ed517569bb549396","modified":1523292369025},{"_id":"public/page/2/index.html","hash":"5e699c9f9475caf1c14ff2b8f2d4a3a2e3f60560","modified":1523291827851},{"_id":"public/tags/抽空写/index.html","hash":"b92210a2751b513341b38d5a93042a884db09138","modified":1523292369025},{"_id":"public/tags/跟着学/index.html","hash":"f5dba45aa4d4591cd641bb26ea6835b124bb1f1a","modified":1522687292207},{"_id":"public/tags/Go/index.html","hash":"7899cdc6a1e1743a0e8710b723de38570c79a085","modified":1522687292207},{"_id":"public/tags/cocos2d/index.html","hash":"aa85a07b0ff36e9fa379658ee89b816d9dd8a292","modified":1522687292207},{"_id":"public/tags/想就做/index.html","hash":"cb5e603b13cef4e66d2529aea1af242d2369d67c","modified":1522687292207},{"_id":"public/tags/看着读/index.html","hash":"35c5023b3e6f35b3d12f70a775354b8b31480225","modified":1522687292207},{"_id":"public/CNAME","hash":"a8120c4aefba5810512dc03620ff6cdd8e08346f","modified":1522687292216},{"_id":"public/assets/img/ltree98.png","hash":"3a4a56f24cd563a01a57e65e2c2ad2d0a79fd1df","modified":1522687292217},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1522687292217},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1522687292217},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1522687292217},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1522687292217},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1522687292217},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1522687292217},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1522687292217},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1522687292217},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1522687292217},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1522687292232},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1522687292232},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1522687292232},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1522687292232},{"_id":"source/_posts/2017，迷忙.md","hash":"2247d53c486ed32eed7965e6925357cc25df8cff","modified":1523292081000},{"_id":"public/2018/04/03/2017，迷忙/index.html","hash":"da238122a750ca567eabd5460918848b749ace72","modified":1523292090064},{"_id":"public/archives/2018/index.html","hash":"5c4cd1b0f2fdf6a21be4cb19ac5803ecc7540366","modified":1523292369025},{"_id":"public/archives/2018/04/index.html","hash":"04571ea3720f7bc9583e941f9610677b0e9eb3a1","modified":1523292369025},{"_id":"source/_posts/2017,  迷不茫.md","hash":"6434f363aa235626275cf5b526c1fa99b3017723","modified":1523292331000},{"_id":"public/2018/04/03/2017,  迷不茫/index.html","hash":"0fa636976e501ac7eac61f8e22d707013c5fbe4c","modified":1523292369027}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"2015, 学剑","date":"2016-01-03T07:20:16.000Z","_content":"\n2015：刚出新手村的小侠客面对这纷繁的世界。\n\n<!-- more -->\n\n\n<br/>\n<br/>\n2015年，是一个蜕变的一年。\n\n不管是如何度过了大学生活，总之，到时候离开了。 \n马上就要进入“外面的世界”， \n就好像，以前玩的RPG游戏，我们终于从新手村熬出来了，要踏上大陆的征程，当然，首先要完成新手村最后的考验。\n\n---\n<br/>\n<br/>\n\n#### 新手村 \n一般，刚从新手村出来，面对这繁华的大陆，无数的诱惑，没有村长老爷爷（为什么不是老奶奶呢？）给你的小感叹号，告诉你一步步做什么。 \n穿着 裁缝铺大婶给你的衣服，挥舞着 铁匠大叔给你的长剑，带着 药铺小老板送你的几瓶红蓝药剂，相信我，一般用不到蓝色那瓶，不要舍不得用，到最后往往被更高级的药取代，好点的，能去跟杂货铺小奸商换1铜币，但大部分都是被丢弃的命运。\n\n#### 任务 \n繁华的大陆有着千奇百怪的任务，不再像村长让你按顺序把村子周围清理一遍。 \n但是，刚出来的你面对着高额的悬赏任务，看着别人拿着把鎏金大剑，帅气的撕下悬赏，这时的你，只能摸摸残次的长剑（殊不知，当时，刚获得这把剑的时候，你曾开心的抱着它入睡），然后在任务版最下面一排寻找着。找邻居丢的小猫，帮饭馆打打野味，或者干脆就暂放长剑，去为客人端茶倒水…… \n每晚，盘算着还差多少能换来一把鎏金大剑，幻想着像之前那个人那样，帅气的撕下最顶部的悬赏，你也曾练习多次——撕悬赏的姿势。 \n又如何？ \n· 很多人看着每晚天文般的数字，就慢慢放弃了。在饭馆端菜的闲暇，看着一桌桌刚出来的侠客们谈天论地，默默的想起自己曾经的梦想，但又被老板的一喝惊醒。 \n· 很多人光顾着铜币，最基础的招式都忘记了，买着到手的鎏金大剑，帅气的用自己演练过多遍的姿势，撕下悬赏，在小侠客们艳羡的眼中，傲然的抬起下巴，奔向敌方。结果，一合不到，变血溅当场，连喝红药的时间都没有。 \n· 还有一些人，白天赚铜币，晚上练武功。Atk↑ Hp↓ and 狗带…\n\n#### 衙门 \n这是，小侠客踏上这片大陆来，最受教育的一个地方。 \n他们是文明的， \n他们是合法的， \n他们能在文明&合法的前提下，让你无言以对。 \n这还是 顺天府 的体验。\n\n#### 武馆 \n想做一名侠客，所以刚出来，还是先找一个武馆安顿下来，就算现在不能撕大悬赏，但也可以每天练剑，还可以攒铜币。 \n但，你从1xxxxxxxxxxxx号新手村出来，村长又没给你推荐信，这么多的新手村，都是想做侠客的人，找个武馆谈何容易？\n\n<br/>\n\n### 第一个武馆， \n武师：看你研究过招式的好坏。 \n小侠客：是的，曾经研究过一些，但是，只是皮毛而已。 \n武师：不错，那就说说 剑招中 探刺剑的动作要领吧。 \n小侠客：(⊙o⊙)…对不起，我只是懂一些皮毛。 \n武师：吓！ 什么↑~ 这都不知道？你怎么研究的招式！那你知道剑招有哪些吗？（鄙视ING） \n小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫，您刚才说的 探刺剑，属于刺剑一种，刺剑主要分为 平刺剑 、上刺剑 、下刺剑 、低刺剑、后刺剑 、探刺剑 。 \n武师：（依旧鄙视），这对于研究招式的来说是基础知识啊，你连这都不知道，你还说自己研究过招式。（你造假！） \n往后，就是各种怀疑。。 \n小侠客 OUT\n\n### 第二个武馆， \n前面很顺利，谈了1个多小时。。。 \n武师：你和别人对战过那么多次，你都用什么剑谱上的哪一式？ \n小侠客：我现在还没看那些剑谱的招式，我只是在想到的几个招式基础上，出一招。 \n武师：哦？ 那你是瞎打咯？ \n小侠客：不是瞎打，我也是有选择的，并不是想到什么就出什么。 \n武师：哦~↑~↓（你就是瞎打，哈哈，被我看出来了吧，瞎打，瞎打，瞎打，耶！） \n小侠客 OUT\n\n### 第三个武馆 \n武师：你现在是想做 剑客的学童是吗？那说说基本的剑招吧。 \n小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫。 \n武师：恩，可以，那简单说一下 劈剑的动作要领吧 \n小侠客：立剑，由上向下为劈，力达剑身，臂与剑成一直线。 \n武师：恩，不错，但是还有一点——抡劈贴身体右侧或左侧绕一立圆；后抡劈剑要与身体后转协调一致。 \n小侠客：（恍然大悟！） \n武师：你为什么要做剑客呢？ 剑客的未来如何？ \n小侠客：慷慨激昂的谈论了一下。\n\n<br/>\n# 小侠客 达成成就 武馆剑童\n<br/>\n\n#### 村友 \n离开了新手村，曾经你感叹，新手村人真多，但就是这么多人，在被大陆稀释一下，你也很难再找到同新手村的人，更何况你新手村的玩伴。到最后，每次见到村友，即使俩人曾彼此红眼相对，最终也会红脸喝醉。 \n但也可能，曾经俩人红脸喝醉，到如今的红眼相对，亦或，默然无视。\n\n<br/>\n\n这个纷繁的世界 \n虽然还没有离开新手村，但提前体验了这个纷繁的世界。 \n2015年，想想，印象最深刻的还是下半年的这些体会。 \n独自一人来到北京，漂着~ \n2016年，我还是会继续做游戏， \n我也希望认识更多做游戏的朋友。\n\n<br/>\n<br/>\n###### PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的... 换句话说：> 别来找我论剑 <\n\n","source":"_posts/2015，学剑.md","raw":"---\ntitle: 2015, 学剑\ndate: 2016-01-03 15:20:16\ntags: 抽空写\n---\n\n2015：刚出新手村的小侠客面对这纷繁的世界。\n\n<!-- more -->\n\n\n<br/>\n<br/>\n2015年，是一个蜕变的一年。\n\n不管是如何度过了大学生活，总之，到时候离开了。 \n马上就要进入“外面的世界”， \n就好像，以前玩的RPG游戏，我们终于从新手村熬出来了，要踏上大陆的征程，当然，首先要完成新手村最后的考验。\n\n---\n<br/>\n<br/>\n\n#### 新手村 \n一般，刚从新手村出来，面对这繁华的大陆，无数的诱惑，没有村长老爷爷（为什么不是老奶奶呢？）给你的小感叹号，告诉你一步步做什么。 \n穿着 裁缝铺大婶给你的衣服，挥舞着 铁匠大叔给你的长剑，带着 药铺小老板送你的几瓶红蓝药剂，相信我，一般用不到蓝色那瓶，不要舍不得用，到最后往往被更高级的药取代，好点的，能去跟杂货铺小奸商换1铜币，但大部分都是被丢弃的命运。\n\n#### 任务 \n繁华的大陆有着千奇百怪的任务，不再像村长让你按顺序把村子周围清理一遍。 \n但是，刚出来的你面对着高额的悬赏任务，看着别人拿着把鎏金大剑，帅气的撕下悬赏，这时的你，只能摸摸残次的长剑（殊不知，当时，刚获得这把剑的时候，你曾开心的抱着它入睡），然后在任务版最下面一排寻找着。找邻居丢的小猫，帮饭馆打打野味，或者干脆就暂放长剑，去为客人端茶倒水…… \n每晚，盘算着还差多少能换来一把鎏金大剑，幻想着像之前那个人那样，帅气的撕下最顶部的悬赏，你也曾练习多次——撕悬赏的姿势。 \n又如何？ \n· 很多人看着每晚天文般的数字，就慢慢放弃了。在饭馆端菜的闲暇，看着一桌桌刚出来的侠客们谈天论地，默默的想起自己曾经的梦想，但又被老板的一喝惊醒。 \n· 很多人光顾着铜币，最基础的招式都忘记了，买着到手的鎏金大剑，帅气的用自己演练过多遍的姿势，撕下悬赏，在小侠客们艳羡的眼中，傲然的抬起下巴，奔向敌方。结果，一合不到，变血溅当场，连喝红药的时间都没有。 \n· 还有一些人，白天赚铜币，晚上练武功。Atk↑ Hp↓ and 狗带…\n\n#### 衙门 \n这是，小侠客踏上这片大陆来，最受教育的一个地方。 \n他们是文明的， \n他们是合法的， \n他们能在文明&合法的前提下，让你无言以对。 \n这还是 顺天府 的体验。\n\n#### 武馆 \n想做一名侠客，所以刚出来，还是先找一个武馆安顿下来，就算现在不能撕大悬赏，但也可以每天练剑，还可以攒铜币。 \n但，你从1xxxxxxxxxxxx号新手村出来，村长又没给你推荐信，这么多的新手村，都是想做侠客的人，找个武馆谈何容易？\n\n<br/>\n\n### 第一个武馆， \n武师：看你研究过招式的好坏。 \n小侠客：是的，曾经研究过一些，但是，只是皮毛而已。 \n武师：不错，那就说说 剑招中 探刺剑的动作要领吧。 \n小侠客：(⊙o⊙)…对不起，我只是懂一些皮毛。 \n武师：吓！ 什么↑~ 这都不知道？你怎么研究的招式！那你知道剑招有哪些吗？（鄙视ING） \n小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫，您刚才说的 探刺剑，属于刺剑一种，刺剑主要分为 平刺剑 、上刺剑 、下刺剑 、低刺剑、后刺剑 、探刺剑 。 \n武师：（依旧鄙视），这对于研究招式的来说是基础知识啊，你连这都不知道，你还说自己研究过招式。（你造假！） \n往后，就是各种怀疑。。 \n小侠客 OUT\n\n### 第二个武馆， \n前面很顺利，谈了1个多小时。。。 \n武师：你和别人对战过那么多次，你都用什么剑谱上的哪一式？ \n小侠客：我现在还没看那些剑谱的招式，我只是在想到的几个招式基础上，出一招。 \n武师：哦？ 那你是瞎打咯？ \n小侠客：不是瞎打，我也是有选择的，并不是想到什么就出什么。 \n武师：哦~↑~↓（你就是瞎打，哈哈，被我看出来了吧，瞎打，瞎打，瞎打，耶！） \n小侠客 OUT\n\n### 第三个武馆 \n武师：你现在是想做 剑客的学童是吗？那说说基本的剑招吧。 \n小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫。 \n武师：恩，可以，那简单说一下 劈剑的动作要领吧 \n小侠客：立剑，由上向下为劈，力达剑身，臂与剑成一直线。 \n武师：恩，不错，但是还有一点——抡劈贴身体右侧或左侧绕一立圆；后抡劈剑要与身体后转协调一致。 \n小侠客：（恍然大悟！） \n武师：你为什么要做剑客呢？ 剑客的未来如何？ \n小侠客：慷慨激昂的谈论了一下。\n\n<br/>\n# 小侠客 达成成就 武馆剑童\n<br/>\n\n#### 村友 \n离开了新手村，曾经你感叹，新手村人真多，但就是这么多人，在被大陆稀释一下，你也很难再找到同新手村的人，更何况你新手村的玩伴。到最后，每次见到村友，即使俩人曾彼此红眼相对，最终也会红脸喝醉。 \n但也可能，曾经俩人红脸喝醉，到如今的红眼相对，亦或，默然无视。\n\n<br/>\n\n这个纷繁的世界 \n虽然还没有离开新手村，但提前体验了这个纷繁的世界。 \n2015年，想想，印象最深刻的还是下半年的这些体会。 \n独自一人来到北京，漂着~ \n2016年，我还是会继续做游戏， \n我也希望认识更多做游戏的朋友。\n\n<br/>\n<br/>\n###### PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的... 换句话说：> 别来找我论剑 <\n\n","slug":"2015，学剑","published":1,"updated":"2018-04-02T16:41:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp42t00000due1e9lqoqe","content":"<p>2015：刚出新手村的小侠客面对这纷繁的世界。</p>\n<a id=\"more\"></a>\n<p><br><br><br><br>2015年，是一个蜕变的一年。</p>\n<p>不管是如何度过了大学生活，总之，到时候离开了。<br>马上就要进入“外面的世界”，<br>就好像，以前玩的RPG游戏，我们终于从新手村熬出来了，要踏上大陆的征程，当然，首先要完成新手村最后的考验。</p>\n<hr>\n<p><br><br><br></p>\n<h4 id=\"新手村\"><a href=\"#新手村\" class=\"headerlink\" title=\"新手村\"></a>新手村</h4><p>一般，刚从新手村出来，面对这繁华的大陆，无数的诱惑，没有村长老爷爷（为什么不是老奶奶呢？）给你的小感叹号，告诉你一步步做什么。<br>穿着 裁缝铺大婶给你的衣服，挥舞着 铁匠大叔给你的长剑，带着 药铺小老板送你的几瓶红蓝药剂，相信我，一般用不到蓝色那瓶，不要舍不得用，到最后往往被更高级的药取代，好点的，能去跟杂货铺小奸商换1铜币，但大部分都是被丢弃的命运。</p>\n<h4 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h4><p>繁华的大陆有着千奇百怪的任务，不再像村长让你按顺序把村子周围清理一遍。<br>但是，刚出来的你面对着高额的悬赏任务，看着别人拿着把鎏金大剑，帅气的撕下悬赏，这时的你，只能摸摸残次的长剑（殊不知，当时，刚获得这把剑的时候，你曾开心的抱着它入睡），然后在任务版最下面一排寻找着。找邻居丢的小猫，帮饭馆打打野味，或者干脆就暂放长剑，去为客人端茶倒水……<br>每晚，盘算着还差多少能换来一把鎏金大剑，幻想着像之前那个人那样，帅气的撕下最顶部的悬赏，你也曾练习多次——撕悬赏的姿势。<br>又如何？<br>· 很多人看着每晚天文般的数字，就慢慢放弃了。在饭馆端菜的闲暇，看着一桌桌刚出来的侠客们谈天论地，默默的想起自己曾经的梦想，但又被老板的一喝惊醒。<br>· 很多人光顾着铜币，最基础的招式都忘记了，买着到手的鎏金大剑，帅气的用自己演练过多遍的姿势，撕下悬赏，在小侠客们艳羡的眼中，傲然的抬起下巴，奔向敌方。结果，一合不到，变血溅当场，连喝红药的时间都没有。<br>· 还有一些人，白天赚铜币，晚上练武功。Atk↑ Hp↓ and 狗带…</p>\n<h4 id=\"衙门\"><a href=\"#衙门\" class=\"headerlink\" title=\"衙门\"></a>衙门</h4><p>这是，小侠客踏上这片大陆来，最受教育的一个地方。<br>他们是文明的，<br>他们是合法的，<br>他们能在文明&amp;合法的前提下，让你无言以对。<br>这还是 顺天府 的体验。</p>\n<h4 id=\"武馆\"><a href=\"#武馆\" class=\"headerlink\" title=\"武馆\"></a>武馆</h4><p>想做一名侠客，所以刚出来，还是先找一个武馆安顿下来，就算现在不能撕大悬赏，但也可以每天练剑，还可以攒铜币。<br>但，你从1xxxxxxxxxxxx号新手村出来，村长又没给你推荐信，这么多的新手村，都是想做侠客的人，找个武馆谈何容易？</p>\n<p><br></p>\n<h3 id=\"第一个武馆，\"><a href=\"#第一个武馆，\" class=\"headerlink\" title=\"第一个武馆，\"></a>第一个武馆，</h3><p>武师：看你研究过招式的好坏。<br>小侠客：是的，曾经研究过一些，但是，只是皮毛而已。<br>武师：不错，那就说说 剑招中 探刺剑的动作要领吧。<br>小侠客：(⊙o⊙)…对不起，我只是懂一些皮毛。<br>武师：吓！ 什么↑~ 这都不知道？你怎么研究的招式！那你知道剑招有哪些吗？（鄙视ING）<br>小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫，您刚才说的 探刺剑，属于刺剑一种，刺剑主要分为 平刺剑 、上刺剑 、下刺剑 、低刺剑、后刺剑 、探刺剑 。<br>武师：（依旧鄙视），这对于研究招式的来说是基础知识啊，你连这都不知道，你还说自己研究过招式。（你造假！）<br>往后，就是各种怀疑。。<br>小侠客 OUT</p>\n<h3 id=\"第二个武馆，\"><a href=\"#第二个武馆，\" class=\"headerlink\" title=\"第二个武馆，\"></a>第二个武馆，</h3><p>前面很顺利，谈了1个多小时。。。<br>武师：你和别人对战过那么多次，你都用什么剑谱上的哪一式？<br>小侠客：我现在还没看那些剑谱的招式，我只是在想到的几个招式基础上，出一招。<br>武师：哦？ 那你是瞎打咯？<br>小侠客：不是瞎打，我也是有选择的，并不是想到什么就出什么。<br>武师：哦~↑~↓（你就是瞎打，哈哈，被我看出来了吧，瞎打，瞎打，瞎打，耶！）<br>小侠客 OUT</p>\n<h3 id=\"第三个武馆\"><a href=\"#第三个武馆\" class=\"headerlink\" title=\"第三个武馆\"></a>第三个武馆</h3><p>武师：你现在是想做 剑客的学童是吗？那说说基本的剑招吧。<br>小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫。<br>武师：恩，可以，那简单说一下 劈剑的动作要领吧<br>小侠客：立剑，由上向下为劈，力达剑身，臂与剑成一直线。<br>武师：恩，不错，但是还有一点——抡劈贴身体右侧或左侧绕一立圆；后抡劈剑要与身体后转协调一致。<br>小侠客：（恍然大悟！）<br>武师：你为什么要做剑客呢？ 剑客的未来如何？<br>小侠客：慷慨激昂的谈论了一下。</p>\n<p><br></p>\n<h1 id=\"小侠客-达成成就-武馆剑童\"><a href=\"#小侠客-达成成就-武馆剑童\" class=\"headerlink\" title=\"小侠客 达成成就 武馆剑童\"></a>小侠客 达成成就 武馆剑童</h1><p><br></p>\n<h4 id=\"村友\"><a href=\"#村友\" class=\"headerlink\" title=\"村友\"></a>村友</h4><p>离开了新手村，曾经你感叹，新手村人真多，但就是这么多人，在被大陆稀释一下，你也很难再找到同新手村的人，更何况你新手村的玩伴。到最后，每次见到村友，即使俩人曾彼此红眼相对，最终也会红脸喝醉。<br>但也可能，曾经俩人红脸喝醉，到如今的红眼相对，亦或，默然无视。</p>\n<p><br></p>\n<p>这个纷繁的世界<br>虽然还没有离开新手村，但提前体验了这个纷繁的世界。<br>2015年，想想，印象最深刻的还是下半年的这些体会。<br>独自一人来到北京，漂着~<br>2016年，我还是会继续做游戏，<br>我也希望认识更多做游戏的朋友。</p>\n<p><br><br><br></p>\n<h6 id=\"PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的…-换句话说：-gt-别来找我论剑-lt\"><a href=\"#PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的…-换句话说：-gt-别来找我论剑-lt\" class=\"headerlink\" title=\"PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的… 换句话说：&gt; 别来找我论剑 &lt;\"></a>PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的… 换句话说：&gt; 别来找我论剑 &lt;</h6>","site":{"data":{}},"excerpt":"<p>2015：刚出新手村的小侠客面对这纷繁的世界。</p>","more":"<p><br><br><br><br>2015年，是一个蜕变的一年。</p>\n<p>不管是如何度过了大学生活，总之，到时候离开了。<br>马上就要进入“外面的世界”，<br>就好像，以前玩的RPG游戏，我们终于从新手村熬出来了，要踏上大陆的征程，当然，首先要完成新手村最后的考验。</p>\n<hr>\n<p><br><br><br></p>\n<h4 id=\"新手村\"><a href=\"#新手村\" class=\"headerlink\" title=\"新手村\"></a>新手村</h4><p>一般，刚从新手村出来，面对这繁华的大陆，无数的诱惑，没有村长老爷爷（为什么不是老奶奶呢？）给你的小感叹号，告诉你一步步做什么。<br>穿着 裁缝铺大婶给你的衣服，挥舞着 铁匠大叔给你的长剑，带着 药铺小老板送你的几瓶红蓝药剂，相信我，一般用不到蓝色那瓶，不要舍不得用，到最后往往被更高级的药取代，好点的，能去跟杂货铺小奸商换1铜币，但大部分都是被丢弃的命运。</p>\n<h4 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h4><p>繁华的大陆有着千奇百怪的任务，不再像村长让你按顺序把村子周围清理一遍。<br>但是，刚出来的你面对着高额的悬赏任务，看着别人拿着把鎏金大剑，帅气的撕下悬赏，这时的你，只能摸摸残次的长剑（殊不知，当时，刚获得这把剑的时候，你曾开心的抱着它入睡），然后在任务版最下面一排寻找着。找邻居丢的小猫，帮饭馆打打野味，或者干脆就暂放长剑，去为客人端茶倒水……<br>每晚，盘算着还差多少能换来一把鎏金大剑，幻想着像之前那个人那样，帅气的撕下最顶部的悬赏，你也曾练习多次——撕悬赏的姿势。<br>又如何？<br>· 很多人看着每晚天文般的数字，就慢慢放弃了。在饭馆端菜的闲暇，看着一桌桌刚出来的侠客们谈天论地，默默的想起自己曾经的梦想，但又被老板的一喝惊醒。<br>· 很多人光顾着铜币，最基础的招式都忘记了，买着到手的鎏金大剑，帅气的用自己演练过多遍的姿势，撕下悬赏，在小侠客们艳羡的眼中，傲然的抬起下巴，奔向敌方。结果，一合不到，变血溅当场，连喝红药的时间都没有。<br>· 还有一些人，白天赚铜币，晚上练武功。Atk↑ Hp↓ and 狗带…</p>\n<h4 id=\"衙门\"><a href=\"#衙门\" class=\"headerlink\" title=\"衙门\"></a>衙门</h4><p>这是，小侠客踏上这片大陆来，最受教育的一个地方。<br>他们是文明的，<br>他们是合法的，<br>他们能在文明&amp;合法的前提下，让你无言以对。<br>这还是 顺天府 的体验。</p>\n<h4 id=\"武馆\"><a href=\"#武馆\" class=\"headerlink\" title=\"武馆\"></a>武馆</h4><p>想做一名侠客，所以刚出来，还是先找一个武馆安顿下来，就算现在不能撕大悬赏，但也可以每天练剑，还可以攒铜币。<br>但，你从1xxxxxxxxxxxx号新手村出来，村长又没给你推荐信，这么多的新手村，都是想做侠客的人，找个武馆谈何容易？</p>\n<p><br></p>\n<h3 id=\"第一个武馆，\"><a href=\"#第一个武馆，\" class=\"headerlink\" title=\"第一个武馆，\"></a>第一个武馆，</h3><p>武师：看你研究过招式的好坏。<br>小侠客：是的，曾经研究过一些，但是，只是皮毛而已。<br>武师：不错，那就说说 剑招中 探刺剑的动作要领吧。<br>小侠客：(⊙o⊙)…对不起，我只是懂一些皮毛。<br>武师：吓！ 什么↑~ 这都不知道？你怎么研究的招式！那你知道剑招有哪些吗？（鄙视ING）<br>小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫，您刚才说的 探刺剑，属于刺剑一种，刺剑主要分为 平刺剑 、上刺剑 、下刺剑 、低刺剑、后刺剑 、探刺剑 。<br>武师：（依旧鄙视），这对于研究招式的来说是基础知识啊，你连这都不知道，你还说自己研究过招式。（你造假！）<br>往后，就是各种怀疑。。<br>小侠客 OUT</p>\n<h3 id=\"第二个武馆，\"><a href=\"#第二个武馆，\" class=\"headerlink\" title=\"第二个武馆，\"></a>第二个武馆，</h3><p>前面很顺利，谈了1个多小时。。。<br>武师：你和别人对战过那么多次，你都用什么剑谱上的哪一式？<br>小侠客：我现在还没看那些剑谱的招式，我只是在想到的几个招式基础上，出一招。<br>武师：哦？ 那你是瞎打咯？<br>小侠客：不是瞎打，我也是有选择的，并不是想到什么就出什么。<br>武师：哦~↑~↓（你就是瞎打，哈哈，被我看出来了吧，瞎打，瞎打，瞎打，耶！）<br>小侠客 OUT</p>\n<h3 id=\"第三个武馆\"><a href=\"#第三个武馆\" class=\"headerlink\" title=\"第三个武馆\"></a>第三个武馆</h3><p>武师：你现在是想做 剑客的学童是吗？那说说基本的剑招吧。<br>小侠客：剑招主要分为 劈、刺、点、撩、崩、截、抹、穿、挑、提、绞、扫。<br>武师：恩，可以，那简单说一下 劈剑的动作要领吧<br>小侠客：立剑，由上向下为劈，力达剑身，臂与剑成一直线。<br>武师：恩，不错，但是还有一点——抡劈贴身体右侧或左侧绕一立圆；后抡劈剑要与身体后转协调一致。<br>小侠客：（恍然大悟！）<br>武师：你为什么要做剑客呢？ 剑客的未来如何？<br>小侠客：慷慨激昂的谈论了一下。</p>\n<p><br></p>\n<h1 id=\"小侠客-达成成就-武馆剑童\"><a href=\"#小侠客-达成成就-武馆剑童\" class=\"headerlink\" title=\"小侠客 达成成就 武馆剑童\"></a>小侠客 达成成就 武馆剑童</h1><p><br></p>\n<h4 id=\"村友\"><a href=\"#村友\" class=\"headerlink\" title=\"村友\"></a>村友</h4><p>离开了新手村，曾经你感叹，新手村人真多，但就是这么多人，在被大陆稀释一下，你也很难再找到同新手村的人，更何况你新手村的玩伴。到最后，每次见到村友，即使俩人曾彼此红眼相对，最终也会红脸喝醉。<br>但也可能，曾经俩人红脸喝醉，到如今的红眼相对，亦或，默然无视。</p>\n<p><br></p>\n<p>这个纷繁的世界<br>虽然还没有离开新手村，但提前体验了这个纷繁的世界。<br>2015年，想想，印象最深刻的还是下半年的这些体会。<br>独自一人来到北京，漂着~<br>2016年，我还是会继续做游戏，<br>我也希望认识更多做游戏的朋友。</p>\n<p><br><br><br></p>\n<h6 id=\"PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的…-换句话说：-gt-别来找我论剑-lt\"><a href=\"#PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的…-换句话说：-gt-别来找我论剑-lt\" class=\"headerlink\" title=\"PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的… 换句话说：&gt; 别来找我论剑 &lt;\"></a>PS：里面关于剑招那些内容，全是百度搜来的，我是断然不懂的… 换句话说：&gt; 别来找我论剑 &lt;</h6>"},{"title":"2016,没走偏","date":"2017-01-23T14:41:35.000Z","_content":"\n2016回顾：毕业与就业\n\n<!-- more -->\n\n\n\n<br/>\n<br/>\n2016年结束有好一阵子了，\n但没有过年，总感觉2016还没有过去。。\n这次的总结，与之前的不大一样；\n有着人生的一个重要的节点，毕业与就业。\n\n---\n<br/>\n<br/>\n\n###  **简单又充实的大学生涯**\n\n四年的大学生涯，圆满结束。\n准确的来说应该是三年吧，最后一年基本就在北京实习了。\n回首，整个大学生涯，还算可以吧，\n虽然没有挂过科，没有做过弊，没有跳进三元湖里游个泳，没有裸过奔...\n但是，也这么平平安安的过来了。\n![这里写图片描述](http://img.blog.csdn.net/20170123230955916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n我投入游戏开发这行，是我高考完就定下的，\n当时找有没有相关的专业，\n挨，中国传媒大学新开了一个相关的，\n但是，高考失利，没上了（本来正常发挥分也够呛能够到）；\n只好选了个计算机方向的，怎么说，也是沾亲带故的嘛。\n刚开始是 软件工程专业，后来通过卓越工程师计划转到了计算机科学与技术。\n（这个计划，选拔时候又笔试又面试，结果，就是假期的时候多上了几个培训课，毕竟第一批，没经验呀，可怜的小白鼠）\n\n没太大关系，\n毕竟，我的目标是游戏开发。\n在完成正常课程情况下，去自学游戏开发。\n于是，大一拉了几个人一起去参加齐鲁软件大赛。\n上大学是我第一次接触编程，\n而且在大一，也没学什么，一堆基础课 加上 谭老师的《C++ 程序设计》。\n就想做一个游戏出来...\n那年夏天，暑假，一个屋子里有6，7个团队，都是准备参加大赛的；\n身为队长加带头人，当然要对这个团队负责；\n用什么方式开发，如何制定进度，每个人的分工，每个人工作的时间，事无巨细。\n中间那些苦难的时光，就不多叙述了。\n记忆最深刻的，就是五个人团结一致，找的小伙伴都很靠谱，记得当时应该是朝八晚八，中午有一个小时午休。\n每个人都很自觉，不需要督促，不需要烦忧。\n大概是一个月左右（五人合作时间），大体雏形已经出来了，\n到最后，整个屋子没剩几个人了，但我们依旧坚持了下来。\n最终，我大学期间第一个项目 —— 《残月夜》 出炉。\n\n![这里写图片描述](http://img.blog.csdn.net/20131009215534656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n[关于残月夜](http://blog.csdn.net/lttree/article/details/12525775)\n\n大二这一年，主要应该是ACM吧。\n本来大一暑假那段时间就应该去集训，但是因为齐鲁软件赛，就放下了ACM。\n然后，大二就比较吃力了。ACM在我们学校也算刚开始起步，方向什么都靠着摸索，也不是很轻松。\n结果，省赛失利，黯然退出。（因为不准备考研，所以大三要搞一搞就业相关的东西了，就没有在ACM再拼一年）\n但是，蓝桥杯的成绩还可以，起码有个奖了...\n\n![这里写图片描述](http://img.blog.csdn.net/20140624195413781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20140624195453375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n[关于我的ACM](http://blog.csdn.net/lttree/article/details/32321653)\n\n\n然后，到了大三。\n大三，就开始为就业做准备了，\n首先是，重新拿起cocos2d引擎，模仿着做了很多当下流行的游戏，有些发了教程博文，有些就自己做着玩了玩：HelloKitty2048、万圣大作战，别踩白块、flappy bird、消灭星星。\n然后，开始看一些书籍，因为我要做一个\"有思想\"的游戏开发者，多学多看一些游戏设计，可能更偏向于策划的东西。\n最后，因为大三了，开始到达专业课的最终章了，就开始各种课设，大作业；再加上卓越计划的培训班，\n学了一堆杂七杂八的，貌似现在已经忘了不少的东西：HTML，MFC，Android，iOS等等\n然后，参加了cocos官方举办的游戏开发大赛，这个要好好说道说道了:\n当时，我记得反转盛行，记得很火的捕鱼达人，然后就想了反过来，来个捕人达鱼，但是名字被美术同学嘲讽了，就改了个非常洋气的名字：人鱼塞壬。\n时间不是很充裕，\n看到比赛的时候就不是很早，\n前期忙于最后期末考试及各种大课设，\n中期，因为卓越班，暑假要到北京千锋培训十天，\n但是，我的美术君是在学校进行甲骨文培训。\n在千锋培训，也要交大作业呀，于是，一边学iOS开发，做大作业；一边再去忙活比赛作品。\n事实证明，三心二意是不好的，尤其是当你两边都想做好的时候，最后iOS作品很一般，比赛作品也没实现多少。\n还好回到学校，还有一段时间，马力全开的赶工，\n先完成了大体的东西，然后慢慢往上加各种功能，到最后功能也没有加多少。\n当初，游戏设定最初所想的都没有加上，\n后来，作品交上去以后，也没有动力去完善它。\n\n![这里写图片描述](http://img.blog.csdn.net/20140928175809265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n![这里写图片描述](http://img.blog.csdn.net/20141031230507078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20150818075936616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n[2048系列教程](http://blog.csdn.net/lx417147512/article/category/2602825)\n[别踩白块系列教程](http://blog.csdn.net/lx417147512/article/category/2889567)\n[消灭星星系列教程](http://blog.csdn.net/lx417147512/article/category/3258131)\n[万圣大作战系列教程](http://blog.csdn.net/lx417147512/article/category/2677429)\n[关于人鱼塞壬](http://blog.csdn.net/lttree/article/details/47729343)\n\n大四的时间，基本就是在北京实习了，至今也在这家公司，后面也会谈到。\n\n短暂的大学生涯，印象最深刻的就是启蒙我CSDN的 贺利坚老师，ACM三大巨头 卢云宏老师、周世平老师、封玮老师。\n然后，就是我那些奇葩可爱行为怪诞的室友与同学们，一起拼搏ACM、蓝桥杯的队友们，一起奋战齐鲁赛的组员们。\n\n噢，\n大学最亏欠的还有我那女友，\n看上面那些忙忙碌碌的东西，就知道，\n我很少有时间能陪她，不是在实验室就是在外面比赛。\n感谢她在背后一直默默支持我鼓励我。\n（这段话，绝对不是她在旁边逼迫我写的，键盘什么的跪着也不疼）\n\n<br/>\n<br/>\n\n### **奋斗的工作团队**\n\n话说，\n那应该是2015年十月还是十一月份的，\n一人一包一行李箱闯北京，\n面试了三家，就落户于现在这个铭匠公司，\n以前都是我自己在学校做，自己负责全部。\n第一次接触，真正的游戏公司是如何运作的。\n\n其实，在小公司干活，是一件非常累而且难的事情。\n你会负责很多东西，你需要取舍，\n哪些技术知识，浅尝辄止即可，无须深入；\n哪些技术知识，需要好好研究探寻；\n庄子中也谈论过：\n吾生也有涯，而知也无涯。以有涯随无涯，殆已。\n所以，把有限的精力投入到刀刃上是很重要的。\n\n在 铭匠 呆了也有一年多了，\n期间参与了3.2个游戏制作。\n继续坚持在这里，还是因为做游戏的态度与氛围。\n毕竟，还年轻，工作的原因不是单纯的铁饭碗或者高回报。\n个人的发展与心情占据更高的位置。\n更加重要的是，\n我相信自己的眼光，\n我相信我们团队。\n\n马上游戏就要上线了，\n史诗级大作:   诛神记！\n\n![这里写图片描述](http://img.blog.csdn.net/20170123154953588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n<br/>\n<br/>\n\n### **一些杂事**\n#### > 今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\n\n- 《活着》\n- 《REWORK》\n- 《从0到1》\n- 《生死疲劳》\n- 《人类简史》\n- 《卓有成效的程序员》\n- 《代码的整洁之道》\n\n#### > 学python\n初衷是因为感觉python这个脚本语言很强大，可以做各种辅助自己的工具。\n最后，也实践了一些，发工作日报，删文件名空格，火车票查询，感觉也不错，\n为什么有种大炮打苍蝇的感觉。。。\n接下来，还要做一些更多好玩的东西。。。\n\n\n#### > 个人博客  [www.lt-tree.com](http://www.lt-tree.com/)\n用 hexo+Github 搭建了自己的个人博客。\n现在，还没有腾出手好好研究，只是套了别人的模板。\n\n\n#### > Unity\n学了一些Unity的东西。\n简单的学习，起码如果换引擎，也不会手足无措。\n以后，也可能转Unity了。。。\n有点准备。\n\n\n<br/>\n<br/>\n\n### **接下来**\n2017年，\n第一件想做的事就是 —— 减肥。\n曾经不怎么重视体重，\n晚上学习，嘴巴闲不下来，\n结果现在越来越严重了。\n是时候该重视一下了，\n健康，是革命的本钱嘛！\n\n第二件事，读更多的书。\n技术书籍可能不会读很多吧，\n毕竟，有些东西等到出书，可能都被淘汰了。\n主要想读更多的非专业技术书籍，\n比如去年读的《活着》、《生死疲劳》等，\n当然，还要扩展其他类别的。\n你不知道下一款游戏是什么类型的，多扩充一下自己知识体系还是很好的。\n\n最后一件事，老生常谈的 —— 学习。\n互联网这个行业，原地踏步就是退步。\n还是要一直学下去，\n学还要有选择的学，不能瞎学。\n\n<br/>\n\n---\n\n<br/>\n\n最后，\n大学四年，没走偏。\n毕业以后，没走偏。\n2017，继续掌舵前行，\n目标，6点钟方向，出发！\n\n\n###### 等等，为什么是6点钟？  提示：卯时\n\n","source":"_posts/2016，没走偏.md","raw":"---\ntitle: 2016,没走偏\ndate: 2017-01-23 22:41:35\ntags: 抽空写\n---\n\n2016回顾：毕业与就业\n\n<!-- more -->\n\n\n\n<br/>\n<br/>\n2016年结束有好一阵子了，\n但没有过年，总感觉2016还没有过去。。\n这次的总结，与之前的不大一样；\n有着人生的一个重要的节点，毕业与就业。\n\n---\n<br/>\n<br/>\n\n###  **简单又充实的大学生涯**\n\n四年的大学生涯，圆满结束。\n准确的来说应该是三年吧，最后一年基本就在北京实习了。\n回首，整个大学生涯，还算可以吧，\n虽然没有挂过科，没有做过弊，没有跳进三元湖里游个泳，没有裸过奔...\n但是，也这么平平安安的过来了。\n![这里写图片描述](http://img.blog.csdn.net/20170123230955916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n我投入游戏开发这行，是我高考完就定下的，\n当时找有没有相关的专业，\n挨，中国传媒大学新开了一个相关的，\n但是，高考失利，没上了（本来正常发挥分也够呛能够到）；\n只好选了个计算机方向的，怎么说，也是沾亲带故的嘛。\n刚开始是 软件工程专业，后来通过卓越工程师计划转到了计算机科学与技术。\n（这个计划，选拔时候又笔试又面试，结果，就是假期的时候多上了几个培训课，毕竟第一批，没经验呀，可怜的小白鼠）\n\n没太大关系，\n毕竟，我的目标是游戏开发。\n在完成正常课程情况下，去自学游戏开发。\n于是，大一拉了几个人一起去参加齐鲁软件大赛。\n上大学是我第一次接触编程，\n而且在大一，也没学什么，一堆基础课 加上 谭老师的《C++ 程序设计》。\n就想做一个游戏出来...\n那年夏天，暑假，一个屋子里有6，7个团队，都是准备参加大赛的；\n身为队长加带头人，当然要对这个团队负责；\n用什么方式开发，如何制定进度，每个人的分工，每个人工作的时间，事无巨细。\n中间那些苦难的时光，就不多叙述了。\n记忆最深刻的，就是五个人团结一致，找的小伙伴都很靠谱，记得当时应该是朝八晚八，中午有一个小时午休。\n每个人都很自觉，不需要督促，不需要烦忧。\n大概是一个月左右（五人合作时间），大体雏形已经出来了，\n到最后，整个屋子没剩几个人了，但我们依旧坚持了下来。\n最终，我大学期间第一个项目 —— 《残月夜》 出炉。\n\n![这里写图片描述](http://img.blog.csdn.net/20131009215534656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n[关于残月夜](http://blog.csdn.net/lttree/article/details/12525775)\n\n大二这一年，主要应该是ACM吧。\n本来大一暑假那段时间就应该去集训，但是因为齐鲁软件赛，就放下了ACM。\n然后，大二就比较吃力了。ACM在我们学校也算刚开始起步，方向什么都靠着摸索，也不是很轻松。\n结果，省赛失利，黯然退出。（因为不准备考研，所以大三要搞一搞就业相关的东西了，就没有在ACM再拼一年）\n但是，蓝桥杯的成绩还可以，起码有个奖了...\n\n![这里写图片描述](http://img.blog.csdn.net/20140624195413781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20140624195453375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n[关于我的ACM](http://blog.csdn.net/lttree/article/details/32321653)\n\n\n然后，到了大三。\n大三，就开始为就业做准备了，\n首先是，重新拿起cocos2d引擎，模仿着做了很多当下流行的游戏，有些发了教程博文，有些就自己做着玩了玩：HelloKitty2048、万圣大作战，别踩白块、flappy bird、消灭星星。\n然后，开始看一些书籍，因为我要做一个\"有思想\"的游戏开发者，多学多看一些游戏设计，可能更偏向于策划的东西。\n最后，因为大三了，开始到达专业课的最终章了，就开始各种课设，大作业；再加上卓越计划的培训班，\n学了一堆杂七杂八的，貌似现在已经忘了不少的东西：HTML，MFC，Android，iOS等等\n然后，参加了cocos官方举办的游戏开发大赛，这个要好好说道说道了:\n当时，我记得反转盛行，记得很火的捕鱼达人，然后就想了反过来，来个捕人达鱼，但是名字被美术同学嘲讽了，就改了个非常洋气的名字：人鱼塞壬。\n时间不是很充裕，\n看到比赛的时候就不是很早，\n前期忙于最后期末考试及各种大课设，\n中期，因为卓越班，暑假要到北京千锋培训十天，\n但是，我的美术君是在学校进行甲骨文培训。\n在千锋培训，也要交大作业呀，于是，一边学iOS开发，做大作业；一边再去忙活比赛作品。\n事实证明，三心二意是不好的，尤其是当你两边都想做好的时候，最后iOS作品很一般，比赛作品也没实现多少。\n还好回到学校，还有一段时间，马力全开的赶工，\n先完成了大体的东西，然后慢慢往上加各种功能，到最后功能也没有加多少。\n当初，游戏设定最初所想的都没有加上，\n后来，作品交上去以后，也没有动力去完善它。\n\n![这里写图片描述](http://img.blog.csdn.net/20140928175809265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n![这里写图片描述](http://img.blog.csdn.net/20141031230507078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20150818075936616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n[2048系列教程](http://blog.csdn.net/lx417147512/article/category/2602825)\n[别踩白块系列教程](http://blog.csdn.net/lx417147512/article/category/2889567)\n[消灭星星系列教程](http://blog.csdn.net/lx417147512/article/category/3258131)\n[万圣大作战系列教程](http://blog.csdn.net/lx417147512/article/category/2677429)\n[关于人鱼塞壬](http://blog.csdn.net/lttree/article/details/47729343)\n\n大四的时间，基本就是在北京实习了，至今也在这家公司，后面也会谈到。\n\n短暂的大学生涯，印象最深刻的就是启蒙我CSDN的 贺利坚老师，ACM三大巨头 卢云宏老师、周世平老师、封玮老师。\n然后，就是我那些奇葩可爱行为怪诞的室友与同学们，一起拼搏ACM、蓝桥杯的队友们，一起奋战齐鲁赛的组员们。\n\n噢，\n大学最亏欠的还有我那女友，\n看上面那些忙忙碌碌的东西，就知道，\n我很少有时间能陪她，不是在实验室就是在外面比赛。\n感谢她在背后一直默默支持我鼓励我。\n（这段话，绝对不是她在旁边逼迫我写的，键盘什么的跪着也不疼）\n\n<br/>\n<br/>\n\n### **奋斗的工作团队**\n\n话说，\n那应该是2015年十月还是十一月份的，\n一人一包一行李箱闯北京，\n面试了三家，就落户于现在这个铭匠公司，\n以前都是我自己在学校做，自己负责全部。\n第一次接触，真正的游戏公司是如何运作的。\n\n其实，在小公司干活，是一件非常累而且难的事情。\n你会负责很多东西，你需要取舍，\n哪些技术知识，浅尝辄止即可，无须深入；\n哪些技术知识，需要好好研究探寻；\n庄子中也谈论过：\n吾生也有涯，而知也无涯。以有涯随无涯，殆已。\n所以，把有限的精力投入到刀刃上是很重要的。\n\n在 铭匠 呆了也有一年多了，\n期间参与了3.2个游戏制作。\n继续坚持在这里，还是因为做游戏的态度与氛围。\n毕竟，还年轻，工作的原因不是单纯的铁饭碗或者高回报。\n个人的发展与心情占据更高的位置。\n更加重要的是，\n我相信自己的眼光，\n我相信我们团队。\n\n马上游戏就要上线了，\n史诗级大作:   诛神记！\n\n![这里写图片描述](http://img.blog.csdn.net/20170123154953588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n<br/>\n<br/>\n\n### **一些杂事**\n#### > 今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\n\n- 《活着》\n- 《REWORK》\n- 《从0到1》\n- 《生死疲劳》\n- 《人类简史》\n- 《卓有成效的程序员》\n- 《代码的整洁之道》\n\n#### > 学python\n初衷是因为感觉python这个脚本语言很强大，可以做各种辅助自己的工具。\n最后，也实践了一些，发工作日报，删文件名空格，火车票查询，感觉也不错，\n为什么有种大炮打苍蝇的感觉。。。\n接下来，还要做一些更多好玩的东西。。。\n\n\n#### > 个人博客  [www.lt-tree.com](http://www.lt-tree.com/)\n用 hexo+Github 搭建了自己的个人博客。\n现在，还没有腾出手好好研究，只是套了别人的模板。\n\n\n#### > Unity\n学了一些Unity的东西。\n简单的学习，起码如果换引擎，也不会手足无措。\n以后，也可能转Unity了。。。\n有点准备。\n\n\n<br/>\n<br/>\n\n### **接下来**\n2017年，\n第一件想做的事就是 —— 减肥。\n曾经不怎么重视体重，\n晚上学习，嘴巴闲不下来，\n结果现在越来越严重了。\n是时候该重视一下了，\n健康，是革命的本钱嘛！\n\n第二件事，读更多的书。\n技术书籍可能不会读很多吧，\n毕竟，有些东西等到出书，可能都被淘汰了。\n主要想读更多的非专业技术书籍，\n比如去年读的《活着》、《生死疲劳》等，\n当然，还要扩展其他类别的。\n你不知道下一款游戏是什么类型的，多扩充一下自己知识体系还是很好的。\n\n最后一件事，老生常谈的 —— 学习。\n互联网这个行业，原地踏步就是退步。\n还是要一直学下去，\n学还要有选择的学，不能瞎学。\n\n<br/>\n\n---\n\n<br/>\n\n最后，\n大学四年，没走偏。\n毕业以后，没走偏。\n2017，继续掌舵前行，\n目标，6点钟方向，出发！\n\n\n###### 等等，为什么是6点钟？  提示：卯时\n\n","slug":"2016，没走偏","published":1,"updated":"2018-04-02T16:35:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp43200010due5e4wjej2","content":"<p>2016回顾：毕业与就业</p>\n<a id=\"more\"></a>\n<p><br><br><br><br>2016年结束有好一阵子了，<br>但没有过年，总感觉2016还没有过去。。<br>这次的总结，与之前的不大一样；<br>有着人生的一个重要的节点，毕业与就业。</p>\n<hr>\n<p><br><br><br></p>\n<h3 id=\"简单又充实的大学生涯\"><a href=\"#简单又充实的大学生涯\" class=\"headerlink\" title=\"简单又充实的大学生涯\"></a><strong>简单又充实的大学生涯</strong></h3><p>四年的大学生涯，圆满结束。<br>准确的来说应该是三年吧，最后一年基本就在北京实习了。<br>回首，整个大学生涯，还算可以吧，<br>虽然没有挂过科，没有做过弊，没有跳进三元湖里游个泳，没有裸过奔…<br>但是，也这么平平安安的过来了。<br><img src=\"http://img.blog.csdn.net/20170123230955916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>我投入游戏开发这行，是我高考完就定下的，<br>当时找有没有相关的专业，<br>挨，中国传媒大学新开了一个相关的，<br>但是，高考失利，没上了（本来正常发挥分也够呛能够到）；<br>只好选了个计算机方向的，怎么说，也是沾亲带故的嘛。<br>刚开始是 软件工程专业，后来通过卓越工程师计划转到了计算机科学与技术。<br>（这个计划，选拔时候又笔试又面试，结果，就是假期的时候多上了几个培训课，毕竟第一批，没经验呀，可怜的小白鼠）</p>\n<p>没太大关系，<br>毕竟，我的目标是游戏开发。<br>在完成正常课程情况下，去自学游戏开发。<br>于是，大一拉了几个人一起去参加齐鲁软件大赛。<br>上大学是我第一次接触编程，<br>而且在大一，也没学什么，一堆基础课 加上 谭老师的《C++ 程序设计》。<br>就想做一个游戏出来…<br>那年夏天，暑假，一个屋子里有6，7个团队，都是准备参加大赛的；<br>身为队长加带头人，当然要对这个团队负责；<br>用什么方式开发，如何制定进度，每个人的分工，每个人工作的时间，事无巨细。<br>中间那些苦难的时光，就不多叙述了。<br>记忆最深刻的，就是五个人团结一致，找的小伙伴都很靠谱，记得当时应该是朝八晚八，中午有一个小时午休。<br>每个人都很自觉，不需要督促，不需要烦忧。<br>大概是一个月左右（五人合作时间），大体雏形已经出来了，<br>到最后，整个屋子没剩几个人了，但我们依旧坚持了下来。<br>最终，我大学期间第一个项目 —— 《残月夜》 出炉。</p>\n<p><img src=\"http://img.blog.csdn.net/20131009215534656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\"></p>\n<p><a href=\"http://blog.csdn.net/lttree/article/details/12525775\" target=\"_blank\" rel=\"noopener\">关于残月夜</a></p>\n<p>大二这一年，主要应该是ACM吧。<br>本来大一暑假那段时间就应该去集训，但是因为齐鲁软件赛，就放下了ACM。<br>然后，大二就比较吃力了。ACM在我们学校也算刚开始起步，方向什么都靠着摸索，也不是很轻松。<br>结果，省赛失利，黯然退出。（因为不准备考研，所以大三要搞一搞就业相关的东西了，就没有在ACM再拼一年）<br>但是，蓝桥杯的成绩还可以，起码有个奖了…</p>\n<p><img src=\"http://img.blog.csdn.net/20140624195413781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20140624195453375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><a href=\"http://blog.csdn.net/lttree/article/details/32321653\" target=\"_blank\" rel=\"noopener\">关于我的ACM</a></p>\n<p>然后，到了大三。<br>大三，就开始为就业做准备了，<br>首先是，重新拿起cocos2d引擎，模仿着做了很多当下流行的游戏，有些发了教程博文，有些就自己做着玩了玩：HelloKitty2048、万圣大作战，别踩白块、flappy bird、消灭星星。<br>然后，开始看一些书籍，因为我要做一个”有思想”的游戏开发者，多学多看一些游戏设计，可能更偏向于策划的东西。<br>最后，因为大三了，开始到达专业课的最终章了，就开始各种课设，大作业；再加上卓越计划的培训班，<br>学了一堆杂七杂八的，貌似现在已经忘了不少的东西：HTML，MFC，Android，iOS等等<br>然后，参加了cocos官方举办的游戏开发大赛，这个要好好说道说道了:<br>当时，我记得反转盛行，记得很火的捕鱼达人，然后就想了反过来，来个捕人达鱼，但是名字被美术同学嘲讽了，就改了个非常洋气的名字：人鱼塞壬。<br>时间不是很充裕，<br>看到比赛的时候就不是很早，<br>前期忙于最后期末考试及各种大课设，<br>中期，因为卓越班，暑假要到北京千锋培训十天，<br>但是，我的美术君是在学校进行甲骨文培训。<br>在千锋培训，也要交大作业呀，于是，一边学iOS开发，做大作业；一边再去忙活比赛作品。<br>事实证明，三心二意是不好的，尤其是当你两边都想做好的时候，最后iOS作品很一般，比赛作品也没实现多少。<br>还好回到学校，还有一段时间，马力全开的赶工，<br>先完成了大体的东西，然后慢慢往上加各种功能，到最后功能也没有加多少。<br>当初，游戏设定最初所想的都没有加上，<br>后来，作品交上去以后，也没有动力去完善它。</p>\n<p><img src=\"http://img.blog.csdn.net/20140928175809265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20141031230507078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20150818075936616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><a href=\"http://blog.csdn.net/lx417147512/article/category/2602825\" target=\"_blank\" rel=\"noopener\">2048系列教程</a><br><a href=\"http://blog.csdn.net/lx417147512/article/category/2889567\" target=\"_blank\" rel=\"noopener\">别踩白块系列教程</a><br><a href=\"http://blog.csdn.net/lx417147512/article/category/3258131\" target=\"_blank\" rel=\"noopener\">消灭星星系列教程</a><br><a href=\"http://blog.csdn.net/lx417147512/article/category/2677429\" target=\"_blank\" rel=\"noopener\">万圣大作战系列教程</a><br><a href=\"http://blog.csdn.net/lttree/article/details/47729343\" target=\"_blank\" rel=\"noopener\">关于人鱼塞壬</a></p>\n<p>大四的时间，基本就是在北京实习了，至今也在这家公司，后面也会谈到。</p>\n<p>短暂的大学生涯，印象最深刻的就是启蒙我CSDN的 贺利坚老师，ACM三大巨头 卢云宏老师、周世平老师、封玮老师。<br>然后，就是我那些奇葩可爱行为怪诞的室友与同学们，一起拼搏ACM、蓝桥杯的队友们，一起奋战齐鲁赛的组员们。</p>\n<p>噢，<br>大学最亏欠的还有我那女友，<br>看上面那些忙忙碌碌的东西，就知道，<br>我很少有时间能陪她，不是在实验室就是在外面比赛。<br>感谢她在背后一直默默支持我鼓励我。<br>（这段话，绝对不是她在旁边逼迫我写的，键盘什么的跪着也不疼）</p>\n<p><br><br><br></p>\n<h3 id=\"奋斗的工作团队\"><a href=\"#奋斗的工作团队\" class=\"headerlink\" title=\"奋斗的工作团队\"></a><strong>奋斗的工作团队</strong></h3><p>话说，<br>那应该是2015年十月还是十一月份的，<br>一人一包一行李箱闯北京，<br>面试了三家，就落户于现在这个铭匠公司，<br>以前都是我自己在学校做，自己负责全部。<br>第一次接触，真正的游戏公司是如何运作的。</p>\n<p>其实，在小公司干活，是一件非常累而且难的事情。<br>你会负责很多东西，你需要取舍，<br>哪些技术知识，浅尝辄止即可，无须深入；<br>哪些技术知识，需要好好研究探寻；<br>庄子中也谈论过：<br>吾生也有涯，而知也无涯。以有涯随无涯，殆已。<br>所以，把有限的精力投入到刀刃上是很重要的。</p>\n<p>在 铭匠 呆了也有一年多了，<br>期间参与了3.2个游戏制作。<br>继续坚持在这里，还是因为做游戏的态度与氛围。<br>毕竟，还年轻，工作的原因不是单纯的铁饭碗或者高回报。<br>个人的发展与心情占据更高的位置。<br>更加重要的是，<br>我相信自己的眼光，<br>我相信我们团队。</p>\n<p>马上游戏就要上线了，<br>史诗级大作:   诛神记！</p>\n<p><img src=\"http://img.blog.csdn.net/20170123154953588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><br><br><br></p>\n<h3 id=\"一些杂事\"><a href=\"#一些杂事\" class=\"headerlink\" title=\"一些杂事\"></a><strong>一些杂事</strong></h3><h4 id=\"gt-今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\"><a href=\"#gt-今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\" class=\"headerlink\" title=\"&gt; 今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\"></a>&gt; 今年，也读了一些书，有些是同事推荐的，有些是自己想看的。</h4><ul>\n<li>《活着》</li>\n<li>《REWORK》</li>\n<li>《从0到1》</li>\n<li>《生死疲劳》</li>\n<li>《人类简史》</li>\n<li>《卓有成效的程序员》</li>\n<li>《代码的整洁之道》</li>\n</ul>\n<h4 id=\"gt-学python\"><a href=\"#gt-学python\" class=\"headerlink\" title=\"&gt; 学python\"></a>&gt; 学python</h4><p>初衷是因为感觉python这个脚本语言很强大，可以做各种辅助自己的工具。<br>最后，也实践了一些，发工作日报，删文件名空格，火车票查询，感觉也不错，<br>为什么有种大炮打苍蝇的感觉。。。<br>接下来，还要做一些更多好玩的东西。。。</p>\n<h4 id=\"gt-个人博客-www-lt-tree-com\"><a href=\"#gt-个人博客-www-lt-tree-com\" class=\"headerlink\" title=\"&gt; 个人博客  www.lt-tree.com\"></a>&gt; 个人博客  <a href=\"http://www.lt-tree.com/\" target=\"_blank\" rel=\"noopener\">www.lt-tree.com</a></h4><p>用 hexo+Github 搭建了自己的个人博客。<br>现在，还没有腾出手好好研究，只是套了别人的模板。</p>\n<h4 id=\"gt-Unity\"><a href=\"#gt-Unity\" class=\"headerlink\" title=\"&gt; Unity\"></a>&gt; Unity</h4><p>学了一些Unity的东西。<br>简单的学习，起码如果换引擎，也不会手足无措。<br>以后，也可能转Unity了。。。<br>有点准备。</p>\n<p><br><br><br></p>\n<h3 id=\"接下来\"><a href=\"#接下来\" class=\"headerlink\" title=\"接下来\"></a><strong>接下来</strong></h3><p>2017年，<br>第一件想做的事就是 —— 减肥。<br>曾经不怎么重视体重，<br>晚上学习，嘴巴闲不下来，<br>结果现在越来越严重了。<br>是时候该重视一下了，<br>健康，是革命的本钱嘛！</p>\n<p>第二件事，读更多的书。<br>技术书籍可能不会读很多吧，<br>毕竟，有些东西等到出书，可能都被淘汰了。<br>主要想读更多的非专业技术书籍，<br>比如去年读的《活着》、《生死疲劳》等，<br>当然，还要扩展其他类别的。<br>你不知道下一款游戏是什么类型的，多扩充一下自己知识体系还是很好的。</p>\n<p>最后一件事，老生常谈的 —— 学习。<br>互联网这个行业，原地踏步就是退步。<br>还是要一直学下去，<br>学还要有选择的学，不能瞎学。</p>\n<p><br></p>\n<hr>\n<p><br></p>\n<p>最后，<br>大学四年，没走偏。<br>毕业以后，没走偏。<br>2017，继续掌舵前行，<br>目标，6点钟方向，出发！</p>\n<h6 id=\"等等，为什么是6点钟？-提示：卯时\"><a href=\"#等等，为什么是6点钟？-提示：卯时\" class=\"headerlink\" title=\"等等，为什么是6点钟？  提示：卯时\"></a>等等，为什么是6点钟？  提示：卯时</h6>","site":{"data":{}},"excerpt":"<p>2016回顾：毕业与就业</p>","more":"<p><br><br><br><br>2016年结束有好一阵子了，<br>但没有过年，总感觉2016还没有过去。。<br>这次的总结，与之前的不大一样；<br>有着人生的一个重要的节点，毕业与就业。</p>\n<hr>\n<p><br><br><br></p>\n<h3 id=\"简单又充实的大学生涯\"><a href=\"#简单又充实的大学生涯\" class=\"headerlink\" title=\"简单又充实的大学生涯\"></a><strong>简单又充实的大学生涯</strong></h3><p>四年的大学生涯，圆满结束。<br>准确的来说应该是三年吧，最后一年基本就在北京实习了。<br>回首，整个大学生涯，还算可以吧，<br>虽然没有挂过科，没有做过弊，没有跳进三元湖里游个泳，没有裸过奔…<br>但是，也这么平平安安的过来了。<br><img src=\"http://img.blog.csdn.net/20170123230955916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>我投入游戏开发这行，是我高考完就定下的，<br>当时找有没有相关的专业，<br>挨，中国传媒大学新开了一个相关的，<br>但是，高考失利，没上了（本来正常发挥分也够呛能够到）；<br>只好选了个计算机方向的，怎么说，也是沾亲带故的嘛。<br>刚开始是 软件工程专业，后来通过卓越工程师计划转到了计算机科学与技术。<br>（这个计划，选拔时候又笔试又面试，结果，就是假期的时候多上了几个培训课，毕竟第一批，没经验呀，可怜的小白鼠）</p>\n<p>没太大关系，<br>毕竟，我的目标是游戏开发。<br>在完成正常课程情况下，去自学游戏开发。<br>于是，大一拉了几个人一起去参加齐鲁软件大赛。<br>上大学是我第一次接触编程，<br>而且在大一，也没学什么，一堆基础课 加上 谭老师的《C++ 程序设计》。<br>就想做一个游戏出来…<br>那年夏天，暑假，一个屋子里有6，7个团队，都是准备参加大赛的；<br>身为队长加带头人，当然要对这个团队负责；<br>用什么方式开发，如何制定进度，每个人的分工，每个人工作的时间，事无巨细。<br>中间那些苦难的时光，就不多叙述了。<br>记忆最深刻的，就是五个人团结一致，找的小伙伴都很靠谱，记得当时应该是朝八晚八，中午有一个小时午休。<br>每个人都很自觉，不需要督促，不需要烦忧。<br>大概是一个月左右（五人合作时间），大体雏形已经出来了，<br>到最后，整个屋子没剩几个人了，但我们依旧坚持了下来。<br>最终，我大学期间第一个项目 —— 《残月夜》 出炉。</p>\n<p><img src=\"http://img.blog.csdn.net/20131009215534656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\"></p>\n<p><a href=\"http://blog.csdn.net/lttree/article/details/12525775\" target=\"_blank\" rel=\"noopener\">关于残月夜</a></p>\n<p>大二这一年，主要应该是ACM吧。<br>本来大一暑假那段时间就应该去集训，但是因为齐鲁软件赛，就放下了ACM。<br>然后，大二就比较吃力了。ACM在我们学校也算刚开始起步，方向什么都靠着摸索，也不是很轻松。<br>结果，省赛失利，黯然退出。（因为不准备考研，所以大三要搞一搞就业相关的东西了，就没有在ACM再拼一年）<br>但是，蓝桥杯的成绩还可以，起码有个奖了…</p>\n<p><img src=\"http://img.blog.csdn.net/20140624195413781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20140624195453375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><a href=\"http://blog.csdn.net/lttree/article/details/32321653\" target=\"_blank\" rel=\"noopener\">关于我的ACM</a></p>\n<p>然后，到了大三。<br>大三，就开始为就业做准备了，<br>首先是，重新拿起cocos2d引擎，模仿着做了很多当下流行的游戏，有些发了教程博文，有些就自己做着玩了玩：HelloKitty2048、万圣大作战，别踩白块、flappy bird、消灭星星。<br>然后，开始看一些书籍，因为我要做一个”有思想”的游戏开发者，多学多看一些游戏设计，可能更偏向于策划的东西。<br>最后，因为大三了，开始到达专业课的最终章了，就开始各种课设，大作业；再加上卓越计划的培训班，<br>学了一堆杂七杂八的，貌似现在已经忘了不少的东西：HTML，MFC，Android，iOS等等<br>然后，参加了cocos官方举办的游戏开发大赛，这个要好好说道说道了:<br>当时，我记得反转盛行，记得很火的捕鱼达人，然后就想了反过来，来个捕人达鱼，但是名字被美术同学嘲讽了，就改了个非常洋气的名字：人鱼塞壬。<br>时间不是很充裕，<br>看到比赛的时候就不是很早，<br>前期忙于最后期末考试及各种大课设，<br>中期，因为卓越班，暑假要到北京千锋培训十天，<br>但是，我的美术君是在学校进行甲骨文培训。<br>在千锋培训，也要交大作业呀，于是，一边学iOS开发，做大作业；一边再去忙活比赛作品。<br>事实证明，三心二意是不好的，尤其是当你两边都想做好的时候，最后iOS作品很一般，比赛作品也没实现多少。<br>还好回到学校，还有一段时间，马力全开的赶工，<br>先完成了大体的东西，然后慢慢往上加各种功能，到最后功能也没有加多少。<br>当初，游戏设定最初所想的都没有加上，<br>后来，作品交上去以后，也没有动力去完善它。</p>\n<p><img src=\"http://img.blog.csdn.net/20140928175809265?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20141031230507078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20150818075936616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><a href=\"http://blog.csdn.net/lx417147512/article/category/2602825\" target=\"_blank\" rel=\"noopener\">2048系列教程</a><br><a href=\"http://blog.csdn.net/lx417147512/article/category/2889567\" target=\"_blank\" rel=\"noopener\">别踩白块系列教程</a><br><a href=\"http://blog.csdn.net/lx417147512/article/category/3258131\" target=\"_blank\" rel=\"noopener\">消灭星星系列教程</a><br><a href=\"http://blog.csdn.net/lx417147512/article/category/2677429\" target=\"_blank\" rel=\"noopener\">万圣大作战系列教程</a><br><a href=\"http://blog.csdn.net/lttree/article/details/47729343\" target=\"_blank\" rel=\"noopener\">关于人鱼塞壬</a></p>\n<p>大四的时间，基本就是在北京实习了，至今也在这家公司，后面也会谈到。</p>\n<p>短暂的大学生涯，印象最深刻的就是启蒙我CSDN的 贺利坚老师，ACM三大巨头 卢云宏老师、周世平老师、封玮老师。<br>然后，就是我那些奇葩可爱行为怪诞的室友与同学们，一起拼搏ACM、蓝桥杯的队友们，一起奋战齐鲁赛的组员们。</p>\n<p>噢，<br>大学最亏欠的还有我那女友，<br>看上面那些忙忙碌碌的东西，就知道，<br>我很少有时间能陪她，不是在实验室就是在外面比赛。<br>感谢她在背后一直默默支持我鼓励我。<br>（这段话，绝对不是她在旁边逼迫我写的，键盘什么的跪着也不疼）</p>\n<p><br><br><br></p>\n<h3 id=\"奋斗的工作团队\"><a href=\"#奋斗的工作团队\" class=\"headerlink\" title=\"奋斗的工作团队\"></a><strong>奋斗的工作团队</strong></h3><p>话说，<br>那应该是2015年十月还是十一月份的，<br>一人一包一行李箱闯北京，<br>面试了三家，就落户于现在这个铭匠公司，<br>以前都是我自己在学校做，自己负责全部。<br>第一次接触，真正的游戏公司是如何运作的。</p>\n<p>其实，在小公司干活，是一件非常累而且难的事情。<br>你会负责很多东西，你需要取舍，<br>哪些技术知识，浅尝辄止即可，无须深入；<br>哪些技术知识，需要好好研究探寻；<br>庄子中也谈论过：<br>吾生也有涯，而知也无涯。以有涯随无涯，殆已。<br>所以，把有限的精力投入到刀刃上是很重要的。</p>\n<p>在 铭匠 呆了也有一年多了，<br>期间参与了3.2个游戏制作。<br>继续坚持在这里，还是因为做游戏的态度与氛围。<br>毕竟，还年轻，工作的原因不是单纯的铁饭碗或者高回报。<br>个人的发展与心情占据更高的位置。<br>更加重要的是，<br>我相信自己的眼光，<br>我相信我们团队。</p>\n<p>马上游戏就要上线了，<br>史诗级大作:   诛神记！</p>\n<p><img src=\"http://img.blog.csdn.net/20170123154953588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHR0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><br><br><br></p>\n<h3 id=\"一些杂事\"><a href=\"#一些杂事\" class=\"headerlink\" title=\"一些杂事\"></a><strong>一些杂事</strong></h3><h4 id=\"gt-今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\"><a href=\"#gt-今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\" class=\"headerlink\" title=\"&gt; 今年，也读了一些书，有些是同事推荐的，有些是自己想看的。\"></a>&gt; 今年，也读了一些书，有些是同事推荐的，有些是自己想看的。</h4><ul>\n<li>《活着》</li>\n<li>《REWORK》</li>\n<li>《从0到1》</li>\n<li>《生死疲劳》</li>\n<li>《人类简史》</li>\n<li>《卓有成效的程序员》</li>\n<li>《代码的整洁之道》</li>\n</ul>\n<h4 id=\"gt-学python\"><a href=\"#gt-学python\" class=\"headerlink\" title=\"&gt; 学python\"></a>&gt; 学python</h4><p>初衷是因为感觉python这个脚本语言很强大，可以做各种辅助自己的工具。<br>最后，也实践了一些，发工作日报，删文件名空格，火车票查询，感觉也不错，<br>为什么有种大炮打苍蝇的感觉。。。<br>接下来，还要做一些更多好玩的东西。。。</p>\n<h4 id=\"gt-个人博客-www-lt-tree-com\"><a href=\"#gt-个人博客-www-lt-tree-com\" class=\"headerlink\" title=\"&gt; 个人博客  www.lt-tree.com\"></a>&gt; 个人博客  <a href=\"http://www.lt-tree.com/\" target=\"_blank\" rel=\"noopener\">www.lt-tree.com</a></h4><p>用 hexo+Github 搭建了自己的个人博客。<br>现在，还没有腾出手好好研究，只是套了别人的模板。</p>\n<h4 id=\"gt-Unity\"><a href=\"#gt-Unity\" class=\"headerlink\" title=\"&gt; Unity\"></a>&gt; Unity</h4><p>学了一些Unity的东西。<br>简单的学习，起码如果换引擎，也不会手足无措。<br>以后，也可能转Unity了。。。<br>有点准备。</p>\n<p><br><br><br></p>\n<h3 id=\"接下来\"><a href=\"#接下来\" class=\"headerlink\" title=\"接下来\"></a><strong>接下来</strong></h3><p>2017年，<br>第一件想做的事就是 —— 减肥。<br>曾经不怎么重视体重，<br>晚上学习，嘴巴闲不下来，<br>结果现在越来越严重了。<br>是时候该重视一下了，<br>健康，是革命的本钱嘛！</p>\n<p>第二件事，读更多的书。<br>技术书籍可能不会读很多吧，<br>毕竟，有些东西等到出书，可能都被淘汰了。<br>主要想读更多的非专业技术书籍，<br>比如去年读的《活着》、《生死疲劳》等，<br>当然，还要扩展其他类别的。<br>你不知道下一款游戏是什么类型的，多扩充一下自己知识体系还是很好的。</p>\n<p>最后一件事，老生常谈的 —— 学习。<br>互联网这个行业，原地踏步就是退步。<br>还是要一直学下去，<br>学还要有选择的学，不能瞎学。</p>\n<p><br></p>\n<hr>\n<p><br></p>\n<p>最后，<br>大学四年，没走偏。<br>毕业以后，没走偏。<br>2017，继续掌舵前行，<br>目标，6点钟方向，出发！</p>\n<h6 id=\"等等，为什么是6点钟？-提示：卯时\"><a href=\"#等等，为什么是6点钟？-提示：卯时\" class=\"headerlink\" title=\"等等，为什么是6点钟？  提示：卯时\"></a>等等，为什么是6点钟？  提示：卯时</h6>"},{"title":"Go环境搭建小记","date":"2017-03-23T14:00:00.000Z","_content":"\n----------\n\nGo环境搭建\nMac + Go1.7 + VSCode1.8\n\n\n<!-- more -->\n<br/>\n\n由于工作原因，需要学习一下Go。\n其实，我一直就对这个语言挺感兴趣的。\n虽说技多不压身，但贪多嚼不烂；本来想着嚼烂了客户端，再去学一学Go。\n没关系，先提前了解一下吧。\n<br/>\n这个语言，对新手真是不友好到极点。\n搭环境废了很大功夫。\n\n先列一下我的环境：\nMac系统 - Go 1.7 - VSCode 1.8\n（ IDE为什么选择VSCode？VSCode优点可以自行Google ）\n\n<br/>\n\n### Go的设置\n先把Go下载，然后安装到Mac。\n然后需要配置一下环境变量\n\n- GOROOT\n这个是你Go安装到的位置，一般在  /usr/local/go\n- GOPATH\n这个是你工作区路径，一般在自建的文件夹下（这个自建的文件夹下要有3个子文件夹[src、pkg、bin]）\n- GOBIN（选配）\n工作区路径下的bin文件夹（**路径唯一**）\n\n当时这块就混淆了一下。\n因为Go是支持多个工作区域的，后面我们要为Go下载一系列依赖包（就是在命令行用 go get 获得的一堆东西），如果都放在一个工作区域，就会有些混乱。\n所以，很多人就建立两个区域，一个放依赖包，一个用来放自己平时的东西。\n这时候，环境变量上就要有多个区域，Mac用 ':' 来区隔。（依赖包默认下载到第一个工作区域）\n\n在命令行下：\n\n1. 打开配置（`vim .bash_profile`） 开始搭Go环境。\n2. `export GOPATH=\"/Users/你的用户名/依赖包目录:/Users/你的用户名/工作区目录\"`\n依赖包默认下载到GOPATH的第一个目录下，所以依赖包目录要放在第一个，然后用':'分隔\n`export PATH=$PATH:${GOPATH//://bin:}/bin`\n如果设置GOBIN，GOBIN只能设置一个路径，但是你可以将每个GOPATH下的bin添加到PATH中\n`export PATH=$PATH:$GOPATH`\n路径加入到PATH\n3. 保存退出，然后重启配置（source .bash_profile)\n4. 输入 go env 看看Go的环境变量\n\n*PS: 关于GOBIN：go install编译存放路径。不允许设置多个路径。可以为空。为空时则遵循“约定优于配置”原则，可执行文件放在各自GOPATH目录的bin文件夹中（前提是：package main的main函数文件不能直接放到GOPATH的src下面。)*\n\n<br/>\n\n### VSCode的配置\n下载VSCode，然后在左侧小图标的最下面那个扩展选项中，搜索Go，进行下载(一般会搜索到两个go 和 Go，我下载的是第二个Go)。\n接下来，要下载一系列的依赖包。\n\n\n##### 1. 打开命令行，分别输入以下命令进行下载：\n\n```\ngo get -u -v github.com/nsf/gocode\ngo get -u -v github.com/rogpeppe/godef\ngo get -u -v github.com/golang/lint/golint\ngo get -u -v github.com/lukehoban/go-outline\ngo get -u -v sourcegraph.com/sqs/goreturns\ngo get -u -v golang.org/x/tools/cmd/gorename\ngo get -u -v github.com/tpng/gopkgs\ngo get -u -v golang.org/x/tools/cmd/guru\n```\n\n这一步，需要  科学上网工具  的支持，而且有时候，你有科学上网工具的支持都不顶用。\n本质上讲，以gocode为例，它将gocode相关文件下载到src，然后将它编译生成可执行文件，将可执行文件放到bin目录下。\n所以，可以直接去github上下载下来，然后自己编译一下，将生成的可执行文件放到bin目录下。\n\n##### 2. 配置VSCode相关\n主要是 settings.json 与 launch.json\n\n如果你配置了 GOPATH、GOROOT ，就不需要配置相应的setting.json。\n（进入方法是 code -> 首选项 -> 用户设置）\n\n打开VSCode，选择你的工作区域文件夹，然后在编辑配置文件。（不选文件夹不能配置）\n进入方法是 code -> 首选项 -> 工作区设置\n\n主要修改program字段: `program: \"${workspaceRoot}\"`\n如果你的文件，比如test.go 放在src下就： `program: \"${workspaceRoot}/src\"`\n\n<br/>\n\n### 让Mac 支持 VSCode调试功能\n英语原文：  [>这里<](https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md)\n\n<br/>\n简单翻译一下步骤：\n1.  创建一个自签名证书\n\t找到钥匙串访问，（ 证书助理 -> 创建证书（身份类型：自签名证书，证书类型：代码签名，勾选 覆盖这些默认值） -> 继续到最后，指定用于该证书的位置: 系统 ）\n2.  设定信任属性\n\t重启系统后，找到自己创建的证书，在 （ 显示简介 -> 信任 -> 代码签名 ） 选择 （ 始终信任 ）\n3.  重新编译dlv文件\n\t打开命令行，进入依赖包所处的工作区: `src/github.com/derekparker/delve`\n\t如果你的Go版本是1.5，则运行： `GO15VENDOREXPERIMENT=1 CERT=你创建的证书名称 make install`\n\t其他版本就直接：`CERT=你创建的证书名称 make install`\n\n\n<br/>\n\n### 总结小记。\n终于折腾完了。\n花了好久时间，看了N多教程，但还是走了不少弯路。\n在 GOPATH、GOROOT理解上，在GOBIN路径唯一上，在创建签名证书处等等。\n所以，整理了一下这篇文章，希望对他人有所帮助。","source":"_posts/Go环境搭建小记.md","raw":"---\ntitle: Go环境搭建小记\ndate: 2017-03-23 22:00:00\ntags: [跟着学, Go]\n---\n\n----------\n\nGo环境搭建\nMac + Go1.7 + VSCode1.8\n\n\n<!-- more -->\n<br/>\n\n由于工作原因，需要学习一下Go。\n其实，我一直就对这个语言挺感兴趣的。\n虽说技多不压身，但贪多嚼不烂；本来想着嚼烂了客户端，再去学一学Go。\n没关系，先提前了解一下吧。\n<br/>\n这个语言，对新手真是不友好到极点。\n搭环境废了很大功夫。\n\n先列一下我的环境：\nMac系统 - Go 1.7 - VSCode 1.8\n（ IDE为什么选择VSCode？VSCode优点可以自行Google ）\n\n<br/>\n\n### Go的设置\n先把Go下载，然后安装到Mac。\n然后需要配置一下环境变量\n\n- GOROOT\n这个是你Go安装到的位置，一般在  /usr/local/go\n- GOPATH\n这个是你工作区路径，一般在自建的文件夹下（这个自建的文件夹下要有3个子文件夹[src、pkg、bin]）\n- GOBIN（选配）\n工作区路径下的bin文件夹（**路径唯一**）\n\n当时这块就混淆了一下。\n因为Go是支持多个工作区域的，后面我们要为Go下载一系列依赖包（就是在命令行用 go get 获得的一堆东西），如果都放在一个工作区域，就会有些混乱。\n所以，很多人就建立两个区域，一个放依赖包，一个用来放自己平时的东西。\n这时候，环境变量上就要有多个区域，Mac用 ':' 来区隔。（依赖包默认下载到第一个工作区域）\n\n在命令行下：\n\n1. 打开配置（`vim .bash_profile`） 开始搭Go环境。\n2. `export GOPATH=\"/Users/你的用户名/依赖包目录:/Users/你的用户名/工作区目录\"`\n依赖包默认下载到GOPATH的第一个目录下，所以依赖包目录要放在第一个，然后用':'分隔\n`export PATH=$PATH:${GOPATH//://bin:}/bin`\n如果设置GOBIN，GOBIN只能设置一个路径，但是你可以将每个GOPATH下的bin添加到PATH中\n`export PATH=$PATH:$GOPATH`\n路径加入到PATH\n3. 保存退出，然后重启配置（source .bash_profile)\n4. 输入 go env 看看Go的环境变量\n\n*PS: 关于GOBIN：go install编译存放路径。不允许设置多个路径。可以为空。为空时则遵循“约定优于配置”原则，可执行文件放在各自GOPATH目录的bin文件夹中（前提是：package main的main函数文件不能直接放到GOPATH的src下面。)*\n\n<br/>\n\n### VSCode的配置\n下载VSCode，然后在左侧小图标的最下面那个扩展选项中，搜索Go，进行下载(一般会搜索到两个go 和 Go，我下载的是第二个Go)。\n接下来，要下载一系列的依赖包。\n\n\n##### 1. 打开命令行，分别输入以下命令进行下载：\n\n```\ngo get -u -v github.com/nsf/gocode\ngo get -u -v github.com/rogpeppe/godef\ngo get -u -v github.com/golang/lint/golint\ngo get -u -v github.com/lukehoban/go-outline\ngo get -u -v sourcegraph.com/sqs/goreturns\ngo get -u -v golang.org/x/tools/cmd/gorename\ngo get -u -v github.com/tpng/gopkgs\ngo get -u -v golang.org/x/tools/cmd/guru\n```\n\n这一步，需要  科学上网工具  的支持，而且有时候，你有科学上网工具的支持都不顶用。\n本质上讲，以gocode为例，它将gocode相关文件下载到src，然后将它编译生成可执行文件，将可执行文件放到bin目录下。\n所以，可以直接去github上下载下来，然后自己编译一下，将生成的可执行文件放到bin目录下。\n\n##### 2. 配置VSCode相关\n主要是 settings.json 与 launch.json\n\n如果你配置了 GOPATH、GOROOT ，就不需要配置相应的setting.json。\n（进入方法是 code -> 首选项 -> 用户设置）\n\n打开VSCode，选择你的工作区域文件夹，然后在编辑配置文件。（不选文件夹不能配置）\n进入方法是 code -> 首选项 -> 工作区设置\n\n主要修改program字段: `program: \"${workspaceRoot}\"`\n如果你的文件，比如test.go 放在src下就： `program: \"${workspaceRoot}/src\"`\n\n<br/>\n\n### 让Mac 支持 VSCode调试功能\n英语原文：  [>这里<](https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md)\n\n<br/>\n简单翻译一下步骤：\n1.  创建一个自签名证书\n\t找到钥匙串访问，（ 证书助理 -> 创建证书（身份类型：自签名证书，证书类型：代码签名，勾选 覆盖这些默认值） -> 继续到最后，指定用于该证书的位置: 系统 ）\n2.  设定信任属性\n\t重启系统后，找到自己创建的证书，在 （ 显示简介 -> 信任 -> 代码签名 ） 选择 （ 始终信任 ）\n3.  重新编译dlv文件\n\t打开命令行，进入依赖包所处的工作区: `src/github.com/derekparker/delve`\n\t如果你的Go版本是1.5，则运行： `GO15VENDOREXPERIMENT=1 CERT=你创建的证书名称 make install`\n\t其他版本就直接：`CERT=你创建的证书名称 make install`\n\n\n<br/>\n\n### 总结小记。\n终于折腾完了。\n花了好久时间，看了N多教程，但还是走了不少弯路。\n在 GOPATH、GOROOT理解上，在GOBIN路径唯一上，在创建签名证书处等等。\n所以，整理了一下这篇文章，希望对他人有所帮助。","slug":"Go环境搭建小记","published":1,"updated":"2018-04-02T16:30:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp43e00030dueuibr8eek","content":"<hr>\n<p>Go环境搭建<br>Mac + Go1.7 + VSCode1.8</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>由于工作原因，需要学习一下Go。<br>其实，我一直就对这个语言挺感兴趣的。<br>虽说技多不压身，但贪多嚼不烂；本来想着嚼烂了客户端，再去学一学Go。<br>没关系，先提前了解一下吧。<br><br><br>这个语言，对新手真是不友好到极点。<br>搭环境废了很大功夫。</p>\n<p>先列一下我的环境：<br>Mac系统 - Go 1.7 - VSCode 1.8<br>（ IDE为什么选择VSCode？VSCode优点可以自行Google ）</p>\n<p><br></p>\n<h3 id=\"Go的设置\"><a href=\"#Go的设置\" class=\"headerlink\" title=\"Go的设置\"></a>Go的设置</h3><p>先把Go下载，然后安装到Mac。<br>然后需要配置一下环境变量</p>\n<ul>\n<li>GOROOT<br>这个是你Go安装到的位置，一般在  /usr/local/go</li>\n<li>GOPATH<br>这个是你工作区路径，一般在自建的文件夹下（这个自建的文件夹下要有3个子文件夹[src、pkg、bin]）</li>\n<li>GOBIN（选配）<br>工作区路径下的bin文件夹（<strong>路径唯一</strong>）</li>\n</ul>\n<p>当时这块就混淆了一下。<br>因为Go是支持多个工作区域的，后面我们要为Go下载一系列依赖包（就是在命令行用 go get 获得的一堆东西），如果都放在一个工作区域，就会有些混乱。<br>所以，很多人就建立两个区域，一个放依赖包，一个用来放自己平时的东西。<br>这时候，环境变量上就要有多个区域，Mac用 ‘:’ 来区隔。（依赖包默认下载到第一个工作区域）</p>\n<p>在命令行下：</p>\n<ol>\n<li>打开配置（<code>vim .bash_profile</code>） 开始搭Go环境。</li>\n<li><code>export GOPATH=&quot;/Users/你的用户名/依赖包目录:/Users/你的用户名/工作区目录&quot;</code><br>依赖包默认下载到GOPATH的第一个目录下，所以依赖包目录要放在第一个，然后用’:’分隔<br><code>export PATH=$PATH:${GOPATH//://bin:}/bin</code><br>如果设置GOBIN，GOBIN只能设置一个路径，但是你可以将每个GOPATH下的bin添加到PATH中<br><code>export PATH=$PATH:$GOPATH</code><br>路径加入到PATH</li>\n<li>保存退出，然后重启配置（source .bash_profile)</li>\n<li>输入 go env 看看Go的环境变量</li>\n</ol>\n<p><em>PS: 关于GOBIN：go install编译存放路径。不允许设置多个路径。可以为空。为空时则遵循“约定优于配置”原则，可执行文件放在各自GOPATH目录的bin文件夹中（前提是：package main的main函数文件不能直接放到GOPATH的src下面。)</em></p>\n<p><br></p>\n<h3 id=\"VSCode的配置\"><a href=\"#VSCode的配置\" class=\"headerlink\" title=\"VSCode的配置\"></a>VSCode的配置</h3><p>下载VSCode，然后在左侧小图标的最下面那个扩展选项中，搜索Go，进行下载(一般会搜索到两个go 和 Go，我下载的是第二个Go)。<br>接下来，要下载一系列的依赖包。</p>\n<h5 id=\"1-打开命令行，分别输入以下命令进行下载：\"><a href=\"#1-打开命令行，分别输入以下命令进行下载：\" class=\"headerlink\" title=\"1. 打开命令行，分别输入以下命令进行下载：\"></a>1. 打开命令行，分别输入以下命令进行下载：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v github.com/nsf/gocode</span><br><span class=\"line\">go get -u -v github.com/rogpeppe/godef</span><br><span class=\"line\">go get -u -v github.com/golang/lint/golint</span><br><span class=\"line\">go get -u -v github.com/lukehoban/go-outline</span><br><span class=\"line\">go get -u -v sourcegraph.com/sqs/goreturns</span><br><span class=\"line\">go get -u -v golang.org/x/tools/cmd/gorename</span><br><span class=\"line\">go get -u -v github.com/tpng/gopkgs</span><br><span class=\"line\">go get -u -v golang.org/x/tools/cmd/guru</span><br></pre></td></tr></table></figure>\n<p>这一步，需要  科学上网工具  的支持，而且有时候，你有科学上网工具的支持都不顶用。<br>本质上讲，以gocode为例，它将gocode相关文件下载到src，然后将它编译生成可执行文件，将可执行文件放到bin目录下。<br>所以，可以直接去github上下载下来，然后自己编译一下，将生成的可执行文件放到bin目录下。</p>\n<h5 id=\"2-配置VSCode相关\"><a href=\"#2-配置VSCode相关\" class=\"headerlink\" title=\"2. 配置VSCode相关\"></a>2. 配置VSCode相关</h5><p>主要是 settings.json 与 launch.json</p>\n<p>如果你配置了 GOPATH、GOROOT ，就不需要配置相应的setting.json。<br>（进入方法是 code -&gt; 首选项 -&gt; 用户设置）</p>\n<p>打开VSCode，选择你的工作区域文件夹，然后在编辑配置文件。（不选文件夹不能配置）<br>进入方法是 code -&gt; 首选项 -&gt; 工作区设置</p>\n<p>主要修改program字段: <code>program: &quot;${workspaceRoot}&quot;</code><br>如果你的文件，比如test.go 放在src下就： <code>program: &quot;${workspaceRoot}/src&quot;</code></p>\n<p><br></p>\n<h3 id=\"让Mac-支持-VSCode调试功能\"><a href=\"#让Mac-支持-VSCode调试功能\" class=\"headerlink\" title=\"让Mac 支持 VSCode调试功能\"></a>让Mac 支持 VSCode调试功能</h3><p>英语原文：  <a href=\"https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md\" target=\"_blank\" rel=\"noopener\">&gt;这里&lt;</a></p>\n<p><br><br>简单翻译一下步骤：</p>\n<ol>\n<li>创建一个自签名证书<br>找到钥匙串访问，（ 证书助理 -&gt; 创建证书（身份类型：自签名证书，证书类型：代码签名，勾选 覆盖这些默认值） -&gt; 继续到最后，指定用于该证书的位置: 系统 ）</li>\n<li>设定信任属性<br>重启系统后，找到自己创建的证书，在 （ 显示简介 -&gt; 信任 -&gt; 代码签名 ） 选择 （ 始终信任 ）</li>\n<li>重新编译dlv文件<br>打开命令行，进入依赖包所处的工作区: <code>src/github.com/derekparker/delve</code><br>如果你的Go版本是1.5，则运行： <code>GO15VENDOREXPERIMENT=1 CERT=你创建的证书名称 make install</code><br>其他版本就直接：<code>CERT=你创建的证书名称 make install</code></li>\n</ol>\n<p><br></p>\n<h3 id=\"总结小记。\"><a href=\"#总结小记。\" class=\"headerlink\" title=\"总结小记。\"></a>总结小记。</h3><p>终于折腾完了。<br>花了好久时间，看了N多教程，但还是走了不少弯路。<br>在 GOPATH、GOROOT理解上，在GOBIN路径唯一上，在创建签名证书处等等。<br>所以，整理了一下这篇文章，希望对他人有所帮助。</p>\n","site":{"data":{}},"excerpt":"<hr>\n<p>Go环境搭建<br>Mac + Go1.7 + VSCode1.8</p>","more":"<p><br></p>\n<p>由于工作原因，需要学习一下Go。<br>其实，我一直就对这个语言挺感兴趣的。<br>虽说技多不压身，但贪多嚼不烂；本来想着嚼烂了客户端，再去学一学Go。<br>没关系，先提前了解一下吧。<br><br><br>这个语言，对新手真是不友好到极点。<br>搭环境废了很大功夫。</p>\n<p>先列一下我的环境：<br>Mac系统 - Go 1.7 - VSCode 1.8<br>（ IDE为什么选择VSCode？VSCode优点可以自行Google ）</p>\n<p><br></p>\n<h3 id=\"Go的设置\"><a href=\"#Go的设置\" class=\"headerlink\" title=\"Go的设置\"></a>Go的设置</h3><p>先把Go下载，然后安装到Mac。<br>然后需要配置一下环境变量</p>\n<ul>\n<li>GOROOT<br>这个是你Go安装到的位置，一般在  /usr/local/go</li>\n<li>GOPATH<br>这个是你工作区路径，一般在自建的文件夹下（这个自建的文件夹下要有3个子文件夹[src、pkg、bin]）</li>\n<li>GOBIN（选配）<br>工作区路径下的bin文件夹（<strong>路径唯一</strong>）</li>\n</ul>\n<p>当时这块就混淆了一下。<br>因为Go是支持多个工作区域的，后面我们要为Go下载一系列依赖包（就是在命令行用 go get 获得的一堆东西），如果都放在一个工作区域，就会有些混乱。<br>所以，很多人就建立两个区域，一个放依赖包，一个用来放自己平时的东西。<br>这时候，环境变量上就要有多个区域，Mac用 ‘:’ 来区隔。（依赖包默认下载到第一个工作区域）</p>\n<p>在命令行下：</p>\n<ol>\n<li>打开配置（<code>vim .bash_profile</code>） 开始搭Go环境。</li>\n<li><code>export GOPATH=&quot;/Users/你的用户名/依赖包目录:/Users/你的用户名/工作区目录&quot;</code><br>依赖包默认下载到GOPATH的第一个目录下，所以依赖包目录要放在第一个，然后用’:’分隔<br><code>export PATH=$PATH:${GOPATH//://bin:}/bin</code><br>如果设置GOBIN，GOBIN只能设置一个路径，但是你可以将每个GOPATH下的bin添加到PATH中<br><code>export PATH=$PATH:$GOPATH</code><br>路径加入到PATH</li>\n<li>保存退出，然后重启配置（source .bash_profile)</li>\n<li>输入 go env 看看Go的环境变量</li>\n</ol>\n<p><em>PS: 关于GOBIN：go install编译存放路径。不允许设置多个路径。可以为空。为空时则遵循“约定优于配置”原则，可执行文件放在各自GOPATH目录的bin文件夹中（前提是：package main的main函数文件不能直接放到GOPATH的src下面。)</em></p>\n<p><br></p>\n<h3 id=\"VSCode的配置\"><a href=\"#VSCode的配置\" class=\"headerlink\" title=\"VSCode的配置\"></a>VSCode的配置</h3><p>下载VSCode，然后在左侧小图标的最下面那个扩展选项中，搜索Go，进行下载(一般会搜索到两个go 和 Go，我下载的是第二个Go)。<br>接下来，要下载一系列的依赖包。</p>\n<h5 id=\"1-打开命令行，分别输入以下命令进行下载：\"><a href=\"#1-打开命令行，分别输入以下命令进行下载：\" class=\"headerlink\" title=\"1. 打开命令行，分别输入以下命令进行下载：\"></a>1. 打开命令行，分别输入以下命令进行下载：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v github.com/nsf/gocode</span><br><span class=\"line\">go get -u -v github.com/rogpeppe/godef</span><br><span class=\"line\">go get -u -v github.com/golang/lint/golint</span><br><span class=\"line\">go get -u -v github.com/lukehoban/go-outline</span><br><span class=\"line\">go get -u -v sourcegraph.com/sqs/goreturns</span><br><span class=\"line\">go get -u -v golang.org/x/tools/cmd/gorename</span><br><span class=\"line\">go get -u -v github.com/tpng/gopkgs</span><br><span class=\"line\">go get -u -v golang.org/x/tools/cmd/guru</span><br></pre></td></tr></table></figure>\n<p>这一步，需要  科学上网工具  的支持，而且有时候，你有科学上网工具的支持都不顶用。<br>本质上讲，以gocode为例，它将gocode相关文件下载到src，然后将它编译生成可执行文件，将可执行文件放到bin目录下。<br>所以，可以直接去github上下载下来，然后自己编译一下，将生成的可执行文件放到bin目录下。</p>\n<h5 id=\"2-配置VSCode相关\"><a href=\"#2-配置VSCode相关\" class=\"headerlink\" title=\"2. 配置VSCode相关\"></a>2. 配置VSCode相关</h5><p>主要是 settings.json 与 launch.json</p>\n<p>如果你配置了 GOPATH、GOROOT ，就不需要配置相应的setting.json。<br>（进入方法是 code -&gt; 首选项 -&gt; 用户设置）</p>\n<p>打开VSCode，选择你的工作区域文件夹，然后在编辑配置文件。（不选文件夹不能配置）<br>进入方法是 code -&gt; 首选项 -&gt; 工作区设置</p>\n<p>主要修改program字段: <code>program: &quot;${workspaceRoot}&quot;</code><br>如果你的文件，比如test.go 放在src下就： <code>program: &quot;${workspaceRoot}/src&quot;</code></p>\n<p><br></p>\n<h3 id=\"让Mac-支持-VSCode调试功能\"><a href=\"#让Mac-支持-VSCode调试功能\" class=\"headerlink\" title=\"让Mac 支持 VSCode调试功能\"></a>让Mac 支持 VSCode调试功能</h3><p>英语原文：  <a href=\"https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md\" target=\"_blank\" rel=\"noopener\">&gt;这里&lt;</a></p>\n<p><br><br>简单翻译一下步骤：</p>\n<ol>\n<li>创建一个自签名证书<br>找到钥匙串访问，（ 证书助理 -&gt; 创建证书（身份类型：自签名证书，证书类型：代码签名，勾选 覆盖这些默认值） -&gt; 继续到最后，指定用于该证书的位置: 系统 ）</li>\n<li>设定信任属性<br>重启系统后，找到自己创建的证书，在 （ 显示简介 -&gt; 信任 -&gt; 代码签名 ） 选择 （ 始终信任 ）</li>\n<li>重新编译dlv文件<br>打开命令行，进入依赖包所处的工作区: <code>src/github.com/derekparker/delve</code><br>如果你的Go版本是1.5，则运行： <code>GO15VENDOREXPERIMENT=1 CERT=你创建的证书名称 make install</code><br>其他版本就直接：<code>CERT=你创建的证书名称 make install</code></li>\n</ol>\n<p><br></p>\n<h3 id=\"总结小记。\"><a href=\"#总结小记。\" class=\"headerlink\" title=\"总结小记。\"></a>总结小记。</h3><p>终于折腾完了。<br>花了好久时间，看了N多教程，但还是走了不少弯路。<br>在 GOPATH、GOROOT理解上，在GOBIN路径唯一上，在创建签名证书处等等。<br>所以，整理了一下这篇文章，希望对他人有所帮助。</p>"},{"title":"cocos2d-x 接入 GameCenter 排行榜与成就","date":"2017-04-29T04:13:11.000Z","_content":"\ncocos2d-x 接入 GameCenter 排行榜与成就\n[mac - XCode 8.3 - cocos2d-x lua]\n\n\n<!-- more -->\n### 前言\n\n要求接入GameCenter的排行榜和成就。\n\nGameCenter 是苹果推出的一个社交平台，\n它主要提供了以下几个功能：\n- 排行榜\n- 成就\n- 挑战\n而且，苹果同时提供了GameKit框架来让GameCenter更易集成。\n\n\n可能是因为GameCenter的热度过去了吧，相关的东西都比较早期。\n整理总结了一下，希望对他人有所帮助。\n\n我的环境：\n\nmac - XCode 8.3 - cocos2d-x lua\n\n<br/>\n<br/>\n<br/>\n\n### 1. 公共的处理\n<br/>\n\n##### 1.1 配置 iTunes Connect 排行榜与成就的位置。\n登录iTunes Connect, 找到要处理的APP。\n选择 功能->GameCenter\n可以看到三个大项：\n- 移动群组\n- 排行榜\n- 成就\n\n<br/>\n\n##### 1.2 添加GameKit框架\n打开项目工程，将 Capabilities 的 GameCenter 打开。\n这样，XCode就会将GameKit框架加到我们的工程中。\n\n<br/>\n\n##### 1.3 登录GameCenter\n登录GameCenter:  【这个步骤在我们加载完游戏时进行即可】\n\n\n        -(void) authenticateLocalPlayer {\n            // 获取本地用户\n            GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];\n        \n            // 认证登录\n            localPlayer.authenticateHandler = ^(UIViewController *viewController, NSError *error) {\n                [self setLastError:error];\n        \n                if (localPlayer.authenticated) {                        // 本地用户已经登录\n                    _gameCenterFeaturesEnabled = YES;                   // 此变量是判断是否已经登录上GameCenter\n                } else if(viewController) {                             // 没有用户，弹出登录界面\n                    [self presentViewController:viewController];        \n                } else {                                                // 没有用户，并且没有登录界面\n                    _gameCenterFeaturesEnabled = NO;\n                }\n            };\n        }\n\n\n<br/>\n\n##### 1.4 关于lua调用object-c\n因为我的环境是 cocos2d-x lua，所以，用通过lua来调用object-c。\ncocos2d-x其实已经有相关的调用结构 —— LuaObjcBridge, 可以直接用 callStaticMethod来调用：\n\n\n        LuaObjcBridge.callStaticMethod(methodName className,args)\n\n\n<br/>\n\n##### 1.5 GameKit辅助处理类\nGameKitHelper.h:\n\n\n\n        #import <GameKit/GameKit.h>\n        #import \"cocos2d.h\"\n        \n        // 方便lua调用\n        #include \"CCLuaEngine.h\"\n        #include \"CCLuaBridge.h\"\n        \n        @interface GameKitHelper : NSObject\n        // 处理错误\n        @property (nonatomic, readonly) NSError* lastError;\n        \n        // 初始化\n        + (id) sharedGameKitHelper;\n        \n        // Player authentication, info\n        -(void) authenticateLocalPlayer;\n        @end\n\n\n\nGameKitHelper.mm\n\n        #import \"GameKitHelper.h\"\n        \n        @interface GameKitHelper ()\n                <GKGameCenterControllerDelegate> {\n            BOOL _gameCenterFeaturesEnabled;\n        }\n        @end\n        \n        @implementation GameKitHelper\n        \n        #pragma mark Singleton stuff\n        \n        +(id) sharedGameKitHelper {\n            static GameKitHelper *sharedGameKitHelper;\n            static dispatch_once_t onceToken;\n            dispatch_once(&onceToken, ^{\n                sharedGameKitHelper =\n                        [[GameKitHelper alloc] init];\n            });\n            return sharedGameKitHelper;\n        }\n        \n        #pragma mark Player Authentication\n        \n        -(void) authenticateLocalPlayer {\n            GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];\n        \n            localPlayer.authenticateHandler = ^(UIViewController *viewController, NSError *error) {\n                [self setLastError:error];\n                if (localPlayer.authenticated) {\n                    _gameCenterFeaturesEnabled = YES;\n                } else if(viewController) {\n                    [self presentViewController:viewController];\n                } else {\n                    _gameCenterFeaturesEnabled = NO;\n                }\n            };\n        }\n        \n        #pragma mark Property setters\n        \n        -(void) setLastError:(NSError*)error {\n            _lastError = [error copy];\n            if (_lastError) {\n                NSLog(@\"GameCenter -- setLastError -- ERROR: %@\", [[_lastError userInfo] \n                  description]);\n            }\n        }\n        \n        #pragma mark UIViewController stuff\n        \n        -(UIViewController*) getRootViewController {\n            return [UIApplication \n              sharedApplication].keyWindow.rootViewController;\n        }\n        \n        -(void)presentViewController:(UIViewController*)vc {\n            UIViewController* rootVC = [self getRootViewController];\n            [rootVC presentViewController:vc animated:YES \n              completion:nil];\n        }\n        \n        @end\n\n\n\n<br/>\n\n##### 1.6 登录GameCenter时机\n由你决定，可以放在 AppDelegate 中 applicationDidFinishLaunching时。\n\n<br/>\n<br/>\n<br/>\n\n### 2. 关于排行榜\n<br/>\n\n#### 2.1 配置 iTunes Connect\n\n在iTunes Connect 找到 排行榜。\n\n简单说一下流程吧：\n配置排行榜的结构，然后我们在游戏中将数据上传到这个结构，最后显示到GameCenter中。\n\n排行榜分为 单个排行榜 与 组合排行榜。(顾名思义，区别就不需要解释了吧？)\n里面需要配置的相应属性，可参考本文末尾的关于。\n\n要注意两点：\n1. 排行榜ID，因为只有它是在创建后无法更改的。（而且，要记住这个ID，因为后面程序要用到）\n2. 排行榜只要发布了（经过审批发布），就无法删除了。\n\n接下来就看属性去配置它吧。\n\n<br/>\n<br/>\n\n#### 2.2 XCode工程配置\n\n模拟这个流程：登录GameCenter -> 提交排行榜数据 ( -> 如果需要，弹出GameCenter排行榜)\n\n\n提交排行榜数据:\n\n\n        -(void) submitScore:(int64_t)score category:(NSString*)category {       // 这里两个参数 score是数据， category是ID，就是我们创建排行榜以后，不可更改的那个ID。\n            // 检查是否在登录状态\n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitScore -- Player not authenticated\");\n                return;\n            }\n        \n            // 创建一个分数对象\n            GKScore* gkScore = [[GKScore alloc] initWithCategory:category];\n        \n            // 设置分数对象的值\n            gkScore.value = score;\n        \n            // 向GameCenter提交数据\n            [gkScore reportScoreWithCompletionHandler: ^(NSError* error)    {\n                [self setLastError:error];\n            }];\n        }\n\n\n\n<br/>\n<br/>\n\n#### 2.3 实践使用\n\n在公用部分，已经添加了GameCenter的登录验证相关的东西了。\n\n* 将排行榜数据提交的函数\n\nGameKitHelper.h\n\n\n        -(void) submitScore:(int64_t)score category:(NSString*)category;\n\n\nGameKitHelper.mm\n\n\n        -(void) submitScore:(int64_t)score category:(NSString*)category {\n        \n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitScore -- Player not authenticated\");\n                return;\n            }\n        \n            GKScore* gkScore = [[GKScore alloc] initWithCategory:category];\n        \n            gkScore.value = score;\n        \n            [gkScore reportScoreWithCompletionHandler: ^(NSError* error)    {\n                [self setLastError:error];\n            }];\n        }\n\n\n* 给lua调用的函数\n\nGameKitHelper.h\n\n\n        +(void) getScore:(NSDictionary *)dict;\n\n\nGameKitHelper.mm\n\n\n        +(void) getScore:(NSDictionary *)dict {\n            NSString* rID = [dict objectForKey:@\"id\"];\n            int score = [[dict objectForKey:@\"score\"] intValue];\n            \n            [[GameKitHelper sharedGameKitHelper] submitScore:(int64_t)score category:rID];\n        }\n\n\n\n* lua调用\n\n\n        LuaObjcBridge.callStaticMethod(\"GameKitHelper\", \"getScore\", {id = 排行榜的ID, score = 分数值})\n\n\n\n<br/>\n<br/>\n<br/>\n\n### 3. 关于成就\n\n<br/>\n\n#### 3.1 配置 iTunes Connect\n\n还是老位置，之前看的排行榜，这次点成就。\n还是老样子，成就的ID，创建后不可修改，成就发布后不可删除。\n但是，成就还要多一点，就是每个游戏总共有2000点成就分（为什么是2000？你问老乔去。。），你可以给每个成就分配一些成就分。\n成就还有是否隐藏的选项，但是它的隐藏并不是看不到这个成就了，而是有一个成就名称为隐藏的成就显示在列表中。\n还有，它的进度是一个顺时针扇形来表示，就是你的图标刚开始是被遮掩的，随着进度的增加，会逐渐显现出图标，方向是顺时针扇形。\n\n其他相关参数，可参考本文末尾的关于。\n\n\n<br/>\n<br/>\n\n#### 3.2 XCode工程配置\n\n流程与排行榜的一样，但是这次提交的不是分数了，而是成就完成的百分比。\n\n\n        // 提交成就数据\n        -(void) submitAchievment:(NSString *)identifier percent:(double) percentComplete {          // identifier 成就ID, percentComplete: 成就完成百分比\n            // 判断登录认证\n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitAchievment -- Player not authenticated\");\n                return;\n            }\n        \n            // 创建成就结构，注入成就ID\n            GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  \n            \n            // 设置成就百分比\n            [achievement setPercentComplete:percentComplete];  \n            \n            // 提交成就数据\n            [achievement reportAchievementWithCompletionHandler:^(NSError *error) {  \n                if(error != nil){  \n                    NSLog(@\"GameCenter -- submitAchievment --  error:%@\", [error localizedDescription]);  \n                }else{  \n                    NSLog(@\"GameCenter -- submitAchievment --  提交成就成功\");  \n                }  \n            }];  \n        } \n\n\n\n<br/>\n<br/>\n\n#### 3.3 实践使用\n\n同排行榜一样。\n\n\n* 将成就数据提交的函数\n\nGameKitHelper.h\n\n\n        - (void)submitAchievment:(NSString *)identifier percent:(double)percentComplete;\n\n\nGameKitHelper.mm\n\n\n        -(void) submitAchievment:(NSString *)identifier percent:(double) percentComplete {\n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitAchievment -- Player not authenticated\");\n                return;\n            }\n        \n            GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  \n              \n            [achievement setPercentComplete:percentComplete];  \n              \n            [achievement reportAchievementWithCompletionHandler:^(NSError *error) {  \n                if(error != nil){  \n                    NSLog(@\"GameCenter -- submitAchievment --  error:%@\", [error localizedDescription]);  \n                }else{  \n                    NSLog(@\"GameCenter -- submitAchievment --  提交成就成功\");  \n                }  \n            }];  \n        } \n\n\n* 给lua调用的函数\n\nGameKitHelper.h\n\n\n        +(void) getAchievement:(NSDictionary *)dict;\n\n\nGameKitHelper.mm\n\n\n        +(void) getAchievement:(NSDictionary *)dict {\n            NSString* aID = [dict objectForKey:@\"id\"];\n            double percent = [[dict objectForKey:@\"percent\"] doubleValue];\n            \n            [[GameKitHelper sharedGameKitHelper] submitAchievment:(NSString *)aID percent:percent];\n        }\n\n\n\n* lua调用\n\n        \n        LuaObjcBridge.callStaticMethod(\"GameKitHelper\", \"getAchievement\", {id = 成就ID, percent = 成就百分比})\n\n\n\n<br/>\n<br/>\n<br/>\n\n### 4. 最后\nGameCenter还是挺好的一个东西。\n它还有一个好友挑战功能，但这个主要适合之前 Flappy Bird，别踩白块 那些游戏来弄。\n或许，这也是这个平台没落了的原因吧。\n\n\n<br/>\n<br/>\n<br/>\n\n### 关于\n\n- [关于 LuaObjcBridge](http://www.cocos2d-x.org/reference/native-cpp/V3.5/d6/d59/classcocos2d_1_1_lua_objc_bridge.html)\n- [关于 iTunes Connect](https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide_zh_CN/Chapters/About.html#//apple_ref/doc/uid/TP40016325-CH1-SW1)\n- [中文版 排行榜及成就 配置属性](https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectGameCenter_Guide_SCh/Chapters/Leaderboards.html#//apple_ref/doc/uid/TP40014490-CH2-SW1)\n\n\n<br/>\n<br/>\n<br/>\n\n### 参考\n\n- https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6\n- http://www.jianshu.com/p/4279f84d8340\n- http://blog.csdn.net/shenjie12345678/article/details/45025403/\n","source":"_posts/cocos2d-x 接入 GameCenter 排行榜与成就.md","raw":"---\ntitle: cocos2d-x 接入 GameCenter 排行榜与成就\ndate: 2017-04-29 12:13:11\ntags: [cocos2d, 想就做]\n---\n\ncocos2d-x 接入 GameCenter 排行榜与成就\n[mac - XCode 8.3 - cocos2d-x lua]\n\n\n<!-- more -->\n### 前言\n\n要求接入GameCenter的排行榜和成就。\n\nGameCenter 是苹果推出的一个社交平台，\n它主要提供了以下几个功能：\n- 排行榜\n- 成就\n- 挑战\n而且，苹果同时提供了GameKit框架来让GameCenter更易集成。\n\n\n可能是因为GameCenter的热度过去了吧，相关的东西都比较早期。\n整理总结了一下，希望对他人有所帮助。\n\n我的环境：\n\nmac - XCode 8.3 - cocos2d-x lua\n\n<br/>\n<br/>\n<br/>\n\n### 1. 公共的处理\n<br/>\n\n##### 1.1 配置 iTunes Connect 排行榜与成就的位置。\n登录iTunes Connect, 找到要处理的APP。\n选择 功能->GameCenter\n可以看到三个大项：\n- 移动群组\n- 排行榜\n- 成就\n\n<br/>\n\n##### 1.2 添加GameKit框架\n打开项目工程，将 Capabilities 的 GameCenter 打开。\n这样，XCode就会将GameKit框架加到我们的工程中。\n\n<br/>\n\n##### 1.3 登录GameCenter\n登录GameCenter:  【这个步骤在我们加载完游戏时进行即可】\n\n\n        -(void) authenticateLocalPlayer {\n            // 获取本地用户\n            GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];\n        \n            // 认证登录\n            localPlayer.authenticateHandler = ^(UIViewController *viewController, NSError *error) {\n                [self setLastError:error];\n        \n                if (localPlayer.authenticated) {                        // 本地用户已经登录\n                    _gameCenterFeaturesEnabled = YES;                   // 此变量是判断是否已经登录上GameCenter\n                } else if(viewController) {                             // 没有用户，弹出登录界面\n                    [self presentViewController:viewController];        \n                } else {                                                // 没有用户，并且没有登录界面\n                    _gameCenterFeaturesEnabled = NO;\n                }\n            };\n        }\n\n\n<br/>\n\n##### 1.4 关于lua调用object-c\n因为我的环境是 cocos2d-x lua，所以，用通过lua来调用object-c。\ncocos2d-x其实已经有相关的调用结构 —— LuaObjcBridge, 可以直接用 callStaticMethod来调用：\n\n\n        LuaObjcBridge.callStaticMethod(methodName className,args)\n\n\n<br/>\n\n##### 1.5 GameKit辅助处理类\nGameKitHelper.h:\n\n\n\n        #import <GameKit/GameKit.h>\n        #import \"cocos2d.h\"\n        \n        // 方便lua调用\n        #include \"CCLuaEngine.h\"\n        #include \"CCLuaBridge.h\"\n        \n        @interface GameKitHelper : NSObject\n        // 处理错误\n        @property (nonatomic, readonly) NSError* lastError;\n        \n        // 初始化\n        + (id) sharedGameKitHelper;\n        \n        // Player authentication, info\n        -(void) authenticateLocalPlayer;\n        @end\n\n\n\nGameKitHelper.mm\n\n        #import \"GameKitHelper.h\"\n        \n        @interface GameKitHelper ()\n                <GKGameCenterControllerDelegate> {\n            BOOL _gameCenterFeaturesEnabled;\n        }\n        @end\n        \n        @implementation GameKitHelper\n        \n        #pragma mark Singleton stuff\n        \n        +(id) sharedGameKitHelper {\n            static GameKitHelper *sharedGameKitHelper;\n            static dispatch_once_t onceToken;\n            dispatch_once(&onceToken, ^{\n                sharedGameKitHelper =\n                        [[GameKitHelper alloc] init];\n            });\n            return sharedGameKitHelper;\n        }\n        \n        #pragma mark Player Authentication\n        \n        -(void) authenticateLocalPlayer {\n            GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];\n        \n            localPlayer.authenticateHandler = ^(UIViewController *viewController, NSError *error) {\n                [self setLastError:error];\n                if (localPlayer.authenticated) {\n                    _gameCenterFeaturesEnabled = YES;\n                } else if(viewController) {\n                    [self presentViewController:viewController];\n                } else {\n                    _gameCenterFeaturesEnabled = NO;\n                }\n            };\n        }\n        \n        #pragma mark Property setters\n        \n        -(void) setLastError:(NSError*)error {\n            _lastError = [error copy];\n            if (_lastError) {\n                NSLog(@\"GameCenter -- setLastError -- ERROR: %@\", [[_lastError userInfo] \n                  description]);\n            }\n        }\n        \n        #pragma mark UIViewController stuff\n        \n        -(UIViewController*) getRootViewController {\n            return [UIApplication \n              sharedApplication].keyWindow.rootViewController;\n        }\n        \n        -(void)presentViewController:(UIViewController*)vc {\n            UIViewController* rootVC = [self getRootViewController];\n            [rootVC presentViewController:vc animated:YES \n              completion:nil];\n        }\n        \n        @end\n\n\n\n<br/>\n\n##### 1.6 登录GameCenter时机\n由你决定，可以放在 AppDelegate 中 applicationDidFinishLaunching时。\n\n<br/>\n<br/>\n<br/>\n\n### 2. 关于排行榜\n<br/>\n\n#### 2.1 配置 iTunes Connect\n\n在iTunes Connect 找到 排行榜。\n\n简单说一下流程吧：\n配置排行榜的结构，然后我们在游戏中将数据上传到这个结构，最后显示到GameCenter中。\n\n排行榜分为 单个排行榜 与 组合排行榜。(顾名思义，区别就不需要解释了吧？)\n里面需要配置的相应属性，可参考本文末尾的关于。\n\n要注意两点：\n1. 排行榜ID，因为只有它是在创建后无法更改的。（而且，要记住这个ID，因为后面程序要用到）\n2. 排行榜只要发布了（经过审批发布），就无法删除了。\n\n接下来就看属性去配置它吧。\n\n<br/>\n<br/>\n\n#### 2.2 XCode工程配置\n\n模拟这个流程：登录GameCenter -> 提交排行榜数据 ( -> 如果需要，弹出GameCenter排行榜)\n\n\n提交排行榜数据:\n\n\n        -(void) submitScore:(int64_t)score category:(NSString*)category {       // 这里两个参数 score是数据， category是ID，就是我们创建排行榜以后，不可更改的那个ID。\n            // 检查是否在登录状态\n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitScore -- Player not authenticated\");\n                return;\n            }\n        \n            // 创建一个分数对象\n            GKScore* gkScore = [[GKScore alloc] initWithCategory:category];\n        \n            // 设置分数对象的值\n            gkScore.value = score;\n        \n            // 向GameCenter提交数据\n            [gkScore reportScoreWithCompletionHandler: ^(NSError* error)    {\n                [self setLastError:error];\n            }];\n        }\n\n\n\n<br/>\n<br/>\n\n#### 2.3 实践使用\n\n在公用部分，已经添加了GameCenter的登录验证相关的东西了。\n\n* 将排行榜数据提交的函数\n\nGameKitHelper.h\n\n\n        -(void) submitScore:(int64_t)score category:(NSString*)category;\n\n\nGameKitHelper.mm\n\n\n        -(void) submitScore:(int64_t)score category:(NSString*)category {\n        \n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitScore -- Player not authenticated\");\n                return;\n            }\n        \n            GKScore* gkScore = [[GKScore alloc] initWithCategory:category];\n        \n            gkScore.value = score;\n        \n            [gkScore reportScoreWithCompletionHandler: ^(NSError* error)    {\n                [self setLastError:error];\n            }];\n        }\n\n\n* 给lua调用的函数\n\nGameKitHelper.h\n\n\n        +(void) getScore:(NSDictionary *)dict;\n\n\nGameKitHelper.mm\n\n\n        +(void) getScore:(NSDictionary *)dict {\n            NSString* rID = [dict objectForKey:@\"id\"];\n            int score = [[dict objectForKey:@\"score\"] intValue];\n            \n            [[GameKitHelper sharedGameKitHelper] submitScore:(int64_t)score category:rID];\n        }\n\n\n\n* lua调用\n\n\n        LuaObjcBridge.callStaticMethod(\"GameKitHelper\", \"getScore\", {id = 排行榜的ID, score = 分数值})\n\n\n\n<br/>\n<br/>\n<br/>\n\n### 3. 关于成就\n\n<br/>\n\n#### 3.1 配置 iTunes Connect\n\n还是老位置，之前看的排行榜，这次点成就。\n还是老样子，成就的ID，创建后不可修改，成就发布后不可删除。\n但是，成就还要多一点，就是每个游戏总共有2000点成就分（为什么是2000？你问老乔去。。），你可以给每个成就分配一些成就分。\n成就还有是否隐藏的选项，但是它的隐藏并不是看不到这个成就了，而是有一个成就名称为隐藏的成就显示在列表中。\n还有，它的进度是一个顺时针扇形来表示，就是你的图标刚开始是被遮掩的，随着进度的增加，会逐渐显现出图标，方向是顺时针扇形。\n\n其他相关参数，可参考本文末尾的关于。\n\n\n<br/>\n<br/>\n\n#### 3.2 XCode工程配置\n\n流程与排行榜的一样，但是这次提交的不是分数了，而是成就完成的百分比。\n\n\n        // 提交成就数据\n        -(void) submitAchievment:(NSString *)identifier percent:(double) percentComplete {          // identifier 成就ID, percentComplete: 成就完成百分比\n            // 判断登录认证\n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitAchievment -- Player not authenticated\");\n                return;\n            }\n        \n            // 创建成就结构，注入成就ID\n            GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  \n            \n            // 设置成就百分比\n            [achievement setPercentComplete:percentComplete];  \n            \n            // 提交成就数据\n            [achievement reportAchievementWithCompletionHandler:^(NSError *error) {  \n                if(error != nil){  \n                    NSLog(@\"GameCenter -- submitAchievment --  error:%@\", [error localizedDescription]);  \n                }else{  \n                    NSLog(@\"GameCenter -- submitAchievment --  提交成就成功\");  \n                }  \n            }];  \n        } \n\n\n\n<br/>\n<br/>\n\n#### 3.3 实践使用\n\n同排行榜一样。\n\n\n* 将成就数据提交的函数\n\nGameKitHelper.h\n\n\n        - (void)submitAchievment:(NSString *)identifier percent:(double)percentComplete;\n\n\nGameKitHelper.mm\n\n\n        -(void) submitAchievment:(NSString *)identifier percent:(double) percentComplete {\n            if (!_gameCenterFeaturesEnabled)    {\n                NSLog(@\"GameCenter -- submitAchievment -- Player not authenticated\");\n                return;\n            }\n        \n            GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  \n              \n            [achievement setPercentComplete:percentComplete];  \n              \n            [achievement reportAchievementWithCompletionHandler:^(NSError *error) {  \n                if(error != nil){  \n                    NSLog(@\"GameCenter -- submitAchievment --  error:%@\", [error localizedDescription]);  \n                }else{  \n                    NSLog(@\"GameCenter -- submitAchievment --  提交成就成功\");  \n                }  \n            }];  \n        } \n\n\n* 给lua调用的函数\n\nGameKitHelper.h\n\n\n        +(void) getAchievement:(NSDictionary *)dict;\n\n\nGameKitHelper.mm\n\n\n        +(void) getAchievement:(NSDictionary *)dict {\n            NSString* aID = [dict objectForKey:@\"id\"];\n            double percent = [[dict objectForKey:@\"percent\"] doubleValue];\n            \n            [[GameKitHelper sharedGameKitHelper] submitAchievment:(NSString *)aID percent:percent];\n        }\n\n\n\n* lua调用\n\n        \n        LuaObjcBridge.callStaticMethod(\"GameKitHelper\", \"getAchievement\", {id = 成就ID, percent = 成就百分比})\n\n\n\n<br/>\n<br/>\n<br/>\n\n### 4. 最后\nGameCenter还是挺好的一个东西。\n它还有一个好友挑战功能，但这个主要适合之前 Flappy Bird，别踩白块 那些游戏来弄。\n或许，这也是这个平台没落了的原因吧。\n\n\n<br/>\n<br/>\n<br/>\n\n### 关于\n\n- [关于 LuaObjcBridge](http://www.cocos2d-x.org/reference/native-cpp/V3.5/d6/d59/classcocos2d_1_1_lua_objc_bridge.html)\n- [关于 iTunes Connect](https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide_zh_CN/Chapters/About.html#//apple_ref/doc/uid/TP40016325-CH1-SW1)\n- [中文版 排行榜及成就 配置属性](https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectGameCenter_Guide_SCh/Chapters/Leaderboards.html#//apple_ref/doc/uid/TP40014490-CH2-SW1)\n\n\n<br/>\n<br/>\n<br/>\n\n### 参考\n\n- https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6\n- http://www.jianshu.com/p/4279f84d8340\n- http://blog.csdn.net/shenjie12345678/article/details/45025403/\n","slug":"cocos2d-x 接入 GameCenter 排行榜与成就","published":1,"updated":"2018-04-02T16:30:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp43k00040dueyfjs9ksb","content":"<p>cocos2d-x 接入 GameCenter 排行榜与成就<br>[mac - XCode 8.3 - cocos2d-x lua]</p>\n<a id=\"more\"></a>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>要求接入GameCenter的排行榜和成就。</p>\n<p>GameCenter 是苹果推出的一个社交平台，<br>它主要提供了以下几个功能：</p>\n<ul>\n<li>排行榜</li>\n<li>成就</li>\n<li>挑战<br>而且，苹果同时提供了GameKit框架来让GameCenter更易集成。</li>\n</ul>\n<p>可能是因为GameCenter的热度过去了吧，相关的东西都比较早期。<br>整理总结了一下，希望对他人有所帮助。</p>\n<p>我的环境：</p>\n<p>mac - XCode 8.3 - cocos2d-x lua</p>\n<p><br><br><br><br><br></p>\n<h3 id=\"1-公共的处理\"><a href=\"#1-公共的处理\" class=\"headerlink\" title=\"1. 公共的处理\"></a>1. 公共的处理</h3><p><br></p>\n<h5 id=\"1-1-配置-iTunes-Connect-排行榜与成就的位置。\"><a href=\"#1-1-配置-iTunes-Connect-排行榜与成就的位置。\" class=\"headerlink\" title=\"1.1 配置 iTunes Connect 排行榜与成就的位置。\"></a>1.1 配置 iTunes Connect 排行榜与成就的位置。</h5><p>登录iTunes Connect, 找到要处理的APP。<br>选择 功能-&gt;GameCenter<br>可以看到三个大项：</p>\n<ul>\n<li>移动群组</li>\n<li>排行榜</li>\n<li>成就</li>\n</ul>\n<p><br></p>\n<h5 id=\"1-2-添加GameKit框架\"><a href=\"#1-2-添加GameKit框架\" class=\"headerlink\" title=\"1.2 添加GameKit框架\"></a>1.2 添加GameKit框架</h5><p>打开项目工程，将 Capabilities 的 GameCenter 打开。<br>这样，XCode就会将GameKit框架加到我们的工程中。</p>\n<p><br></p>\n<h5 id=\"1-3-登录GameCenter\"><a href=\"#1-3-登录GameCenter\" class=\"headerlink\" title=\"1.3 登录GameCenter\"></a>1.3 登录GameCenter</h5><p>登录GameCenter:  【这个步骤在我们加载完游戏时进行即可】</p>\n<pre><code>-(void) authenticateLocalPlayer {\n    // 获取本地用户\n    GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];\n\n    // 认证登录\n    localPlayer.authenticateHandler = ^(UIViewController *viewController, NSError *error) {\n        [self setLastError:error];\n\n        if (localPlayer.authenticated) {                        // 本地用户已经登录\n            _gameCenterFeaturesEnabled = YES;                   // 此变量是判断是否已经登录上GameCenter\n        } else if(viewController) {                             // 没有用户，弹出登录界面\n            [self presentViewController:viewController];        \n        } else {                                                // 没有用户，并且没有登录界面\n            _gameCenterFeaturesEnabled = NO;\n        }\n    };\n}\n</code></pre><p><br></p>\n<h5 id=\"1-4-关于lua调用object-c\"><a href=\"#1-4-关于lua调用object-c\" class=\"headerlink\" title=\"1.4 关于lua调用object-c\"></a>1.4 关于lua调用object-c</h5><p>因为我的环境是 cocos2d-x lua，所以，用通过lua来调用object-c。<br>cocos2d-x其实已经有相关的调用结构 —— LuaObjcBridge, 可以直接用 callStaticMethod来调用：</p>\n<pre><code>LuaObjcBridge.callStaticMethod(methodName className,args)\n</code></pre><p><br></p>\n<h5 id=\"1-5-GameKit辅助处理类\"><a href=\"#1-5-GameKit辅助处理类\" class=\"headerlink\" title=\"1.5 GameKit辅助处理类\"></a>1.5 GameKit辅助处理类</h5><p>GameKitHelper.h:</p>\n<pre><code>#import &lt;GameKit/GameKit.h&gt;\n#import &quot;cocos2d.h&quot;\n\n// 方便lua调用\n#include &quot;CCLuaEngine.h&quot;\n#include &quot;CCLuaBridge.h&quot;\n\n@interface GameKitHelper : NSObject\n// 处理错误\n@property (nonatomic, readonly) NSError* lastError;\n\n// 初始化\n+ (id) sharedGameKitHelper;\n\n// Player authentication, info\n-(void) authenticateLocalPlayer;\n@end\n</code></pre><p>GameKitHelper.mm</p>\n<pre><code>#import &quot;GameKitHelper.h&quot;\n\n@interface GameKitHelper ()\n        &lt;GKGameCenterControllerDelegate&gt; {\n    BOOL _gameCenterFeaturesEnabled;\n}\n@end\n\n@implementation GameKitHelper\n\n#pragma mark Singleton stuff\n\n+(id) sharedGameKitHelper {\n    static GameKitHelper *sharedGameKitHelper;\n    static dispatch_once_t onceToken;\n    dispatch_once(&amp;onceToken, ^{\n        sharedGameKitHelper =\n                [[GameKitHelper alloc] init];\n    });\n    return sharedGameKitHelper;\n}\n\n#pragma mark Player Authentication\n\n-(void) authenticateLocalPlayer {\n    GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];\n\n    localPlayer.authenticateHandler = ^(UIViewController *viewController, NSError *error) {\n        [self setLastError:error];\n        if (localPlayer.authenticated) {\n            _gameCenterFeaturesEnabled = YES;\n        } else if(viewController) {\n            [self presentViewController:viewController];\n        } else {\n            _gameCenterFeaturesEnabled = NO;\n        }\n    };\n}\n\n#pragma mark Property setters\n\n-(void) setLastError:(NSError*)error {\n    _lastError = [error copy];\n    if (_lastError) {\n        NSLog(@&quot;GameCenter -- setLastError -- ERROR: %@&quot;, [[_lastError userInfo] \n          description]);\n    }\n}\n\n#pragma mark UIViewController stuff\n\n-(UIViewController*) getRootViewController {\n    return [UIApplication \n      sharedApplication].keyWindow.rootViewController;\n}\n\n-(void)presentViewController:(UIViewController*)vc {\n    UIViewController* rootVC = [self getRootViewController];\n    [rootVC presentViewController:vc animated:YES \n      completion:nil];\n}\n\n@end\n</code></pre><p><br></p>\n<h5 id=\"1-6-登录GameCenter时机\"><a href=\"#1-6-登录GameCenter时机\" class=\"headerlink\" title=\"1.6 登录GameCenter时机\"></a>1.6 登录GameCenter时机</h5><p>由你决定，可以放在 AppDelegate 中 applicationDidFinishLaunching时。</p>\n<p><br><br><br><br><br></p>\n<h3 id=\"2-关于排行榜\"><a href=\"#2-关于排行榜\" class=\"headerlink\" title=\"2. 关于排行榜\"></a>2. 关于排行榜</h3><p><br></p>\n<h4 id=\"2-1-配置-iTunes-Connect\"><a href=\"#2-1-配置-iTunes-Connect\" class=\"headerlink\" title=\"2.1 配置 iTunes Connect\"></a>2.1 配置 iTunes Connect</h4><p>在iTunes Connect 找到 排行榜。</p>\n<p>简单说一下流程吧：<br>配置排行榜的结构，然后我们在游戏中将数据上传到这个结构，最后显示到GameCenter中。</p>\n<p>排行榜分为 单个排行榜 与 组合排行榜。(顾名思义，区别就不需要解释了吧？)<br>里面需要配置的相应属性，可参考本文末尾的关于。</p>\n<p>要注意两点：</p>\n<ol>\n<li>排行榜ID，因为只有它是在创建后无法更改的。（而且，要记住这个ID，因为后面程序要用到）</li>\n<li>排行榜只要发布了（经过审批发布），就无法删除了。</li>\n</ol>\n<p>接下来就看属性去配置它吧。</p>\n<p><br><br><br></p>\n<h4 id=\"2-2-XCode工程配置\"><a href=\"#2-2-XCode工程配置\" class=\"headerlink\" title=\"2.2 XCode工程配置\"></a>2.2 XCode工程配置</h4><p>模拟这个流程：登录GameCenter -&gt; 提交排行榜数据 ( -&gt; 如果需要，弹出GameCenter排行榜)</p>\n<p>提交排行榜数据:</p>\n<pre><code>-(void) submitScore:(int64_t)score category:(NSString*)category {       // 这里两个参数 score是数据， category是ID，就是我们创建排行榜以后，不可更改的那个ID。\n    // 检查是否在登录状态\n    if (!_gameCenterFeaturesEnabled)    {\n        NSLog(@&quot;GameCenter -- submitScore -- Player not authenticated&quot;);\n        return;\n    }\n\n    // 创建一个分数对象\n    GKScore* gkScore = [[GKScore alloc] initWithCategory:category];\n\n    // 设置分数对象的值\n    gkScore.value = score;\n\n    // 向GameCenter提交数据\n    [gkScore reportScoreWithCompletionHandler: ^(NSError* error)    {\n        [self setLastError:error];\n    }];\n}\n</code></pre><p><br><br><br></p>\n<h4 id=\"2-3-实践使用\"><a href=\"#2-3-实践使用\" class=\"headerlink\" title=\"2.3 实践使用\"></a>2.3 实践使用</h4><p>在公用部分，已经添加了GameCenter的登录验证相关的东西了。</p>\n<ul>\n<li>将排行榜数据提交的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<pre><code>-(void) submitScore:(int64_t)score category:(NSString*)category;\n</code></pre><p>GameKitHelper.mm</p>\n<pre><code>-(void) submitScore:(int64_t)score category:(NSString*)category {\n\n    if (!_gameCenterFeaturesEnabled)    {\n        NSLog(@&quot;GameCenter -- submitScore -- Player not authenticated&quot;);\n        return;\n    }\n\n    GKScore* gkScore = [[GKScore alloc] initWithCategory:category];\n\n    gkScore.value = score;\n\n    [gkScore reportScoreWithCompletionHandler: ^(NSError* error)    {\n        [self setLastError:error];\n    }];\n}\n</code></pre><ul>\n<li>给lua调用的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<pre><code>+(void) getScore:(NSDictionary *)dict;\n</code></pre><p>GameKitHelper.mm</p>\n<pre><code>+(void) getScore:(NSDictionary *)dict {\n    NSString* rID = [dict objectForKey:@&quot;id&quot;];\n    int score = [[dict objectForKey:@&quot;score&quot;] intValue];\n\n    [[GameKitHelper sharedGameKitHelper] submitScore:(int64_t)score category:rID];\n}\n</code></pre><ul>\n<li>lua调用</li>\n</ul>\n<pre><code>LuaObjcBridge.callStaticMethod(&quot;GameKitHelper&quot;, &quot;getScore&quot;, {id = 排行榜的ID, score = 分数值})\n</code></pre><p><br><br><br><br><br></p>\n<h3 id=\"3-关于成就\"><a href=\"#3-关于成就\" class=\"headerlink\" title=\"3. 关于成就\"></a>3. 关于成就</h3><p><br></p>\n<h4 id=\"3-1-配置-iTunes-Connect\"><a href=\"#3-1-配置-iTunes-Connect\" class=\"headerlink\" title=\"3.1 配置 iTunes Connect\"></a>3.1 配置 iTunes Connect</h4><p>还是老位置，之前看的排行榜，这次点成就。<br>还是老样子，成就的ID，创建后不可修改，成就发布后不可删除。<br>但是，成就还要多一点，就是每个游戏总共有2000点成就分（为什么是2000？你问老乔去。。），你可以给每个成就分配一些成就分。<br>成就还有是否隐藏的选项，但是它的隐藏并不是看不到这个成就了，而是有一个成就名称为隐藏的成就显示在列表中。<br>还有，它的进度是一个顺时针扇形来表示，就是你的图标刚开始是被遮掩的，随着进度的增加，会逐渐显现出图标，方向是顺时针扇形。</p>\n<p>其他相关参数，可参考本文末尾的关于。</p>\n<p><br><br><br></p>\n<h4 id=\"3-2-XCode工程配置\"><a href=\"#3-2-XCode工程配置\" class=\"headerlink\" title=\"3.2 XCode工程配置\"></a>3.2 XCode工程配置</h4><p>流程与排行榜的一样，但是这次提交的不是分数了，而是成就完成的百分比。</p>\n<pre><code>// 提交成就数据\n-(void) submitAchievment:(NSString *)identifier percent:(double) percentComplete {          // identifier 成就ID, percentComplete: 成就完成百分比\n    // 判断登录认证\n    if (!_gameCenterFeaturesEnabled)    {\n        NSLog(@&quot;GameCenter -- submitAchievment -- Player not authenticated&quot;);\n        return;\n    }\n\n    // 创建成就结构，注入成就ID\n    GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  \n\n    // 设置成就百分比\n    [achievement setPercentComplete:percentComplete];  \n\n    // 提交成就数据\n    [achievement reportAchievementWithCompletionHandler:^(NSError *error) {  \n        if(error != nil){  \n            NSLog(@&quot;GameCenter -- submitAchievment --  error:%@&quot;, [error localizedDescription]);  \n        }else{  \n            NSLog(@&quot;GameCenter -- submitAchievment --  提交成就成功&quot;);  \n        }  \n    }];  \n} \n</code></pre><p><br><br><br></p>\n<h4 id=\"3-3-实践使用\"><a href=\"#3-3-实践使用\" class=\"headerlink\" title=\"3.3 实践使用\"></a>3.3 实践使用</h4><p>同排行榜一样。</p>\n<ul>\n<li>将成就数据提交的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<pre><code>- (void)submitAchievment:(NSString *)identifier percent:(double)percentComplete;\n</code></pre><p>GameKitHelper.mm</p>\n<pre><code>-(void) submitAchievment:(NSString *)identifier percent:(double) percentComplete {\n    if (!_gameCenterFeaturesEnabled)    {\n        NSLog(@&quot;GameCenter -- submitAchievment -- Player not authenticated&quot;);\n        return;\n    }\n\n    GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  \n\n    [achievement setPercentComplete:percentComplete];  \n\n    [achievement reportAchievementWithCompletionHandler:^(NSError *error) {  \n        if(error != nil){  \n            NSLog(@&quot;GameCenter -- submitAchievment --  error:%@&quot;, [error localizedDescription]);  \n        }else{  \n            NSLog(@&quot;GameCenter -- submitAchievment --  提交成就成功&quot;);  \n        }  \n    }];  \n} \n</code></pre><ul>\n<li>给lua调用的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<pre><code>+(void) getAchievement:(NSDictionary *)dict;\n</code></pre><p>GameKitHelper.mm</p>\n<pre><code>+(void) getAchievement:(NSDictionary *)dict {\n    NSString* aID = [dict objectForKey:@&quot;id&quot;];\n    double percent = [[dict objectForKey:@&quot;percent&quot;] doubleValue];\n\n    [[GameKitHelper sharedGameKitHelper] submitAchievment:(NSString *)aID percent:percent];\n}\n</code></pre><ul>\n<li>lua调用</li>\n</ul>\n<pre><code>LuaObjcBridge.callStaticMethod(&quot;GameKitHelper&quot;, &quot;getAchievement&quot;, {id = 成就ID, percent = 成就百分比})\n</code></pre><p><br><br><br><br><br></p>\n<h3 id=\"4-最后\"><a href=\"#4-最后\" class=\"headerlink\" title=\"4. 最后\"></a>4. 最后</h3><p>GameCenter还是挺好的一个东西。<br>它还有一个好友挑战功能，但这个主要适合之前 Flappy Bird，别踩白块 那些游戏来弄。<br>或许，这也是这个平台没落了的原因吧。</p>\n<p><br><br><br><br><br></p>\n<h3 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h3><ul>\n<li><a href=\"http://www.cocos2d-x.org/reference/native-cpp/V3.5/d6/d59/classcocos2d_1_1_lua_objc_bridge.html\" target=\"_blank\" rel=\"noopener\">关于 LuaObjcBridge</a></li>\n<li><a href=\"https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide_zh_CN/Chapters/About.html#//apple_ref/doc/uid/TP40016325-CH1-SW1\" target=\"_blank\" rel=\"noopener\">关于 iTunes Connect</a></li>\n<li><a href=\"https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectGameCenter_Guide_SCh/Chapters/Leaderboards.html#//apple_ref/doc/uid/TP40014490-CH2-SW1\" target=\"_blank\" rel=\"noopener\">中文版 排行榜及成就 配置属性</a></li>\n</ul>\n<p><br><br><br><br><br></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6\" target=\"_blank\" rel=\"noopener\">https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6</a></li>\n<li><a href=\"http://www.jianshu.com/p/4279f84d8340\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/4279f84d8340</a></li>\n<li><a href=\"http://blog.csdn.net/shenjie12345678/article/details/45025403/\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shenjie12345678/article/details/45025403/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>cocos2d-x 接入 GameCenter 排行榜与成就<br>[mac - XCode 8.3 - cocos2d-x lua]</p>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>要求接入GameCenter的排行榜和成就。</p>\n<p>GameCenter 是苹果推出的一个社交平台，<br>它主要提供了以下几个功能：</p>\n<ul>\n<li>排行榜</li>\n<li>成就</li>\n<li>挑战<br>而且，苹果同时提供了GameKit框架来让GameCenter更易集成。</li>\n</ul>\n<p>可能是因为GameCenter的热度过去了吧，相关的东西都比较早期。<br>整理总结了一下，希望对他人有所帮助。</p>\n<p>我的环境：</p>\n<p>mac - XCode 8.3 - cocos2d-x lua</p>\n<p><br><br><br><br><br></p>\n<h3 id=\"1-公共的处理\"><a href=\"#1-公共的处理\" class=\"headerlink\" title=\"1. 公共的处理\"></a>1. 公共的处理</h3><p><br></p>\n<h5 id=\"1-1-配置-iTunes-Connect-排行榜与成就的位置。\"><a href=\"#1-1-配置-iTunes-Connect-排行榜与成就的位置。\" class=\"headerlink\" title=\"1.1 配置 iTunes Connect 排行榜与成就的位置。\"></a>1.1 配置 iTunes Connect 排行榜与成就的位置。</h5><p>登录iTunes Connect, 找到要处理的APP。<br>选择 功能-&gt;GameCenter<br>可以看到三个大项：</p>\n<ul>\n<li>移动群组</li>\n<li>排行榜</li>\n<li>成就</li>\n</ul>\n<p><br></p>\n<h5 id=\"1-2-添加GameKit框架\"><a href=\"#1-2-添加GameKit框架\" class=\"headerlink\" title=\"1.2 添加GameKit框架\"></a>1.2 添加GameKit框架</h5><p>打开项目工程，将 Capabilities 的 GameCenter 打开。<br>这样，XCode就会将GameKit框架加到我们的工程中。</p>\n<p><br></p>\n<h5 id=\"1-3-登录GameCenter\"><a href=\"#1-3-登录GameCenter\" class=\"headerlink\" title=\"1.3 登录GameCenter\"></a>1.3 登录GameCenter</h5><p>登录GameCenter:  【这个步骤在我们加载完游戏时进行即可】</p>\n<pre><code>-(void) authenticateLocalPlayer {\n    // 获取本地用户\n    GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];\n\n    // 认证登录\n    localPlayer.authenticateHandler = ^(UIViewController *viewController, NSError *error) {\n        [self setLastError:error];\n\n        if (localPlayer.authenticated) {                        // 本地用户已经登录\n            _gameCenterFeaturesEnabled = YES;                   // 此变量是判断是否已经登录上GameCenter\n        } else if(viewController) {                             // 没有用户，弹出登录界面\n            [self presentViewController:viewController];        \n        } else {                                                // 没有用户，并且没有登录界面\n            _gameCenterFeaturesEnabled = NO;\n        }\n    };\n}\n</code></pre><p><br></p>\n<h5 id=\"1-4-关于lua调用object-c\"><a href=\"#1-4-关于lua调用object-c\" class=\"headerlink\" title=\"1.4 关于lua调用object-c\"></a>1.4 关于lua调用object-c</h5><p>因为我的环境是 cocos2d-x lua，所以，用通过lua来调用object-c。<br>cocos2d-x其实已经有相关的调用结构 —— LuaObjcBridge, 可以直接用 callStaticMethod来调用：</p>\n<pre><code>LuaObjcBridge.callStaticMethod(methodName className,args)\n</code></pre><p><br></p>\n<h5 id=\"1-5-GameKit辅助处理类\"><a href=\"#1-5-GameKit辅助处理类\" class=\"headerlink\" title=\"1.5 GameKit辅助处理类\"></a>1.5 GameKit辅助处理类</h5><p>GameKitHelper.h:</p>\n<pre><code>#import &lt;GameKit/GameKit.h&gt;\n#import &quot;cocos2d.h&quot;\n\n// 方便lua调用\n#include &quot;CCLuaEngine.h&quot;\n#include &quot;CCLuaBridge.h&quot;\n\n@interface GameKitHelper : NSObject\n// 处理错误\n@property (nonatomic, readonly) NSError* lastError;\n\n// 初始化\n+ (id) sharedGameKitHelper;\n\n// Player authentication, info\n-(void) authenticateLocalPlayer;\n@end\n</code></pre><p>GameKitHelper.mm</p>\n<pre><code>#import &quot;GameKitHelper.h&quot;\n\n@interface GameKitHelper ()\n        &lt;GKGameCenterControllerDelegate&gt; {\n    BOOL _gameCenterFeaturesEnabled;\n}\n@end\n\n@implementation GameKitHelper\n\n#pragma mark Singleton stuff\n\n+(id) sharedGameKitHelper {\n    static GameKitHelper *sharedGameKitHelper;\n    static dispatch_once_t onceToken;\n    dispatch_once(&amp;onceToken, ^{\n        sharedGameKitHelper =\n                [[GameKitHelper alloc] init];\n    });\n    return sharedGameKitHelper;\n}\n\n#pragma mark Player Authentication\n\n-(void) authenticateLocalPlayer {\n    GKLocalPlayer* localPlayer = [GKLocalPlayer localPlayer];\n\n    localPlayer.authenticateHandler = ^(UIViewController *viewController, NSError *error) {\n        [self setLastError:error];\n        if (localPlayer.authenticated) {\n            _gameCenterFeaturesEnabled = YES;\n        } else if(viewController) {\n            [self presentViewController:viewController];\n        } else {\n            _gameCenterFeaturesEnabled = NO;\n        }\n    };\n}\n\n#pragma mark Property setters\n\n-(void) setLastError:(NSError*)error {\n    _lastError = [error copy];\n    if (_lastError) {\n        NSLog(@&quot;GameCenter -- setLastError -- ERROR: %@&quot;, [[_lastError userInfo] \n          description]);\n    }\n}\n\n#pragma mark UIViewController stuff\n\n-(UIViewController*) getRootViewController {\n    return [UIApplication \n      sharedApplication].keyWindow.rootViewController;\n}\n\n-(void)presentViewController:(UIViewController*)vc {\n    UIViewController* rootVC = [self getRootViewController];\n    [rootVC presentViewController:vc animated:YES \n      completion:nil];\n}\n\n@end\n</code></pre><p><br></p>\n<h5 id=\"1-6-登录GameCenter时机\"><a href=\"#1-6-登录GameCenter时机\" class=\"headerlink\" title=\"1.6 登录GameCenter时机\"></a>1.6 登录GameCenter时机</h5><p>由你决定，可以放在 AppDelegate 中 applicationDidFinishLaunching时。</p>\n<p><br><br><br><br><br></p>\n<h3 id=\"2-关于排行榜\"><a href=\"#2-关于排行榜\" class=\"headerlink\" title=\"2. 关于排行榜\"></a>2. 关于排行榜</h3><p><br></p>\n<h4 id=\"2-1-配置-iTunes-Connect\"><a href=\"#2-1-配置-iTunes-Connect\" class=\"headerlink\" title=\"2.1 配置 iTunes Connect\"></a>2.1 配置 iTunes Connect</h4><p>在iTunes Connect 找到 排行榜。</p>\n<p>简单说一下流程吧：<br>配置排行榜的结构，然后我们在游戏中将数据上传到这个结构，最后显示到GameCenter中。</p>\n<p>排行榜分为 单个排行榜 与 组合排行榜。(顾名思义，区别就不需要解释了吧？)<br>里面需要配置的相应属性，可参考本文末尾的关于。</p>\n<p>要注意两点：</p>\n<ol>\n<li>排行榜ID，因为只有它是在创建后无法更改的。（而且，要记住这个ID，因为后面程序要用到）</li>\n<li>排行榜只要发布了（经过审批发布），就无法删除了。</li>\n</ol>\n<p>接下来就看属性去配置它吧。</p>\n<p><br><br><br></p>\n<h4 id=\"2-2-XCode工程配置\"><a href=\"#2-2-XCode工程配置\" class=\"headerlink\" title=\"2.2 XCode工程配置\"></a>2.2 XCode工程配置</h4><p>模拟这个流程：登录GameCenter -&gt; 提交排行榜数据 ( -&gt; 如果需要，弹出GameCenter排行榜)</p>\n<p>提交排行榜数据:</p>\n<pre><code>-(void) submitScore:(int64_t)score category:(NSString*)category {       // 这里两个参数 score是数据， category是ID，就是我们创建排行榜以后，不可更改的那个ID。\n    // 检查是否在登录状态\n    if (!_gameCenterFeaturesEnabled)    {\n        NSLog(@&quot;GameCenter -- submitScore -- Player not authenticated&quot;);\n        return;\n    }\n\n    // 创建一个分数对象\n    GKScore* gkScore = [[GKScore alloc] initWithCategory:category];\n\n    // 设置分数对象的值\n    gkScore.value = score;\n\n    // 向GameCenter提交数据\n    [gkScore reportScoreWithCompletionHandler: ^(NSError* error)    {\n        [self setLastError:error];\n    }];\n}\n</code></pre><p><br><br><br></p>\n<h4 id=\"2-3-实践使用\"><a href=\"#2-3-实践使用\" class=\"headerlink\" title=\"2.3 实践使用\"></a>2.3 实践使用</h4><p>在公用部分，已经添加了GameCenter的登录验证相关的东西了。</p>\n<ul>\n<li>将排行榜数据提交的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<pre><code>-(void) submitScore:(int64_t)score category:(NSString*)category;\n</code></pre><p>GameKitHelper.mm</p>\n<pre><code>-(void) submitScore:(int64_t)score category:(NSString*)category {\n\n    if (!_gameCenterFeaturesEnabled)    {\n        NSLog(@&quot;GameCenter -- submitScore -- Player not authenticated&quot;);\n        return;\n    }\n\n    GKScore* gkScore = [[GKScore alloc] initWithCategory:category];\n\n    gkScore.value = score;\n\n    [gkScore reportScoreWithCompletionHandler: ^(NSError* error)    {\n        [self setLastError:error];\n    }];\n}\n</code></pre><ul>\n<li>给lua调用的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<pre><code>+(void) getScore:(NSDictionary *)dict;\n</code></pre><p>GameKitHelper.mm</p>\n<pre><code>+(void) getScore:(NSDictionary *)dict {\n    NSString* rID = [dict objectForKey:@&quot;id&quot;];\n    int score = [[dict objectForKey:@&quot;score&quot;] intValue];\n\n    [[GameKitHelper sharedGameKitHelper] submitScore:(int64_t)score category:rID];\n}\n</code></pre><ul>\n<li>lua调用</li>\n</ul>\n<pre><code>LuaObjcBridge.callStaticMethod(&quot;GameKitHelper&quot;, &quot;getScore&quot;, {id = 排行榜的ID, score = 分数值})\n</code></pre><p><br><br><br><br><br></p>\n<h3 id=\"3-关于成就\"><a href=\"#3-关于成就\" class=\"headerlink\" title=\"3. 关于成就\"></a>3. 关于成就</h3><p><br></p>\n<h4 id=\"3-1-配置-iTunes-Connect\"><a href=\"#3-1-配置-iTunes-Connect\" class=\"headerlink\" title=\"3.1 配置 iTunes Connect\"></a>3.1 配置 iTunes Connect</h4><p>还是老位置，之前看的排行榜，这次点成就。<br>还是老样子，成就的ID，创建后不可修改，成就发布后不可删除。<br>但是，成就还要多一点，就是每个游戏总共有2000点成就分（为什么是2000？你问老乔去。。），你可以给每个成就分配一些成就分。<br>成就还有是否隐藏的选项，但是它的隐藏并不是看不到这个成就了，而是有一个成就名称为隐藏的成就显示在列表中。<br>还有，它的进度是一个顺时针扇形来表示，就是你的图标刚开始是被遮掩的，随着进度的增加，会逐渐显现出图标，方向是顺时针扇形。</p>\n<p>其他相关参数，可参考本文末尾的关于。</p>\n<p><br><br><br></p>\n<h4 id=\"3-2-XCode工程配置\"><a href=\"#3-2-XCode工程配置\" class=\"headerlink\" title=\"3.2 XCode工程配置\"></a>3.2 XCode工程配置</h4><p>流程与排行榜的一样，但是这次提交的不是分数了，而是成就完成的百分比。</p>\n<pre><code>// 提交成就数据\n-(void) submitAchievment:(NSString *)identifier percent:(double) percentComplete {          // identifier 成就ID, percentComplete: 成就完成百分比\n    // 判断登录认证\n    if (!_gameCenterFeaturesEnabled)    {\n        NSLog(@&quot;GameCenter -- submitAchievment -- Player not authenticated&quot;);\n        return;\n    }\n\n    // 创建成就结构，注入成就ID\n    GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  \n\n    // 设置成就百分比\n    [achievement setPercentComplete:percentComplete];  \n\n    // 提交成就数据\n    [achievement reportAchievementWithCompletionHandler:^(NSError *error) {  \n        if(error != nil){  \n            NSLog(@&quot;GameCenter -- submitAchievment --  error:%@&quot;, [error localizedDescription]);  \n        }else{  \n            NSLog(@&quot;GameCenter -- submitAchievment --  提交成就成功&quot;);  \n        }  \n    }];  \n} \n</code></pre><p><br><br><br></p>\n<h4 id=\"3-3-实践使用\"><a href=\"#3-3-实践使用\" class=\"headerlink\" title=\"3.3 实践使用\"></a>3.3 实践使用</h4><p>同排行榜一样。</p>\n<ul>\n<li>将成就数据提交的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<pre><code>- (void)submitAchievment:(NSString *)identifier percent:(double)percentComplete;\n</code></pre><p>GameKitHelper.mm</p>\n<pre><code>-(void) submitAchievment:(NSString *)identifier percent:(double) percentComplete {\n    if (!_gameCenterFeaturesEnabled)    {\n        NSLog(@&quot;GameCenter -- submitAchievment -- Player not authenticated&quot;);\n        return;\n    }\n\n    GKAchievement *achievement = [[GKAchievement alloc] initWithIdentifier:identifier];  \n\n    [achievement setPercentComplete:percentComplete];  \n\n    [achievement reportAchievementWithCompletionHandler:^(NSError *error) {  \n        if(error != nil){  \n            NSLog(@&quot;GameCenter -- submitAchievment --  error:%@&quot;, [error localizedDescription]);  \n        }else{  \n            NSLog(@&quot;GameCenter -- submitAchievment --  提交成就成功&quot;);  \n        }  \n    }];  \n} \n</code></pre><ul>\n<li>给lua调用的函数</li>\n</ul>\n<p>GameKitHelper.h</p>\n<pre><code>+(void) getAchievement:(NSDictionary *)dict;\n</code></pre><p>GameKitHelper.mm</p>\n<pre><code>+(void) getAchievement:(NSDictionary *)dict {\n    NSString* aID = [dict objectForKey:@&quot;id&quot;];\n    double percent = [[dict objectForKey:@&quot;percent&quot;] doubleValue];\n\n    [[GameKitHelper sharedGameKitHelper] submitAchievment:(NSString *)aID percent:percent];\n}\n</code></pre><ul>\n<li>lua调用</li>\n</ul>\n<pre><code>LuaObjcBridge.callStaticMethod(&quot;GameKitHelper&quot;, &quot;getAchievement&quot;, {id = 成就ID, percent = 成就百分比})\n</code></pre><p><br><br><br><br><br></p>\n<h3 id=\"4-最后\"><a href=\"#4-最后\" class=\"headerlink\" title=\"4. 最后\"></a>4. 最后</h3><p>GameCenter还是挺好的一个东西。<br>它还有一个好友挑战功能，但这个主要适合之前 Flappy Bird，别踩白块 那些游戏来弄。<br>或许，这也是这个平台没落了的原因吧。</p>\n<p><br><br><br><br><br></p>\n<h3 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h3><ul>\n<li><a href=\"http://www.cocos2d-x.org/reference/native-cpp/V3.5/d6/d59/classcocos2d_1_1_lua_objc_bridge.html\" target=\"_blank\" rel=\"noopener\">关于 LuaObjcBridge</a></li>\n<li><a href=\"https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide_zh_CN/Chapters/About.html#//apple_ref/doc/uid/TP40016325-CH1-SW1\" target=\"_blank\" rel=\"noopener\">关于 iTunes Connect</a></li>\n<li><a href=\"https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectGameCenter_Guide_SCh/Chapters/Leaderboards.html#//apple_ref/doc/uid/TP40014490-CH2-SW1\" target=\"_blank\" rel=\"noopener\">中文版 排行榜及成就 配置属性</a></li>\n</ul>\n<p><br><br><br><br><br></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6\" target=\"_blank\" rel=\"noopener\">https://www.raywenderlich.com/23189/whats-new-with-game-center-in-ios-6</a></li>\n<li><a href=\"http://www.jianshu.com/p/4279f84d8340\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/4279f84d8340</a></li>\n<li><a href=\"http://blog.csdn.net/shenjie12345678/article/details/45025403/\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shenjie12345678/article/details/45025403/</a></li>\n</ul>"},{"title":"python学习笔记","date":"2016-11-22T13:00:00.000Z","_content":"\n----------\n\npython脚本学习\n\n\n<!-- more -->\n<br/>\n<br/>\n\n动机：\n脚本可以省很多事情，\n开发游戏用了lua，\n但是，\n真正日常要做一些东西脚本的时候，\n发现用lua还是比较麻烦些，\n所以，\n就瞄上了python，\n恩，\n说学就学。\n\n注意：\n- 用的是python3\n- 适合有一定脚本语言基础的人看（很多脚本语言的共性没有记录）\n\n<br/>\n<br/>\n----------\n\nRound 1: 基础\n<br/>\n\n- 输出语句 print\n** 注意多个参数的格式 **\n\n\n\t\tprint('hello python!')\n\t\tx = 100\n\t\ty = 'hello'\n\t\tprint('%s user, your score is %d' % (y, x))\n\t\tprint(r'')\t\t\t\t\t\t\t# 在''内的字符不转义\n\n\n- list、tuple、dict、set\n1. list\t列表，有序的集合，随时添加删除元素\nL = []\n常用方法:\t\t\n访问元素 - L[index] - index支持负数\n末尾加入元素 - L.append(val)\n某位置插入元素 - L.insert(index, val)\n删除末尾元素 - L.pop()\n删除某位置元素 - del L[index]\n\n2. tuple 元组，初始化后不可修改 **[ 初始化一个元素的元组时，元素后要加, : t = (1, ) ]**\nT = ()\n**list 与 tuple 可相互嵌套，tuple中的list可以增删，因为存的是地址**\n\t\t\n3. dict 字典（你也可以叫它map)\nD = {'key': value, }\n\n4. set 集合，无序不重复\nS = set([])\n\n\n- 条件 与 循环\npython的语法很简单，通过缩进来显示。\n最重要的是**:**\n\n\n\t\tif <条件>:\n\t\t\tcontinue\n\t\telif <条件>:\n\t\t\tbreak\n\t\telse:\n\t\t\tpass\n\n\t\tfor < > in <对象集合>:\n\t\t\tpass\n\t\t\n\t\twhile <条件>:\n\t\t\tpass\n\n\n- 函数\n\t\t\n\n\t\t# 定义\n\t\tdef function_name(parameters):\n\t\t\tpass\t\t\t\t\t\t\t\t# 一旦定义一个函数，不可以什么都不写，但可以像这样\n\t\t\t\t\t\t\t\t\t\t\t\t# 用pass来占位，先让代码运行起来。\n\n\n当然，默认参数值，返回多个值，都是支持的\n额外要注意的应该是 **参数** 部分，包括：必选参数、默认参数、可变参数、命名关键字参数、关键字参数。\n可变参数允许传入0个或任意个参数，这些会被自动组装为一个tuple；\n关键字参数允许传入0个或任意个含参数名的参数，这些被自动组装为1个dict。\n\n\t\t\n\t\tdef book(name, author, **kw):\n\t\t\tif 'language' in kw: \t\t\t\t\t\t# 判断关键字参数中是否有 language 字段\n\t\t\t\tpass\n\n\t\t\tprint('name: ', name, 'author: ', author, 'other: ', kw)\n\n\t\t# methon1\n\t\tbook('From Grass To Tree', 'ltree98', language = 'CHN')\n\t\tbook('How To Study Python', 'ltree98', language = 'ENG', pages = 100)\n\n\t\t# method2\n\t\textra = {'language': 'KOR', 'class': 'novel'}\n\t\tbook('lalala', 'tree', **extra)\n\n\nPS：如果参数中已经有了一个可变参数，那么后面的命名关键字参数就不需要特殊分隔符'\\*'了。\n**参数顺序： 必选参数、默认参数、可变参数、命名关键字参数、关键字参数。**\n\n\t\t\n\t\tdef f(a, b = 0, *args, **kw):\t\t# 必选参数、默认参数、可变参数、关键字参数\n\t\t\tpass\n\t\tdef f2(a, b = 0, *, d, **kw):\t\t# 必选参数、默认参数、可变参数、命名关键字参数、关键字参数\n\t\t\tpass\n\n\n**对于任意函数，都可以通过func(\\*args, \\*\\*kw)的形式来调用它，无论参数是如何定义的。**\n\n\n- others:\n\t- range([start = 0,] stop, [, step = 1]]), 生成从start开始（默认为0）到stop（不等于stop）,步长为step（默认为1）的整数序列；\n\tstart 与 step都是可选参数。\n\n\n<br/>\n<br/>\n<br/>\n----------\n\nRound 2: 进阶\n<br/>\n<br/>\n\n1.  一些特性（切片、迭代、列表生成式、生成器）\n\n- 切片\n针对截取操作\nL[start: stop: step]  \n截取从start序号开始到stop序号，步长为step的值成一个list返回。\n\n\n\t\t>>> L = list(range(10))\n\t\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\t\t>>> L1 = L[:5]\n\t\t[0, 1, 2, 3, 4]\n\n\t\t>>> L2 = L[2:7]\n\t\t[2, 3, 4, 5, 6]\n\n\t\t>>> L3 = L[:-1:2]\n\t\t[0, 2, 4, 6, 8]\n\n\t\t>>> L4 = L[:]\n\t\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t\t\n\n- 迭代\n给定一个list或tuple，通过for循环来遍历它，这种遍历叫做 迭代（iteration）\n很多语言的迭代是通过下标来进行的，但python里，并不是。\n当然，顺序可能就不是你当初定义它时的顺序了。\n\t\t\n\n\t\tweekday = {'Mon': 1, 'Tue': 2, 'Wed': 3}\n\t\t\n\t\tif isinstance(weekday, Iterable):\n\t\t\tfor w in weekday:\n\t\t\t\tprint(w)\n\n\nisinstance(..., Iterable) 判断一个数据类型是否可迭代\n一般可以可迭代对象是 集合数据类型（如 list、tuple、dict、set、str等），他们都是Iterable类型。\n\n\n- 列表生成式\n顾名思义，就是一个创建list的方式，\n通过这种方式创建list比较便捷\n\n\n\t\t[x + y for x in 'ABC' for y in 'XYZ' if x != 'B']\n\t\t\n\t\t# 其实上面那个等价于下面\n\n\t\tL = []\n\t\tfor x in 'ABC':\n\t\t\tfor y in 'XYZ':\n\t\t\t\tif x != 'B':\n\t\t\t\t\tL.append(x+y)\n\n\n- 生成器\n针对于列表容量有限的缺陷，\n生成器就是一边循环一边计算。\n与列表生成式的区别是，列表生成时最外层是 []，而生成器最外层是 ()\n而且，得到的generator，需要不停next得到下一个元素。（一般会通过for循环来迭代获取）\n\t\t\n\n\t\tg = (x + y for x in 'ABC' for y in 'XYZ' if x != 'B')\n\t\tfor v in g:\n\t\t\tprint(v)\n\n\n可以作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列。\nIterator类型主要就两种，一种就是这个生成器，还有就是含yield的generator function\n\n\n<br/>\n\n2.  关于函数式编程 （ lambda、map、reduce、filter、 装饰器）\n\n\n- lambda [arg1 [, arg2, arg3, ...]]: expression\n也叫匿名函数，通过它可以非常方便快捷的定义使用一个函数。\n具体效果，下面会给出。\n\n\n- map(func, seq1[, seq2...])\n将func作用于seq中的每一个元素，并用一个列表给出返回值。\n\n\t\n\t\tdef f(x):\n\t\t\treturn x * x\n\t\tm = map(f, [1, 2, 3, 4, 5])\n\t\t# m 将会是一个列表 [1, 4, 9, 16, 25]\n\n其实，用lambda更方便简洁\n\n\n\t\tm = map(lambda x: x*x, range(1, 6))\n\n\n- reduce(func, seq[, init])\n这是一个二元操作函数，它用来将一个集合中所有数据进行从前到后的二元操作。\n\n\n\t\tfrom fuctools import reduce\n\t\tdef specialAdd(x, y):\n\t\t\treturn x*10 + y\n\t\tval = reduce(specialAdd, [1, 2, 3, 4, 5])\n\t\t# val将会是一个数字 12345\n\n\nreduce要提前导入，\n当然，也可以用lambda\n\n\n\t\tval = reduce(lambda x, y: x*10 + y, range(1, 6))\n\n\n- filter(func, seq)\n可以当做过滤器，将集合中的每个数都传入函数，根据函数返回的bool变量来决定是否留下。\n\n\t\n\t\tdef bigger_than_five(n):\n\t\t\treturn n > 5\n\t\tf = list(filter(bigger_than_five, [3, 4, 5, 6, 7, 8]))\n\t\t# f 将会是一个列表 [6, 7, 8]\n\n\t\tf2 = list(filter(lambda n: n > 5, range(3, 9)))\n\n\n- 装饰器\n装饰器的作用就像它名字一样，给函数以装饰，做一个更大一范围的修饰。\n比如，有A、B、C三个果汁工厂，现在要在每瓶果汁上印一个小商标。\n我们可以在每个工厂内建立一个流水线来印商标，\n也可以专门建立一个工厂D来印商标。\n装饰器，就像后者，工厂D。\n\n\n\t\tdef myLog(func):\n\t\t\tdef wrapper(*args, **kw):\n\t\t\t\tprint('--- this is my log')\n\t\t\t\treturn func(*args, **kw)\n\t\t\treturn wrapper\n\t\t\n\t\t@myLog\n\t\tdef demo():\n\t\t\tprint('\\n\\ndemo is running\\n\\n')\n\t\t\n\t\tdemo()\n\n注意要加语法糖 @装饰器函数\n本装饰器的作用是在函数调用前输出一段log。\n\n如果想让装饰器函数带参数，那就要进行三层嵌套。\n\n\t\t\n\t\tdef myLog(logText):\n\t\t\tdef decorator(func):\n\t\t\t\tdef wrapper(*args, **kw):\n\t\t\t\t\tprint(logText)\n\t\t\t\t\treturn func(*args, **kw)\n\t\t\t\treturn wrapper\n\t\t\treturn decorator\n\n\t\t@myLog(\"hello log\")\n\t\tdef demo():\n\t\t\tprint('\\n\\ndemo is running\\n\\n')\n\t\t\n\t\tdemo()\n\n但是，这里的函数名已经发生了更改，demo名称其实已经发生了更改，\ndemo.\\_\\_name\\_\\_ 是 wrapper\n可以通过加\nwrapper.\\_\\_name\\_\\_ = func.\\_\\_name\\_\\_\n来改回来，\n但是，过于繁琐，python提供了更好的方法\n\n\n\t\timport functools\n\t\t\n\t\tdef myLog(logText):\n\t\t\tdef decorator(func):\n\t\t\t\t@functools.wraps(func)\n\t\t\t\tdef wrapper(*args, **kw):\n\t\t\t\t\tprint(logText)\n\t\t\t\t\treturn func(*args, **kw)\n\t\t\t\treturn wrapper\n\t\t\treturn decorator\n\t\t\n\t\t@myLog(\"hello log\")\n\t\tdef demo():\n\t\t\tprint('\\n\\ndemo is running\\n\\n')\n\t\t\n\t\tdemo()\n\t\tprint(demo.__name__)\n\n\n<br/>\n\n3.  关于面向对象编程\n\npython中是有类这个结构的。\n还有一些命名规则：\n变量名以 \\_  开头，代表私有变量（非强制）\n变量名以 \\_\\_ 开头，代表私有变量 （强制）\n变量名以 \\_\\_ 开头，并且以 \\_\\_ 结尾，代表特殊变量\n\n\n\t\tclass Person(object):\n\t\t\tdef __init__(self, name, age):\n\t\t\t\tself.__name = name\n\t\t\t\tself.age = age\n\t\t\tdef eat(self):\n\t\t\t\tprint('Person Eating...')\n\n\n\t\tclass Student(Person):\n\t\t\tdef eat(self):\n\t\t\t\tprint('Student Eating...')\n\t\t\tdef study(self):\n\t\t\t\tprint('Student Study...')\n\n\n也可以对实例进行一些属性的绑定，当然，不会对类造成影响。\n当然也可以对类进行方法绑定，其所有的实例均受影响\n\t\t\n\t\tdef set_height(self, height):\n\t\t\tself.height = height\n\t\tclass Person(object):\n\t\t\tname = 'tree'\n\t\t\n\t\tp = Person()\n\t\tprint('p name is: ', p.name)\n\t\tprint('person name is: ', Person.name)\n\t\t\n\t\tp.age = 20\n\t\tprint('p age is: ', p.age)\n\t\tprint('person age is: ', Person.age\n\t\t\n\t\tPerson.set_height = set_height\n\t\tp.set_height(180)\n\t\tprint(p.height)\n\n\n最后，可以通过在类内设置一些函数来使类更加完善:\n- \\_\\_init\\_\\_ \t\t\t\t\n初始化方法\n- \\_\\_slots\\_\\_ \t\t\t\t\n设定允许绑定的变量名（子类会继承父类）\n- \\_\\_len\\_\\_\n让类可以作用于len函数，设定计算类大小的方法\n- \\_\\_str\\_\\_ 与 \\_\\_repr\\_\\_\n都是用来当 print实例对象时 显示出来的字符串。\n\\_\\_str\\_\\_是给用户看的，\\_\\_repr\\_\\_是给开发者看的（但一般都一样）\n- \\_\\_iter\\_\\_ 与 \\_\\_next\\_\\_\n可以让类作用于 for...in 循环\n- \\_\\_getitem\\_\\_\n可以像list一样实现按照下标取元素\n- \\_\\_getattr\\_\\_\n预设某属性默认值\n- \\_\\_call\\_\\_\n实现在实例本身的调用方法。\n- 装饰器实现get/set方法\t\t\n\n\t\t\n\t\tclass Person(object):\n\t\t\t@property\n\t\t\tdef age(self):\n\t\t\t    return self._age\n\t\t\t@age.setter\n\t\t\tdef age(self, value):\n\t\t\t    self._age = value\n\n\n<br/>\n<br/>\n<br/>\n----------\n\nFinal : 归纳\n<br/>\n\npython的一些基础东西，基本就这些了。\n接下来，就可以去做一些东西来边练手边加深理解。\n最后， \n工具是死的，\n人是活得，\n不要局限自己，\n放飞思维，\n大胆去做。\n\n\n<br/>\n<br/>\n<br/>\n<br/>\n\n\n\n\n参考：\n着重推荐： http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000 \nhttp://www.pythoner.com/46.html","source":"_posts/python学习笔记.md","raw":"---\ntitle: python学习笔记\ndate: 2016-11-22 21:00:00\ntags: 跟着学\n---\n\n----------\n\npython脚本学习\n\n\n<!-- more -->\n<br/>\n<br/>\n\n动机：\n脚本可以省很多事情，\n开发游戏用了lua，\n但是，\n真正日常要做一些东西脚本的时候，\n发现用lua还是比较麻烦些，\n所以，\n就瞄上了python，\n恩，\n说学就学。\n\n注意：\n- 用的是python3\n- 适合有一定脚本语言基础的人看（很多脚本语言的共性没有记录）\n\n<br/>\n<br/>\n----------\n\nRound 1: 基础\n<br/>\n\n- 输出语句 print\n** 注意多个参数的格式 **\n\n\n\t\tprint('hello python!')\n\t\tx = 100\n\t\ty = 'hello'\n\t\tprint('%s user, your score is %d' % (y, x))\n\t\tprint(r'')\t\t\t\t\t\t\t# 在''内的字符不转义\n\n\n- list、tuple、dict、set\n1. list\t列表，有序的集合，随时添加删除元素\nL = []\n常用方法:\t\t\n访问元素 - L[index] - index支持负数\n末尾加入元素 - L.append(val)\n某位置插入元素 - L.insert(index, val)\n删除末尾元素 - L.pop()\n删除某位置元素 - del L[index]\n\n2. tuple 元组，初始化后不可修改 **[ 初始化一个元素的元组时，元素后要加, : t = (1, ) ]**\nT = ()\n**list 与 tuple 可相互嵌套，tuple中的list可以增删，因为存的是地址**\n\t\t\n3. dict 字典（你也可以叫它map)\nD = {'key': value, }\n\n4. set 集合，无序不重复\nS = set([])\n\n\n- 条件 与 循环\npython的语法很简单，通过缩进来显示。\n最重要的是**:**\n\n\n\t\tif <条件>:\n\t\t\tcontinue\n\t\telif <条件>:\n\t\t\tbreak\n\t\telse:\n\t\t\tpass\n\n\t\tfor < > in <对象集合>:\n\t\t\tpass\n\t\t\n\t\twhile <条件>:\n\t\t\tpass\n\n\n- 函数\n\t\t\n\n\t\t# 定义\n\t\tdef function_name(parameters):\n\t\t\tpass\t\t\t\t\t\t\t\t# 一旦定义一个函数，不可以什么都不写，但可以像这样\n\t\t\t\t\t\t\t\t\t\t\t\t# 用pass来占位，先让代码运行起来。\n\n\n当然，默认参数值，返回多个值，都是支持的\n额外要注意的应该是 **参数** 部分，包括：必选参数、默认参数、可变参数、命名关键字参数、关键字参数。\n可变参数允许传入0个或任意个参数，这些会被自动组装为一个tuple；\n关键字参数允许传入0个或任意个含参数名的参数，这些被自动组装为1个dict。\n\n\t\t\n\t\tdef book(name, author, **kw):\n\t\t\tif 'language' in kw: \t\t\t\t\t\t# 判断关键字参数中是否有 language 字段\n\t\t\t\tpass\n\n\t\t\tprint('name: ', name, 'author: ', author, 'other: ', kw)\n\n\t\t# methon1\n\t\tbook('From Grass To Tree', 'ltree98', language = 'CHN')\n\t\tbook('How To Study Python', 'ltree98', language = 'ENG', pages = 100)\n\n\t\t# method2\n\t\textra = {'language': 'KOR', 'class': 'novel'}\n\t\tbook('lalala', 'tree', **extra)\n\n\nPS：如果参数中已经有了一个可变参数，那么后面的命名关键字参数就不需要特殊分隔符'\\*'了。\n**参数顺序： 必选参数、默认参数、可变参数、命名关键字参数、关键字参数。**\n\n\t\t\n\t\tdef f(a, b = 0, *args, **kw):\t\t# 必选参数、默认参数、可变参数、关键字参数\n\t\t\tpass\n\t\tdef f2(a, b = 0, *, d, **kw):\t\t# 必选参数、默认参数、可变参数、命名关键字参数、关键字参数\n\t\t\tpass\n\n\n**对于任意函数，都可以通过func(\\*args, \\*\\*kw)的形式来调用它，无论参数是如何定义的。**\n\n\n- others:\n\t- range([start = 0,] stop, [, step = 1]]), 生成从start开始（默认为0）到stop（不等于stop）,步长为step（默认为1）的整数序列；\n\tstart 与 step都是可选参数。\n\n\n<br/>\n<br/>\n<br/>\n----------\n\nRound 2: 进阶\n<br/>\n<br/>\n\n1.  一些特性（切片、迭代、列表生成式、生成器）\n\n- 切片\n针对截取操作\nL[start: stop: step]  \n截取从start序号开始到stop序号，步长为step的值成一个list返回。\n\n\n\t\t>>> L = list(range(10))\n\t\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\t\t>>> L1 = L[:5]\n\t\t[0, 1, 2, 3, 4]\n\n\t\t>>> L2 = L[2:7]\n\t\t[2, 3, 4, 5, 6]\n\n\t\t>>> L3 = L[:-1:2]\n\t\t[0, 2, 4, 6, 8]\n\n\t\t>>> L4 = L[:]\n\t\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t\t\n\n- 迭代\n给定一个list或tuple，通过for循环来遍历它，这种遍历叫做 迭代（iteration）\n很多语言的迭代是通过下标来进行的，但python里，并不是。\n当然，顺序可能就不是你当初定义它时的顺序了。\n\t\t\n\n\t\tweekday = {'Mon': 1, 'Tue': 2, 'Wed': 3}\n\t\t\n\t\tif isinstance(weekday, Iterable):\n\t\t\tfor w in weekday:\n\t\t\t\tprint(w)\n\n\nisinstance(..., Iterable) 判断一个数据类型是否可迭代\n一般可以可迭代对象是 集合数据类型（如 list、tuple、dict、set、str等），他们都是Iterable类型。\n\n\n- 列表生成式\n顾名思义，就是一个创建list的方式，\n通过这种方式创建list比较便捷\n\n\n\t\t[x + y for x in 'ABC' for y in 'XYZ' if x != 'B']\n\t\t\n\t\t# 其实上面那个等价于下面\n\n\t\tL = []\n\t\tfor x in 'ABC':\n\t\t\tfor y in 'XYZ':\n\t\t\t\tif x != 'B':\n\t\t\t\t\tL.append(x+y)\n\n\n- 生成器\n针对于列表容量有限的缺陷，\n生成器就是一边循环一边计算。\n与列表生成式的区别是，列表生成时最外层是 []，而生成器最外层是 ()\n而且，得到的generator，需要不停next得到下一个元素。（一般会通过for循环来迭代获取）\n\t\t\n\n\t\tg = (x + y for x in 'ABC' for y in 'XYZ' if x != 'B')\n\t\tfor v in g:\n\t\t\tprint(v)\n\n\n可以作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列。\nIterator类型主要就两种，一种就是这个生成器，还有就是含yield的generator function\n\n\n<br/>\n\n2.  关于函数式编程 （ lambda、map、reduce、filter、 装饰器）\n\n\n- lambda [arg1 [, arg2, arg3, ...]]: expression\n也叫匿名函数，通过它可以非常方便快捷的定义使用一个函数。\n具体效果，下面会给出。\n\n\n- map(func, seq1[, seq2...])\n将func作用于seq中的每一个元素，并用一个列表给出返回值。\n\n\t\n\t\tdef f(x):\n\t\t\treturn x * x\n\t\tm = map(f, [1, 2, 3, 4, 5])\n\t\t# m 将会是一个列表 [1, 4, 9, 16, 25]\n\n其实，用lambda更方便简洁\n\n\n\t\tm = map(lambda x: x*x, range(1, 6))\n\n\n- reduce(func, seq[, init])\n这是一个二元操作函数，它用来将一个集合中所有数据进行从前到后的二元操作。\n\n\n\t\tfrom fuctools import reduce\n\t\tdef specialAdd(x, y):\n\t\t\treturn x*10 + y\n\t\tval = reduce(specialAdd, [1, 2, 3, 4, 5])\n\t\t# val将会是一个数字 12345\n\n\nreduce要提前导入，\n当然，也可以用lambda\n\n\n\t\tval = reduce(lambda x, y: x*10 + y, range(1, 6))\n\n\n- filter(func, seq)\n可以当做过滤器，将集合中的每个数都传入函数，根据函数返回的bool变量来决定是否留下。\n\n\t\n\t\tdef bigger_than_five(n):\n\t\t\treturn n > 5\n\t\tf = list(filter(bigger_than_five, [3, 4, 5, 6, 7, 8]))\n\t\t# f 将会是一个列表 [6, 7, 8]\n\n\t\tf2 = list(filter(lambda n: n > 5, range(3, 9)))\n\n\n- 装饰器\n装饰器的作用就像它名字一样，给函数以装饰，做一个更大一范围的修饰。\n比如，有A、B、C三个果汁工厂，现在要在每瓶果汁上印一个小商标。\n我们可以在每个工厂内建立一个流水线来印商标，\n也可以专门建立一个工厂D来印商标。\n装饰器，就像后者，工厂D。\n\n\n\t\tdef myLog(func):\n\t\t\tdef wrapper(*args, **kw):\n\t\t\t\tprint('--- this is my log')\n\t\t\t\treturn func(*args, **kw)\n\t\t\treturn wrapper\n\t\t\n\t\t@myLog\n\t\tdef demo():\n\t\t\tprint('\\n\\ndemo is running\\n\\n')\n\t\t\n\t\tdemo()\n\n注意要加语法糖 @装饰器函数\n本装饰器的作用是在函数调用前输出一段log。\n\n如果想让装饰器函数带参数，那就要进行三层嵌套。\n\n\t\t\n\t\tdef myLog(logText):\n\t\t\tdef decorator(func):\n\t\t\t\tdef wrapper(*args, **kw):\n\t\t\t\t\tprint(logText)\n\t\t\t\t\treturn func(*args, **kw)\n\t\t\t\treturn wrapper\n\t\t\treturn decorator\n\n\t\t@myLog(\"hello log\")\n\t\tdef demo():\n\t\t\tprint('\\n\\ndemo is running\\n\\n')\n\t\t\n\t\tdemo()\n\n但是，这里的函数名已经发生了更改，demo名称其实已经发生了更改，\ndemo.\\_\\_name\\_\\_ 是 wrapper\n可以通过加\nwrapper.\\_\\_name\\_\\_ = func.\\_\\_name\\_\\_\n来改回来，\n但是，过于繁琐，python提供了更好的方法\n\n\n\t\timport functools\n\t\t\n\t\tdef myLog(logText):\n\t\t\tdef decorator(func):\n\t\t\t\t@functools.wraps(func)\n\t\t\t\tdef wrapper(*args, **kw):\n\t\t\t\t\tprint(logText)\n\t\t\t\t\treturn func(*args, **kw)\n\t\t\t\treturn wrapper\n\t\t\treturn decorator\n\t\t\n\t\t@myLog(\"hello log\")\n\t\tdef demo():\n\t\t\tprint('\\n\\ndemo is running\\n\\n')\n\t\t\n\t\tdemo()\n\t\tprint(demo.__name__)\n\n\n<br/>\n\n3.  关于面向对象编程\n\npython中是有类这个结构的。\n还有一些命名规则：\n变量名以 \\_  开头，代表私有变量（非强制）\n变量名以 \\_\\_ 开头，代表私有变量 （强制）\n变量名以 \\_\\_ 开头，并且以 \\_\\_ 结尾，代表特殊变量\n\n\n\t\tclass Person(object):\n\t\t\tdef __init__(self, name, age):\n\t\t\t\tself.__name = name\n\t\t\t\tself.age = age\n\t\t\tdef eat(self):\n\t\t\t\tprint('Person Eating...')\n\n\n\t\tclass Student(Person):\n\t\t\tdef eat(self):\n\t\t\t\tprint('Student Eating...')\n\t\t\tdef study(self):\n\t\t\t\tprint('Student Study...')\n\n\n也可以对实例进行一些属性的绑定，当然，不会对类造成影响。\n当然也可以对类进行方法绑定，其所有的实例均受影响\n\t\t\n\t\tdef set_height(self, height):\n\t\t\tself.height = height\n\t\tclass Person(object):\n\t\t\tname = 'tree'\n\t\t\n\t\tp = Person()\n\t\tprint('p name is: ', p.name)\n\t\tprint('person name is: ', Person.name)\n\t\t\n\t\tp.age = 20\n\t\tprint('p age is: ', p.age)\n\t\tprint('person age is: ', Person.age\n\t\t\n\t\tPerson.set_height = set_height\n\t\tp.set_height(180)\n\t\tprint(p.height)\n\n\n最后，可以通过在类内设置一些函数来使类更加完善:\n- \\_\\_init\\_\\_ \t\t\t\t\n初始化方法\n- \\_\\_slots\\_\\_ \t\t\t\t\n设定允许绑定的变量名（子类会继承父类）\n- \\_\\_len\\_\\_\n让类可以作用于len函数，设定计算类大小的方法\n- \\_\\_str\\_\\_ 与 \\_\\_repr\\_\\_\n都是用来当 print实例对象时 显示出来的字符串。\n\\_\\_str\\_\\_是给用户看的，\\_\\_repr\\_\\_是给开发者看的（但一般都一样）\n- \\_\\_iter\\_\\_ 与 \\_\\_next\\_\\_\n可以让类作用于 for...in 循环\n- \\_\\_getitem\\_\\_\n可以像list一样实现按照下标取元素\n- \\_\\_getattr\\_\\_\n预设某属性默认值\n- \\_\\_call\\_\\_\n实现在实例本身的调用方法。\n- 装饰器实现get/set方法\t\t\n\n\t\t\n\t\tclass Person(object):\n\t\t\t@property\n\t\t\tdef age(self):\n\t\t\t    return self._age\n\t\t\t@age.setter\n\t\t\tdef age(self, value):\n\t\t\t    self._age = value\n\n\n<br/>\n<br/>\n<br/>\n----------\n\nFinal : 归纳\n<br/>\n\npython的一些基础东西，基本就这些了。\n接下来，就可以去做一些东西来边练手边加深理解。\n最后， \n工具是死的，\n人是活得，\n不要局限自己，\n放飞思维，\n大胆去做。\n\n\n<br/>\n<br/>\n<br/>\n<br/>\n\n\n\n\n参考：\n着重推荐： http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000 \nhttp://www.pythoner.com/46.html","slug":"python学习笔记","published":1,"updated":"2018-04-02T16:24:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp43r00050due7164pslb","content":"<hr>\n<p>python脚本学习</p>\n<a id=\"more\"></a>\n<p><br><br><br></p>\n<p>动机：<br>脚本可以省很多事情，<br>开发游戏用了lua，<br>但是，<br>真正日常要做一些东西脚本的时候，<br>发现用lua还是比较麻烦些，<br>所以，<br>就瞄上了python，<br>恩，<br>说学就学。</p>\n<p>注意：</p>\n<ul>\n<li>用的是python3</li>\n<li>适合有一定脚本语言基础的人看（很多脚本语言的共性没有记录）</li>\n</ul>\n<p><br></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><br></h2><p>Round 1: 基础<br><br></p>\n<ul>\n<li>输出语句 print<br><strong> 注意多个参数的格式 </strong></li>\n</ul>\n<pre><code>print(&apos;hello python!&apos;)\nx = 100\ny = &apos;hello&apos;\nprint(&apos;%s user, your score is %d&apos; % (y, x))\nprint(r&apos;&apos;)                            # 在&apos;&apos;内的字符不转义\n</code></pre><ul>\n<li>list、tuple、dict、set</li>\n</ul>\n<ol>\n<li><p>list    列表，有序的集合，随时添加删除元素<br>L = []<br>常用方法:<br>访问元素 - L[index] - index支持负数<br>末尾加入元素 - L.append(val)<br>某位置插入元素 - L.insert(index, val)<br>删除末尾元素 - L.pop()<br>删除某位置元素 - del L[index]</p>\n</li>\n<li><p>tuple 元组，初始化后不可修改 <strong>[ 初始化一个元素的元组时，元素后要加, : t = (1, ) ]</strong><br>T = ()<br><strong>list 与 tuple 可相互嵌套，tuple中的list可以增删，因为存的是地址</strong></p>\n</li>\n<li><p>dict 字典（你也可以叫它map)<br>D = {‘key’: value, }</p>\n</li>\n<li><p>set 集合，无序不重复<br>S = set([])</p>\n</li>\n</ol>\n<ul>\n<li>条件 与 循环<br>python的语法很简单，通过缩进来显示。<br>最重要的是<strong>:</strong></li>\n</ul>\n<pre><code>if &lt;条件&gt;:\n    continue\nelif &lt;条件&gt;:\n    break\nelse:\n    pass\n\nfor &lt; &gt; in &lt;对象集合&gt;:\n    pass\n\nwhile &lt;条件&gt;:\n    pass\n</code></pre><ul>\n<li>函数</li>\n</ul>\n<pre><code># 定义\ndef function_name(parameters):\n    pass                                # 一旦定义一个函数，不可以什么都不写，但可以像这样\n                                        # 用pass来占位，先让代码运行起来。\n</code></pre><p>当然，默认参数值，返回多个值，都是支持的<br>额外要注意的应该是 <strong>参数</strong> 部分，包括：必选参数、默认参数、可变参数、命名关键字参数、关键字参数。<br>可变参数允许传入0个或任意个参数，这些会被自动组装为一个tuple；<br>关键字参数允许传入0个或任意个含参数名的参数，这些被自动组装为1个dict。</p>\n<pre><code>def book(name, author, **kw):\n    if &apos;language&apos; in kw:                         # 判断关键字参数中是否有 language 字段\n        pass\n\n    print(&apos;name: &apos;, name, &apos;author: &apos;, author, &apos;other: &apos;, kw)\n\n# methon1\nbook(&apos;From Grass To Tree&apos;, &apos;ltree98&apos;, language = &apos;CHN&apos;)\nbook(&apos;How To Study Python&apos;, &apos;ltree98&apos;, language = &apos;ENG&apos;, pages = 100)\n\n# method2\nextra = {&apos;language&apos;: &apos;KOR&apos;, &apos;class&apos;: &apos;novel&apos;}\nbook(&apos;lalala&apos;, &apos;tree&apos;, **extra)\n</code></pre><p>PS：如果参数中已经有了一个可变参数，那么后面的命名关键字参数就不需要特殊分隔符’*‘了。<br><strong>参数顺序： 必选参数、默认参数、可变参数、命名关键字参数、关键字参数。</strong></p>\n<pre><code>def f(a, b = 0, *args, **kw):        # 必选参数、默认参数、可变参数、关键字参数\n    pass\ndef f2(a, b = 0, *, d, **kw):        # 必选参数、默认参数、可变参数、命名关键字参数、关键字参数\n    pass\n</code></pre><p><strong>对于任意函数，都可以通过func(*args, **kw)的形式来调用它，无论参数是如何定义的。</strong></p>\n<ul>\n<li>others:<ul>\n<li>range([start = 0,] stop, [, step = 1]]), 生成从start开始（默认为0）到stop（不等于stop）,步长为step（默认为1）的整数序列；<br>start 与 step都是可选参数。</li>\n</ul>\n</li>\n</ul>\n<p><br><br><br></p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><br></h2><p>Round 2: 进阶<br><br><br><br></p>\n<ol>\n<li>一些特性（切片、迭代、列表生成式、生成器）</li>\n</ol>\n<ul>\n<li>切片<br>针对截取操作<br>L[start: stop: step]<br>截取从start序号开始到stop序号，步长为step的值成一个list返回。</li>\n</ul>\n<pre><code>&gt;&gt;&gt; L = list(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n&gt;&gt;&gt; L1 = L[:5]\n[0, 1, 2, 3, 4]\n\n&gt;&gt;&gt; L2 = L[2:7]\n[2, 3, 4, 5, 6]\n\n&gt;&gt;&gt; L3 = L[:-1:2]\n[0, 2, 4, 6, 8]\n\n&gt;&gt;&gt; L4 = L[:]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre><ul>\n<li>迭代<br>给定一个list或tuple，通过for循环来遍历它，这种遍历叫做 迭代（iteration）<br>很多语言的迭代是通过下标来进行的，但python里，并不是。<br>当然，顺序可能就不是你当初定义它时的顺序了。</li>\n</ul>\n<pre><code>weekday = {&apos;Mon&apos;: 1, &apos;Tue&apos;: 2, &apos;Wed&apos;: 3}\n\nif isinstance(weekday, Iterable):\n    for w in weekday:\n        print(w)\n</code></pre><p>isinstance(…, Iterable) 判断一个数据类型是否可迭代<br>一般可以可迭代对象是 集合数据类型（如 list、tuple、dict、set、str等），他们都是Iterable类型。</p>\n<ul>\n<li>列表生成式<br>顾名思义，就是一个创建list的方式，<br>通过这种方式创建list比较便捷</li>\n</ul>\n<pre><code>[x + y for x in &apos;ABC&apos; for y in &apos;XYZ&apos; if x != &apos;B&apos;]\n\n# 其实上面那个等价于下面\n\nL = []\nfor x in &apos;ABC&apos;:\n    for y in &apos;XYZ&apos;:\n        if x != &apos;B&apos;:\n            L.append(x+y)\n</code></pre><ul>\n<li>生成器<br>针对于列表容量有限的缺陷，<br>生成器就是一边循环一边计算。<br>与列表生成式的区别是，列表生成时最外层是 []，而生成器最外层是 ()<br>而且，得到的generator，需要不停next得到下一个元素。（一般会通过for循环来迭代获取）</li>\n</ul>\n<pre><code>g = (x + y for x in &apos;ABC&apos; for y in &apos;XYZ&apos; if x != &apos;B&apos;)\nfor v in g:\n    print(v)\n</code></pre><p>可以作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列。<br>Iterator类型主要就两种，一种就是这个生成器，还有就是含yield的generator function</p>\n<p><br></p>\n<ol start=\"2\">\n<li>关于函数式编程 （ lambda、map、reduce、filter、 装饰器）</li>\n</ol>\n<ul>\n<li>lambda [arg1 [, arg2, arg3, …]]: expression<br>也叫匿名函数，通过它可以非常方便快捷的定义使用一个函数。<br>具体效果，下面会给出。</li>\n</ul>\n<ul>\n<li>map(func, seq1[, seq2…])<br>将func作用于seq中的每一个元素，并用一个列表给出返回值。</li>\n</ul>\n<pre><code>def f(x):\n    return x * x\nm = map(f, [1, 2, 3, 4, 5])\n# m 将会是一个列表 [1, 4, 9, 16, 25]\n</code></pre><p>其实，用lambda更方便简洁</p>\n<pre><code>m = map(lambda x: x*x, range(1, 6))\n</code></pre><ul>\n<li>reduce(func, seq[, init])<br>这是一个二元操作函数，它用来将一个集合中所有数据进行从前到后的二元操作。</li>\n</ul>\n<pre><code>from fuctools import reduce\ndef specialAdd(x, y):\n    return x*10 + y\nval = reduce(specialAdd, [1, 2, 3, 4, 5])\n# val将会是一个数字 12345\n</code></pre><p>reduce要提前导入，<br>当然，也可以用lambda</p>\n<pre><code>val = reduce(lambda x, y: x*10 + y, range(1, 6))\n</code></pre><ul>\n<li>filter(func, seq)<br>可以当做过滤器，将集合中的每个数都传入函数，根据函数返回的bool变量来决定是否留下。</li>\n</ul>\n<pre><code>def bigger_than_five(n):\n    return n &gt; 5\nf = list(filter(bigger_than_five, [3, 4, 5, 6, 7, 8]))\n# f 将会是一个列表 [6, 7, 8]\n\nf2 = list(filter(lambda n: n &gt; 5, range(3, 9)))\n</code></pre><ul>\n<li>装饰器<br>装饰器的作用就像它名字一样，给函数以装饰，做一个更大一范围的修饰。<br>比如，有A、B、C三个果汁工厂，现在要在每瓶果汁上印一个小商标。<br>我们可以在每个工厂内建立一个流水线来印商标，<br>也可以专门建立一个工厂D来印商标。<br>装饰器，就像后者，工厂D。</li>\n</ul>\n<pre><code>def myLog(func):\n    def wrapper(*args, **kw):\n        print(&apos;--- this is my log&apos;)\n        return func(*args, **kw)\n    return wrapper\n\n@myLog\ndef demo():\n    print(&apos;\\n\\ndemo is running\\n\\n&apos;)\n\ndemo()\n</code></pre><p>注意要加语法糖 @装饰器函数<br>本装饰器的作用是在函数调用前输出一段log。</p>\n<p>如果想让装饰器函数带参数，那就要进行三层嵌套。</p>\n<pre><code>def myLog(logText):\n    def decorator(func):\n        def wrapper(*args, **kw):\n            print(logText)\n            return func(*args, **kw)\n        return wrapper\n    return decorator\n\n@myLog(&quot;hello log&quot;)\ndef demo():\n    print(&apos;\\n\\ndemo is running\\n\\n&apos;)\n\ndemo()\n</code></pre><p>但是，这里的函数名已经发生了更改，demo名称其实已经发生了更改，<br>demo.__name__ 是 wrapper<br>可以通过加<br>wrapper.__name__ = func.__name__<br>来改回来，<br>但是，过于繁琐，python提供了更好的方法</p>\n<pre><code>import functools\n\ndef myLog(logText):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            print(logText)\n            return func(*args, **kw)\n        return wrapper\n    return decorator\n\n@myLog(&quot;hello log&quot;)\ndef demo():\n    print(&apos;\\n\\ndemo is running\\n\\n&apos;)\n\ndemo()\nprint(demo.__name__)\n</code></pre><p><br></p>\n<ol start=\"3\">\n<li>关于面向对象编程</li>\n</ol>\n<p>python中是有类这个结构的。<br>还有一些命名规则：<br>变量名以 _  开头，代表私有变量（非强制）<br>变量名以 __ 开头，代表私有变量 （强制）<br>变量名以 __ 开头，并且以 __ 结尾，代表特殊变量</p>\n<pre><code>class Person(object):\n    def __init__(self, name, age):\n        self.__name = name\n        self.age = age\n    def eat(self):\n        print(&apos;Person Eating...&apos;)\n\n\nclass Student(Person):\n    def eat(self):\n        print(&apos;Student Eating...&apos;)\n    def study(self):\n        print(&apos;Student Study...&apos;)\n</code></pre><p>也可以对实例进行一些属性的绑定，当然，不会对类造成影响。<br>当然也可以对类进行方法绑定，其所有的实例均受影响</p>\n<pre><code>def set_height(self, height):\n    self.height = height\nclass Person(object):\n    name = &apos;tree&apos;\n\np = Person()\nprint(&apos;p name is: &apos;, p.name)\nprint(&apos;person name is: &apos;, Person.name)\n\np.age = 20\nprint(&apos;p age is: &apos;, p.age)\nprint(&apos;person age is: &apos;, Person.age\n\nPerson.set_height = set_height\np.set_height(180)\nprint(p.height)\n</code></pre><p>最后，可以通过在类内设置一些函数来使类更加完善:</p>\n<ul>\n<li>__init__<br>初始化方法</li>\n<li>__slots__<br>设定允许绑定的变量名（子类会继承父类）</li>\n<li>__len__<br>让类可以作用于len函数，设定计算类大小的方法</li>\n<li>__str__ 与 __repr__<br>都是用来当 print实例对象时 显示出来的字符串。<br>__str__是给用户看的，__repr__是给开发者看的（但一般都一样）</li>\n<li>__iter__ 与 __next__<br>可以让类作用于 for…in 循环</li>\n<li>__getitem__<br>可以像list一样实现按照下标取元素</li>\n<li>__getattr__<br>预设某属性默认值</li>\n<li>__call__<br>实现在实例本身的调用方法。</li>\n<li>装饰器实现get/set方法        </li>\n</ul>\n<pre><code>class Person(object):\n    @property\n    def age(self):\n        return self._age\n    @age.setter\n    def age(self, value):\n        self._age = value\n</code></pre><p><br><br><br></p>\n<h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a><br></h2><p>Final : 归纳<br><br></p>\n<p>python的一些基础东西，基本就这些了。<br>接下来，就可以去做一些东西来边练手边加深理解。<br>最后，<br>工具是死的，<br>人是活得，<br>不要局限自己，<br>放飞思维，<br>大胆去做。</p>\n<p><br><br><br><br><br><br><br></p>\n<p>参考：<br>着重推荐： <a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\" rel=\"noopener\">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000</a><br><a href=\"http://www.pythoner.com/46.html\" target=\"_blank\" rel=\"noopener\">http://www.pythoner.com/46.html</a></p>\n","site":{"data":{}},"excerpt":"<hr>\n<p>python脚本学习</p>","more":"<p><br><br><br></p>\n<p>动机：<br>脚本可以省很多事情，<br>开发游戏用了lua，<br>但是，<br>真正日常要做一些东西脚本的时候，<br>发现用lua还是比较麻烦些，<br>所以，<br>就瞄上了python，<br>恩，<br>说学就学。</p>\n<p>注意：</p>\n<ul>\n<li>用的是python3</li>\n<li>适合有一定脚本语言基础的人看（很多脚本语言的共性没有记录）</li>\n</ul>\n<p><br></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><br></h2><p>Round 1: 基础<br><br></p>\n<ul>\n<li>输出语句 print<br><strong> 注意多个参数的格式 </strong></li>\n</ul>\n<pre><code>print(&apos;hello python!&apos;)\nx = 100\ny = &apos;hello&apos;\nprint(&apos;%s user, your score is %d&apos; % (y, x))\nprint(r&apos;&apos;)                            # 在&apos;&apos;内的字符不转义\n</code></pre><ul>\n<li>list、tuple、dict、set</li>\n</ul>\n<ol>\n<li><p>list    列表，有序的集合，随时添加删除元素<br>L = []<br>常用方法:<br>访问元素 - L[index] - index支持负数<br>末尾加入元素 - L.append(val)<br>某位置插入元素 - L.insert(index, val)<br>删除末尾元素 - L.pop()<br>删除某位置元素 - del L[index]</p>\n</li>\n<li><p>tuple 元组，初始化后不可修改 <strong>[ 初始化一个元素的元组时，元素后要加, : t = (1, ) ]</strong><br>T = ()<br><strong>list 与 tuple 可相互嵌套，tuple中的list可以增删，因为存的是地址</strong></p>\n</li>\n<li><p>dict 字典（你也可以叫它map)<br>D = {‘key’: value, }</p>\n</li>\n<li><p>set 集合，无序不重复<br>S = set([])</p>\n</li>\n</ol>\n<ul>\n<li>条件 与 循环<br>python的语法很简单，通过缩进来显示。<br>最重要的是<strong>:</strong></li>\n</ul>\n<pre><code>if &lt;条件&gt;:\n    continue\nelif &lt;条件&gt;:\n    break\nelse:\n    pass\n\nfor &lt; &gt; in &lt;对象集合&gt;:\n    pass\n\nwhile &lt;条件&gt;:\n    pass\n</code></pre><ul>\n<li>函数</li>\n</ul>\n<pre><code># 定义\ndef function_name(parameters):\n    pass                                # 一旦定义一个函数，不可以什么都不写，但可以像这样\n                                        # 用pass来占位，先让代码运行起来。\n</code></pre><p>当然，默认参数值，返回多个值，都是支持的<br>额外要注意的应该是 <strong>参数</strong> 部分，包括：必选参数、默认参数、可变参数、命名关键字参数、关键字参数。<br>可变参数允许传入0个或任意个参数，这些会被自动组装为一个tuple；<br>关键字参数允许传入0个或任意个含参数名的参数，这些被自动组装为1个dict。</p>\n<pre><code>def book(name, author, **kw):\n    if &apos;language&apos; in kw:                         # 判断关键字参数中是否有 language 字段\n        pass\n\n    print(&apos;name: &apos;, name, &apos;author: &apos;, author, &apos;other: &apos;, kw)\n\n# methon1\nbook(&apos;From Grass To Tree&apos;, &apos;ltree98&apos;, language = &apos;CHN&apos;)\nbook(&apos;How To Study Python&apos;, &apos;ltree98&apos;, language = &apos;ENG&apos;, pages = 100)\n\n# method2\nextra = {&apos;language&apos;: &apos;KOR&apos;, &apos;class&apos;: &apos;novel&apos;}\nbook(&apos;lalala&apos;, &apos;tree&apos;, **extra)\n</code></pre><p>PS：如果参数中已经有了一个可变参数，那么后面的命名关键字参数就不需要特殊分隔符’*‘了。<br><strong>参数顺序： 必选参数、默认参数、可变参数、命名关键字参数、关键字参数。</strong></p>\n<pre><code>def f(a, b = 0, *args, **kw):        # 必选参数、默认参数、可变参数、关键字参数\n    pass\ndef f2(a, b = 0, *, d, **kw):        # 必选参数、默认参数、可变参数、命名关键字参数、关键字参数\n    pass\n</code></pre><p><strong>对于任意函数，都可以通过func(*args, **kw)的形式来调用它，无论参数是如何定义的。</strong></p>\n<ul>\n<li>others:<ul>\n<li>range([start = 0,] stop, [, step = 1]]), 生成从start开始（默认为0）到stop（不等于stop）,步长为step（默认为1）的整数序列；<br>start 与 step都是可选参数。</li>\n</ul>\n</li>\n</ul>\n<p><br><br><br></p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><br></h2><p>Round 2: 进阶<br><br><br><br></p>\n<ol>\n<li>一些特性（切片、迭代、列表生成式、生成器）</li>\n</ol>\n<ul>\n<li>切片<br>针对截取操作<br>L[start: stop: step]<br>截取从start序号开始到stop序号，步长为step的值成一个list返回。</li>\n</ul>\n<pre><code>&gt;&gt;&gt; L = list(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n&gt;&gt;&gt; L1 = L[:5]\n[0, 1, 2, 3, 4]\n\n&gt;&gt;&gt; L2 = L[2:7]\n[2, 3, 4, 5, 6]\n\n&gt;&gt;&gt; L3 = L[:-1:2]\n[0, 2, 4, 6, 8]\n\n&gt;&gt;&gt; L4 = L[:]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre><ul>\n<li>迭代<br>给定一个list或tuple，通过for循环来遍历它，这种遍历叫做 迭代（iteration）<br>很多语言的迭代是通过下标来进行的，但python里，并不是。<br>当然，顺序可能就不是你当初定义它时的顺序了。</li>\n</ul>\n<pre><code>weekday = {&apos;Mon&apos;: 1, &apos;Tue&apos;: 2, &apos;Wed&apos;: 3}\n\nif isinstance(weekday, Iterable):\n    for w in weekday:\n        print(w)\n</code></pre><p>isinstance(…, Iterable) 判断一个数据类型是否可迭代<br>一般可以可迭代对象是 集合数据类型（如 list、tuple、dict、set、str等），他们都是Iterable类型。</p>\n<ul>\n<li>列表生成式<br>顾名思义，就是一个创建list的方式，<br>通过这种方式创建list比较便捷</li>\n</ul>\n<pre><code>[x + y for x in &apos;ABC&apos; for y in &apos;XYZ&apos; if x != &apos;B&apos;]\n\n# 其实上面那个等价于下面\n\nL = []\nfor x in &apos;ABC&apos;:\n    for y in &apos;XYZ&apos;:\n        if x != &apos;B&apos;:\n            L.append(x+y)\n</code></pre><ul>\n<li>生成器<br>针对于列表容量有限的缺陷，<br>生成器就是一边循环一边计算。<br>与列表生成式的区别是，列表生成时最外层是 []，而生成器最外层是 ()<br>而且，得到的generator，需要不停next得到下一个元素。（一般会通过for循环来迭代获取）</li>\n</ul>\n<pre><code>g = (x + y for x in &apos;ABC&apos; for y in &apos;XYZ&apos; if x != &apos;B&apos;)\nfor v in g:\n    print(v)\n</code></pre><p>可以作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列。<br>Iterator类型主要就两种，一种就是这个生成器，还有就是含yield的generator function</p>\n<p><br></p>\n<ol start=\"2\">\n<li>关于函数式编程 （ lambda、map、reduce、filter、 装饰器）</li>\n</ol>\n<ul>\n<li>lambda [arg1 [, arg2, arg3, …]]: expression<br>也叫匿名函数，通过它可以非常方便快捷的定义使用一个函数。<br>具体效果，下面会给出。</li>\n</ul>\n<ul>\n<li>map(func, seq1[, seq2…])<br>将func作用于seq中的每一个元素，并用一个列表给出返回值。</li>\n</ul>\n<pre><code>def f(x):\n    return x * x\nm = map(f, [1, 2, 3, 4, 5])\n# m 将会是一个列表 [1, 4, 9, 16, 25]\n</code></pre><p>其实，用lambda更方便简洁</p>\n<pre><code>m = map(lambda x: x*x, range(1, 6))\n</code></pre><ul>\n<li>reduce(func, seq[, init])<br>这是一个二元操作函数，它用来将一个集合中所有数据进行从前到后的二元操作。</li>\n</ul>\n<pre><code>from fuctools import reduce\ndef specialAdd(x, y):\n    return x*10 + y\nval = reduce(specialAdd, [1, 2, 3, 4, 5])\n# val将会是一个数字 12345\n</code></pre><p>reduce要提前导入，<br>当然，也可以用lambda</p>\n<pre><code>val = reduce(lambda x, y: x*10 + y, range(1, 6))\n</code></pre><ul>\n<li>filter(func, seq)<br>可以当做过滤器，将集合中的每个数都传入函数，根据函数返回的bool变量来决定是否留下。</li>\n</ul>\n<pre><code>def bigger_than_five(n):\n    return n &gt; 5\nf = list(filter(bigger_than_five, [3, 4, 5, 6, 7, 8]))\n# f 将会是一个列表 [6, 7, 8]\n\nf2 = list(filter(lambda n: n &gt; 5, range(3, 9)))\n</code></pre><ul>\n<li>装饰器<br>装饰器的作用就像它名字一样，给函数以装饰，做一个更大一范围的修饰。<br>比如，有A、B、C三个果汁工厂，现在要在每瓶果汁上印一个小商标。<br>我们可以在每个工厂内建立一个流水线来印商标，<br>也可以专门建立一个工厂D来印商标。<br>装饰器，就像后者，工厂D。</li>\n</ul>\n<pre><code>def myLog(func):\n    def wrapper(*args, **kw):\n        print(&apos;--- this is my log&apos;)\n        return func(*args, **kw)\n    return wrapper\n\n@myLog\ndef demo():\n    print(&apos;\\n\\ndemo is running\\n\\n&apos;)\n\ndemo()\n</code></pre><p>注意要加语法糖 @装饰器函数<br>本装饰器的作用是在函数调用前输出一段log。</p>\n<p>如果想让装饰器函数带参数，那就要进行三层嵌套。</p>\n<pre><code>def myLog(logText):\n    def decorator(func):\n        def wrapper(*args, **kw):\n            print(logText)\n            return func(*args, **kw)\n        return wrapper\n    return decorator\n\n@myLog(&quot;hello log&quot;)\ndef demo():\n    print(&apos;\\n\\ndemo is running\\n\\n&apos;)\n\ndemo()\n</code></pre><p>但是，这里的函数名已经发生了更改，demo名称其实已经发生了更改，<br>demo.__name__ 是 wrapper<br>可以通过加<br>wrapper.__name__ = func.__name__<br>来改回来，<br>但是，过于繁琐，python提供了更好的方法</p>\n<pre><code>import functools\n\ndef myLog(logText):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            print(logText)\n            return func(*args, **kw)\n        return wrapper\n    return decorator\n\n@myLog(&quot;hello log&quot;)\ndef demo():\n    print(&apos;\\n\\ndemo is running\\n\\n&apos;)\n\ndemo()\nprint(demo.__name__)\n</code></pre><p><br></p>\n<ol start=\"3\">\n<li>关于面向对象编程</li>\n</ol>\n<p>python中是有类这个结构的。<br>还有一些命名规则：<br>变量名以 _  开头，代表私有变量（非强制）<br>变量名以 __ 开头，代表私有变量 （强制）<br>变量名以 __ 开头，并且以 __ 结尾，代表特殊变量</p>\n<pre><code>class Person(object):\n    def __init__(self, name, age):\n        self.__name = name\n        self.age = age\n    def eat(self):\n        print(&apos;Person Eating...&apos;)\n\n\nclass Student(Person):\n    def eat(self):\n        print(&apos;Student Eating...&apos;)\n    def study(self):\n        print(&apos;Student Study...&apos;)\n</code></pre><p>也可以对实例进行一些属性的绑定，当然，不会对类造成影响。<br>当然也可以对类进行方法绑定，其所有的实例均受影响</p>\n<pre><code>def set_height(self, height):\n    self.height = height\nclass Person(object):\n    name = &apos;tree&apos;\n\np = Person()\nprint(&apos;p name is: &apos;, p.name)\nprint(&apos;person name is: &apos;, Person.name)\n\np.age = 20\nprint(&apos;p age is: &apos;, p.age)\nprint(&apos;person age is: &apos;, Person.age\n\nPerson.set_height = set_height\np.set_height(180)\nprint(p.height)\n</code></pre><p>最后，可以通过在类内设置一些函数来使类更加完善:</p>\n<ul>\n<li>__init__<br>初始化方法</li>\n<li>__slots__<br>设定允许绑定的变量名（子类会继承父类）</li>\n<li>__len__<br>让类可以作用于len函数，设定计算类大小的方法</li>\n<li>__str__ 与 __repr__<br>都是用来当 print实例对象时 显示出来的字符串。<br>__str__是给用户看的，__repr__是给开发者看的（但一般都一样）</li>\n<li>__iter__ 与 __next__<br>可以让类作用于 for…in 循环</li>\n<li>__getitem__<br>可以像list一样实现按照下标取元素</li>\n<li>__getattr__<br>预设某属性默认值</li>\n<li>__call__<br>实现在实例本身的调用方法。</li>\n<li>装饰器实现get/set方法        </li>\n</ul>\n<pre><code>class Person(object):\n    @property\n    def age(self):\n        return self._age\n    @age.setter\n    def age(self, value):\n        self._age = value\n</code></pre><p><br><br><br></p>\n<h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a><br></h2><p>Final : 归纳<br><br></p>\n<p>python的一些基础东西，基本就这些了。<br>接下来，就可以去做一些东西来边练手边加深理解。<br>最后，<br>工具是死的，<br>人是活得，<br>不要局限自己，<br>放飞思维，<br>大胆去做。</p>\n<p><br><br><br><br><br><br><br></p>\n<p>参考：<br>着重推荐： <a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\" rel=\"noopener\">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000</a><br><a href=\"http://www.pythoner.com/46.html\" target=\"_blank\" rel=\"noopener\">http://www.pythoner.com/46.html</a></p>"},{"title":"《REWORK》读记","date":"2016-11-20T13:00:00.000Z","_content":"\n----------\n\nJason Friend 与 David Heinemeier Hansson 的 《REWORK》\n\n\n<!-- more -->\n<br/>\n\n好喜欢这种结构的书籍，\n每段都不是很长，\n很多段之间没有特别强大的关联性，\n特别适合在坐公交、坐地铁时候看一看。\n\n这本书感觉就像是给准备创业的人的一个个小TIP，\n作者把他们创业中遇到的想到的总结起来，供后人参考。\n还有，这本书的插图，真是赞的很。\n\n这其中，我最喜欢的一小段，\n就是 —— Tone is in your fingers\n你的思想，你的东西，通过改变工具是变不了的。\n\n作者之后也发布了另一部新作 《REMOTE》，\n评价好像不是很好。\n但是，还是要看一看的。\n\n最最后，这本书中文名叫 —— 重来\n额...好吧。","source":"_posts/《REWORK》读记.md","raw":"---\ntitle: 《REWORK》读记\ndate: 2016-11-20 21:00:00\ntags: 看着读\n---\n\n----------\n\nJason Friend 与 David Heinemeier Hansson 的 《REWORK》\n\n\n<!-- more -->\n<br/>\n\n好喜欢这种结构的书籍，\n每段都不是很长，\n很多段之间没有特别强大的关联性，\n特别适合在坐公交、坐地铁时候看一看。\n\n这本书感觉就像是给准备创业的人的一个个小TIP，\n作者把他们创业中遇到的想到的总结起来，供后人参考。\n还有，这本书的插图，真是赞的很。\n\n这其中，我最喜欢的一小段，\n就是 —— Tone is in your fingers\n你的思想，你的东西，通过改变工具是变不了的。\n\n作者之后也发布了另一部新作 《REMOTE》，\n评价好像不是很好。\n但是，还是要看一看的。\n\n最最后，这本书中文名叫 —— 重来\n额...好吧。","slug":"《REWORK》读记","published":1,"updated":"2018-04-02T16:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp43w00080duedyaamuy0","content":"<hr>\n<p>Jason Friend 与 David Heinemeier Hansson 的 《REWORK》</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>好喜欢这种结构的书籍，<br>每段都不是很长，<br>很多段之间没有特别强大的关联性，<br>特别适合在坐公交、坐地铁时候看一看。</p>\n<p>这本书感觉就像是给准备创业的人的一个个小TIP，<br>作者把他们创业中遇到的想到的总结起来，供后人参考。<br>还有，这本书的插图，真是赞的很。</p>\n<p>这其中，我最喜欢的一小段，<br>就是 —— Tone is in your fingers<br>你的思想，你的东西，通过改变工具是变不了的。</p>\n<p>作者之后也发布了另一部新作 《REMOTE》，<br>评价好像不是很好。<br>但是，还是要看一看的。</p>\n<p>最最后，这本书中文名叫 —— 重来<br>额…好吧。</p>\n","site":{"data":{}},"excerpt":"<hr>\n<p>Jason Friend 与 David Heinemeier Hansson 的 《REWORK》</p>","more":"<p><br></p>\n<p>好喜欢这种结构的书籍，<br>每段都不是很长，<br>很多段之间没有特别强大的关联性，<br>特别适合在坐公交、坐地铁时候看一看。</p>\n<p>这本书感觉就像是给准备创业的人的一个个小TIP，<br>作者把他们创业中遇到的想到的总结起来，供后人参考。<br>还有，这本书的插图，真是赞的很。</p>\n<p>这其中，我最喜欢的一小段，<br>就是 —— Tone is in your fingers<br>你的思想，你的东西，通过改变工具是变不了的。</p>\n<p>作者之后也发布了另一部新作 《REMOTE》，<br>评价好像不是很好。<br>但是，还是要看一看的。</p>\n<p>最最后，这本书中文名叫 —— 重来<br>额…好吧。</p>"},{"title":"《三体》读感","date":"2017-02-13T13:37:35.000Z","_content":"\n《三体》 第一部，读感\n\n<!-- more -->\n<br/>\n\n这是我看的第一部科幻小说，\n正如同事所言: 起点那么高，也不怕扯到裆= =..\n但是，自小阅历无数网络鸦片小说的我，历经各种玄幻校园修真异世穿越等毒害，当然不至于败倒在此。\n<br/>\n我知道这本书还是因为电影《超体》，当时好像挺乱。\n我看过电影，也看完了这本书第一部，\n个人感觉这两者好像没大有啥关系呀？如果同为科幻类也算关系的话，那它们倒还是有点儿关系的。\n<br/>\n第一部看完，还好，没有上来就一堆理论压死我。\n最开始台球问题的启蒙，瞬间就打开了我的思维。\n后面看到汪淼面对各种离奇的事物的恐慌，当时还有些不理解，\n后来才明白，这大概就是敬畏吧，无知的人才无所畏惧，知道的越多，就越敬畏。\n当然，这里面还是有一些理论术语什么的，还是不懂。\n但也没有去苛求，也没有去深究，\n才不管死亡倒计时的原理呢？别耽误我往后看！（傲娇小脸 ┗|｀O′|┛ ）\n<br/>\n整本书看完，\n印象最深刻的还是那个三体游戏以及它背后的三体文明，\n乱纪元与恒纪元的交替，\n文明一次次出现，一次次毁灭，\n但不变的是它们的目标，为了生存。\n为了生存，一次次脱水；\n为了生存，不断追求纪元规律；\n但是，找到规律后发现，自己的星球随时可能灰飞烟灭。\n于是，为了生存，它们前往地球。\n但是，怕到了地球，自己文明被压制，被地球文明毁灭，所以要压制地球文明。\n一切都是为了生存。\n但是，生存下去后呢？\n大概就是地球如今的模样，陷入内斗了。\n这时，会不会又有其他的文明来替代呢？\n<br/>\n最后，就是这本书的后记：\n如果存在外星文明，那么宇宙中有共同的道德标准吗？\n我翻来覆去的想，还是觉得不会有。\n（本来想了一堆，但是还是不写了，太负面太消极，我自己消极消极就够了..)\n<br/>\n最后的最后：\n\t我们都只是虫子而已。\n<br/>\n期待拜读后两部作品。\n","source":"_posts/《三体》读感.md","raw":"---\ntitle: 《三体》读感\ndate: 2017-02-13 21:37:35\ntags: 看着读\n---\n\n《三体》 第一部，读感\n\n<!-- more -->\n<br/>\n\n这是我看的第一部科幻小说，\n正如同事所言: 起点那么高，也不怕扯到裆= =..\n但是，自小阅历无数网络鸦片小说的我，历经各种玄幻校园修真异世穿越等毒害，当然不至于败倒在此。\n<br/>\n我知道这本书还是因为电影《超体》，当时好像挺乱。\n我看过电影，也看完了这本书第一部，\n个人感觉这两者好像没大有啥关系呀？如果同为科幻类也算关系的话，那它们倒还是有点儿关系的。\n<br/>\n第一部看完，还好，没有上来就一堆理论压死我。\n最开始台球问题的启蒙，瞬间就打开了我的思维。\n后面看到汪淼面对各种离奇的事物的恐慌，当时还有些不理解，\n后来才明白，这大概就是敬畏吧，无知的人才无所畏惧，知道的越多，就越敬畏。\n当然，这里面还是有一些理论术语什么的，还是不懂。\n但也没有去苛求，也没有去深究，\n才不管死亡倒计时的原理呢？别耽误我往后看！（傲娇小脸 ┗|｀O′|┛ ）\n<br/>\n整本书看完，\n印象最深刻的还是那个三体游戏以及它背后的三体文明，\n乱纪元与恒纪元的交替，\n文明一次次出现，一次次毁灭，\n但不变的是它们的目标，为了生存。\n为了生存，一次次脱水；\n为了生存，不断追求纪元规律；\n但是，找到规律后发现，自己的星球随时可能灰飞烟灭。\n于是，为了生存，它们前往地球。\n但是，怕到了地球，自己文明被压制，被地球文明毁灭，所以要压制地球文明。\n一切都是为了生存。\n但是，生存下去后呢？\n大概就是地球如今的模样，陷入内斗了。\n这时，会不会又有其他的文明来替代呢？\n<br/>\n最后，就是这本书的后记：\n如果存在外星文明，那么宇宙中有共同的道德标准吗？\n我翻来覆去的想，还是觉得不会有。\n（本来想了一堆，但是还是不写了，太负面太消极，我自己消极消极就够了..)\n<br/>\n最后的最后：\n\t我们都只是虫子而已。\n<br/>\n期待拜读后两部作品。\n","slug":"《三体》读感","published":1,"updated":"2018-04-02T16:27:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp44000090duew7fd2amr","content":"<p>《三体》 第一部，读感</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>这是我看的第一部科幻小说，<br>正如同事所言: 起点那么高，也不怕扯到裆= =..<br>但是，自小阅历无数网络鸦片小说的我，历经各种玄幻校园修真异世穿越等毒害，当然不至于败倒在此。<br><br><br>我知道这本书还是因为电影《超体》，当时好像挺乱。<br>我看过电影，也看完了这本书第一部，<br>个人感觉这两者好像没大有啥关系呀？如果同为科幻类也算关系的话，那它们倒还是有点儿关系的。<br><br><br>第一部看完，还好，没有上来就一堆理论压死我。<br>最开始台球问题的启蒙，瞬间就打开了我的思维。<br>后面看到汪淼面对各种离奇的事物的恐慌，当时还有些不理解，<br>后来才明白，这大概就是敬畏吧，无知的人才无所畏惧，知道的越多，就越敬畏。<br>当然，这里面还是有一些理论术语什么的，还是不懂。<br>但也没有去苛求，也没有去深究，<br>才不管死亡倒计时的原理呢？别耽误我往后看！（傲娇小脸 ┗|｀O′|┛ ）<br><br><br>整本书看完，<br>印象最深刻的还是那个三体游戏以及它背后的三体文明，<br>乱纪元与恒纪元的交替，<br>文明一次次出现，一次次毁灭，<br>但不变的是它们的目标，为了生存。<br>为了生存，一次次脱水；<br>为了生存，不断追求纪元规律；<br>但是，找到规律后发现，自己的星球随时可能灰飞烟灭。<br>于是，为了生存，它们前往地球。<br>但是，怕到了地球，自己文明被压制，被地球文明毁灭，所以要压制地球文明。<br>一切都是为了生存。<br>但是，生存下去后呢？<br>大概就是地球如今的模样，陷入内斗了。<br>这时，会不会又有其他的文明来替代呢？<br><br><br>最后，就是这本书的后记：<br>如果存在外星文明，那么宇宙中有共同的道德标准吗？<br>我翻来覆去的想，还是觉得不会有。<br>（本来想了一堆，但是还是不写了，太负面太消极，我自己消极消极就够了..)<br><br><br>最后的最后：<br>    我们都只是虫子而已。<br><br><br>期待拜读后两部作品。</p>\n","site":{"data":{}},"excerpt":"<p>《三体》 第一部，读感</p>","more":"<p><br></p>\n<p>这是我看的第一部科幻小说，<br>正如同事所言: 起点那么高，也不怕扯到裆= =..<br>但是，自小阅历无数网络鸦片小说的我，历经各种玄幻校园修真异世穿越等毒害，当然不至于败倒在此。<br><br><br>我知道这本书还是因为电影《超体》，当时好像挺乱。<br>我看过电影，也看完了这本书第一部，<br>个人感觉这两者好像没大有啥关系呀？如果同为科幻类也算关系的话，那它们倒还是有点儿关系的。<br><br><br>第一部看完，还好，没有上来就一堆理论压死我。<br>最开始台球问题的启蒙，瞬间就打开了我的思维。<br>后面看到汪淼面对各种离奇的事物的恐慌，当时还有些不理解，<br>后来才明白，这大概就是敬畏吧，无知的人才无所畏惧，知道的越多，就越敬畏。<br>当然，这里面还是有一些理论术语什么的，还是不懂。<br>但也没有去苛求，也没有去深究，<br>才不管死亡倒计时的原理呢？别耽误我往后看！（傲娇小脸 ┗|｀O′|┛ ）<br><br><br>整本书看完，<br>印象最深刻的还是那个三体游戏以及它背后的三体文明，<br>乱纪元与恒纪元的交替，<br>文明一次次出现，一次次毁灭，<br>但不变的是它们的目标，为了生存。<br>为了生存，一次次脱水；<br>为了生存，不断追求纪元规律；<br>但是，找到规律后发现，自己的星球随时可能灰飞烟灭。<br>于是，为了生存，它们前往地球。<br>但是，怕到了地球，自己文明被压制，被地球文明毁灭，所以要压制地球文明。<br>一切都是为了生存。<br>但是，生存下去后呢？<br>大概就是地球如今的模样，陷入内斗了。<br>这时，会不会又有其他的文明来替代呢？<br><br><br>最后，就是这本书的后记：<br>如果存在外星文明，那么宇宙中有共同的道德标准吗？<br>我翻来覆去的想，还是觉得不会有。<br>（本来想了一堆，但是还是不写了，太负面太消极，我自己消极消极就够了..)<br><br><br>最后的最后：<br>    我们都只是虫子而已。<br><br><br>期待拜读后两部作品。</p>"},{"title":"《代码的整洁之道》读记","date":"2016-10-13T13:59:16.000Z","_content":"\n----------\n\n读这本书之前做了一些功课，很多人反映，书是一本好书，无奈作者废话太多。。。\n刚开始，我是不信的，但自己读下来才发现，古人诚不欺我啊。\n来划一下重点吧，写的这些或者是作者所描述的重点，或者是我感触比较深的东西。\n\n**Later equals never！**\n**稍后等于永不！**\n\n\n<!-- more -->\n<br/>\n\n### 第一章、关于整洁的代码\n- 代码的逻辑应该直截了当，让缺陷难以隐藏；尽量去减少依赖关系，从而便于维护；依据某种分层战略完善错误处理代码；性能调到最优，避免他人污染。\n- 糟糕的代码会引发混乱，别人修改糟糕的代码时，往往会越改越烂。\n- 每个函数、每个类、每个模块 都全神贯注去解决一件事\n- 代码应该通过其字面表达含义，因为不同的语言导致并非所有必需信息均可通过代码自身清晰表达。\n- 重要顺序：         \n\t- 能通过所有测试        \n\t- 没有重复代码         \n\t- 体现系统中的全部设计理念         \n\t- 包括尽量少的实体\n<br/>\n\n### 第二章、关于命名\n- 名副其实，见名知意\n- 使用可以读的出来的、可以被搜索的名称\n- 匈牙利命名法、去掉成员前缀\n- 类名、对象名 应该是名词或名词短语；    方法名应该是动词或动词短语\n- 不要抖机灵，每个概念对应一个词，不用双关语（add、insert）\n- 分离解决方案领域和问题领域的概念，与所涉问题领域更为贴近的代码，应当采用源自问题领域的名称\n- 添加有意义的语境\n<br/>\n\n### 第三章、关于函数\n- 函数的第一规则是短小，第二条规则是更短小！\n- 第一章节有提到过的： 每个函数尽量只做一件事。\n- 自顶向下阅读代码，向下规则\n- 函数参数，最理想为零，其次单参、双参、三参...（除非有足够特殊的理由，不要三参数+）\n- 不要向函数传入bool，因为这叫要求该函数不止做一件事\n- 不要有副作用，比如让你洗个苹果，你别洗完了然后吃了它。\n- 普遍而言，应避免使用输出参数。\n- 分隔指令与询问，要么让它干什么，要么让它回答什么。\n<br/>\n\n### 第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）\n- 代码会一直被维护更新，但是注释不一定。\n- 注释不能改变根本问题，它不能优化糟糕的代码。\n- 值得写的注释：       \n\t- 版权及著作权声明等        \n\t- 对你的意图的解释        \n\t- 警示        \n\t- TODO注释，为以后编写查找方便\n- 废注释：        \n\t- 没有规范化，过于局部的注释（需要纵览全文，才能知晓其意）        \n\t- 多余的注释（ getMaxNumber(num1, num2) ,还需要写这个函数是干啥的吗？）        \n\t- 误导性注释        \n\t- 循规式注释（例如：要求每个函数都要像API文档一样写一套注释来说明函数作用，参数意义。）        \n\t- 日志式注释（之前不是说光维护代码，不维护注释吗？现在我维护注释，而且把每次修改的时间、内容都加上。有那时间干啥不好，100行的文件，80行注释日志？）        \n\t- 归属与署名        \n\t- 注释掉的代码（除了注释的人，其他人都不敢删的东西）        \n\t- 信息过多，无条理\n<br/>\n\n### 第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)\n- 用空白行来区分你的模块\n- 关系应该密切的东西：        \n\t- 变量声明，应该尽可能的靠近其使用位置        \n\t- 实体变量，应该在类的顶部声明        \n\t- 相关函数，函数A调用了函数B，应该让A和B放到一起，A尽可能的放在B的上面        \n\t- 概念相关，概念相关的代码 应该放在一起，相关性与距离成正比\n- 尽量让代码行短小，最好以80个字符为上限，但最多不要超过120\n- 水平方向上的区隔：        \n\t- 赋值操作周围加上空格        \n\t- 不在函数名和左圆括号之间加空格        \n\t- 逗号后加空格       \n\t- 加减周围加空格，优先级高的乘除周围不加空格；当然，如果只有优先级相同的运算符，还是可以在周围加空格的\n<br/>\n\n### 第六章、 关于对象与数据结构\n- 不要将类内变量设置为私有，然后又添加赋值器和取值器，将它公之于众\n- 对象与数据结构之间的二分原理：        \n\t- 过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数，        \n\t- 面向对象代码便于在不改动既有函数的前提下添加新类    \n反过来说就是：        \n\t- 过程代码难以添加新数据结构，因为必须修改所有函数        \n\t- 面向对象代码难以添加新函数，因为必须修改所有类\n- Demeter律，模块不应了解它所操作对象的内部情形\n- 最为精炼的数据结构，是一个只有公共变量、没有函数的类\n<br/>\n\n### 第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\n- 使用异常处理而非返回错误码\n- 先写出 try-catch-finally语句\n- 给出异常发生的环境说明，方便定位\n- 依调用者需要定义异常类\n- 不要返回、传递NULL值\n<br/>\n\n### 第八章、关于边界（将其他代码整合到自己代码中）\n- 使用类似Map的边界接口，就把它保留在类或近亲类中；避免从公共API中返回边界接口，或将边界接口作为参数传递给公共API。\n- 学习性测试很有必要\n<br/>\n\n### 第九章、关于单元测试\n- TDD（测试驱动开发）三定律：        \n\t- 在编写不能通过的单元测试前，不可编写生产代码        \n\t- 只可编写刚好无法通过的单元测试，不能编译也算不通过        \n\t- 只可编写刚好足以通过当前失败测试的生产代码\n- 脏测试 等同于 没测试\n- 测试代码与生产代码一样重要，它需要被思考、被设计和被照料，它该像生产代码一样保持整洁。\n- 整洁的测试的要素 \t- 可读性！！！\n- 整洁测试的五条规则 \t- FIRST        \n\t- F：Fast，测试应该能够快速的运行。        \n\t- I：Independent，测试应该相互独立。        \n\t- R：Repeatable，测试应该可以在任何环境中重复通过。        \n\t- S：Self-Validating，测试应该有布尔值输出。        \n\t- T：Timely，测试应及时编写。\n<br/>\n\n### 第十章、关于类\n- 类应该由一组变量列表开始，公共静态常量优先于私有静态变量\n- 类应该通函数一样要短小\n- 类或模块应有且只有一条加以修改的理由\n- 单一全责：系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个全责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为\n- 内聚：类应该只有少量实体变量\n- 既然修改会一直持续，那么就更应该对类加以组织，以降低修改的风险\n- 类应当依赖于抽象而不是依赖于具体细节\n<br/>\n\n### 第十一章、关于系统\n- 软件系统应将起始过程与之后的运行时逻辑分离开。    就比如我做一个玩家信息面板，在起始过程，需要创建很多Text、Image来存储玩家一些状态信息及玩家的形象。    但是，我用这个界面的时候，只需要改动里面的值、或者切换形象。    \n这时，就可以有两个函数，init来负责起始过程的创建；refresh来负责更新玩家的状态。（当然不能把所有具体实现都放在一个函数里，每个函数负责一个小模块是必要的）\n- 软件系统与物理系统可以类比，它们的架构都可以递增式地增长，只要我们持续将关注面恰当的切分。\n- 最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯Java(或其他语言）对象实现。不同领域之间用最不具有亲还行的方面或类方面工具整合起来。\n<br/>\n\n### 第十二章、关于迭代\n- Kent Beck关于简单设计的四条规则    \n\t- 运行所有测试    \n\t- 不可重复    \n\t- 表达了程序员的意图    \n\t- 尽可能减少类和方法的数量    \n\t以上规则按其重要程度排列\n- 遵循有关编写测试并持续运行测试的简单、明确的规则，系统就会更贴近OO低耦合度、高内聚度的目标。编写测试引致更好的设计。\n- 测试消除了对清理代码就会破坏代码的恐惧，所以可以放心的去重构。\n- 重复是良好系统设计的大敌，它代表着额外工作、额外风险和额外且不必要的复杂度。\n- 增强表达力方法：    \n\t- 选用好的名称    \n\t- 保持函数和类的尺寸短小    \n\t- 采用标准命名法    \n\t- 编写良好的单元测试    \n\t- 最重要的就是去尝试去做\n- 尽可能减少类和方法的数量，这条规则优先级是最低的，要让步于测试、消除重复和增强表达力。\n<br/>\n\n### 第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\n- 并发是一种解耦策略，它将**目的**和**时机**分解开，而在单线程中，两者紧密耦合。\n- 解耦目的与时机可以显著的改进程序的**吞吐量**和**结构**\n- 一些迷思与误解    \n\t- 并发总能改进系能。    并发有时能改进性能，但只在多个线程或处理器之间能分享大量等待时间的时候管用。    \n\t- 编写并发程序无需修改设计。    并发算法的设计有可能与单线程系统的设计极不相同，解耦目的与时机往往对系统结构产生巨大的影响。    \n\t- 在采用Web或EJB容器的时候，理解并发问题并不重要。    只有了解容器的运作，才可以对其产生的并发问题更好的解决。\n- 关于并发编程的中肯理解    \n\t- 并发会在性能和编写额外代码上增加一些开销    \n\t- 正确的并发是复杂的，即便对于简单的问题也是如此    \n\t-并发缺陷并非总能重现，所以常被看做偶发事件而忽略，未被当做真的缺陷看待   \n\t- 并发常常需要对设计策略的根本性修改\n- 防御并发代码问题的原则与技巧    \n\t- 单一权责原则（SRP)    \n\t分离并发相关代码与其他代码    \n\t- 限制数据作用域    \n\t谨记数据封装，严格限制对可能被共享的数据的访问    \n\t- 使用数据复本    从多个线程收集所有复本的结果，并在单个线程中合并这些结果    \n\t- 线程应尽可能的独立    尝试将数据分解到可被独立线程（可能在不同的处理器上）操作的独立子集\n- 一些基础定义    \n\t- 限定资源    \n\t并发环境中有着固定尺寸或数量的资源。    \n\t- 互斥    \n\t每一时刻仅有一个线程能访问共享数据或共享资源。    \n\t- 线程饥饿    \n\t一个或一组线程在很长时间内或永久被禁止。    \n\t- 死锁    \n\t两个或多个线程互相等待执行结束。    \n\t- 活锁    \n\t执行次序一致的线程，每个都想要起步，但发现其他线程已开始。\n- 一些执行模型    \n\t- 生产者-消费者模型    \n\t一个或多个生产者线程创建某些工作，并置于缓存或队列中。一个或多个消费者线程从队列中获取并完成这些工作。生产者和消费者之间的队列是一种限定资源。    \n\t- 读者-作者模型    \n\t当存在一个主要为读者线程提供信息源，但只偶尔被作者线程更新的共享资源，吞吐量就会是个问题。增加吞吐量，会导致线程饥饿和过时信息的累计。更新会影响吞吐量。协调读者线程，不去读作者线程正在更新的信息（反之亦然），这是一个辛苦的平衡工作。作者线程倾向于长期锁定许多读者线程，从而导致吞吐量问题。    \n\t- 经典的哲学家    一群哲学家环坐在圆桌旁。每个哲学家的左手边放了一把叉子。桌面中央摆着一大碗意大利面。每个哲学家在吃饭的时候都要拿起叉子吃饭。但除非手上有两把叉子，否则没法进食。如果左边或右边的哲学家已经取用一把叉子，中间这位就需要等到别人吃完，放回叉子。每位哲学家吃完后，就将两把叉子放回桌面，直到下次吃饭。\n- 避免使用一个共享对象的多个方法。当不得不使用时，写代码需要注意的方法。    \n\t- 基于客户端的锁定    \n\t客户端代码在调用第一个方法前锁定服务端，确保锁的范围覆盖了调用最后一个方法的代码。    \n\t- 基于服务端的锁定    \n\t在服务端创建锁定服务端的方法，调用所有方法，然后解锁。让客户端调用新方法。    \n\t- 适配服务端    \n\t创建执行锁定的中间层。这是一种基于服务端锁定的例子，但不修改原始服务端代码。\n- 尽可能减小同步区域\n- 尽早考虑关闭问题，尽早令其工作正常\n- 编写测试，测试线程代码\n关于测试代码的建议    \n\t- 将伪失败看做可能的线程问题    \n\t- 先使非线程代码可工作    \n\t- 编写可插拔的线程代码    \n\t- 编写可调整的线程代码    \n\t- 运行多于处理器数量的线程    \n\t- 在不同平台上运行    \n\t- 调整代码并强迫错误发生\n<br/>\n\n#### 第十四章、关于逐步改进\n- 要编写整洁代码，必须先写肮脏代码，然后清理它。\n所以，不要害怕写的肮脏，只要去清理，就可以写出整洁的代码。\n但是，一定要去**清理它**！\n- 在改进程序过程中，要保持系统始终可以运行\n- 进度可以重订，需求可以重新定义，团队动态可以修正，但糟糕的代码只是一直腐败发酵，无情的拖后腿\n<br/>\n\n#### 第十七章、味道与启发\n- 注释    \n\t- 不恰当的信息    \n\t让注释传达本该更好地在源代码控制系统、问题追踪系统或任何其他记录系统中保存的信息，是不恰当的。    \n\t- 废弃的注释    \n\t过时、无关或不正确的注释就是废弃的注释。    \n\t- 冗余注释 \n\t如果描述的是某种充分自我描述了的东西，那么注释就是多余的。    \n\t- 糟糕的注释    \n\t值得编写的注释，也值得好好写。不要画蛇添足，要保持整洁。    \n\t- 注释掉的代码    \n\t看到注释掉的代码，就删除它！\n\t源代码控制系统还会记得他，让注释的人回去找。    \n\t什么？不用源代码控制系统？    \n\t好吧，你已经不需要读这本书了。\n- 环境    \n\t- 需要多步才能实现的构建    \n\t构建系统应该是单步的小操作。    \n\t不应该从源代码控制系统中一点点签出代码；    \n\t不应该需要一系列神秘指令或环境依赖脚本来构建单个元素；    \n\t不应该四处寻找额外小JAR、XML文件和其他杂物；   \n\t应该能用单个命令签出系统，并用单个指令构建它。    \n\t- 需要多步才能做到的测试    \n\t应该能发出单个指令就可以运行全部单元测试。\n- 函数    \n\t- 过多的参数    \n\t函数的参数量应该少，三个以上绝对不可容忍。    \n\t- 输出参数    \n\t输出参数违反直觉，读者期望参数用于输入而非输出。    \n\t- 标识参数    \n\t布尔值参数等同于宣告该函数做了不知一件事，应该消灭。    \n\t- 死函数\n\t永不被调用的方法应该被丢弃。\n\t不要怕删除，源代码控制系统会帮你记住它。\n- 一般性问题    \n\t- 一个源文件中存在多种语言    \n\t理想的源文件包括且只包括一种语言，\n\t现实中，应该尽力减少源文件中额外语言的数量和范围。    \n\t- 明显的行为未被实现    \n\t遵循\"最小惊异原则\"，函数或类应该实现其他程序员有理由期待的行为。    \n\t- 不正确的边界行为    \n\t不要让代码只是能工作，应该追索每种边界条件，并编写测试。    \n\t- 忽视安全    \n\t关闭某些编译器警告，可能有助于构建；但更存在无穷无尽的调试风险。    \n\t- 重复    \n\t本书最重要的规则之一    \n\t尽可能找到并消除重复。    \n\t- 在错误的抽象层级上的代码    \n\t创建分离较高层级一般性概念与较低层级细节概念的抽象模型。    \n\t- 基类依赖于派生类    \n\t将概念分解到基类和派生类的最普遍的原因是较高层级基类概念可以不依赖于较低层级派生类概念。    \n\t- 信息过多    \n\t设计良好的模块有着非常小的接口，让你事半功倍。    \n\t设计低劣的模块有着广阔、深入的接口，让你事倍功半。    \n\t设计良好的接口并不提供许多需要依靠的函数，所以耦合度也较低。    \n\t设计低劣的接口提供大量必须调用的函数，耦合度较高。    \n\t- 死代码    \n\t死代码就是不执行的代码，可以在        \n\t\t- 不会发生的条件语句中        \n\t\t- 从不抛出异常的try语句的catch块中        \n\t\t- 在永久不会发生的switch/case条件中 \n\t\n\t找到这些代码。    \n\t然后，埋葬它！    \n\t- 垂直分隔    \n\t变量和函数应该在被靠近使用的地方定义。    \n\t私有函数应该刚好在其首次被使用的位置下面定义。    \n\t- 前后不一致    \n\t最小惊异原则，小心选择约定，一旦选中，就应该持续的遵循。    \n\t- 使用解释性变量名、函数名、类名    \n\t- 把逻辑依赖改为物理依赖    \n\t依赖者模块不应对被依赖者模块有假定，应该明确的询问候着全部信息。    \n\t- 用多态替代 if/else 或 switch/case    \n\t- 用命名常量替代魔术数    \n\t- 封装条件、边界    \n\t- 函数只做一件事\n- 关于类    \n\t- import package.*;  比80行的导入语句好看多了     \n\t- 不要继承常量\n- 名称    \n\t- 采用描述性的名称    \n\t- 名称应与抽象层级相符    \n\t- 尽可能用标准命名法    \n\t- 无歧义的名称    \n\t- 为较大作用范围选用较长名称    \n\t- 避免编码    \n\t- 名称应该说明副作用\n- 测试    \n\t- 多测试    \n\t- 使用覆盖率工具    \n\t- 别略过小测试    \n\t- 被忽略的测试就是对不确定事物的疑问    \n\t- 测试边界条件    \n\t- 全面测试相近的缺陷    \n\t- 测试应该快速\n<br/>\n<br/>\n\n#### 本书总结\n终于把这本书啃完了。\n虽然作者比较啰嗦点，但是收获还是很大的。\n书中提到的，有些已经做到了；\n但有些不仅没做到，还是反面教材。\n多规范一下自己的代码，毕竟对于我们来说，代码的清晰度、整洁度还是很重要的。\n代码总要给别人看的，不要让自己的代码羞以示人。","source":"_posts/《代码的整洁之道》读记.md","raw":"---\ntitle: 《代码的整洁之道》读记\ndate: 2016-10-13 21:59:16\ntags: 看着读\n---\n\n----------\n\n读这本书之前做了一些功课，很多人反映，书是一本好书，无奈作者废话太多。。。\n刚开始，我是不信的，但自己读下来才发现，古人诚不欺我啊。\n来划一下重点吧，写的这些或者是作者所描述的重点，或者是我感触比较深的东西。\n\n**Later equals never！**\n**稍后等于永不！**\n\n\n<!-- more -->\n<br/>\n\n### 第一章、关于整洁的代码\n- 代码的逻辑应该直截了当，让缺陷难以隐藏；尽量去减少依赖关系，从而便于维护；依据某种分层战略完善错误处理代码；性能调到最优，避免他人污染。\n- 糟糕的代码会引发混乱，别人修改糟糕的代码时，往往会越改越烂。\n- 每个函数、每个类、每个模块 都全神贯注去解决一件事\n- 代码应该通过其字面表达含义，因为不同的语言导致并非所有必需信息均可通过代码自身清晰表达。\n- 重要顺序：         \n\t- 能通过所有测试        \n\t- 没有重复代码         \n\t- 体现系统中的全部设计理念         \n\t- 包括尽量少的实体\n<br/>\n\n### 第二章、关于命名\n- 名副其实，见名知意\n- 使用可以读的出来的、可以被搜索的名称\n- 匈牙利命名法、去掉成员前缀\n- 类名、对象名 应该是名词或名词短语；    方法名应该是动词或动词短语\n- 不要抖机灵，每个概念对应一个词，不用双关语（add、insert）\n- 分离解决方案领域和问题领域的概念，与所涉问题领域更为贴近的代码，应当采用源自问题领域的名称\n- 添加有意义的语境\n<br/>\n\n### 第三章、关于函数\n- 函数的第一规则是短小，第二条规则是更短小！\n- 第一章节有提到过的： 每个函数尽量只做一件事。\n- 自顶向下阅读代码，向下规则\n- 函数参数，最理想为零，其次单参、双参、三参...（除非有足够特殊的理由，不要三参数+）\n- 不要向函数传入bool，因为这叫要求该函数不止做一件事\n- 不要有副作用，比如让你洗个苹果，你别洗完了然后吃了它。\n- 普遍而言，应避免使用输出参数。\n- 分隔指令与询问，要么让它干什么，要么让它回答什么。\n<br/>\n\n### 第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）\n- 代码会一直被维护更新，但是注释不一定。\n- 注释不能改变根本问题，它不能优化糟糕的代码。\n- 值得写的注释：       \n\t- 版权及著作权声明等        \n\t- 对你的意图的解释        \n\t- 警示        \n\t- TODO注释，为以后编写查找方便\n- 废注释：        \n\t- 没有规范化，过于局部的注释（需要纵览全文，才能知晓其意）        \n\t- 多余的注释（ getMaxNumber(num1, num2) ,还需要写这个函数是干啥的吗？）        \n\t- 误导性注释        \n\t- 循规式注释（例如：要求每个函数都要像API文档一样写一套注释来说明函数作用，参数意义。）        \n\t- 日志式注释（之前不是说光维护代码，不维护注释吗？现在我维护注释，而且把每次修改的时间、内容都加上。有那时间干啥不好，100行的文件，80行注释日志？）        \n\t- 归属与署名        \n\t- 注释掉的代码（除了注释的人，其他人都不敢删的东西）        \n\t- 信息过多，无条理\n<br/>\n\n### 第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)\n- 用空白行来区分你的模块\n- 关系应该密切的东西：        \n\t- 变量声明，应该尽可能的靠近其使用位置        \n\t- 实体变量，应该在类的顶部声明        \n\t- 相关函数，函数A调用了函数B，应该让A和B放到一起，A尽可能的放在B的上面        \n\t- 概念相关，概念相关的代码 应该放在一起，相关性与距离成正比\n- 尽量让代码行短小，最好以80个字符为上限，但最多不要超过120\n- 水平方向上的区隔：        \n\t- 赋值操作周围加上空格        \n\t- 不在函数名和左圆括号之间加空格        \n\t- 逗号后加空格       \n\t- 加减周围加空格，优先级高的乘除周围不加空格；当然，如果只有优先级相同的运算符，还是可以在周围加空格的\n<br/>\n\n### 第六章、 关于对象与数据结构\n- 不要将类内变量设置为私有，然后又添加赋值器和取值器，将它公之于众\n- 对象与数据结构之间的二分原理：        \n\t- 过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数，        \n\t- 面向对象代码便于在不改动既有函数的前提下添加新类    \n反过来说就是：        \n\t- 过程代码难以添加新数据结构，因为必须修改所有函数        \n\t- 面向对象代码难以添加新函数，因为必须修改所有类\n- Demeter律，模块不应了解它所操作对象的内部情形\n- 最为精炼的数据结构，是一个只有公共变量、没有函数的类\n<br/>\n\n### 第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\n- 使用异常处理而非返回错误码\n- 先写出 try-catch-finally语句\n- 给出异常发生的环境说明，方便定位\n- 依调用者需要定义异常类\n- 不要返回、传递NULL值\n<br/>\n\n### 第八章、关于边界（将其他代码整合到自己代码中）\n- 使用类似Map的边界接口，就把它保留在类或近亲类中；避免从公共API中返回边界接口，或将边界接口作为参数传递给公共API。\n- 学习性测试很有必要\n<br/>\n\n### 第九章、关于单元测试\n- TDD（测试驱动开发）三定律：        \n\t- 在编写不能通过的单元测试前，不可编写生产代码        \n\t- 只可编写刚好无法通过的单元测试，不能编译也算不通过        \n\t- 只可编写刚好足以通过当前失败测试的生产代码\n- 脏测试 等同于 没测试\n- 测试代码与生产代码一样重要，它需要被思考、被设计和被照料，它该像生产代码一样保持整洁。\n- 整洁的测试的要素 \t- 可读性！！！\n- 整洁测试的五条规则 \t- FIRST        \n\t- F：Fast，测试应该能够快速的运行。        \n\t- I：Independent，测试应该相互独立。        \n\t- R：Repeatable，测试应该可以在任何环境中重复通过。        \n\t- S：Self-Validating，测试应该有布尔值输出。        \n\t- T：Timely，测试应及时编写。\n<br/>\n\n### 第十章、关于类\n- 类应该由一组变量列表开始，公共静态常量优先于私有静态变量\n- 类应该通函数一样要短小\n- 类或模块应有且只有一条加以修改的理由\n- 单一全责：系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个全责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为\n- 内聚：类应该只有少量实体变量\n- 既然修改会一直持续，那么就更应该对类加以组织，以降低修改的风险\n- 类应当依赖于抽象而不是依赖于具体细节\n<br/>\n\n### 第十一章、关于系统\n- 软件系统应将起始过程与之后的运行时逻辑分离开。    就比如我做一个玩家信息面板，在起始过程，需要创建很多Text、Image来存储玩家一些状态信息及玩家的形象。    但是，我用这个界面的时候，只需要改动里面的值、或者切换形象。    \n这时，就可以有两个函数，init来负责起始过程的创建；refresh来负责更新玩家的状态。（当然不能把所有具体实现都放在一个函数里，每个函数负责一个小模块是必要的）\n- 软件系统与物理系统可以类比，它们的架构都可以递增式地增长，只要我们持续将关注面恰当的切分。\n- 最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯Java(或其他语言）对象实现。不同领域之间用最不具有亲还行的方面或类方面工具整合起来。\n<br/>\n\n### 第十二章、关于迭代\n- Kent Beck关于简单设计的四条规则    \n\t- 运行所有测试    \n\t- 不可重复    \n\t- 表达了程序员的意图    \n\t- 尽可能减少类和方法的数量    \n\t以上规则按其重要程度排列\n- 遵循有关编写测试并持续运行测试的简单、明确的规则，系统就会更贴近OO低耦合度、高内聚度的目标。编写测试引致更好的设计。\n- 测试消除了对清理代码就会破坏代码的恐惧，所以可以放心的去重构。\n- 重复是良好系统设计的大敌，它代表着额外工作、额外风险和额外且不必要的复杂度。\n- 增强表达力方法：    \n\t- 选用好的名称    \n\t- 保持函数和类的尺寸短小    \n\t- 采用标准命名法    \n\t- 编写良好的单元测试    \n\t- 最重要的就是去尝试去做\n- 尽可能减少类和方法的数量，这条规则优先级是最低的，要让步于测试、消除重复和增强表达力。\n<br/>\n\n### 第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\n- 并发是一种解耦策略，它将**目的**和**时机**分解开，而在单线程中，两者紧密耦合。\n- 解耦目的与时机可以显著的改进程序的**吞吐量**和**结构**\n- 一些迷思与误解    \n\t- 并发总能改进系能。    并发有时能改进性能，但只在多个线程或处理器之间能分享大量等待时间的时候管用。    \n\t- 编写并发程序无需修改设计。    并发算法的设计有可能与单线程系统的设计极不相同，解耦目的与时机往往对系统结构产生巨大的影响。    \n\t- 在采用Web或EJB容器的时候，理解并发问题并不重要。    只有了解容器的运作，才可以对其产生的并发问题更好的解决。\n- 关于并发编程的中肯理解    \n\t- 并发会在性能和编写额外代码上增加一些开销    \n\t- 正确的并发是复杂的，即便对于简单的问题也是如此    \n\t-并发缺陷并非总能重现，所以常被看做偶发事件而忽略，未被当做真的缺陷看待   \n\t- 并发常常需要对设计策略的根本性修改\n- 防御并发代码问题的原则与技巧    \n\t- 单一权责原则（SRP)    \n\t分离并发相关代码与其他代码    \n\t- 限制数据作用域    \n\t谨记数据封装，严格限制对可能被共享的数据的访问    \n\t- 使用数据复本    从多个线程收集所有复本的结果，并在单个线程中合并这些结果    \n\t- 线程应尽可能的独立    尝试将数据分解到可被独立线程（可能在不同的处理器上）操作的独立子集\n- 一些基础定义    \n\t- 限定资源    \n\t并发环境中有着固定尺寸或数量的资源。    \n\t- 互斥    \n\t每一时刻仅有一个线程能访问共享数据或共享资源。    \n\t- 线程饥饿    \n\t一个或一组线程在很长时间内或永久被禁止。    \n\t- 死锁    \n\t两个或多个线程互相等待执行结束。    \n\t- 活锁    \n\t执行次序一致的线程，每个都想要起步，但发现其他线程已开始。\n- 一些执行模型    \n\t- 生产者-消费者模型    \n\t一个或多个生产者线程创建某些工作，并置于缓存或队列中。一个或多个消费者线程从队列中获取并完成这些工作。生产者和消费者之间的队列是一种限定资源。    \n\t- 读者-作者模型    \n\t当存在一个主要为读者线程提供信息源，但只偶尔被作者线程更新的共享资源，吞吐量就会是个问题。增加吞吐量，会导致线程饥饿和过时信息的累计。更新会影响吞吐量。协调读者线程，不去读作者线程正在更新的信息（反之亦然），这是一个辛苦的平衡工作。作者线程倾向于长期锁定许多读者线程，从而导致吞吐量问题。    \n\t- 经典的哲学家    一群哲学家环坐在圆桌旁。每个哲学家的左手边放了一把叉子。桌面中央摆着一大碗意大利面。每个哲学家在吃饭的时候都要拿起叉子吃饭。但除非手上有两把叉子，否则没法进食。如果左边或右边的哲学家已经取用一把叉子，中间这位就需要等到别人吃完，放回叉子。每位哲学家吃完后，就将两把叉子放回桌面，直到下次吃饭。\n- 避免使用一个共享对象的多个方法。当不得不使用时，写代码需要注意的方法。    \n\t- 基于客户端的锁定    \n\t客户端代码在调用第一个方法前锁定服务端，确保锁的范围覆盖了调用最后一个方法的代码。    \n\t- 基于服务端的锁定    \n\t在服务端创建锁定服务端的方法，调用所有方法，然后解锁。让客户端调用新方法。    \n\t- 适配服务端    \n\t创建执行锁定的中间层。这是一种基于服务端锁定的例子，但不修改原始服务端代码。\n- 尽可能减小同步区域\n- 尽早考虑关闭问题，尽早令其工作正常\n- 编写测试，测试线程代码\n关于测试代码的建议    \n\t- 将伪失败看做可能的线程问题    \n\t- 先使非线程代码可工作    \n\t- 编写可插拔的线程代码    \n\t- 编写可调整的线程代码    \n\t- 运行多于处理器数量的线程    \n\t- 在不同平台上运行    \n\t- 调整代码并强迫错误发生\n<br/>\n\n#### 第十四章、关于逐步改进\n- 要编写整洁代码，必须先写肮脏代码，然后清理它。\n所以，不要害怕写的肮脏，只要去清理，就可以写出整洁的代码。\n但是，一定要去**清理它**！\n- 在改进程序过程中，要保持系统始终可以运行\n- 进度可以重订，需求可以重新定义，团队动态可以修正，但糟糕的代码只是一直腐败发酵，无情的拖后腿\n<br/>\n\n#### 第十七章、味道与启发\n- 注释    \n\t- 不恰当的信息    \n\t让注释传达本该更好地在源代码控制系统、问题追踪系统或任何其他记录系统中保存的信息，是不恰当的。    \n\t- 废弃的注释    \n\t过时、无关或不正确的注释就是废弃的注释。    \n\t- 冗余注释 \n\t如果描述的是某种充分自我描述了的东西，那么注释就是多余的。    \n\t- 糟糕的注释    \n\t值得编写的注释，也值得好好写。不要画蛇添足，要保持整洁。    \n\t- 注释掉的代码    \n\t看到注释掉的代码，就删除它！\n\t源代码控制系统还会记得他，让注释的人回去找。    \n\t什么？不用源代码控制系统？    \n\t好吧，你已经不需要读这本书了。\n- 环境    \n\t- 需要多步才能实现的构建    \n\t构建系统应该是单步的小操作。    \n\t不应该从源代码控制系统中一点点签出代码；    \n\t不应该需要一系列神秘指令或环境依赖脚本来构建单个元素；    \n\t不应该四处寻找额外小JAR、XML文件和其他杂物；   \n\t应该能用单个命令签出系统，并用单个指令构建它。    \n\t- 需要多步才能做到的测试    \n\t应该能发出单个指令就可以运行全部单元测试。\n- 函数    \n\t- 过多的参数    \n\t函数的参数量应该少，三个以上绝对不可容忍。    \n\t- 输出参数    \n\t输出参数违反直觉，读者期望参数用于输入而非输出。    \n\t- 标识参数    \n\t布尔值参数等同于宣告该函数做了不知一件事，应该消灭。    \n\t- 死函数\n\t永不被调用的方法应该被丢弃。\n\t不要怕删除，源代码控制系统会帮你记住它。\n- 一般性问题    \n\t- 一个源文件中存在多种语言    \n\t理想的源文件包括且只包括一种语言，\n\t现实中，应该尽力减少源文件中额外语言的数量和范围。    \n\t- 明显的行为未被实现    \n\t遵循\"最小惊异原则\"，函数或类应该实现其他程序员有理由期待的行为。    \n\t- 不正确的边界行为    \n\t不要让代码只是能工作，应该追索每种边界条件，并编写测试。    \n\t- 忽视安全    \n\t关闭某些编译器警告，可能有助于构建；但更存在无穷无尽的调试风险。    \n\t- 重复    \n\t本书最重要的规则之一    \n\t尽可能找到并消除重复。    \n\t- 在错误的抽象层级上的代码    \n\t创建分离较高层级一般性概念与较低层级细节概念的抽象模型。    \n\t- 基类依赖于派生类    \n\t将概念分解到基类和派生类的最普遍的原因是较高层级基类概念可以不依赖于较低层级派生类概念。    \n\t- 信息过多    \n\t设计良好的模块有着非常小的接口，让你事半功倍。    \n\t设计低劣的模块有着广阔、深入的接口，让你事倍功半。    \n\t设计良好的接口并不提供许多需要依靠的函数，所以耦合度也较低。    \n\t设计低劣的接口提供大量必须调用的函数，耦合度较高。    \n\t- 死代码    \n\t死代码就是不执行的代码，可以在        \n\t\t- 不会发生的条件语句中        \n\t\t- 从不抛出异常的try语句的catch块中        \n\t\t- 在永久不会发生的switch/case条件中 \n\t\n\t找到这些代码。    \n\t然后，埋葬它！    \n\t- 垂直分隔    \n\t变量和函数应该在被靠近使用的地方定义。    \n\t私有函数应该刚好在其首次被使用的位置下面定义。    \n\t- 前后不一致    \n\t最小惊异原则，小心选择约定，一旦选中，就应该持续的遵循。    \n\t- 使用解释性变量名、函数名、类名    \n\t- 把逻辑依赖改为物理依赖    \n\t依赖者模块不应对被依赖者模块有假定，应该明确的询问候着全部信息。    \n\t- 用多态替代 if/else 或 switch/case    \n\t- 用命名常量替代魔术数    \n\t- 封装条件、边界    \n\t- 函数只做一件事\n- 关于类    \n\t- import package.*;  比80行的导入语句好看多了     \n\t- 不要继承常量\n- 名称    \n\t- 采用描述性的名称    \n\t- 名称应与抽象层级相符    \n\t- 尽可能用标准命名法    \n\t- 无歧义的名称    \n\t- 为较大作用范围选用较长名称    \n\t- 避免编码    \n\t- 名称应该说明副作用\n- 测试    \n\t- 多测试    \n\t- 使用覆盖率工具    \n\t- 别略过小测试    \n\t- 被忽略的测试就是对不确定事物的疑问    \n\t- 测试边界条件    \n\t- 全面测试相近的缺陷    \n\t- 测试应该快速\n<br/>\n<br/>\n\n#### 本书总结\n终于把这本书啃完了。\n虽然作者比较啰嗦点，但是收获还是很大的。\n书中提到的，有些已经做到了；\n但有些不仅没做到，还是反面教材。\n多规范一下自己的代码，毕竟对于我们来说，代码的清晰度、整洁度还是很重要的。\n代码总要给别人看的，不要让自己的代码羞以示人。","slug":"《代码的整洁之道》读记","published":1,"updated":"2018-04-02T16:27:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp444000c0due3pk9v38p","content":"<hr>\n<p>读这本书之前做了一些功课，很多人反映，书是一本好书，无奈作者废话太多。。。<br>刚开始，我是不信的，但自己读下来才发现，古人诚不欺我啊。<br>来划一下重点吧，写的这些或者是作者所描述的重点，或者是我感触比较深的东西。</p>\n<p><strong>Later equals never！</strong><br><strong>稍后等于永不！</strong></p>\n<a id=\"more\"></a>\n<p><br></p>\n<h3 id=\"第一章、关于整洁的代码\"><a href=\"#第一章、关于整洁的代码\" class=\"headerlink\" title=\"第一章、关于整洁的代码\"></a>第一章、关于整洁的代码</h3><ul>\n<li>代码的逻辑应该直截了当，让缺陷难以隐藏；尽量去减少依赖关系，从而便于维护；依据某种分层战略完善错误处理代码；性能调到最优，避免他人污染。</li>\n<li>糟糕的代码会引发混乱，别人修改糟糕的代码时，往往会越改越烂。</li>\n<li>每个函数、每个类、每个模块 都全神贯注去解决一件事</li>\n<li>代码应该通过其字面表达含义，因为不同的语言导致并非所有必需信息均可通过代码自身清晰表达。</li>\n<li>重要顺序：         <ul>\n<li>能通过所有测试        </li>\n<li>没有重复代码         </li>\n<li>体现系统中的全部设计理念         </li>\n<li>包括尽量少的实体<br><br></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第二章、关于命名\"><a href=\"#第二章、关于命名\" class=\"headerlink\" title=\"第二章、关于命名\"></a>第二章、关于命名</h3><ul>\n<li>名副其实，见名知意</li>\n<li>使用可以读的出来的、可以被搜索的名称</li>\n<li>匈牙利命名法、去掉成员前缀</li>\n<li>类名、对象名 应该是名词或名词短语；    方法名应该是动词或动词短语</li>\n<li>不要抖机灵，每个概念对应一个词，不用双关语（add、insert）</li>\n<li>分离解决方案领域和问题领域的概念，与所涉问题领域更为贴近的代码，应当采用源自问题领域的名称</li>\n<li>添加有意义的语境<br><br></li>\n</ul>\n<h3 id=\"第三章、关于函数\"><a href=\"#第三章、关于函数\" class=\"headerlink\" title=\"第三章、关于函数\"></a>第三章、关于函数</h3><ul>\n<li>函数的第一规则是短小，第二条规则是更短小！</li>\n<li>第一章节有提到过的： 每个函数尽量只做一件事。</li>\n<li>自顶向下阅读代码，向下规则</li>\n<li>函数参数，最理想为零，其次单参、双参、三参…（除非有足够特殊的理由，不要三参数+）</li>\n<li>不要向函数传入bool，因为这叫要求该函数不止做一件事</li>\n<li>不要有副作用，比如让你洗个苹果，你别洗完了然后吃了它。</li>\n<li>普遍而言，应避免使用输出参数。</li>\n<li>分隔指令与询问，要么让它干什么，要么让它回答什么。<br><br></li>\n</ul>\n<h3 id=\"第四章、关于注释-（别给糟糕的代码加注释，重新写吧！）\"><a href=\"#第四章、关于注释-（别给糟糕的代码加注释，重新写吧！）\" class=\"headerlink\" title=\"第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）\"></a>第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）</h3><ul>\n<li>代码会一直被维护更新，但是注释不一定。</li>\n<li>注释不能改变根本问题，它不能优化糟糕的代码。</li>\n<li>值得写的注释：       <ul>\n<li>版权及著作权声明等        </li>\n<li>对你的意图的解释        </li>\n<li>警示        </li>\n<li>TODO注释，为以后编写查找方便</li>\n</ul>\n</li>\n<li>废注释：        <ul>\n<li>没有规范化，过于局部的注释（需要纵览全文，才能知晓其意）        </li>\n<li>多余的注释（ getMaxNumber(num1, num2) ,还需要写这个函数是干啥的吗？）        </li>\n<li>误导性注释        </li>\n<li>循规式注释（例如：要求每个函数都要像API文档一样写一套注释来说明函数作用，参数意义。）        </li>\n<li>日志式注释（之前不是说光维护代码，不维护注释吗？现在我维护注释，而且把每次修改的时间、内容都加上。有那时间干啥不好，100行的文件，80行注释日志？）        </li>\n<li>归属与署名        </li>\n<li>注释掉的代码（除了注释的人，其他人都不敢删的东西）        </li>\n<li>信息过多，无条理<br><br></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第五章、关于格式-代码的格式是你代码的普通话，别让他说方言\"><a href=\"#第五章、关于格式-代码的格式是你代码的普通话，别让他说方言\" class=\"headerlink\" title=\"第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)\"></a>第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)</h3><ul>\n<li>用空白行来区分你的模块</li>\n<li>关系应该密切的东西：        <ul>\n<li>变量声明，应该尽可能的靠近其使用位置        </li>\n<li>实体变量，应该在类的顶部声明        </li>\n<li>相关函数，函数A调用了函数B，应该让A和B放到一起，A尽可能的放在B的上面        </li>\n<li>概念相关，概念相关的代码 应该放在一起，相关性与距离成正比</li>\n</ul>\n</li>\n<li>尽量让代码行短小，最好以80个字符为上限，但最多不要超过120</li>\n<li>水平方向上的区隔：        <ul>\n<li>赋值操作周围加上空格        </li>\n<li>不在函数名和左圆括号之间加空格        </li>\n<li>逗号后加空格       </li>\n<li>加减周围加空格，优先级高的乘除周围不加空格；当然，如果只有优先级相同的运算符，还是可以在周围加空格的<br><br></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第六章、-关于对象与数据结构\"><a href=\"#第六章、-关于对象与数据结构\" class=\"headerlink\" title=\"第六章、 关于对象与数据结构\"></a>第六章、 关于对象与数据结构</h3><ul>\n<li>不要将类内变量设置为私有，然后又添加赋值器和取值器，将它公之于众</li>\n<li>对象与数据结构之间的二分原理：        <ul>\n<li>过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数，        </li>\n<li>面向对象代码便于在不改动既有函数的前提下添加新类<br>反过来说就是：        </li>\n<li>过程代码难以添加新数据结构，因为必须修改所有函数        </li>\n<li>面向对象代码难以添加新函数，因为必须修改所有类</li>\n</ul>\n</li>\n<li>Demeter律，模块不应了解它所操作对象的内部情形</li>\n<li>最为精炼的数据结构，是一个只有公共变量、没有函数的类<br><br></li>\n</ul>\n<h3 id=\"第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\"><a href=\"#第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\" class=\"headerlink\" title=\"第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\"></a>第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）</h3><ul>\n<li>使用异常处理而非返回错误码</li>\n<li>先写出 try-catch-finally语句</li>\n<li>给出异常发生的环境说明，方便定位</li>\n<li>依调用者需要定义异常类</li>\n<li>不要返回、传递NULL值<br><br></li>\n</ul>\n<h3 id=\"第八章、关于边界（将其他代码整合到自己代码中）\"><a href=\"#第八章、关于边界（将其他代码整合到自己代码中）\" class=\"headerlink\" title=\"第八章、关于边界（将其他代码整合到自己代码中）\"></a>第八章、关于边界（将其他代码整合到自己代码中）</h3><ul>\n<li>使用类似Map的边界接口，就把它保留在类或近亲类中；避免从公共API中返回边界接口，或将边界接口作为参数传递给公共API。</li>\n<li>学习性测试很有必要<br><br></li>\n</ul>\n<h3 id=\"第九章、关于单元测试\"><a href=\"#第九章、关于单元测试\" class=\"headerlink\" title=\"第九章、关于单元测试\"></a>第九章、关于单元测试</h3><ul>\n<li>TDD（测试驱动开发）三定律：        <ul>\n<li>在编写不能通过的单元测试前，不可编写生产代码        </li>\n<li>只可编写刚好无法通过的单元测试，不能编译也算不通过        </li>\n<li>只可编写刚好足以通过当前失败测试的生产代码</li>\n</ul>\n</li>\n<li>脏测试 等同于 没测试</li>\n<li>测试代码与生产代码一样重要，它需要被思考、被设计和被照料，它该像生产代码一样保持整洁。</li>\n<li>整洁的测试的要素     - 可读性！！！</li>\n<li>整洁测试的五条规则     - FIRST        <ul>\n<li>F：Fast，测试应该能够快速的运行。        </li>\n<li>I：Independent，测试应该相互独立。        </li>\n<li>R：Repeatable，测试应该可以在任何环境中重复通过。        </li>\n<li>S：Self-Validating，测试应该有布尔值输出。        </li>\n<li>T：Timely，测试应及时编写。<br><br></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第十章、关于类\"><a href=\"#第十章、关于类\" class=\"headerlink\" title=\"第十章、关于类\"></a>第十章、关于类</h3><ul>\n<li>类应该由一组变量列表开始，公共静态常量优先于私有静态变量</li>\n<li>类应该通函数一样要短小</li>\n<li>类或模块应有且只有一条加以修改的理由</li>\n<li>单一全责：系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个全责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为</li>\n<li>内聚：类应该只有少量实体变量</li>\n<li>既然修改会一直持续，那么就更应该对类加以组织，以降低修改的风险</li>\n<li>类应当依赖于抽象而不是依赖于具体细节<br><br></li>\n</ul>\n<h3 id=\"第十一章、关于系统\"><a href=\"#第十一章、关于系统\" class=\"headerlink\" title=\"第十一章、关于系统\"></a>第十一章、关于系统</h3><ul>\n<li>软件系统应将起始过程与之后的运行时逻辑分离开。    就比如我做一个玩家信息面板，在起始过程，需要创建很多Text、Image来存储玩家一些状态信息及玩家的形象。    但是，我用这个界面的时候，只需要改动里面的值、或者切换形象。<br>这时，就可以有两个函数，init来负责起始过程的创建；refresh来负责更新玩家的状态。（当然不能把所有具体实现都放在一个函数里，每个函数负责一个小模块是必要的）</li>\n<li>软件系统与物理系统可以类比，它们的架构都可以递增式地增长，只要我们持续将关注面恰当的切分。</li>\n<li>最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯Java(或其他语言）对象实现。不同领域之间用最不具有亲还行的方面或类方面工具整合起来。<br><br></li>\n</ul>\n<h3 id=\"第十二章、关于迭代\"><a href=\"#第十二章、关于迭代\" class=\"headerlink\" title=\"第十二章、关于迭代\"></a>第十二章、关于迭代</h3><ul>\n<li>Kent Beck关于简单设计的四条规则    <ul>\n<li>运行所有测试    </li>\n<li>不可重复    </li>\n<li>表达了程序员的意图    </li>\n<li>尽可能减少类和方法的数量<br>以上规则按其重要程度排列</li>\n</ul>\n</li>\n<li>遵循有关编写测试并持续运行测试的简单、明确的规则，系统就会更贴近OO低耦合度、高内聚度的目标。编写测试引致更好的设计。</li>\n<li>测试消除了对清理代码就会破坏代码的恐惧，所以可以放心的去重构。</li>\n<li>重复是良好系统设计的大敌，它代表着额外工作、额外风险和额外且不必要的复杂度。</li>\n<li>增强表达力方法：    <ul>\n<li>选用好的名称    </li>\n<li>保持函数和类的尺寸短小    </li>\n<li>采用标准命名法    </li>\n<li>编写良好的单元测试    </li>\n<li>最重要的就是去尝试去做</li>\n</ul>\n</li>\n<li>尽可能减少类和方法的数量，这条规则优先级是最低的，要让步于测试、消除重复和增强表达力。<br><br></li>\n</ul>\n<h3 id=\"第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\"><a href=\"#第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\" class=\"headerlink\" title=\"第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\"></a>第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）</h3><ul>\n<li>并发是一种解耦策略，它将<strong>目的</strong>和<strong>时机</strong>分解开，而在单线程中，两者紧密耦合。</li>\n<li>解耦目的与时机可以显著的改进程序的<strong>吞吐量</strong>和<strong>结构</strong></li>\n<li>一些迷思与误解    <ul>\n<li>并发总能改进系能。    并发有时能改进性能，但只在多个线程或处理器之间能分享大量等待时间的时候管用。    </li>\n<li>编写并发程序无需修改设计。    并发算法的设计有可能与单线程系统的设计极不相同，解耦目的与时机往往对系统结构产生巨大的影响。    </li>\n<li>在采用Web或EJB容器的时候，理解并发问题并不重要。    只有了解容器的运作，才可以对其产生的并发问题更好的解决。</li>\n</ul>\n</li>\n<li>关于并发编程的中肯理解    <ul>\n<li>并发会在性能和编写额外代码上增加一些开销    </li>\n<li>正确的并发是复杂的，即便对于简单的问题也是如此<br>-并发缺陷并非总能重现，所以常被看做偶发事件而忽略，未被当做真的缺陷看待   </li>\n<li>并发常常需要对设计策略的根本性修改</li>\n</ul>\n</li>\n<li>防御并发代码问题的原则与技巧    <ul>\n<li>单一权责原则（SRP)<br>分离并发相关代码与其他代码    </li>\n<li>限制数据作用域<br>谨记数据封装，严格限制对可能被共享的数据的访问    </li>\n<li>使用数据复本    从多个线程收集所有复本的结果，并在单个线程中合并这些结果    </li>\n<li>线程应尽可能的独立    尝试将数据分解到可被独立线程（可能在不同的处理器上）操作的独立子集</li>\n</ul>\n</li>\n<li>一些基础定义    <ul>\n<li>限定资源<br>并发环境中有着固定尺寸或数量的资源。    </li>\n<li>互斥<br>每一时刻仅有一个线程能访问共享数据或共享资源。    </li>\n<li>线程饥饿<br>一个或一组线程在很长时间内或永久被禁止。    </li>\n<li>死锁<br>两个或多个线程互相等待执行结束。    </li>\n<li>活锁<br>执行次序一致的线程，每个都想要起步，但发现其他线程已开始。</li>\n</ul>\n</li>\n<li>一些执行模型    <ul>\n<li>生产者-消费者模型<br>一个或多个生产者线程创建某些工作，并置于缓存或队列中。一个或多个消费者线程从队列中获取并完成这些工作。生产者和消费者之间的队列是一种限定资源。    </li>\n<li>读者-作者模型<br>当存在一个主要为读者线程提供信息源，但只偶尔被作者线程更新的共享资源，吞吐量就会是个问题。增加吞吐量，会导致线程饥饿和过时信息的累计。更新会影响吞吐量。协调读者线程，不去读作者线程正在更新的信息（反之亦然），这是一个辛苦的平衡工作。作者线程倾向于长期锁定许多读者线程，从而导致吞吐量问题。    </li>\n<li>经典的哲学家    一群哲学家环坐在圆桌旁。每个哲学家的左手边放了一把叉子。桌面中央摆着一大碗意大利面。每个哲学家在吃饭的时候都要拿起叉子吃饭。但除非手上有两把叉子，否则没法进食。如果左边或右边的哲学家已经取用一把叉子，中间这位就需要等到别人吃完，放回叉子。每位哲学家吃完后，就将两把叉子放回桌面，直到下次吃饭。</li>\n</ul>\n</li>\n<li>避免使用一个共享对象的多个方法。当不得不使用时，写代码需要注意的方法。    <ul>\n<li>基于客户端的锁定<br>客户端代码在调用第一个方法前锁定服务端，确保锁的范围覆盖了调用最后一个方法的代码。    </li>\n<li>基于服务端的锁定<br>在服务端创建锁定服务端的方法，调用所有方法，然后解锁。让客户端调用新方法。    </li>\n<li>适配服务端<br>创建执行锁定的中间层。这是一种基于服务端锁定的例子，但不修改原始服务端代码。</li>\n</ul>\n</li>\n<li>尽可能减小同步区域</li>\n<li>尽早考虑关闭问题，尽早令其工作正常</li>\n<li>编写测试，测试线程代码<br>关于测试代码的建议    <ul>\n<li>将伪失败看做可能的线程问题    </li>\n<li>先使非线程代码可工作    </li>\n<li>编写可插拔的线程代码    </li>\n<li>编写可调整的线程代码    </li>\n<li>运行多于处理器数量的线程    </li>\n<li>在不同平台上运行    </li>\n<li>调整代码并强迫错误发生<br><br></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第十四章、关于逐步改进\"><a href=\"#第十四章、关于逐步改进\" class=\"headerlink\" title=\"第十四章、关于逐步改进\"></a>第十四章、关于逐步改进</h4><ul>\n<li>要编写整洁代码，必须先写肮脏代码，然后清理它。<br>所以，不要害怕写的肮脏，只要去清理，就可以写出整洁的代码。<br>但是，一定要去<strong>清理它</strong>！</li>\n<li>在改进程序过程中，要保持系统始终可以运行</li>\n<li>进度可以重订，需求可以重新定义，团队动态可以修正，但糟糕的代码只是一直腐败发酵，无情的拖后腿<br><br></li>\n</ul>\n<h4 id=\"第十七章、味道与启发\"><a href=\"#第十七章、味道与启发\" class=\"headerlink\" title=\"第十七章、味道与启发\"></a>第十七章、味道与启发</h4><ul>\n<li>注释    <ul>\n<li>不恰当的信息<br>让注释传达本该更好地在源代码控制系统、问题追踪系统或任何其他记录系统中保存的信息，是不恰当的。    </li>\n<li>废弃的注释<br>过时、无关或不正确的注释就是废弃的注释。    </li>\n<li>冗余注释<br>如果描述的是某种充分自我描述了的东西，那么注释就是多余的。    </li>\n<li>糟糕的注释<br>值得编写的注释，也值得好好写。不要画蛇添足，要保持整洁。    </li>\n<li>注释掉的代码<br>看到注释掉的代码，就删除它！<br>源代码控制系统还会记得他，让注释的人回去找。<br>什么？不用源代码控制系统？<br>好吧，你已经不需要读这本书了。</li>\n</ul>\n</li>\n<li>环境    <ul>\n<li>需要多步才能实现的构建<br>构建系统应该是单步的小操作。<br>不应该从源代码控制系统中一点点签出代码；<br>不应该需要一系列神秘指令或环境依赖脚本来构建单个元素；<br>不应该四处寻找额外小JAR、XML文件和其他杂物；<br>应该能用单个命令签出系统，并用单个指令构建它。    </li>\n<li>需要多步才能做到的测试<br>应该能发出单个指令就可以运行全部单元测试。</li>\n</ul>\n</li>\n<li>函数    <ul>\n<li>过多的参数<br>函数的参数量应该少，三个以上绝对不可容忍。    </li>\n<li>输出参数<br>输出参数违反直觉，读者期望参数用于输入而非输出。    </li>\n<li>标识参数<br>布尔值参数等同于宣告该函数做了不知一件事，应该消灭。    </li>\n<li>死函数<br>永不被调用的方法应该被丢弃。<br>不要怕删除，源代码控制系统会帮你记住它。</li>\n</ul>\n</li>\n<li><p>一般性问题    </p>\n<ul>\n<li>一个源文件中存在多种语言<br>理想的源文件包括且只包括一种语言，<br>现实中，应该尽力减少源文件中额外语言的数量和范围。    </li>\n<li>明显的行为未被实现<br>遵循”最小惊异原则”，函数或类应该实现其他程序员有理由期待的行为。    </li>\n<li>不正确的边界行为<br>不要让代码只是能工作，应该追索每种边界条件，并编写测试。    </li>\n<li>忽视安全<br>关闭某些编译器警告，可能有助于构建；但更存在无穷无尽的调试风险。    </li>\n<li>重复<br>本书最重要的规则之一<br>尽可能找到并消除重复。    </li>\n<li>在错误的抽象层级上的代码<br>创建分离较高层级一般性概念与较低层级细节概念的抽象模型。    </li>\n<li>基类依赖于派生类<br>将概念分解到基类和派生类的最普遍的原因是较高层级基类概念可以不依赖于较低层级派生类概念。    </li>\n<li>信息过多<br>设计良好的模块有着非常小的接口，让你事半功倍。<br>设计低劣的模块有着广阔、深入的接口，让你事倍功半。<br>设计良好的接口并不提供许多需要依靠的函数，所以耦合度也较低。<br>设计低劣的接口提供大量必须调用的函数，耦合度较高。    </li>\n<li><p>死代码<br>死代码就是不执行的代码，可以在        </p>\n<ul>\n<li>不会发生的条件语句中        </li>\n<li>从不抛出异常的try语句的catch块中        </li>\n<li>在永久不会发生的switch/case条件中 </li>\n</ul>\n<p>找到这些代码。<br>然后，埋葬它！    </p>\n</li>\n<li>垂直分隔<br>变量和函数应该在被靠近使用的地方定义。<br>私有函数应该刚好在其首次被使用的位置下面定义。    </li>\n<li>前后不一致<br>最小惊异原则，小心选择约定，一旦选中，就应该持续的遵循。    </li>\n<li>使用解释性变量名、函数名、类名    </li>\n<li>把逻辑依赖改为物理依赖<br>依赖者模块不应对被依赖者模块有假定，应该明确的询问候着全部信息。    </li>\n<li>用多态替代 if/else 或 switch/case    </li>\n<li>用命名常量替代魔术数    </li>\n<li>封装条件、边界    </li>\n<li>函数只做一件事</li>\n</ul>\n</li>\n<li>关于类    <ul>\n<li>import package.*;  比80行的导入语句好看多了     </li>\n<li>不要继承常量</li>\n</ul>\n</li>\n<li>名称    <ul>\n<li>采用描述性的名称    </li>\n<li>名称应与抽象层级相符    </li>\n<li>尽可能用标准命名法    </li>\n<li>无歧义的名称    </li>\n<li>为较大作用范围选用较长名称    </li>\n<li>避免编码    </li>\n<li>名称应该说明副作用</li>\n</ul>\n</li>\n<li>测试    <ul>\n<li>多测试    </li>\n<li>使用覆盖率工具    </li>\n<li>别略过小测试    </li>\n<li>被忽略的测试就是对不确定事物的疑问    </li>\n<li>测试边界条件    </li>\n<li>全面测试相近的缺陷    </li>\n<li>测试应该快速<br><br><br><br></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"本书总结\"><a href=\"#本书总结\" class=\"headerlink\" title=\"本书总结\"></a>本书总结</h4><p>终于把这本书啃完了。<br>虽然作者比较啰嗦点，但是收获还是很大的。<br>书中提到的，有些已经做到了；<br>但有些不仅没做到，还是反面教材。<br>多规范一下自己的代码，毕竟对于我们来说，代码的清晰度、整洁度还是很重要的。<br>代码总要给别人看的，不要让自己的代码羞以示人。</p>\n","site":{"data":{}},"excerpt":"<hr>\n<p>读这本书之前做了一些功课，很多人反映，书是一本好书，无奈作者废话太多。。。<br>刚开始，我是不信的，但自己读下来才发现，古人诚不欺我啊。<br>来划一下重点吧，写的这些或者是作者所描述的重点，或者是我感触比较深的东西。</p>\n<p><strong>Later equals never！</strong><br><strong>稍后等于永不！</strong></p>","more":"<p><br></p>\n<h3 id=\"第一章、关于整洁的代码\"><a href=\"#第一章、关于整洁的代码\" class=\"headerlink\" title=\"第一章、关于整洁的代码\"></a>第一章、关于整洁的代码</h3><ul>\n<li>代码的逻辑应该直截了当，让缺陷难以隐藏；尽量去减少依赖关系，从而便于维护；依据某种分层战略完善错误处理代码；性能调到最优，避免他人污染。</li>\n<li>糟糕的代码会引发混乱，别人修改糟糕的代码时，往往会越改越烂。</li>\n<li>每个函数、每个类、每个模块 都全神贯注去解决一件事</li>\n<li>代码应该通过其字面表达含义，因为不同的语言导致并非所有必需信息均可通过代码自身清晰表达。</li>\n<li>重要顺序：         <ul>\n<li>能通过所有测试        </li>\n<li>没有重复代码         </li>\n<li>体现系统中的全部设计理念         </li>\n<li>包括尽量少的实体<br><br></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第二章、关于命名\"><a href=\"#第二章、关于命名\" class=\"headerlink\" title=\"第二章、关于命名\"></a>第二章、关于命名</h3><ul>\n<li>名副其实，见名知意</li>\n<li>使用可以读的出来的、可以被搜索的名称</li>\n<li>匈牙利命名法、去掉成员前缀</li>\n<li>类名、对象名 应该是名词或名词短语；    方法名应该是动词或动词短语</li>\n<li>不要抖机灵，每个概念对应一个词，不用双关语（add、insert）</li>\n<li>分离解决方案领域和问题领域的概念，与所涉问题领域更为贴近的代码，应当采用源自问题领域的名称</li>\n<li>添加有意义的语境<br><br></li>\n</ul>\n<h3 id=\"第三章、关于函数\"><a href=\"#第三章、关于函数\" class=\"headerlink\" title=\"第三章、关于函数\"></a>第三章、关于函数</h3><ul>\n<li>函数的第一规则是短小，第二条规则是更短小！</li>\n<li>第一章节有提到过的： 每个函数尽量只做一件事。</li>\n<li>自顶向下阅读代码，向下规则</li>\n<li>函数参数，最理想为零，其次单参、双参、三参…（除非有足够特殊的理由，不要三参数+）</li>\n<li>不要向函数传入bool，因为这叫要求该函数不止做一件事</li>\n<li>不要有副作用，比如让你洗个苹果，你别洗完了然后吃了它。</li>\n<li>普遍而言，应避免使用输出参数。</li>\n<li>分隔指令与询问，要么让它干什么，要么让它回答什么。<br><br></li>\n</ul>\n<h3 id=\"第四章、关于注释-（别给糟糕的代码加注释，重新写吧！）\"><a href=\"#第四章、关于注释-（别给糟糕的代码加注释，重新写吧！）\" class=\"headerlink\" title=\"第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）\"></a>第四章、关于注释  （别给糟糕的代码加注释，重新写吧！）</h3><ul>\n<li>代码会一直被维护更新，但是注释不一定。</li>\n<li>注释不能改变根本问题，它不能优化糟糕的代码。</li>\n<li>值得写的注释：       <ul>\n<li>版权及著作权声明等        </li>\n<li>对你的意图的解释        </li>\n<li>警示        </li>\n<li>TODO注释，为以后编写查找方便</li>\n</ul>\n</li>\n<li>废注释：        <ul>\n<li>没有规范化，过于局部的注释（需要纵览全文，才能知晓其意）        </li>\n<li>多余的注释（ getMaxNumber(num1, num2) ,还需要写这个函数是干啥的吗？）        </li>\n<li>误导性注释        </li>\n<li>循规式注释（例如：要求每个函数都要像API文档一样写一套注释来说明函数作用，参数意义。）        </li>\n<li>日志式注释（之前不是说光维护代码，不维护注释吗？现在我维护注释，而且把每次修改的时间、内容都加上。有那时间干啥不好，100行的文件，80行注释日志？）        </li>\n<li>归属与署名        </li>\n<li>注释掉的代码（除了注释的人，其他人都不敢删的东西）        </li>\n<li>信息过多，无条理<br><br></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第五章、关于格式-代码的格式是你代码的普通话，别让他说方言\"><a href=\"#第五章、关于格式-代码的格式是你代码的普通话，别让他说方言\" class=\"headerlink\" title=\"第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)\"></a>第五章、关于格式    (代码的格式是你代码的普通话，别让他说方言)</h3><ul>\n<li>用空白行来区分你的模块</li>\n<li>关系应该密切的东西：        <ul>\n<li>变量声明，应该尽可能的靠近其使用位置        </li>\n<li>实体变量，应该在类的顶部声明        </li>\n<li>相关函数，函数A调用了函数B，应该让A和B放到一起，A尽可能的放在B的上面        </li>\n<li>概念相关，概念相关的代码 应该放在一起，相关性与距离成正比</li>\n</ul>\n</li>\n<li>尽量让代码行短小，最好以80个字符为上限，但最多不要超过120</li>\n<li>水平方向上的区隔：        <ul>\n<li>赋值操作周围加上空格        </li>\n<li>不在函数名和左圆括号之间加空格        </li>\n<li>逗号后加空格       </li>\n<li>加减周围加空格，优先级高的乘除周围不加空格；当然，如果只有优先级相同的运算符，还是可以在周围加空格的<br><br></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第六章、-关于对象与数据结构\"><a href=\"#第六章、-关于对象与数据结构\" class=\"headerlink\" title=\"第六章、 关于对象与数据结构\"></a>第六章、 关于对象与数据结构</h3><ul>\n<li>不要将类内变量设置为私有，然后又添加赋值器和取值器，将它公之于众</li>\n<li>对象与数据结构之间的二分原理：        <ul>\n<li>过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数，        </li>\n<li>面向对象代码便于在不改动既有函数的前提下添加新类<br>反过来说就是：        </li>\n<li>过程代码难以添加新数据结构，因为必须修改所有函数        </li>\n<li>面向对象代码难以添加新函数，因为必须修改所有类</li>\n</ul>\n</li>\n<li>Demeter律，模块不应了解它所操作对象的内部情形</li>\n<li>最为精炼的数据结构，是一个只有公共变量、没有函数的类<br><br></li>\n</ul>\n<h3 id=\"第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\"><a href=\"#第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\" class=\"headerlink\" title=\"第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）\"></a>第七章、关于错误处理（当错误发生时，程序员有责任确保代码照常工作）</h3><ul>\n<li>使用异常处理而非返回错误码</li>\n<li>先写出 try-catch-finally语句</li>\n<li>给出异常发生的环境说明，方便定位</li>\n<li>依调用者需要定义异常类</li>\n<li>不要返回、传递NULL值<br><br></li>\n</ul>\n<h3 id=\"第八章、关于边界（将其他代码整合到自己代码中）\"><a href=\"#第八章、关于边界（将其他代码整合到自己代码中）\" class=\"headerlink\" title=\"第八章、关于边界（将其他代码整合到自己代码中）\"></a>第八章、关于边界（将其他代码整合到自己代码中）</h3><ul>\n<li>使用类似Map的边界接口，就把它保留在类或近亲类中；避免从公共API中返回边界接口，或将边界接口作为参数传递给公共API。</li>\n<li>学习性测试很有必要<br><br></li>\n</ul>\n<h3 id=\"第九章、关于单元测试\"><a href=\"#第九章、关于单元测试\" class=\"headerlink\" title=\"第九章、关于单元测试\"></a>第九章、关于单元测试</h3><ul>\n<li>TDD（测试驱动开发）三定律：        <ul>\n<li>在编写不能通过的单元测试前，不可编写生产代码        </li>\n<li>只可编写刚好无法通过的单元测试，不能编译也算不通过        </li>\n<li>只可编写刚好足以通过当前失败测试的生产代码</li>\n</ul>\n</li>\n<li>脏测试 等同于 没测试</li>\n<li>测试代码与生产代码一样重要，它需要被思考、被设计和被照料，它该像生产代码一样保持整洁。</li>\n<li>整洁的测试的要素     - 可读性！！！</li>\n<li>整洁测试的五条规则     - FIRST        <ul>\n<li>F：Fast，测试应该能够快速的运行。        </li>\n<li>I：Independent，测试应该相互独立。        </li>\n<li>R：Repeatable，测试应该可以在任何环境中重复通过。        </li>\n<li>S：Self-Validating，测试应该有布尔值输出。        </li>\n<li>T：Timely，测试应及时编写。<br><br></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第十章、关于类\"><a href=\"#第十章、关于类\" class=\"headerlink\" title=\"第十章、关于类\"></a>第十章、关于类</h3><ul>\n<li>类应该由一组变量列表开始，公共静态常量优先于私有静态变量</li>\n<li>类应该通函数一样要短小</li>\n<li>类或模块应有且只有一条加以修改的理由</li>\n<li>单一全责：系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个全责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为</li>\n<li>内聚：类应该只有少量实体变量</li>\n<li>既然修改会一直持续，那么就更应该对类加以组织，以降低修改的风险</li>\n<li>类应当依赖于抽象而不是依赖于具体细节<br><br></li>\n</ul>\n<h3 id=\"第十一章、关于系统\"><a href=\"#第十一章、关于系统\" class=\"headerlink\" title=\"第十一章、关于系统\"></a>第十一章、关于系统</h3><ul>\n<li>软件系统应将起始过程与之后的运行时逻辑分离开。    就比如我做一个玩家信息面板，在起始过程，需要创建很多Text、Image来存储玩家一些状态信息及玩家的形象。    但是，我用这个界面的时候，只需要改动里面的值、或者切换形象。<br>这时，就可以有两个函数，init来负责起始过程的创建；refresh来负责更新玩家的状态。（当然不能把所有具体实现都放在一个函数里，每个函数负责一个小模块是必要的）</li>\n<li>软件系统与物理系统可以类比，它们的架构都可以递增式地增长，只要我们持续将关注面恰当的切分。</li>\n<li>最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯Java(或其他语言）对象实现。不同领域之间用最不具有亲还行的方面或类方面工具整合起来。<br><br></li>\n</ul>\n<h3 id=\"第十二章、关于迭代\"><a href=\"#第十二章、关于迭代\" class=\"headerlink\" title=\"第十二章、关于迭代\"></a>第十二章、关于迭代</h3><ul>\n<li>Kent Beck关于简单设计的四条规则    <ul>\n<li>运行所有测试    </li>\n<li>不可重复    </li>\n<li>表达了程序员的意图    </li>\n<li>尽可能减少类和方法的数量<br>以上规则按其重要程度排列</li>\n</ul>\n</li>\n<li>遵循有关编写测试并持续运行测试的简单、明确的规则，系统就会更贴近OO低耦合度、高内聚度的目标。编写测试引致更好的设计。</li>\n<li>测试消除了对清理代码就会破坏代码的恐惧，所以可以放心的去重构。</li>\n<li>重复是良好系统设计的大敌，它代表着额外工作、额外风险和额外且不必要的复杂度。</li>\n<li>增强表达力方法：    <ul>\n<li>选用好的名称    </li>\n<li>保持函数和类的尺寸短小    </li>\n<li>采用标准命名法    </li>\n<li>编写良好的单元测试    </li>\n<li>最重要的就是去尝试去做</li>\n</ul>\n</li>\n<li>尽可能减少类和方法的数量，这条规则优先级是最低的，要让步于测试、消除重复和增强表达力。<br><br></li>\n</ul>\n<h3 id=\"第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\"><a href=\"#第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\" class=\"headerlink\" title=\"第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）\"></a>第十三章、关于并发编程（对象是过程的抽象，线程是调度的抽象）</h3><ul>\n<li>并发是一种解耦策略，它将<strong>目的</strong>和<strong>时机</strong>分解开，而在单线程中，两者紧密耦合。</li>\n<li>解耦目的与时机可以显著的改进程序的<strong>吞吐量</strong>和<strong>结构</strong></li>\n<li>一些迷思与误解    <ul>\n<li>并发总能改进系能。    并发有时能改进性能，但只在多个线程或处理器之间能分享大量等待时间的时候管用。    </li>\n<li>编写并发程序无需修改设计。    并发算法的设计有可能与单线程系统的设计极不相同，解耦目的与时机往往对系统结构产生巨大的影响。    </li>\n<li>在采用Web或EJB容器的时候，理解并发问题并不重要。    只有了解容器的运作，才可以对其产生的并发问题更好的解决。</li>\n</ul>\n</li>\n<li>关于并发编程的中肯理解    <ul>\n<li>并发会在性能和编写额外代码上增加一些开销    </li>\n<li>正确的并发是复杂的，即便对于简单的问题也是如此<br>-并发缺陷并非总能重现，所以常被看做偶发事件而忽略，未被当做真的缺陷看待   </li>\n<li>并发常常需要对设计策略的根本性修改</li>\n</ul>\n</li>\n<li>防御并发代码问题的原则与技巧    <ul>\n<li>单一权责原则（SRP)<br>分离并发相关代码与其他代码    </li>\n<li>限制数据作用域<br>谨记数据封装，严格限制对可能被共享的数据的访问    </li>\n<li>使用数据复本    从多个线程收集所有复本的结果，并在单个线程中合并这些结果    </li>\n<li>线程应尽可能的独立    尝试将数据分解到可被独立线程（可能在不同的处理器上）操作的独立子集</li>\n</ul>\n</li>\n<li>一些基础定义    <ul>\n<li>限定资源<br>并发环境中有着固定尺寸或数量的资源。    </li>\n<li>互斥<br>每一时刻仅有一个线程能访问共享数据或共享资源。    </li>\n<li>线程饥饿<br>一个或一组线程在很长时间内或永久被禁止。    </li>\n<li>死锁<br>两个或多个线程互相等待执行结束。    </li>\n<li>活锁<br>执行次序一致的线程，每个都想要起步，但发现其他线程已开始。</li>\n</ul>\n</li>\n<li>一些执行模型    <ul>\n<li>生产者-消费者模型<br>一个或多个生产者线程创建某些工作，并置于缓存或队列中。一个或多个消费者线程从队列中获取并完成这些工作。生产者和消费者之间的队列是一种限定资源。    </li>\n<li>读者-作者模型<br>当存在一个主要为读者线程提供信息源，但只偶尔被作者线程更新的共享资源，吞吐量就会是个问题。增加吞吐量，会导致线程饥饿和过时信息的累计。更新会影响吞吐量。协调读者线程，不去读作者线程正在更新的信息（反之亦然），这是一个辛苦的平衡工作。作者线程倾向于长期锁定许多读者线程，从而导致吞吐量问题。    </li>\n<li>经典的哲学家    一群哲学家环坐在圆桌旁。每个哲学家的左手边放了一把叉子。桌面中央摆着一大碗意大利面。每个哲学家在吃饭的时候都要拿起叉子吃饭。但除非手上有两把叉子，否则没法进食。如果左边或右边的哲学家已经取用一把叉子，中间这位就需要等到别人吃完，放回叉子。每位哲学家吃完后，就将两把叉子放回桌面，直到下次吃饭。</li>\n</ul>\n</li>\n<li>避免使用一个共享对象的多个方法。当不得不使用时，写代码需要注意的方法。    <ul>\n<li>基于客户端的锁定<br>客户端代码在调用第一个方法前锁定服务端，确保锁的范围覆盖了调用最后一个方法的代码。    </li>\n<li>基于服务端的锁定<br>在服务端创建锁定服务端的方法，调用所有方法，然后解锁。让客户端调用新方法。    </li>\n<li>适配服务端<br>创建执行锁定的中间层。这是一种基于服务端锁定的例子，但不修改原始服务端代码。</li>\n</ul>\n</li>\n<li>尽可能减小同步区域</li>\n<li>尽早考虑关闭问题，尽早令其工作正常</li>\n<li>编写测试，测试线程代码<br>关于测试代码的建议    <ul>\n<li>将伪失败看做可能的线程问题    </li>\n<li>先使非线程代码可工作    </li>\n<li>编写可插拔的线程代码    </li>\n<li>编写可调整的线程代码    </li>\n<li>运行多于处理器数量的线程    </li>\n<li>在不同平台上运行    </li>\n<li>调整代码并强迫错误发生<br><br></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第十四章、关于逐步改进\"><a href=\"#第十四章、关于逐步改进\" class=\"headerlink\" title=\"第十四章、关于逐步改进\"></a>第十四章、关于逐步改进</h4><ul>\n<li>要编写整洁代码，必须先写肮脏代码，然后清理它。<br>所以，不要害怕写的肮脏，只要去清理，就可以写出整洁的代码。<br>但是，一定要去<strong>清理它</strong>！</li>\n<li>在改进程序过程中，要保持系统始终可以运行</li>\n<li>进度可以重订，需求可以重新定义，团队动态可以修正，但糟糕的代码只是一直腐败发酵，无情的拖后腿<br><br></li>\n</ul>\n<h4 id=\"第十七章、味道与启发\"><a href=\"#第十七章、味道与启发\" class=\"headerlink\" title=\"第十七章、味道与启发\"></a>第十七章、味道与启发</h4><ul>\n<li>注释    <ul>\n<li>不恰当的信息<br>让注释传达本该更好地在源代码控制系统、问题追踪系统或任何其他记录系统中保存的信息，是不恰当的。    </li>\n<li>废弃的注释<br>过时、无关或不正确的注释就是废弃的注释。    </li>\n<li>冗余注释<br>如果描述的是某种充分自我描述了的东西，那么注释就是多余的。    </li>\n<li>糟糕的注释<br>值得编写的注释，也值得好好写。不要画蛇添足，要保持整洁。    </li>\n<li>注释掉的代码<br>看到注释掉的代码，就删除它！<br>源代码控制系统还会记得他，让注释的人回去找。<br>什么？不用源代码控制系统？<br>好吧，你已经不需要读这本书了。</li>\n</ul>\n</li>\n<li>环境    <ul>\n<li>需要多步才能实现的构建<br>构建系统应该是单步的小操作。<br>不应该从源代码控制系统中一点点签出代码；<br>不应该需要一系列神秘指令或环境依赖脚本来构建单个元素；<br>不应该四处寻找额外小JAR、XML文件和其他杂物；<br>应该能用单个命令签出系统，并用单个指令构建它。    </li>\n<li>需要多步才能做到的测试<br>应该能发出单个指令就可以运行全部单元测试。</li>\n</ul>\n</li>\n<li>函数    <ul>\n<li>过多的参数<br>函数的参数量应该少，三个以上绝对不可容忍。    </li>\n<li>输出参数<br>输出参数违反直觉，读者期望参数用于输入而非输出。    </li>\n<li>标识参数<br>布尔值参数等同于宣告该函数做了不知一件事，应该消灭。    </li>\n<li>死函数<br>永不被调用的方法应该被丢弃。<br>不要怕删除，源代码控制系统会帮你记住它。</li>\n</ul>\n</li>\n<li><p>一般性问题    </p>\n<ul>\n<li>一个源文件中存在多种语言<br>理想的源文件包括且只包括一种语言，<br>现实中，应该尽力减少源文件中额外语言的数量和范围。    </li>\n<li>明显的行为未被实现<br>遵循”最小惊异原则”，函数或类应该实现其他程序员有理由期待的行为。    </li>\n<li>不正确的边界行为<br>不要让代码只是能工作，应该追索每种边界条件，并编写测试。    </li>\n<li>忽视安全<br>关闭某些编译器警告，可能有助于构建；但更存在无穷无尽的调试风险。    </li>\n<li>重复<br>本书最重要的规则之一<br>尽可能找到并消除重复。    </li>\n<li>在错误的抽象层级上的代码<br>创建分离较高层级一般性概念与较低层级细节概念的抽象模型。    </li>\n<li>基类依赖于派生类<br>将概念分解到基类和派生类的最普遍的原因是较高层级基类概念可以不依赖于较低层级派生类概念。    </li>\n<li>信息过多<br>设计良好的模块有着非常小的接口，让你事半功倍。<br>设计低劣的模块有着广阔、深入的接口，让你事倍功半。<br>设计良好的接口并不提供许多需要依靠的函数，所以耦合度也较低。<br>设计低劣的接口提供大量必须调用的函数，耦合度较高。    </li>\n<li><p>死代码<br>死代码就是不执行的代码，可以在        </p>\n<ul>\n<li>不会发生的条件语句中        </li>\n<li>从不抛出异常的try语句的catch块中        </li>\n<li>在永久不会发生的switch/case条件中 </li>\n</ul>\n<p>找到这些代码。<br>然后，埋葬它！    </p>\n</li>\n<li>垂直分隔<br>变量和函数应该在被靠近使用的地方定义。<br>私有函数应该刚好在其首次被使用的位置下面定义。    </li>\n<li>前后不一致<br>最小惊异原则，小心选择约定，一旦选中，就应该持续的遵循。    </li>\n<li>使用解释性变量名、函数名、类名    </li>\n<li>把逻辑依赖改为物理依赖<br>依赖者模块不应对被依赖者模块有假定，应该明确的询问候着全部信息。    </li>\n<li>用多态替代 if/else 或 switch/case    </li>\n<li>用命名常量替代魔术数    </li>\n<li>封装条件、边界    </li>\n<li>函数只做一件事</li>\n</ul>\n</li>\n<li>关于类    <ul>\n<li>import package.*;  比80行的导入语句好看多了     </li>\n<li>不要继承常量</li>\n</ul>\n</li>\n<li>名称    <ul>\n<li>采用描述性的名称    </li>\n<li>名称应与抽象层级相符    </li>\n<li>尽可能用标准命名法    </li>\n<li>无歧义的名称    </li>\n<li>为较大作用范围选用较长名称    </li>\n<li>避免编码    </li>\n<li>名称应该说明副作用</li>\n</ul>\n</li>\n<li>测试    <ul>\n<li>多测试    </li>\n<li>使用覆盖率工具    </li>\n<li>别略过小测试    </li>\n<li>被忽略的测试就是对不确定事物的疑问    </li>\n<li>测试边界条件    </li>\n<li>全面测试相近的缺陷    </li>\n<li>测试应该快速<br><br><br><br></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"本书总结\"><a href=\"#本书总结\" class=\"headerlink\" title=\"本书总结\"></a>本书总结</h4><p>终于把这本书啃完了。<br>虽然作者比较啰嗦点，但是收获还是很大的。<br>书中提到的，有些已经做到了；<br>但有些不仅没做到，还是反面教材。<br>多规范一下自己的代码，毕竟对于我们来说，代码的清晰度、整洁度还是很重要的。<br>代码总要给别人看的，不要让自己的代码羞以示人。</p>"},{"title":"《天才在左, 疯子在右》读记","date":"2017-07-30T14:59:16.000Z","_content":"\n----------\n\n想看到真正的世界，\n就要\n用天的眼睛去看天，\n用云的眼睛去看云，\n用风的眼睛去看风，\n用花草树木的眼睛去看花草树木，\n用石头的眼睛看石头，\n用大海的眼睛去看大海，\n用动物的眼睛去看动物，\n用人的眼睛去看人。 \n\n<!-- more -->\n<br/>\n\n最早看到这本书，是在亚马逊2016年度畅销榜单中。 \n然后看了下简介，是介绍作者接触采访”非常态人群”，整理出来的。 \n看完介绍，就感觉，应该会有点意思，然后读了这本书； \n结果，没用了三天，就读完了(上下班路上及午休间隙)。\n\n在阅读这本书期间，及刚读完的时候，感觉真的很棒，非常棒。 \n但是，过了一段时间再审视一下，感觉有些怪。 \n在阅读的过程中，越看越像小说一般，每一章精彩绝伦，引人入胜。 \n或许是为了发行，作者对采访内容有修饰；或许是作者发挥过多，导致文章少了些真实。\n\n再说说，里面的一些章节， \n给我印象最深的一个是[大风]，尤其最后那一句 ———— 如果那是只有灵魂才能感受到的大风… \n读完这一句，头皮都有点发麻了。\n\n最后，这本书， \n给我感觉还是观点与想象的结合， \n观点依旧是它们的观点， \n但，内容和文章，就不一定有这么的…\n\n\n\n文中片段：\n跨越时间地看，我们是一个很长很长的虫子怪物，从床上延伸到大街上，延伸到学校，延伸到公司，延伸到商场，延伸到好多地方。因为我们的动作在每个时间段都是不同的，所以跨越时间来看，我们都是一条条虫子。从某一个时间段开始，到某一个时间段结束。 \n———— [四维虫子]\n\n指尖的戒指不再闪亮 \n婚纱在衣柜早已尘封 \n我们的容颜都已慢慢地苍老 \n但那份心情，却依旧没有改变 \n感谢你带给我的每一天 \n正是因为你 \n我才有勇气说 \n“永远, 永远” \n———— [永远, 永远]\n\n想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛看石头，用大海的眼睛去看大海，用动物的眼睛去看动物，用人的眼睛去看人。 \n———— [真正的世界]\n\n每当我想起这位患者，除了那些离奇的偷取时间者，好像还能看到她认真吃东西的样子——我从未见过有人那么认真的吃东西。每一口，每一次都是那么谨慎仔细的态度，仿佛整个世界都不存在了，存在的只是自己和手中的那条巧克力，以及嘴里那慢慢融化的味道。 \n———— [偷取时间]","source":"_posts/《天才在左，疯子在右》读记.md","raw":"---\ntitle: 《天才在左, 疯子在右》读记\ndate: 2017-7-30 22:59:16\ntags: 看着读\n---\n\n----------\n\n想看到真正的世界，\n就要\n用天的眼睛去看天，\n用云的眼睛去看云，\n用风的眼睛去看风，\n用花草树木的眼睛去看花草树木，\n用石头的眼睛看石头，\n用大海的眼睛去看大海，\n用动物的眼睛去看动物，\n用人的眼睛去看人。 \n\n<!-- more -->\n<br/>\n\n最早看到这本书，是在亚马逊2016年度畅销榜单中。 \n然后看了下简介，是介绍作者接触采访”非常态人群”，整理出来的。 \n看完介绍，就感觉，应该会有点意思，然后读了这本书； \n结果，没用了三天，就读完了(上下班路上及午休间隙)。\n\n在阅读这本书期间，及刚读完的时候，感觉真的很棒，非常棒。 \n但是，过了一段时间再审视一下，感觉有些怪。 \n在阅读的过程中，越看越像小说一般，每一章精彩绝伦，引人入胜。 \n或许是为了发行，作者对采访内容有修饰；或许是作者发挥过多，导致文章少了些真实。\n\n再说说，里面的一些章节， \n给我印象最深的一个是[大风]，尤其最后那一句 ———— 如果那是只有灵魂才能感受到的大风… \n读完这一句，头皮都有点发麻了。\n\n最后，这本书， \n给我感觉还是观点与想象的结合， \n观点依旧是它们的观点， \n但，内容和文章，就不一定有这么的…\n\n\n\n文中片段：\n跨越时间地看，我们是一个很长很长的虫子怪物，从床上延伸到大街上，延伸到学校，延伸到公司，延伸到商场，延伸到好多地方。因为我们的动作在每个时间段都是不同的，所以跨越时间来看，我们都是一条条虫子。从某一个时间段开始，到某一个时间段结束。 \n———— [四维虫子]\n\n指尖的戒指不再闪亮 \n婚纱在衣柜早已尘封 \n我们的容颜都已慢慢地苍老 \n但那份心情，却依旧没有改变 \n感谢你带给我的每一天 \n正是因为你 \n我才有勇气说 \n“永远, 永远” \n———— [永远, 永远]\n\n想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛看石头，用大海的眼睛去看大海，用动物的眼睛去看动物，用人的眼睛去看人。 \n———— [真正的世界]\n\n每当我想起这位患者，除了那些离奇的偷取时间者，好像还能看到她认真吃东西的样子——我从未见过有人那么认真的吃东西。每一口，每一次都是那么谨慎仔细的态度，仿佛整个世界都不存在了，存在的只是自己和手中的那条巧克力，以及嘴里那慢慢融化的味道。 \n———— [偷取时间]","slug":"《天才在左，疯子在右》读记","published":1,"updated":"2018-04-02T16:27:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp448000d0dueaeiu7ogm","content":"<hr>\n<p>想看到真正的世界，<br>就要<br>用天的眼睛去看天，<br>用云的眼睛去看云，<br>用风的眼睛去看风，<br>用花草树木的眼睛去看花草树木，<br>用石头的眼睛看石头，<br>用大海的眼睛去看大海，<br>用动物的眼睛去看动物，<br>用人的眼睛去看人。 </p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>最早看到这本书，是在亚马逊2016年度畅销榜单中。<br>然后看了下简介，是介绍作者接触采访”非常态人群”，整理出来的。<br>看完介绍，就感觉，应该会有点意思，然后读了这本书；<br>结果，没用了三天，就读完了(上下班路上及午休间隙)。</p>\n<p>在阅读这本书期间，及刚读完的时候，感觉真的很棒，非常棒。<br>但是，过了一段时间再审视一下，感觉有些怪。<br>在阅读的过程中，越看越像小说一般，每一章精彩绝伦，引人入胜。<br>或许是为了发行，作者对采访内容有修饰；或许是作者发挥过多，导致文章少了些真实。</p>\n<p>再说说，里面的一些章节，<br>给我印象最深的一个是[大风]，尤其最后那一句 ———— 如果那是只有灵魂才能感受到的大风…<br>读完这一句，头皮都有点发麻了。</p>\n<p>最后，这本书，<br>给我感觉还是观点与想象的结合，<br>观点依旧是它们的观点，<br>但，内容和文章，就不一定有这么的…</p>\n<p>文中片段：<br>跨越时间地看，我们是一个很长很长的虫子怪物，从床上延伸到大街上，延伸到学校，延伸到公司，延伸到商场，延伸到好多地方。因为我们的动作在每个时间段都是不同的，所以跨越时间来看，我们都是一条条虫子。从某一个时间段开始，到某一个时间段结束。<br>———— [四维虫子]</p>\n<p>指尖的戒指不再闪亮<br>婚纱在衣柜早已尘封<br>我们的容颜都已慢慢地苍老<br>但那份心情，却依旧没有改变<br>感谢你带给我的每一天<br>正是因为你<br>我才有勇气说<br>“永远, 永远”<br>———— [永远, 永远]</p>\n<p>想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛看石头，用大海的眼睛去看大海，用动物的眼睛去看动物，用人的眼睛去看人。<br>———— [真正的世界]</p>\n<p>每当我想起这位患者，除了那些离奇的偷取时间者，好像还能看到她认真吃东西的样子——我从未见过有人那么认真的吃东西。每一口，每一次都是那么谨慎仔细的态度，仿佛整个世界都不存在了，存在的只是自己和手中的那条巧克力，以及嘴里那慢慢融化的味道。<br>———— [偷取时间]</p>\n","site":{"data":{}},"excerpt":"<hr>\n<p>想看到真正的世界，<br>就要<br>用天的眼睛去看天，<br>用云的眼睛去看云，<br>用风的眼睛去看风，<br>用花草树木的眼睛去看花草树木，<br>用石头的眼睛看石头，<br>用大海的眼睛去看大海，<br>用动物的眼睛去看动物，<br>用人的眼睛去看人。 </p>","more":"<p><br></p>\n<p>最早看到这本书，是在亚马逊2016年度畅销榜单中。<br>然后看了下简介，是介绍作者接触采访”非常态人群”，整理出来的。<br>看完介绍，就感觉，应该会有点意思，然后读了这本书；<br>结果，没用了三天，就读完了(上下班路上及午休间隙)。</p>\n<p>在阅读这本书期间，及刚读完的时候，感觉真的很棒，非常棒。<br>但是，过了一段时间再审视一下，感觉有些怪。<br>在阅读的过程中，越看越像小说一般，每一章精彩绝伦，引人入胜。<br>或许是为了发行，作者对采访内容有修饰；或许是作者发挥过多，导致文章少了些真实。</p>\n<p>再说说，里面的一些章节，<br>给我印象最深的一个是[大风]，尤其最后那一句 ———— 如果那是只有灵魂才能感受到的大风…<br>读完这一句，头皮都有点发麻了。</p>\n<p>最后，这本书，<br>给我感觉还是观点与想象的结合，<br>观点依旧是它们的观点，<br>但，内容和文章，就不一定有这么的…</p>\n<p>文中片段：<br>跨越时间地看，我们是一个很长很长的虫子怪物，从床上延伸到大街上，延伸到学校，延伸到公司，延伸到商场，延伸到好多地方。因为我们的动作在每个时间段都是不同的，所以跨越时间来看，我们都是一条条虫子。从某一个时间段开始，到某一个时间段结束。<br>———— [四维虫子]</p>\n<p>指尖的戒指不再闪亮<br>婚纱在衣柜早已尘封<br>我们的容颜都已慢慢地苍老<br>但那份心情，却依旧没有改变<br>感谢你带给我的每一天<br>正是因为你<br>我才有勇气说<br>“永远, 永远”<br>———— [永远, 永远]</p>\n<p>想看到真正的世界，就要用天的眼睛去看天，用云的眼睛去看云，用风的眼睛去看风，用花草树木的眼睛去看花草树木，用石头的眼睛看石头，用大海的眼睛去看大海，用动物的眼睛去看动物，用人的眼睛去看人。<br>———— [真正的世界]</p>\n<p>每当我想起这位患者，除了那些离奇的偷取时间者，好像还能看到她认真吃东西的样子——我从未见过有人那么认真的吃东西。每一口，每一次都是那么谨慎仔细的态度，仿佛整个世界都不存在了，存在的只是自己和手中的那条巧克力，以及嘴里那慢慢融化的味道。<br>———— [偷取时间]</p>"},{"title":"《我们仨》读记","date":"2017-05-30T13:00:00.000Z","_content":"\n----------\n\n很多东西，想做，能做，却又做不到。\n\n\n<!-- more -->\n<br/>\n\n这本书，本来是为了给女朋友培养读书兴趣而买的。\n但是，发现，好像不是她的菜（虽然，她磕磕绊绊的也读完了）。\n我也就每天临睡前读一些，慢慢也读完了。\n\n<br/>\n\n《我们仨》是杨绛老师在失去自己唯一女儿与丈夫后，写的一篇回忆录。\n总共三部分：\n- 我们俩老了\n- 我们仨失散了\n- 我一个人思念我们仨\n前两部分，用一个\"万里长梦\"来委婉的表达自己所经历的这些。\n最后一部分，回忆这些年来的一切。\n\n<br/>\n\n每次拿起这本书，再浮躁的心都会平静下来，慢慢的看，慢慢的感受，慢慢的品。\n其实我对这一家并没有多少了解，只是隐约记得她们的名气很大。\n通过这本书，感受到的就是一个老人，仔细的，缓慢的回忆这一切；所用的文字、语句没有过于粉饰，很朴素，很淡然；所写的情节，详则多叙，略则少言，不空洞，很流畅。\n有几段文字，我挺喜欢的：\n1.\n我疑疑惑惑地在古驿道上一脚一脚走。柳树一年四季变化最勤。秋风刚刚一吹，柳叶就开始黄落，随着一阵一阵风，落下一批又一批叶子，冬天都变成光秃秃的寒柳。春风还没有吹，柳条上已经发芽，远看着已有绿意；柳树在春风里，就飘荡着嫩绿的长条。然后蒙蒙飞絮，要飞上一两个月。飞絮还没有飞完，柳树都已绿叶成荫。然后又一片片黄落，又变成光秃秃的寒柳。我在古驿道上，一脚一脚的，走了一年多。\n\n2.\n看动物吃东西很有趣，狮子喂肉之前，得把同笼的分开，因为狮子见了肉就不顾夫妻情分。猪类动物吃花生，连皮带壳；熊吐出壳带皮吃；猴子剥了壳还捻去皮。可是大象食肠粗，饲养员喂大象，大团的粮食、整只的苹果、整条的萝卜、连皮的香蕉，都一口吞之。可是它自己进食却很精细；吃稻草，先从大捆稻草中拈出一小束，拍打干净，筑筑整齐，才送入口中。我们断不定最聪明的是灵活的猴子还是笨重的大象。我们爱大象。\n\n<br/>\n\n最喜欢的还有书前后的书信，现在都是微信QQ的时代，看到这些书信，真的别有一番风趣。\n\n<br/>\n\"我们仨其实是最平凡不过的。我们这个家，很朴素；我们三个人，很单纯。我们与世无求，与人无争，只求相聚在一起，相守在一起，各自做力所能及的事。\"\n但是，这种最朴素最平凡的家，也是最令人羡慕的。\n即使，想去做，并且能做到，却又做不到的。\n","source":"_posts/《我们仨》读记.md","raw":"---\ntitle: 《我们仨》读记\ndate: 2017-05-30 21:00:00\ntags: 看着读\n---\n\n----------\n\n很多东西，想做，能做，却又做不到。\n\n\n<!-- more -->\n<br/>\n\n这本书，本来是为了给女朋友培养读书兴趣而买的。\n但是，发现，好像不是她的菜（虽然，她磕磕绊绊的也读完了）。\n我也就每天临睡前读一些，慢慢也读完了。\n\n<br/>\n\n《我们仨》是杨绛老师在失去自己唯一女儿与丈夫后，写的一篇回忆录。\n总共三部分：\n- 我们俩老了\n- 我们仨失散了\n- 我一个人思念我们仨\n前两部分，用一个\"万里长梦\"来委婉的表达自己所经历的这些。\n最后一部分，回忆这些年来的一切。\n\n<br/>\n\n每次拿起这本书，再浮躁的心都会平静下来，慢慢的看，慢慢的感受，慢慢的品。\n其实我对这一家并没有多少了解，只是隐约记得她们的名气很大。\n通过这本书，感受到的就是一个老人，仔细的，缓慢的回忆这一切；所用的文字、语句没有过于粉饰，很朴素，很淡然；所写的情节，详则多叙，略则少言，不空洞，很流畅。\n有几段文字，我挺喜欢的：\n1.\n我疑疑惑惑地在古驿道上一脚一脚走。柳树一年四季变化最勤。秋风刚刚一吹，柳叶就开始黄落，随着一阵一阵风，落下一批又一批叶子，冬天都变成光秃秃的寒柳。春风还没有吹，柳条上已经发芽，远看着已有绿意；柳树在春风里，就飘荡着嫩绿的长条。然后蒙蒙飞絮，要飞上一两个月。飞絮还没有飞完，柳树都已绿叶成荫。然后又一片片黄落，又变成光秃秃的寒柳。我在古驿道上，一脚一脚的，走了一年多。\n\n2.\n看动物吃东西很有趣，狮子喂肉之前，得把同笼的分开，因为狮子见了肉就不顾夫妻情分。猪类动物吃花生，连皮带壳；熊吐出壳带皮吃；猴子剥了壳还捻去皮。可是大象食肠粗，饲养员喂大象，大团的粮食、整只的苹果、整条的萝卜、连皮的香蕉，都一口吞之。可是它自己进食却很精细；吃稻草，先从大捆稻草中拈出一小束，拍打干净，筑筑整齐，才送入口中。我们断不定最聪明的是灵活的猴子还是笨重的大象。我们爱大象。\n\n<br/>\n\n最喜欢的还有书前后的书信，现在都是微信QQ的时代，看到这些书信，真的别有一番风趣。\n\n<br/>\n\"我们仨其实是最平凡不过的。我们这个家，很朴素；我们三个人，很单纯。我们与世无求，与人无争，只求相聚在一起，相守在一起，各自做力所能及的事。\"\n但是，这种最朴素最平凡的家，也是最令人羡慕的。\n即使，想去做，并且能做到，却又做不到的。\n","slug":"《我们仨》读记","published":1,"updated":"2018-04-02T16:27:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp44b000f0dueeo97kkl6","content":"<hr>\n<p>很多东西，想做，能做，却又做不到。</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>这本书，本来是为了给女朋友培养读书兴趣而买的。<br>但是，发现，好像不是她的菜（虽然，她磕磕绊绊的也读完了）。<br>我也就每天临睡前读一些，慢慢也读完了。</p>\n<p><br></p>\n<p>《我们仨》是杨绛老师在失去自己唯一女儿与丈夫后，写的一篇回忆录。<br>总共三部分：</p>\n<ul>\n<li>我们俩老了</li>\n<li>我们仨失散了</li>\n<li>我一个人思念我们仨<br>前两部分，用一个”万里长梦”来委婉的表达自己所经历的这些。<br>最后一部分，回忆这些年来的一切。</li>\n</ul>\n<p><br></p>\n<p>每次拿起这本书，再浮躁的心都会平静下来，慢慢的看，慢慢的感受，慢慢的品。<br>其实我对这一家并没有多少了解，只是隐约记得她们的名气很大。<br>通过这本书，感受到的就是一个老人，仔细的，缓慢的回忆这一切；所用的文字、语句没有过于粉饰，很朴素，很淡然；所写的情节，详则多叙，略则少言，不空洞，很流畅。<br>有几段文字，我挺喜欢的：<br>1.<br>我疑疑惑惑地在古驿道上一脚一脚走。柳树一年四季变化最勤。秋风刚刚一吹，柳叶就开始黄落，随着一阵一阵风，落下一批又一批叶子，冬天都变成光秃秃的寒柳。春风还没有吹，柳条上已经发芽，远看着已有绿意；柳树在春风里，就飘荡着嫩绿的长条。然后蒙蒙飞絮，要飞上一两个月。飞絮还没有飞完，柳树都已绿叶成荫。然后又一片片黄落，又变成光秃秃的寒柳。我在古驿道上，一脚一脚的，走了一年多。</p>\n<p>2.<br>看动物吃东西很有趣，狮子喂肉之前，得把同笼的分开，因为狮子见了肉就不顾夫妻情分。猪类动物吃花生，连皮带壳；熊吐出壳带皮吃；猴子剥了壳还捻去皮。可是大象食肠粗，饲养员喂大象，大团的粮食、整只的苹果、整条的萝卜、连皮的香蕉，都一口吞之。可是它自己进食却很精细；吃稻草，先从大捆稻草中拈出一小束，拍打干净，筑筑整齐，才送入口中。我们断不定最聪明的是灵活的猴子还是笨重的大象。我们爱大象。</p>\n<p><br></p>\n<p>最喜欢的还有书前后的书信，现在都是微信QQ的时代，看到这些书信，真的别有一番风趣。</p>\n<p><br><br>“我们仨其实是最平凡不过的。我们这个家，很朴素；我们三个人，很单纯。我们与世无求，与人无争，只求相聚在一起，相守在一起，各自做力所能及的事。”<br>但是，这种最朴素最平凡的家，也是最令人羡慕的。<br>即使，想去做，并且能做到，却又做不到的。</p>\n","site":{"data":{}},"excerpt":"<hr>\n<p>很多东西，想做，能做，却又做不到。</p>","more":"<p><br></p>\n<p>这本书，本来是为了给女朋友培养读书兴趣而买的。<br>但是，发现，好像不是她的菜（虽然，她磕磕绊绊的也读完了）。<br>我也就每天临睡前读一些，慢慢也读完了。</p>\n<p><br></p>\n<p>《我们仨》是杨绛老师在失去自己唯一女儿与丈夫后，写的一篇回忆录。<br>总共三部分：</p>\n<ul>\n<li>我们俩老了</li>\n<li>我们仨失散了</li>\n<li>我一个人思念我们仨<br>前两部分，用一个”万里长梦”来委婉的表达自己所经历的这些。<br>最后一部分，回忆这些年来的一切。</li>\n</ul>\n<p><br></p>\n<p>每次拿起这本书，再浮躁的心都会平静下来，慢慢的看，慢慢的感受，慢慢的品。<br>其实我对这一家并没有多少了解，只是隐约记得她们的名气很大。<br>通过这本书，感受到的就是一个老人，仔细的，缓慢的回忆这一切；所用的文字、语句没有过于粉饰，很朴素，很淡然；所写的情节，详则多叙，略则少言，不空洞，很流畅。<br>有几段文字，我挺喜欢的：<br>1.<br>我疑疑惑惑地在古驿道上一脚一脚走。柳树一年四季变化最勤。秋风刚刚一吹，柳叶就开始黄落，随着一阵一阵风，落下一批又一批叶子，冬天都变成光秃秃的寒柳。春风还没有吹，柳条上已经发芽，远看着已有绿意；柳树在春风里，就飘荡着嫩绿的长条。然后蒙蒙飞絮，要飞上一两个月。飞絮还没有飞完，柳树都已绿叶成荫。然后又一片片黄落，又变成光秃秃的寒柳。我在古驿道上，一脚一脚的，走了一年多。</p>\n<p>2.<br>看动物吃东西很有趣，狮子喂肉之前，得把同笼的分开，因为狮子见了肉就不顾夫妻情分。猪类动物吃花生，连皮带壳；熊吐出壳带皮吃；猴子剥了壳还捻去皮。可是大象食肠粗，饲养员喂大象，大团的粮食、整只的苹果、整条的萝卜、连皮的香蕉，都一口吞之。可是它自己进食却很精细；吃稻草，先从大捆稻草中拈出一小束，拍打干净，筑筑整齐，才送入口中。我们断不定最聪明的是灵活的猴子还是笨重的大象。我们爱大象。</p>\n<p><br></p>\n<p>最喜欢的还有书前后的书信，现在都是微信QQ的时代，看到这些书信，真的别有一番风趣。</p>\n<p><br><br>“我们仨其实是最平凡不过的。我们这个家，很朴素；我们三个人，很单纯。我们与世无求，与人无争，只求相聚在一起，相守在一起，各自做力所能及的事。”<br>但是，这种最朴素最平凡的家，也是最令人羡慕的。<br>即使，想去做，并且能做到，却又做不到的。</p>"},{"title":"《时间简史》读感","date":"2017-03-14T13:37:35.000Z","_content":"\n《时间简史》 读感\n\n如果不进行外加干涉,事物总是倾向于增加它的无序度。\n\n<!-- more -->\n<br/>\n\n这段时间，读了一下霍金的《时间简史》。\n这本书把我带入了一个新的世界的感觉。\n前半段，带我温习了一下高中及大学的物理（PS：这里好想吐槽，之前学物理，就是告诉你一个定理、公式，去背去做题，根本不去想为什么，或许，这就是我学的那么吃力的原因吧。）\n后面，直接就是之前没有接触过的，几乎没有认知的领域了。\n\n<br/>\n\n给我印象最深刻的几个部分：\n1. CPT守恒。通过P守恒、CP守恒到CPT守恒，可以拓展到很多东西。\n2. 时间箭头。热力学时间箭头、心理学时间箭头、宇宙学时间箭头。尤其是热力学时间箭头，就是由有序到无序的过程，熵在不断增加的过程。\n3. 时空维度。曾经我一度困扰，四维空间以上的五维空间是什么样子呢？后来才知道，说四维空间，好像不是很合适，应该是三维+一维，三个空间维度加一个时间维度。\n然后，剩下的维度是我们之上，还是我们之下呢？（也就是说我们在五维空间内，还是四维就包含了五维呢？）反正，根据M理论，宇宙由三维可见空间维+一维时间维+七维不可见空间维构成。\n4. 不确定性原理。人们永远不能同时准确知道粒子的位置和速度；对其中一个知道的越精确，则对另一个就知道的越不准确。\n5. 人择原理。我们之所以看到宇宙是这个样子，只是因为如果它不是这样，我们就不会在这里去观察它。\n\n<br/>\n\n这本书看完以后，真如醍醐灌顶。\n理顺了之前既得已知的知识，扩展了后面的知识，虽然，没有细究（也不必细究），但是有了一个了解。\n对于物之上，物之下，更深层的了解，开拓了视野。\n\n<br/>\n\n最后，\n在相对论中并没有一个唯一的绝对时间，\n每个人都有自己的时间测度，这依赖于他在何处并如何运动。\n与自己最相近的，应该是反我（任何粒子都有会和它湮灭的反粒子,也可能存在由反粒子构成的整个反世界和反人）\n然而，如果你遇到了反自身，注意不要握手！\n否则，你们两人都会在一个巨大的闪光中消失殆尽。\n","source":"_posts/《时间简史》读感.md","raw":"---\ntitle: 《时间简史》读感\ndate: 2017-03-14 21:37:35\ntags: 看着读\n---\n\n《时间简史》 读感\n\n如果不进行外加干涉,事物总是倾向于增加它的无序度。\n\n<!-- more -->\n<br/>\n\n这段时间，读了一下霍金的《时间简史》。\n这本书把我带入了一个新的世界的感觉。\n前半段，带我温习了一下高中及大学的物理（PS：这里好想吐槽，之前学物理，就是告诉你一个定理、公式，去背去做题，根本不去想为什么，或许，这就是我学的那么吃力的原因吧。）\n后面，直接就是之前没有接触过的，几乎没有认知的领域了。\n\n<br/>\n\n给我印象最深刻的几个部分：\n1. CPT守恒。通过P守恒、CP守恒到CPT守恒，可以拓展到很多东西。\n2. 时间箭头。热力学时间箭头、心理学时间箭头、宇宙学时间箭头。尤其是热力学时间箭头，就是由有序到无序的过程，熵在不断增加的过程。\n3. 时空维度。曾经我一度困扰，四维空间以上的五维空间是什么样子呢？后来才知道，说四维空间，好像不是很合适，应该是三维+一维，三个空间维度加一个时间维度。\n然后，剩下的维度是我们之上，还是我们之下呢？（也就是说我们在五维空间内，还是四维就包含了五维呢？）反正，根据M理论，宇宙由三维可见空间维+一维时间维+七维不可见空间维构成。\n4. 不确定性原理。人们永远不能同时准确知道粒子的位置和速度；对其中一个知道的越精确，则对另一个就知道的越不准确。\n5. 人择原理。我们之所以看到宇宙是这个样子，只是因为如果它不是这样，我们就不会在这里去观察它。\n\n<br/>\n\n这本书看完以后，真如醍醐灌顶。\n理顺了之前既得已知的知识，扩展了后面的知识，虽然，没有细究（也不必细究），但是有了一个了解。\n对于物之上，物之下，更深层的了解，开拓了视野。\n\n<br/>\n\n最后，\n在相对论中并没有一个唯一的绝对时间，\n每个人都有自己的时间测度，这依赖于他在何处并如何运动。\n与自己最相近的，应该是反我（任何粒子都有会和它湮灭的反粒子,也可能存在由反粒子构成的整个反世界和反人）\n然而，如果你遇到了反自身，注意不要握手！\n否则，你们两人都会在一个巨大的闪光中消失殆尽。\n","slug":"《时间简史》读感","published":1,"updated":"2018-04-02T16:27:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp44e000g0due9o994zy3","content":"<p>《时间简史》 读感</p>\n<p>如果不进行外加干涉,事物总是倾向于增加它的无序度。</p>\n<a id=\"more\"></a>\n<p><br></p>\n<p>这段时间，读了一下霍金的《时间简史》。<br>这本书把我带入了一个新的世界的感觉。<br>前半段，带我温习了一下高中及大学的物理（PS：这里好想吐槽，之前学物理，就是告诉你一个定理、公式，去背去做题，根本不去想为什么，或许，这就是我学的那么吃力的原因吧。）<br>后面，直接就是之前没有接触过的，几乎没有认知的领域了。</p>\n<p><br></p>\n<p>给我印象最深刻的几个部分：</p>\n<ol>\n<li>CPT守恒。通过P守恒、CP守恒到CPT守恒，可以拓展到很多东西。</li>\n<li>时间箭头。热力学时间箭头、心理学时间箭头、宇宙学时间箭头。尤其是热力学时间箭头，就是由有序到无序的过程，熵在不断增加的过程。</li>\n<li>时空维度。曾经我一度困扰，四维空间以上的五维空间是什么样子呢？后来才知道，说四维空间，好像不是很合适，应该是三维+一维，三个空间维度加一个时间维度。<br>然后，剩下的维度是我们之上，还是我们之下呢？（也就是说我们在五维空间内，还是四维就包含了五维呢？）反正，根据M理论，宇宙由三维可见空间维+一维时间维+七维不可见空间维构成。</li>\n<li>不确定性原理。人们永远不能同时准确知道粒子的位置和速度；对其中一个知道的越精确，则对另一个就知道的越不准确。</li>\n<li>人择原理。我们之所以看到宇宙是这个样子，只是因为如果它不是这样，我们就不会在这里去观察它。</li>\n</ol>\n<p><br></p>\n<p>这本书看完以后，真如醍醐灌顶。<br>理顺了之前既得已知的知识，扩展了后面的知识，虽然，没有细究（也不必细究），但是有了一个了解。<br>对于物之上，物之下，更深层的了解，开拓了视野。</p>\n<p><br></p>\n<p>最后，<br>在相对论中并没有一个唯一的绝对时间，<br>每个人都有自己的时间测度，这依赖于他在何处并如何运动。<br>与自己最相近的，应该是反我（任何粒子都有会和它湮灭的反粒子,也可能存在由反粒子构成的整个反世界和反人）<br>然而，如果你遇到了反自身，注意不要握手！<br>否则，你们两人都会在一个巨大的闪光中消失殆尽。</p>\n","site":{"data":{}},"excerpt":"<p>《时间简史》 读感</p>\n<p>如果不进行外加干涉,事物总是倾向于增加它的无序度。</p>","more":"<p><br></p>\n<p>这段时间，读了一下霍金的《时间简史》。<br>这本书把我带入了一个新的世界的感觉。<br>前半段，带我温习了一下高中及大学的物理（PS：这里好想吐槽，之前学物理，就是告诉你一个定理、公式，去背去做题，根本不去想为什么，或许，这就是我学的那么吃力的原因吧。）<br>后面，直接就是之前没有接触过的，几乎没有认知的领域了。</p>\n<p><br></p>\n<p>给我印象最深刻的几个部分：</p>\n<ol>\n<li>CPT守恒。通过P守恒、CP守恒到CPT守恒，可以拓展到很多东西。</li>\n<li>时间箭头。热力学时间箭头、心理学时间箭头、宇宙学时间箭头。尤其是热力学时间箭头，就是由有序到无序的过程，熵在不断增加的过程。</li>\n<li>时空维度。曾经我一度困扰，四维空间以上的五维空间是什么样子呢？后来才知道，说四维空间，好像不是很合适，应该是三维+一维，三个空间维度加一个时间维度。<br>然后，剩下的维度是我们之上，还是我们之下呢？（也就是说我们在五维空间内，还是四维就包含了五维呢？）反正，根据M理论，宇宙由三维可见空间维+一维时间维+七维不可见空间维构成。</li>\n<li>不确定性原理。人们永远不能同时准确知道粒子的位置和速度；对其中一个知道的越精确，则对另一个就知道的越不准确。</li>\n<li>人择原理。我们之所以看到宇宙是这个样子，只是因为如果它不是这样，我们就不会在这里去观察它。</li>\n</ol>\n<p><br></p>\n<p>这本书看完以后，真如醍醐灌顶。<br>理顺了之前既得已知的知识，扩展了后面的知识，虽然，没有细究（也不必细究），但是有了一个了解。<br>对于物之上，物之下，更深层的了解，开拓了视野。</p>\n<p><br></p>\n<p>最后，<br>在相对论中并没有一个唯一的绝对时间，<br>每个人都有自己的时间测度，这依赖于他在何处并如何运动。<br>与自己最相近的，应该是反我（任何粒子都有会和它湮灭的反粒子,也可能存在由反粒子构成的整个反世界和反人）<br>然而，如果你遇到了反自身，注意不要握手！<br>否则，你们两人都会在一个巨大的闪光中消失殆尽。</p>"},{"title":"《生死疲劳》读感","date":"2016-07-25T14:22:05.000Z","_content":"\n莫言的《生死疲劳》读感\n\n<!-- more -->\n\n经同事推荐，\n拜读了一下莫言的《生死疲劳》，\n按他的话：莫言获得诺贝尔文学奖，还是有他独到之处的，应该读一下他的文章。\n<br/>\n这本书，一是从大局上，中国农村从1950年到2000年间50年的变化，每一次的转世都是代表每个时代的特点，非常有标志性。\n二是从个人上，带着怨恨的人是无法转世为人的，西门闹那么深的仇怨，也被这一次次的转世磨没了脾性，从刚转世为驴的驴折腾，到最后为蓝千岁时，平静的叙述这一切。\n其实，不光是主人公西门闹，读者也饱受煎熬，读者也随着西门闹一起，一次次转世，一次次的经历着他所经历的一切。\n<br/>\n驴、牛、猪、狗 这四个中（猴 和 蓝千岁 的部分太少，主要是这四个），最不甘而且有人性的要属驴，\n正如其名——驴折腾，可是真能折腾，\n作为第一个顺序的动物，西门闹的怨恨还是很强的，\n不爽于自己为驴，不爽于蓝脸为己主，不爽于蓝脸与迎春的结合，等等。\n但，到了牛这里，牛犟劲，\n这犟劲的态度，不单指西门闹的不妥协，不服从，\n也配着蓝脸的单干行为的犟，即使到最后，\n被一鞭一鞭抽死，也不妥协。\n转世为猪这部分，则开始天马行空，这部分我读着最费力的部分，\n一是本书读到这里，已经经历两世，有些疲劳了，\n二是，这部分有些太扯了，总让我跳戏。\n转世为狗，已经是一个新的开始了，\n无论是西门闹，还是读者也快到极限了，\n所以，狗精神这部分，西门闹已经完全适应了为动物，\n不像为驴时，还有着人性，其实，在为猪时，他就已经有些忘却自己的人性了。\n<br/>\n遗憾的是，这本书，有些虎头蛇尾。\n后面很多东西，都能感觉的出来很仓促，\n尤其是到猴子和蓝千岁这两部分，跟前面比都少的贫瘠了。\n还有，最后，这些人死的...\n让我感觉回到了余华的《活着》的最后部分，\n只不过，《活着》中，一人一牛，在那田野中耕种着；\n而《生死疲劳》里，是那蓝千岁在一排长满杂草的墓前唏嘘着。\n<br/>\n噢，还有一点。\n本书中，男女关系，有些乱的我头晕...\n<br/>\n总之，莫先生的文笔还是很强的，那些细节的描写，都不需要多想，就能有幅画面在眼前。\n有很多，让我想拍大腿叫好的语句。\n对了，还有，本书内的莫言，是最让我跳戏的东西。","source":"_posts/《生死疲劳》读感.md","raw":"---\ntitle: 《生死疲劳》读感\ndate: 2016-07-25 22:22:05\ntags: 看着读\n---\n\n莫言的《生死疲劳》读感\n\n<!-- more -->\n\n经同事推荐，\n拜读了一下莫言的《生死疲劳》，\n按他的话：莫言获得诺贝尔文学奖，还是有他独到之处的，应该读一下他的文章。\n<br/>\n这本书，一是从大局上，中国农村从1950年到2000年间50年的变化，每一次的转世都是代表每个时代的特点，非常有标志性。\n二是从个人上，带着怨恨的人是无法转世为人的，西门闹那么深的仇怨，也被这一次次的转世磨没了脾性，从刚转世为驴的驴折腾，到最后为蓝千岁时，平静的叙述这一切。\n其实，不光是主人公西门闹，读者也饱受煎熬，读者也随着西门闹一起，一次次转世，一次次的经历着他所经历的一切。\n<br/>\n驴、牛、猪、狗 这四个中（猴 和 蓝千岁 的部分太少，主要是这四个），最不甘而且有人性的要属驴，\n正如其名——驴折腾，可是真能折腾，\n作为第一个顺序的动物，西门闹的怨恨还是很强的，\n不爽于自己为驴，不爽于蓝脸为己主，不爽于蓝脸与迎春的结合，等等。\n但，到了牛这里，牛犟劲，\n这犟劲的态度，不单指西门闹的不妥协，不服从，\n也配着蓝脸的单干行为的犟，即使到最后，\n被一鞭一鞭抽死，也不妥协。\n转世为猪这部分，则开始天马行空，这部分我读着最费力的部分，\n一是本书读到这里，已经经历两世，有些疲劳了，\n二是，这部分有些太扯了，总让我跳戏。\n转世为狗，已经是一个新的开始了，\n无论是西门闹，还是读者也快到极限了，\n所以，狗精神这部分，西门闹已经完全适应了为动物，\n不像为驴时，还有着人性，其实，在为猪时，他就已经有些忘却自己的人性了。\n<br/>\n遗憾的是，这本书，有些虎头蛇尾。\n后面很多东西，都能感觉的出来很仓促，\n尤其是到猴子和蓝千岁这两部分，跟前面比都少的贫瘠了。\n还有，最后，这些人死的...\n让我感觉回到了余华的《活着》的最后部分，\n只不过，《活着》中，一人一牛，在那田野中耕种着；\n而《生死疲劳》里，是那蓝千岁在一排长满杂草的墓前唏嘘着。\n<br/>\n噢，还有一点。\n本书中，男女关系，有些乱的我头晕...\n<br/>\n总之，莫先生的文笔还是很强的，那些细节的描写，都不需要多想，就能有幅画面在眼前。\n有很多，让我想拍大腿叫好的语句。\n对了，还有，本书内的莫言，是最让我跳戏的东西。","slug":"《生死疲劳》读感","published":1,"updated":"2018-04-02T16:27:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp44k000i0duegrxlpjtx","content":"<p>莫言的《生死疲劳》读感</p>\n<a id=\"more\"></a>\n<p>经同事推荐，<br>拜读了一下莫言的《生死疲劳》，<br>按他的话：莫言获得诺贝尔文学奖，还是有他独到之处的，应该读一下他的文章。<br><br><br>这本书，一是从大局上，中国农村从1950年到2000年间50年的变化，每一次的转世都是代表每个时代的特点，非常有标志性。<br>二是从个人上，带着怨恨的人是无法转世为人的，西门闹那么深的仇怨，也被这一次次的转世磨没了脾性，从刚转世为驴的驴折腾，到最后为蓝千岁时，平静的叙述这一切。<br>其实，不光是主人公西门闹，读者也饱受煎熬，读者也随着西门闹一起，一次次转世，一次次的经历着他所经历的一切。<br><br><br>驴、牛、猪、狗 这四个中（猴 和 蓝千岁 的部分太少，主要是这四个），最不甘而且有人性的要属驴，<br>正如其名——驴折腾，可是真能折腾，<br>作为第一个顺序的动物，西门闹的怨恨还是很强的，<br>不爽于自己为驴，不爽于蓝脸为己主，不爽于蓝脸与迎春的结合，等等。<br>但，到了牛这里，牛犟劲，<br>这犟劲的态度，不单指西门闹的不妥协，不服从，<br>也配着蓝脸的单干行为的犟，即使到最后，<br>被一鞭一鞭抽死，也不妥协。<br>转世为猪这部分，则开始天马行空，这部分我读着最费力的部分，<br>一是本书读到这里，已经经历两世，有些疲劳了，<br>二是，这部分有些太扯了，总让我跳戏。<br>转世为狗，已经是一个新的开始了，<br>无论是西门闹，还是读者也快到极限了，<br>所以，狗精神这部分，西门闹已经完全适应了为动物，<br>不像为驴时，还有着人性，其实，在为猪时，他就已经有些忘却自己的人性了。<br><br><br>遗憾的是，这本书，有些虎头蛇尾。<br>后面很多东西，都能感觉的出来很仓促，<br>尤其是到猴子和蓝千岁这两部分，跟前面比都少的贫瘠了。<br>还有，最后，这些人死的…<br>让我感觉回到了余华的《活着》的最后部分，<br>只不过，《活着》中，一人一牛，在那田野中耕种着；<br>而《生死疲劳》里，是那蓝千岁在一排长满杂草的墓前唏嘘着。<br><br><br>噢，还有一点。<br>本书中，男女关系，有些乱的我头晕…<br><br><br>总之，莫先生的文笔还是很强的，那些细节的描写，都不需要多想，就能有幅画面在眼前。<br>有很多，让我想拍大腿叫好的语句。<br>对了，还有，本书内的莫言，是最让我跳戏的东西。</p>\n","site":{"data":{}},"excerpt":"<p>莫言的《生死疲劳》读感</p>","more":"<p>经同事推荐，<br>拜读了一下莫言的《生死疲劳》，<br>按他的话：莫言获得诺贝尔文学奖，还是有他独到之处的，应该读一下他的文章。<br><br><br>这本书，一是从大局上，中国农村从1950年到2000年间50年的变化，每一次的转世都是代表每个时代的特点，非常有标志性。<br>二是从个人上，带着怨恨的人是无法转世为人的，西门闹那么深的仇怨，也被这一次次的转世磨没了脾性，从刚转世为驴的驴折腾，到最后为蓝千岁时，平静的叙述这一切。<br>其实，不光是主人公西门闹，读者也饱受煎熬，读者也随着西门闹一起，一次次转世，一次次的经历着他所经历的一切。<br><br><br>驴、牛、猪、狗 这四个中（猴 和 蓝千岁 的部分太少，主要是这四个），最不甘而且有人性的要属驴，<br>正如其名——驴折腾，可是真能折腾，<br>作为第一个顺序的动物，西门闹的怨恨还是很强的，<br>不爽于自己为驴，不爽于蓝脸为己主，不爽于蓝脸与迎春的结合，等等。<br>但，到了牛这里，牛犟劲，<br>这犟劲的态度，不单指西门闹的不妥协，不服从，<br>也配着蓝脸的单干行为的犟，即使到最后，<br>被一鞭一鞭抽死，也不妥协。<br>转世为猪这部分，则开始天马行空，这部分我读着最费力的部分，<br>一是本书读到这里，已经经历两世，有些疲劳了，<br>二是，这部分有些太扯了，总让我跳戏。<br>转世为狗，已经是一个新的开始了，<br>无论是西门闹，还是读者也快到极限了，<br>所以，狗精神这部分，西门闹已经完全适应了为动物，<br>不像为驴时，还有着人性，其实，在为猪时，他就已经有些忘却自己的人性了。<br><br><br>遗憾的是，这本书，有些虎头蛇尾。<br>后面很多东西，都能感觉的出来很仓促，<br>尤其是到猴子和蓝千岁这两部分，跟前面比都少的贫瘠了。<br>还有，最后，这些人死的…<br>让我感觉回到了余华的《活着》的最后部分，<br>只不过，《活着》中，一人一牛，在那田野中耕种着；<br>而《生死疲劳》里，是那蓝千岁在一排长满杂草的墓前唏嘘着。<br><br><br>噢，还有一点。<br>本书中，男女关系，有些乱的我头晕…<br><br><br>总之，莫先生的文笔还是很强的，那些细节的描写，都不需要多想，就能有幅画面在眼前。<br>有很多，让我想拍大腿叫好的语句。<br>对了，还有，本书内的莫言，是最让我跳戏的东西。</p>"},{"title":"为什么要搞这个？","date":"2016-07-20T15:03:16.000Z","_content":"\n折腾啥呀？！！\n\n<!-- more -->\n为什么要搞这个东西呢？\n已经不写博文好长时间了，\n起因是到了大四，离开学校，一人奔赴帝都找工作，没有多少时间，（一个字，懒）\n之后，就是刚入职，要学习新的东西，没空出时间，（还是一个字，懒）\n等可以应付了以后，懒癌开始犯了，（已经找不出借口了）\n后来...后来就毕业了，又忙毕业...\n拖着，拖着，到了现在。\n<br/>\n想着，毕业了，\n该有个新的开始了，\n本来想做个个人网站，结果发现，好麻烦啊o(╯□╰)o...\n精力实在有限（还是懒呗..）\n忽然发现了这个，\n简约的风格，便捷的部署，还不用我去维护它，\n毅然，上了这辆车。\n<br/>\n最重要的是，\n搞这个东西，\n看起来是屌屌的呀。\n而且，年轻人，就是该多折腾折腾嘛。","source":"_posts/为什么要搞这个？.md","raw":"---\ntitle: 为什么要搞这个？\ndate: 2016-07-20 23:03:16\ntags: 抽空写\n---\n\n折腾啥呀？！！\n\n<!-- more -->\n为什么要搞这个东西呢？\n已经不写博文好长时间了，\n起因是到了大四，离开学校，一人奔赴帝都找工作，没有多少时间，（一个字，懒）\n之后，就是刚入职，要学习新的东西，没空出时间，（还是一个字，懒）\n等可以应付了以后，懒癌开始犯了，（已经找不出借口了）\n后来...后来就毕业了，又忙毕业...\n拖着，拖着，到了现在。\n<br/>\n想着，毕业了，\n该有个新的开始了，\n本来想做个个人网站，结果发现，好麻烦啊o(╯□╰)o...\n精力实在有限（还是懒呗..）\n忽然发现了这个，\n简约的风格，便捷的部署，还不用我去维护它，\n毅然，上了这辆车。\n<br/>\n最重要的是，\n搞这个东西，\n看起来是屌屌的呀。\n而且，年轻人，就是该多折腾折腾嘛。","slug":"为什么要搞这个？","published":1,"updated":"2018-04-02T16:29:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp44o000k0due173398gr","content":"<p>折腾啥呀？！！</p>\n<a id=\"more\"></a>\n<p>为什么要搞这个东西呢？<br>已经不写博文好长时间了，<br>起因是到了大四，离开学校，一人奔赴帝都找工作，没有多少时间，（一个字，懒）<br>之后，就是刚入职，要学习新的东西，没空出时间，（还是一个字，懒）<br>等可以应付了以后，懒癌开始犯了，（已经找不出借口了）<br>后来…后来就毕业了，又忙毕业…<br>拖着，拖着，到了现在。<br><br><br>想着，毕业了，<br>该有个新的开始了，<br>本来想做个个人网站，结果发现，好麻烦啊o(╯□╰)o…<br>精力实在有限（还是懒呗..）<br>忽然发现了这个，<br>简约的风格，便捷的部署，还不用我去维护它，<br>毅然，上了这辆车。<br><br><br>最重要的是，<br>搞这个东西，<br>看起来是屌屌的呀。<br>而且，年轻人，就是该多折腾折腾嘛。</p>\n","site":{"data":{}},"excerpt":"<p>折腾啥呀？！！</p>","more":"<p>为什么要搞这个东西呢？<br>已经不写博文好长时间了，<br>起因是到了大四，离开学校，一人奔赴帝都找工作，没有多少时间，（一个字，懒）<br>之后，就是刚入职，要学习新的东西，没空出时间，（还是一个字，懒）<br>等可以应付了以后，懒癌开始犯了，（已经找不出借口了）<br>后来…后来就毕业了，又忙毕业…<br>拖着，拖着，到了现在。<br><br><br>想着，毕业了，<br>该有个新的开始了，<br>本来想做个个人网站，结果发现，好麻烦啊o(╯□╰)o…<br>精力实在有限（还是懒呗..）<br>忽然发现了这个，<br>简约的风格，便捷的部署，还不用我去维护它，<br>毅然，上了这辆车。<br><br><br>最重要的是，<br>搞这个东西，<br>看起来是屌屌的呀。<br>而且，年轻人，就是该多折腾折腾嘛。</p>"},{"title":"删除文件名中的空格","date":"2016-11-02T15:07:16.000Z","_content":"\n用lua、python3来删除文件名中的空格。\n\n<!-- more -->\n<br/>\n工作不认真，\n目录下的文件名有空格，\n遇到这种就很烦躁呀，\n算了，\n还是搞个脚本解决下吧。\n<br/>\n做的很简单，\n处理的是**当前目录**下所有文件的文件名，\n通过**替换字符串**的方式将空格替换了。\n<br/>\n环境：MAC\n<br/>\n- lua方法\n\n\n\t\tlocal files = {}\n\t\tlocal all = io.popen(\"ls \")\n\t\tfor filename in all:lines() do\n\t\t\tif string.find(filename, ' ') then\n\t\t\t\tlocal newName = string.gsub(filename, ' ', '')\n\t\t\t\tos.rename(filename, newName)\n\t\t\tend\n\t\tend\n\n<br/>\n\n- python3方法\n\n\n\t\timport os\n\t\tfor parent, dirnames, filenames in os.walk(os.getcwd()):\n\t\t\tfor filename in filenames:\n\t\t\t\tos.rename(os.path.join(parent, filename), os.path.join(parent, filename.replace(' ', '')))\n\n","source":"_posts/删除文件名中的空格.md","raw":"---\ntitle: 删除文件名中的空格\ndate: 2016-11-02 23:07:16\ntags: 想就做\n---\n\n用lua、python3来删除文件名中的空格。\n\n<!-- more -->\n<br/>\n工作不认真，\n目录下的文件名有空格，\n遇到这种就很烦躁呀，\n算了，\n还是搞个脚本解决下吧。\n<br/>\n做的很简单，\n处理的是**当前目录**下所有文件的文件名，\n通过**替换字符串**的方式将空格替换了。\n<br/>\n环境：MAC\n<br/>\n- lua方法\n\n\n\t\tlocal files = {}\n\t\tlocal all = io.popen(\"ls \")\n\t\tfor filename in all:lines() do\n\t\t\tif string.find(filename, ' ') then\n\t\t\t\tlocal newName = string.gsub(filename, ' ', '')\n\t\t\t\tos.rename(filename, newName)\n\t\t\tend\n\t\tend\n\n<br/>\n\n- python3方法\n\n\n\t\timport os\n\t\tfor parent, dirnames, filenames in os.walk(os.getcwd()):\n\t\t\tfor filename in filenames:\n\t\t\t\tos.rename(os.path.join(parent, filename), os.path.join(parent, filename.replace(' ', '')))\n\n","slug":"删除文件名中的空格","published":1,"updated":"2018-04-02T16:26:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp44t000n0duevk6ik5gt","content":"<p>用lua、python3来删除文件名中的空格。</p>\n<a id=\"more\"></a>\n<p><br><br>工作不认真，<br>目录下的文件名有空格，<br>遇到这种就很烦躁呀，<br>算了，<br>还是搞个脚本解决下吧。<br><br><br>做的很简单，<br>处理的是<strong>当前目录</strong>下所有文件的文件名，<br>通过<strong>替换字符串</strong>的方式将空格替换了。<br><br><br>环境：MAC<br><br></p>\n<ul>\n<li>lua方法</li>\n</ul>\n<pre><code>local files = {}\nlocal all = io.popen(&quot;ls &quot;)\nfor filename in all:lines() do\n    if string.find(filename, &apos; &apos;) then\n        local newName = string.gsub(filename, &apos; &apos;, &apos;&apos;)\n        os.rename(filename, newName)\n    end\nend\n</code></pre><p><br></p>\n<ul>\n<li>python3方法</li>\n</ul>\n<pre><code>import os\nfor parent, dirnames, filenames in os.walk(os.getcwd()):\n    for filename in filenames:\n        os.rename(os.path.join(parent, filename), os.path.join(parent, filename.replace(&apos; &apos;, &apos;&apos;)))\n</code></pre>","site":{"data":{}},"excerpt":"<p>用lua、python3来删除文件名中的空格。</p>","more":"<p><br><br>工作不认真，<br>目录下的文件名有空格，<br>遇到这种就很烦躁呀，<br>算了，<br>还是搞个脚本解决下吧。<br><br><br>做的很简单，<br>处理的是<strong>当前目录</strong>下所有文件的文件名，<br>通过<strong>替换字符串</strong>的方式将空格替换了。<br><br><br>环境：MAC<br><br></p>\n<ul>\n<li>lua方法</li>\n</ul>\n<pre><code>local files = {}\nlocal all = io.popen(&quot;ls &quot;)\nfor filename in all:lines() do\n    if string.find(filename, &apos; &apos;) then\n        local newName = string.gsub(filename, &apos; &apos;, &apos;&apos;)\n        os.rename(filename, newName)\n    end\nend\n</code></pre><p><br></p>\n<ul>\n<li>python3方法</li>\n</ul>\n<pre><code>import os\nfor parent, dirnames, filenames in os.walk(os.getcwd()):\n    for filename in filenames:\n        os.rename(os.path.join(parent, filename), os.path.join(parent, filename.replace(&apos; &apos;, &apos;&apos;)))\n</code></pre>"},{"title":"用python发邮件","date":"2016-11-04T12:51:35.000Z","_content":"\nOne Step\n\n用python来发邮件\n\n<!-- more -->\n<br/>\n恩，\n学了python就不要浪费，\n公司要求每天都要写工作日志，\n每次都要:\n1. 打开浏览器\n2. 选择收藏夹里的邮箱\n3. 输入账号密码登陆\n4. 选择收件人\n5. 填写邮件抬头\n6. 填写当前日期，还要把鼠标移下去看看\n7. 写工作日志\n8. 点击发送\n\n很麻烦啊，\n写个脚本，\n\n1. 打开脚本\n2. 写你的工作日志（注意，只需要写日志，不需要写时间，title，收件人等）\n3. 编译\n\n惊！\n这难道就是传说中的 —— One Step ？！！\n\n<br/>\n唠叨完了，该整干货了。\n\n\n\t\timport smtplib\n\t\tfrom email.header import Header\n\t\tfrom email.mime.text import MIMEText\n\t\tfrom datetime import datetime\n\n\t\tsender = ''  \t\t\t\t\t\t\t# 此处填写发件人邮箱\n\t\tpassword = ''\t\t\t\t\t\t\t# 此处填写发件人邮箱密码   \t=>注释1\n\t\treceiver = ''\t\t\t\t\t\t\t# 此处填写收件人邮箱\n\t\tsmtp_server = ''\t\t\t\t\t\t# 此处填写smtp服务器地址\n\t\t\n\t\tDATE_FORMATE = '%Y-%m-%d %A'\t\t\t# 日期的格式\t\t\t\t=> 注释2\n\t\ttitle = ''\t\t\t\t\t\t\t\t# 此处填写邮件标题\n\n\t\tdef initialContent():\n\t\t\tnow = datetime.now()\n\t\t\treturn now.strftime(DATE_FORMATE)\n\n\t\tdef sendEmail(cont):\n\t\t\tcontent = initialContent() + '\\n' + cont\n\n\t\t\ttry:\n\t\t\t\tmsg = MIMEText(content, 'plain', 'utf-8') \t\t\t\t\t\n\t\t\t\tmsg['Subject'] = Header(title, 'utf-8')\t\t\t\t# => 注释3\n\t\t\t\tmsg['From'] = sender + ' <' + sender + '>'\t\t\t# => 注释3\n\t\t\t\tmsg['To'] = receiver\t\t\t\t\t\t\t\t# => 注释3\n\n\t\t\t\tserver = smtplib.SMTP(smtp_server, 25) \t\t\t\t# 连接服务器，默认端口均为25\n\t\t\t\tserver.set_debuglevel(1)  \t\t\t\t\t\t\t# 选择是否开启Debug，可以得到与服务端的反馈信息\n\t\t\t\tserver.login(sender, password)\n\t\t\t\tserver.sendmail(sender, [receiver], msg.as_string())\n\t\t\t\tserver.quit()\n\t\t\n\t\t\t\tprint('send email success')\n\t\t\texcept smtplib.SMTPException:\n\t\t\t\tpriint('send email fail')\n\n\n关于上述代码的一些注释：\n- 注释1:\n关于邮箱密码，有些密码需要填写客户端授权码，比如163，当然，要用SMPT发邮件，需要将发信箱的SMTP服务打开。\n- 注释2:\n日期的格式，更详细的可参考官方文档：http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime\n- 注释3:\n这里的From、To、Subject是非常必要的\n\n**还有，最好不要用163邮箱测试发邮件，会出现很多乱七八糟的问题（并非是你代码的问题）。**\n<br/>\n上面代码是用来发邮件的核心代码，\n写日志的地方加在里面是很不友好的行为，\n所以，\n再单独建一个新的友好的地方来写日志。\n\n\n\t\timport imp \n\t\ttool = imp.load_source('sendEmail', 'url')\t\t\t\t# 导入核心模块，url 填写你上面核心代码的位置\n\n\t\tcontent = \"\"\"\n\t\t在这里来写你的工作日志，\n\t\t支持多行。\n\t\t\"\"\"\n\n\t\ttool.sendEmail(content.strip()) \t\t\t\t\t\t# strip将首尾空白字符删除\n\n<br/>\n这样就方便很多了。\n最后，\n这个只是初步版本，\n后期可以添加很多你想要的东西，\n比如多个联系人，一些判断。\n我因为自己用，所以没有加那些东西。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/用python发邮件.md","raw":"---\ntitle: 用python发邮件\ndate: 2016-11-04 20:51:35\ntags: 想就做\n---\n\nOne Step\n\n用python来发邮件\n\n<!-- more -->\n<br/>\n恩，\n学了python就不要浪费，\n公司要求每天都要写工作日志，\n每次都要:\n1. 打开浏览器\n2. 选择收藏夹里的邮箱\n3. 输入账号密码登陆\n4. 选择收件人\n5. 填写邮件抬头\n6. 填写当前日期，还要把鼠标移下去看看\n7. 写工作日志\n8. 点击发送\n\n很麻烦啊，\n写个脚本，\n\n1. 打开脚本\n2. 写你的工作日志（注意，只需要写日志，不需要写时间，title，收件人等）\n3. 编译\n\n惊！\n这难道就是传说中的 —— One Step ？！！\n\n<br/>\n唠叨完了，该整干货了。\n\n\n\t\timport smtplib\n\t\tfrom email.header import Header\n\t\tfrom email.mime.text import MIMEText\n\t\tfrom datetime import datetime\n\n\t\tsender = ''  \t\t\t\t\t\t\t# 此处填写发件人邮箱\n\t\tpassword = ''\t\t\t\t\t\t\t# 此处填写发件人邮箱密码   \t=>注释1\n\t\treceiver = ''\t\t\t\t\t\t\t# 此处填写收件人邮箱\n\t\tsmtp_server = ''\t\t\t\t\t\t# 此处填写smtp服务器地址\n\t\t\n\t\tDATE_FORMATE = '%Y-%m-%d %A'\t\t\t# 日期的格式\t\t\t\t=> 注释2\n\t\ttitle = ''\t\t\t\t\t\t\t\t# 此处填写邮件标题\n\n\t\tdef initialContent():\n\t\t\tnow = datetime.now()\n\t\t\treturn now.strftime(DATE_FORMATE)\n\n\t\tdef sendEmail(cont):\n\t\t\tcontent = initialContent() + '\\n' + cont\n\n\t\t\ttry:\n\t\t\t\tmsg = MIMEText(content, 'plain', 'utf-8') \t\t\t\t\t\n\t\t\t\tmsg['Subject'] = Header(title, 'utf-8')\t\t\t\t# => 注释3\n\t\t\t\tmsg['From'] = sender + ' <' + sender + '>'\t\t\t# => 注释3\n\t\t\t\tmsg['To'] = receiver\t\t\t\t\t\t\t\t# => 注释3\n\n\t\t\t\tserver = smtplib.SMTP(smtp_server, 25) \t\t\t\t# 连接服务器，默认端口均为25\n\t\t\t\tserver.set_debuglevel(1)  \t\t\t\t\t\t\t# 选择是否开启Debug，可以得到与服务端的反馈信息\n\t\t\t\tserver.login(sender, password)\n\t\t\t\tserver.sendmail(sender, [receiver], msg.as_string())\n\t\t\t\tserver.quit()\n\t\t\n\t\t\t\tprint('send email success')\n\t\t\texcept smtplib.SMTPException:\n\t\t\t\tpriint('send email fail')\n\n\n关于上述代码的一些注释：\n- 注释1:\n关于邮箱密码，有些密码需要填写客户端授权码，比如163，当然，要用SMPT发邮件，需要将发信箱的SMTP服务打开。\n- 注释2:\n日期的格式，更详细的可参考官方文档：http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime\n- 注释3:\n这里的From、To、Subject是非常必要的\n\n**还有，最好不要用163邮箱测试发邮件，会出现很多乱七八糟的问题（并非是你代码的问题）。**\n<br/>\n上面代码是用来发邮件的核心代码，\n写日志的地方加在里面是很不友好的行为，\n所以，\n再单独建一个新的友好的地方来写日志。\n\n\n\t\timport imp \n\t\ttool = imp.load_source('sendEmail', 'url')\t\t\t\t# 导入核心模块，url 填写你上面核心代码的位置\n\n\t\tcontent = \"\"\"\n\t\t在这里来写你的工作日志，\n\t\t支持多行。\n\t\t\"\"\"\n\n\t\ttool.sendEmail(content.strip()) \t\t\t\t\t\t# strip将首尾空白字符删除\n\n<br/>\n这样就方便很多了。\n最后，\n这个只是初步版本，\n后期可以添加很多你想要的东西，\n比如多个联系人，一些判断。\n我因为自己用，所以没有加那些东西。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"用python发邮件","published":1,"updated":"2018-04-02T16:25:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfigp44x000p0duey48rycs7","content":"<p>One Step</p>\n<p>用python来发邮件</p>\n<a id=\"more\"></a>\n<p><br><br>恩，<br>学了python就不要浪费，<br>公司要求每天都要写工作日志，<br>每次都要:</p>\n<ol>\n<li>打开浏览器</li>\n<li>选择收藏夹里的邮箱</li>\n<li>输入账号密码登陆</li>\n<li>选择收件人</li>\n<li>填写邮件抬头</li>\n<li>填写当前日期，还要把鼠标移下去看看</li>\n<li>写工作日志</li>\n<li>点击发送</li>\n</ol>\n<p>很麻烦啊，<br>写个脚本，</p>\n<ol>\n<li>打开脚本</li>\n<li>写你的工作日志（注意，只需要写日志，不需要写时间，title，收件人等）</li>\n<li>编译</li>\n</ol>\n<p>惊！<br>这难道就是传说中的 —— One Step ？！！</p>\n<p><br><br>唠叨完了，该整干货了。</p>\n<pre><code>import smtplib\nfrom email.header import Header\nfrom email.mime.text import MIMEText\nfrom datetime import datetime\n\nsender = &apos;&apos;                              # 此处填写发件人邮箱\npassword = &apos;&apos;                            # 此处填写发件人邮箱密码       =&gt;注释1\nreceiver = &apos;&apos;                            # 此处填写收件人邮箱\nsmtp_server = &apos;&apos;                        # 此处填写smtp服务器地址\n\nDATE_FORMATE = &apos;%Y-%m-%d %A&apos;            # 日期的格式                =&gt; 注释2\ntitle = &apos;&apos;                                # 此处填写邮件标题\n\ndef initialContent():\n    now = datetime.now()\n    return now.strftime(DATE_FORMATE)\n\ndef sendEmail(cont):\n    content = initialContent() + &apos;\\n&apos; + cont\n\n    try:\n        msg = MIMEText(content, &apos;plain&apos;, &apos;utf-8&apos;)                     \n        msg[&apos;Subject&apos;] = Header(title, &apos;utf-8&apos;)                # =&gt; 注释3\n        msg[&apos;From&apos;] = sender + &apos; &lt;&apos; + sender + &apos;&gt;&apos;            # =&gt; 注释3\n        msg[&apos;To&apos;] = receiver                                # =&gt; 注释3\n\n        server = smtplib.SMTP(smtp_server, 25)                 # 连接服务器，默认端口均为25\n        server.set_debuglevel(1)                              # 选择是否开启Debug，可以得到与服务端的反馈信息\n        server.login(sender, password)\n        server.sendmail(sender, [receiver], msg.as_string())\n        server.quit()\n\n        print(&apos;send email success&apos;)\n    except smtplib.SMTPException:\n        priint(&apos;send email fail&apos;)\n</code></pre><p>关于上述代码的一些注释：</p>\n<ul>\n<li>注释1:<br>关于邮箱密码，有些密码需要填写客户端授权码，比如163，当然，要用SMPT发邮件，需要将发信箱的SMTP服务打开。</li>\n<li>注释2:<br>日期的格式，更详细的可参考官方文档：<a href=\"http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime</a></li>\n<li>注释3:<br>这里的From、To、Subject是非常必要的</li>\n</ul>\n<p><strong>还有，最好不要用163邮箱测试发邮件，会出现很多乱七八糟的问题（并非是你代码的问题）。</strong><br><br><br>上面代码是用来发邮件的核心代码，<br>写日志的地方加在里面是很不友好的行为，<br>所以，<br>再单独建一个新的友好的地方来写日志。</p>\n<pre><code>import imp \ntool = imp.load_source(&apos;sendEmail&apos;, &apos;url&apos;)                # 导入核心模块，url 填写你上面核心代码的位置\n\ncontent = &quot;&quot;&quot;\n在这里来写你的工作日志，\n支持多行。\n&quot;&quot;&quot;\n\ntool.sendEmail(content.strip())                         # strip将首尾空白字符删除\n</code></pre><p><br><br>这样就方便很多了。<br>最后，<br>这个只是初步版本，<br>后期可以添加很多你想要的东西，<br>比如多个联系人，一些判断。<br>我因为自己用，所以没有加那些东西。</p>\n","site":{"data":{}},"excerpt":"<p>One Step</p>\n<p>用python来发邮件</p>","more":"<p><br><br>恩，<br>学了python就不要浪费，<br>公司要求每天都要写工作日志，<br>每次都要:</p>\n<ol>\n<li>打开浏览器</li>\n<li>选择收藏夹里的邮箱</li>\n<li>输入账号密码登陆</li>\n<li>选择收件人</li>\n<li>填写邮件抬头</li>\n<li>填写当前日期，还要把鼠标移下去看看</li>\n<li>写工作日志</li>\n<li>点击发送</li>\n</ol>\n<p>很麻烦啊，<br>写个脚本，</p>\n<ol>\n<li>打开脚本</li>\n<li>写你的工作日志（注意，只需要写日志，不需要写时间，title，收件人等）</li>\n<li>编译</li>\n</ol>\n<p>惊！<br>这难道就是传说中的 —— One Step ？！！</p>\n<p><br><br>唠叨完了，该整干货了。</p>\n<pre><code>import smtplib\nfrom email.header import Header\nfrom email.mime.text import MIMEText\nfrom datetime import datetime\n\nsender = &apos;&apos;                              # 此处填写发件人邮箱\npassword = &apos;&apos;                            # 此处填写发件人邮箱密码       =&gt;注释1\nreceiver = &apos;&apos;                            # 此处填写收件人邮箱\nsmtp_server = &apos;&apos;                        # 此处填写smtp服务器地址\n\nDATE_FORMATE = &apos;%Y-%m-%d %A&apos;            # 日期的格式                =&gt; 注释2\ntitle = &apos;&apos;                                # 此处填写邮件标题\n\ndef initialContent():\n    now = datetime.now()\n    return now.strftime(DATE_FORMATE)\n\ndef sendEmail(cont):\n    content = initialContent() + &apos;\\n&apos; + cont\n\n    try:\n        msg = MIMEText(content, &apos;plain&apos;, &apos;utf-8&apos;)                     \n        msg[&apos;Subject&apos;] = Header(title, &apos;utf-8&apos;)                # =&gt; 注释3\n        msg[&apos;From&apos;] = sender + &apos; &lt;&apos; + sender + &apos;&gt;&apos;            # =&gt; 注释3\n        msg[&apos;To&apos;] = receiver                                # =&gt; 注释3\n\n        server = smtplib.SMTP(smtp_server, 25)                 # 连接服务器，默认端口均为25\n        server.set_debuglevel(1)                              # 选择是否开启Debug，可以得到与服务端的反馈信息\n        server.login(sender, password)\n        server.sendmail(sender, [receiver], msg.as_string())\n        server.quit()\n\n        print(&apos;send email success&apos;)\n    except smtplib.SMTPException:\n        priint(&apos;send email fail&apos;)\n</code></pre><p>关于上述代码的一些注释：</p>\n<ul>\n<li>注释1:<br>关于邮箱密码，有些密码需要填写客户端授权码，比如163，当然，要用SMPT发邮件，需要将发信箱的SMTP服务打开。</li>\n<li>注释2:<br>日期的格式，更详细的可参考官方文档：<a href=\"http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/translate/python_352/library/datetime.html#datetime.datetime</a></li>\n<li>注释3:<br>这里的From、To、Subject是非常必要的</li>\n</ul>\n<p><strong>还有，最好不要用163邮箱测试发邮件，会出现很多乱七八糟的问题（并非是你代码的问题）。</strong><br><br><br>上面代码是用来发邮件的核心代码，<br>写日志的地方加在里面是很不友好的行为，<br>所以，<br>再单独建一个新的友好的地方来写日志。</p>\n<pre><code>import imp \ntool = imp.load_source(&apos;sendEmail&apos;, &apos;url&apos;)                # 导入核心模块，url 填写你上面核心代码的位置\n\ncontent = &quot;&quot;&quot;\n在这里来写你的工作日志，\n支持多行。\n&quot;&quot;&quot;\n\ntool.sendEmail(content.strip())                         # strip将首尾空白字符删除\n</code></pre><p><br><br>这样就方便很多了。<br>最后，<br>这个只是初步版本，<br>后期可以添加很多你想要的东西，<br>比如多个联系人，一些判断。<br>我因为自己用，所以没有加那些东西。</p>"},{"title":"2017, 迷不茫","date":"2018-04-03T15:44:35.000Z","_content":"\n2017都过去了4个月，\n才有空，好好写写  过去的这一年。\n\n<!-- more -->\n\n\n\n<br/>\n<br/>\n2017 - 2018, 发生了很多事，按时间段来分：\n1.A公司 倒闭\n2.加入&离开 B公司\n3.加入 C公司\n\n---\n<br/>\n<br/>\n\n###  A公司 Over\n\n其实，早就预感到了这一天的到来。\n薪酬已经很低了，依旧留到最后。\n首先，我还是比较感性一些，我在A公司呆了近两年的时间，我从没毕业实习就在这。\n其次，我在这里能学到很多东西，同伴都是很资深且专业的人。\n最后，我喜欢这个公司的氛围，喜欢大家一起工作共事的感觉。\n\n最后做的TCG游戏的框架模式，也是我所喜欢的类型。\n就像女巫去熬制药剂一样，我们负责提供原材料；策划通过不同原材料的比例来合成不同的东西。\n\n最后没有撑下去，从我的角度来总结就是：\n1.版号的限制。\n这是最主要的问题，我们主要眼光放在了 中国的苹果市场，在游戏基本完成时，恰好赶上版号限制。那时候由于是版号政策刚刚实行，还是比较严格，公司有耗了大半年吧。\n2.目标过于单一\n这是后来，我入职B公司以后，才想到的。如同第一个问题，过于纠结 中国的苹果市场；相应的苹果海外市场及安卓海外市场也是可以去考虑的。对于技术来说，改成多语言版本，并不是难题。\n当然也有几个问题，我没有仔细考虑：\n- 做海外市场的推广，如何进行。A公司是研发团队，对运营及发行，完全没有能力。\n- 所做的题材是 西游题材，海外对此的接受程度如何。\n\n3.游戏选型\n这是，我从开始就隐隐担忧的事情。做的是对战类型的游戏，它不像很多游戏，发行有很多技巧去让游戏营收。这种游戏，更重玩家数量，要的就是与人斗，其乐无穷的效果。一个小公司去研发这种类型的游戏，着实不能让我有信心。虽然，最后决定要在对战AI上弥补人数不足的问题，但是，感觉还是有些差那么一丢丢。（让AI 充个648！）\n\n但是，我并不是老板，也不是专业的人员。所以，我的想法仅仅是从我能看到的方面去考虑。这里面我肯定疏忽了很多东西，毕竟，老板他们都是专业的，都在这个行业做了十几年，比我这个小菜鸟懂得太多了。\n\n然后，就是在A公司的收获吧：\n1.技术\n虽然游戏不是很大，但是整个一套流程，及周边一些相关开发（SDK接入；ios平台上，针对Object-C代码的修改；android平台上，针对java代码的修改；等等...）\n2.团队\n一个对的团队是很重要的，三观基本一致，朝着共同的目标去奋斗，鼓励学习，追求高效。还记得凯神拿着大长刀演示，人物挥动武器时重心的变化，手的位置，发力点等；涛哥又捣鼓出了一个android应用，附近的人的聊天室...\n3.无悔\n在一个公司，心甘情愿的留到最后。这真的不是很容易的事情。因为这个游戏是我喜欢做的，虽然不是独一无二的原创，但是无论是玩法，还是游戏表现，还是做游戏的过程，都让我对它有信心。我感觉到自己是在开发一款游戏，美术对设计一丝不苟，吹毛求疵，策划对数值不断优化测试。不管怎么说，有过这么一次经历，也无悔了。\n\n\n<br/>\n<br/>\n\n### B公司的入职与离职\n\nA公司over以后，就开始要找工作了...\n毕竟我也不是什么富二代啥的，在A公司由于一直在研发，也没有很高的收入，再加上女朋友也在身边，所以经济压力比较大。然后就没有花很长的时间去找一个工作。最后在很多公司中，选择了B公司。\n我选择B公司的原因如下：\n- 资金充裕，游戏已经上线，营收虽然不多，但是基本能够自给自足，正在优化准备大力推广阶段。\n- 扁平化的团队，其他同事的技术水平都比较高。\n- 大公司的孵化团队，有很好的资源。\n- 主攻海外市场的细分领域，目标明确且合理。\n\n在这家公司也呆了快一年的时间。老板和同事都挺好，由于个人原因吧，最终还是选择了离职。其实，用大白话来说，任何一个小型的团队，在维护**基本**团队建设基础上，最重要的一件事，还是**做成一款产品**。\n我离职，也是想了很久才下决定的，因为同事关系都挺好，也一起呆了这么久，真的不容易。\n我离职的原因如下：\n1.技术\n最主要的原因。不能说在这个公司没有学到技术，只是提升速度有些缓慢。因为偏向于换皮一类，技术提升还是有限度的。我希望提升的速度更快一些。\n2.时间\n个人喜好吧，我还是喜欢折腾一些东西，所以，我希望有一些自己的时间去做一些东西。但是工作时间有些长，休息都不够，更不用提其他的一些东西。这也是我有近大半年没有写过东西的原因之一（懒惰是原罪= =..）\n3.观念\n我目前是处于学习阶段，但其他同事都是工作了5年6年，甚至9年10年的。他们是想用自己所学的东西来变现的阶段。所以，很多东西就可能有些冲突。我不想太过于牺牲我自己来成全团队，这如同一场豪赌，赌赢了还好，若是输了...毕竟，我现在的半年和五年以后的半年，价值是不一样的。\n\n在A公司，我坚持到了最后，是因为对我技术提升有很大的帮助。在B公司，收入是足够的，但是我还是离开，因为和我个人发展的确有冲突。我觉得对我不公平，对公司也不公平。所以，选择了离开。\n\n我在B公司也学到的最主要的几个词：快速迭代，快速试错，搜集数据，重视反馈。\n\n\n<br/>\n<br/>\n\n### 加入C公司\n\n这次找工作目标，其实挺明确的。\n我去面试的时候，也没有藏着掖着；虽然面试有很多套路，很多技巧；但我觉得那都不是长久之计，适当的坦诚，真的很有必要。\n公司招人，肯定看中下面几方面：\n- 能不能干活\n- 能不能留下\n- 能不能学习\n\n再往后才是薪资什么的\n面试官，往往能分析到能不能干活和能不能学习；对于能不能留下，不好判断。\n所以，我面试的时候，往往会表达出我所看重的东西，我所期望的东西 —— 个人的成长和进步；也正因为如此，有很多机会我都错过了。\n其实，我觉得个人的进步和发展和工作并不冲突；在工作能力胜任的基础上，个人的每一分成长都会对工作产生积极正面的影响，但是，往往会被认为我会误工，对工作不认真不努力。\n对此，我也只能抱歉离开。\n\n选择C公司，真的是因为三观很合，无论是技术还是负责人。公司更看重功劳而非苦劳，鼓励高效率工作，而非低效率磨工，等等方案，当让我很有亲切感，归属感。\n而且，入职以来，很多事情都验证了我的选择的正确性。\n\n\n<br/>\n<br/>\n\n### 这两段经历的总结\n\n这几年，我一直贯彻着，个人发展重于其他，不将就，不妥协。\n但是还是或由于个人情感，或其他，将就了一些，妥协了一些。\n正如我这篇文章的题目 迷 但不 茫。\n过去这几年很迷，因为我目标明确了，但是却没有准确的实施下来。\n过去这几年不茫，因为我还是朝着我的方向在走。\n通过这几年的经验，最起码让我眼界扩宽了；身边的同事都比我资深，很有经验，有想法，与他们的合作与交流，让我进步很多。\n\n<br/>\n<br/>\n\n### 接下来\n\n1.工作上\n找一个对口的公司很重要，既然找到了，那就去做好它。\n现在证明了我选择它，我选对了；接下来要给它看，它选择我，同样也是正确的。\n\n2.生活上\n恢复博客的更新，个人主页的更新。\n以后，还是会维护CSDN和个人主页，各有侧重。\n博客，更侧重于算法上的一些东西；个人主页，更多的是一些杂谈感想还有技术。\n\n<br/>\n**然后，拨开迷雾，再度起航！**\n\n\n\n","source":"_posts/2017,  迷不茫.md","raw":"\n---\ntitle: 2017, 迷不茫\ndate: 2018-04-03 23:44:35\ntags: 抽空写\n---\n\n2017都过去了4个月，\n才有空，好好写写  过去的这一年。\n\n<!-- more -->\n\n\n\n<br/>\n<br/>\n2017 - 2018, 发生了很多事，按时间段来分：\n1.A公司 倒闭\n2.加入&离开 B公司\n3.加入 C公司\n\n---\n<br/>\n<br/>\n\n###  A公司 Over\n\n其实，早就预感到了这一天的到来。\n薪酬已经很低了，依旧留到最后。\n首先，我还是比较感性一些，我在A公司呆了近两年的时间，我从没毕业实习就在这。\n其次，我在这里能学到很多东西，同伴都是很资深且专业的人。\n最后，我喜欢这个公司的氛围，喜欢大家一起工作共事的感觉。\n\n最后做的TCG游戏的框架模式，也是我所喜欢的类型。\n就像女巫去熬制药剂一样，我们负责提供原材料；策划通过不同原材料的比例来合成不同的东西。\n\n最后没有撑下去，从我的角度来总结就是：\n1.版号的限制。\n这是最主要的问题，我们主要眼光放在了 中国的苹果市场，在游戏基本完成时，恰好赶上版号限制。那时候由于是版号政策刚刚实行，还是比较严格，公司有耗了大半年吧。\n2.目标过于单一\n这是后来，我入职B公司以后，才想到的。如同第一个问题，过于纠结 中国的苹果市场；相应的苹果海外市场及安卓海外市场也是可以去考虑的。对于技术来说，改成多语言版本，并不是难题。\n当然也有几个问题，我没有仔细考虑：\n- 做海外市场的推广，如何进行。A公司是研发团队，对运营及发行，完全没有能力。\n- 所做的题材是 西游题材，海外对此的接受程度如何。\n\n3.游戏选型\n这是，我从开始就隐隐担忧的事情。做的是对战类型的游戏，它不像很多游戏，发行有很多技巧去让游戏营收。这种游戏，更重玩家数量，要的就是与人斗，其乐无穷的效果。一个小公司去研发这种类型的游戏，着实不能让我有信心。虽然，最后决定要在对战AI上弥补人数不足的问题，但是，感觉还是有些差那么一丢丢。（让AI 充个648！）\n\n但是，我并不是老板，也不是专业的人员。所以，我的想法仅仅是从我能看到的方面去考虑。这里面我肯定疏忽了很多东西，毕竟，老板他们都是专业的，都在这个行业做了十几年，比我这个小菜鸟懂得太多了。\n\n然后，就是在A公司的收获吧：\n1.技术\n虽然游戏不是很大，但是整个一套流程，及周边一些相关开发（SDK接入；ios平台上，针对Object-C代码的修改；android平台上，针对java代码的修改；等等...）\n2.团队\n一个对的团队是很重要的，三观基本一致，朝着共同的目标去奋斗，鼓励学习，追求高效。还记得凯神拿着大长刀演示，人物挥动武器时重心的变化，手的位置，发力点等；涛哥又捣鼓出了一个android应用，附近的人的聊天室...\n3.无悔\n在一个公司，心甘情愿的留到最后。这真的不是很容易的事情。因为这个游戏是我喜欢做的，虽然不是独一无二的原创，但是无论是玩法，还是游戏表现，还是做游戏的过程，都让我对它有信心。我感觉到自己是在开发一款游戏，美术对设计一丝不苟，吹毛求疵，策划对数值不断优化测试。不管怎么说，有过这么一次经历，也无悔了。\n\n\n<br/>\n<br/>\n\n### B公司的入职与离职\n\nA公司over以后，就开始要找工作了...\n毕竟我也不是什么富二代啥的，在A公司由于一直在研发，也没有很高的收入，再加上女朋友也在身边，所以经济压力比较大。然后就没有花很长的时间去找一个工作。最后在很多公司中，选择了B公司。\n我选择B公司的原因如下：\n- 资金充裕，游戏已经上线，营收虽然不多，但是基本能够自给自足，正在优化准备大力推广阶段。\n- 扁平化的团队，其他同事的技术水平都比较高。\n- 大公司的孵化团队，有很好的资源。\n- 主攻海外市场的细分领域，目标明确且合理。\n\n在这家公司也呆了快一年的时间。老板和同事都挺好，由于个人原因吧，最终还是选择了离职。其实，用大白话来说，任何一个小型的团队，在维护**基本**团队建设基础上，最重要的一件事，还是**做成一款产品**。\n我离职，也是想了很久才下决定的，因为同事关系都挺好，也一起呆了这么久，真的不容易。\n我离职的原因如下：\n1.技术\n最主要的原因。不能说在这个公司没有学到技术，只是提升速度有些缓慢。因为偏向于换皮一类，技术提升还是有限度的。我希望提升的速度更快一些。\n2.时间\n个人喜好吧，我还是喜欢折腾一些东西，所以，我希望有一些自己的时间去做一些东西。但是工作时间有些长，休息都不够，更不用提其他的一些东西。这也是我有近大半年没有写过东西的原因之一（懒惰是原罪= =..）\n3.观念\n我目前是处于学习阶段，但其他同事都是工作了5年6年，甚至9年10年的。他们是想用自己所学的东西来变现的阶段。所以，很多东西就可能有些冲突。我不想太过于牺牲我自己来成全团队，这如同一场豪赌，赌赢了还好，若是输了...毕竟，我现在的半年和五年以后的半年，价值是不一样的。\n\n在A公司，我坚持到了最后，是因为对我技术提升有很大的帮助。在B公司，收入是足够的，但是我还是离开，因为和我个人发展的确有冲突。我觉得对我不公平，对公司也不公平。所以，选择了离开。\n\n我在B公司也学到的最主要的几个词：快速迭代，快速试错，搜集数据，重视反馈。\n\n\n<br/>\n<br/>\n\n### 加入C公司\n\n这次找工作目标，其实挺明确的。\n我去面试的时候，也没有藏着掖着；虽然面试有很多套路，很多技巧；但我觉得那都不是长久之计，适当的坦诚，真的很有必要。\n公司招人，肯定看中下面几方面：\n- 能不能干活\n- 能不能留下\n- 能不能学习\n\n再往后才是薪资什么的\n面试官，往往能分析到能不能干活和能不能学习；对于能不能留下，不好判断。\n所以，我面试的时候，往往会表达出我所看重的东西，我所期望的东西 —— 个人的成长和进步；也正因为如此，有很多机会我都错过了。\n其实，我觉得个人的进步和发展和工作并不冲突；在工作能力胜任的基础上，个人的每一分成长都会对工作产生积极正面的影响，但是，往往会被认为我会误工，对工作不认真不努力。\n对此，我也只能抱歉离开。\n\n选择C公司，真的是因为三观很合，无论是技术还是负责人。公司更看重功劳而非苦劳，鼓励高效率工作，而非低效率磨工，等等方案，当让我很有亲切感，归属感。\n而且，入职以来，很多事情都验证了我的选择的正确性。\n\n\n<br/>\n<br/>\n\n### 这两段经历的总结\n\n这几年，我一直贯彻着，个人发展重于其他，不将就，不妥协。\n但是还是或由于个人情感，或其他，将就了一些，妥协了一些。\n正如我这篇文章的题目 迷 但不 茫。\n过去这几年很迷，因为我目标明确了，但是却没有准确的实施下来。\n过去这几年不茫，因为我还是朝着我的方向在走。\n通过这几年的经验，最起码让我眼界扩宽了；身边的同事都比我资深，很有经验，有想法，与他们的合作与交流，让我进步很多。\n\n<br/>\n<br/>\n\n### 接下来\n\n1.工作上\n找一个对口的公司很重要，既然找到了，那就去做好它。\n现在证明了我选择它，我选对了；接下来要给它看，它选择我，同样也是正确的。\n\n2.生活上\n恢复博客的更新，个人主页的更新。\n以后，还是会维护CSDN和个人主页，各有侧重。\n博客，更侧重于算法上的一些东西；个人主页，更多的是一些杂谈感想还有技术。\n\n<br/>\n**然后，拨开迷雾，再度起航！**\n\n\n\n","slug":"2017,  迷不茫","published":1,"updated":"2018-04-09T16:45:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfsgy144000028uemw4k75wf","content":"<p>2017都过去了4个月，<br>才有空，好好写写  过去的这一年。</p>\n<a id=\"more\"></a>\n<p><br><br><br><br>2017 - 2018, 发生了很多事，按时间段来分：<br>1.A公司 倒闭<br>2.加入&amp;离开 B公司<br>3.加入 C公司</p>\n<hr>\n<p><br><br><br></p>\n<h3 id=\"A公司-Over\"><a href=\"#A公司-Over\" class=\"headerlink\" title=\"A公司 Over\"></a>A公司 Over</h3><p>其实，早就预感到了这一天的到来。<br>薪酬已经很低了，依旧留到最后。<br>首先，我还是比较感性一些，我在A公司呆了近两年的时间，我从没毕业实习就在这。<br>其次，我在这里能学到很多东西，同伴都是很资深且专业的人。<br>最后，我喜欢这个公司的氛围，喜欢大家一起工作共事的感觉。</p>\n<p>最后做的TCG游戏的框架模式，也是我所喜欢的类型。<br>就像女巫去熬制药剂一样，我们负责提供原材料；策划通过不同原材料的比例来合成不同的东西。</p>\n<p>最后没有撑下去，从我的角度来总结就是：<br>1.版号的限制。<br>这是最主要的问题，我们主要眼光放在了 中国的苹果市场，在游戏基本完成时，恰好赶上版号限制。那时候由于是版号政策刚刚实行，还是比较严格，公司有耗了大半年吧。<br>2.目标过于单一<br>这是后来，我入职B公司以后，才想到的。如同第一个问题，过于纠结 中国的苹果市场；相应的苹果海外市场及安卓海外市场也是可以去考虑的。对于技术来说，改成多语言版本，并不是难题。<br>当然也有几个问题，我没有仔细考虑：</p>\n<ul>\n<li>做海外市场的推广，如何进行。A公司是研发团队，对运营及发行，完全没有能力。</li>\n<li>所做的题材是 西游题材，海外对此的接受程度如何。</li>\n</ul>\n<p>3.游戏选型<br>这是，我从开始就隐隐担忧的事情。做的是对战类型的游戏，它不像很多游戏，发行有很多技巧去让游戏营收。这种游戏，更重玩家数量，要的就是与人斗，其乐无穷的效果。一个小公司去研发这种类型的游戏，着实不能让我有信心。虽然，最后决定要在对战AI上弥补人数不足的问题，但是，感觉还是有些差那么一丢丢。（让AI 充个648！）</p>\n<p>但是，我并不是老板，也不是专业的人员。所以，我的想法仅仅是从我能看到的方面去考虑。这里面我肯定疏忽了很多东西，毕竟，老板他们都是专业的，都在这个行业做了十几年，比我这个小菜鸟懂得太多了。</p>\n<p>然后，就是在A公司的收获吧：<br>1.技术<br>虽然游戏不是很大，但是整个一套流程，及周边一些相关开发（SDK接入；ios平台上，针对Object-C代码的修改；android平台上，针对java代码的修改；等等…）<br>2.团队<br>一个对的团队是很重要的，三观基本一致，朝着共同的目标去奋斗，鼓励学习，追求高效。还记得凯神拿着大长刀演示，人物挥动武器时重心的变化，手的位置，发力点等；涛哥又捣鼓出了一个android应用，附近的人的聊天室…<br>3.无悔<br>在一个公司，心甘情愿的留到最后。这真的不是很容易的事情。因为这个游戏是我喜欢做的，虽然不是独一无二的原创，但是无论是玩法，还是游戏表现，还是做游戏的过程，都让我对它有信心。我感觉到自己是在开发一款游戏，美术对设计一丝不苟，吹毛求疵，策划对数值不断优化测试。不管怎么说，有过这么一次经历，也无悔了。</p>\n<p><br><br><br></p>\n<h3 id=\"B公司的入职与离职\"><a href=\"#B公司的入职与离职\" class=\"headerlink\" title=\"B公司的入职与离职\"></a>B公司的入职与离职</h3><p>A公司over以后，就开始要找工作了…<br>毕竟我也不是什么富二代啥的，在A公司由于一直在研发，也没有很高的收入，再加上女朋友也在身边，所以经济压力比较大。然后就没有花很长的时间去找一个工作。最后在很多公司中，选择了B公司。<br>我选择B公司的原因如下：</p>\n<ul>\n<li>资金充裕，游戏已经上线，营收虽然不多，但是基本能够自给自足，正在优化准备大力推广阶段。</li>\n<li>扁平化的团队，其他同事的技术水平都比较高。</li>\n<li>大公司的孵化团队，有很好的资源。</li>\n<li>主攻海外市场的细分领域，目标明确且合理。</li>\n</ul>\n<p>在这家公司也呆了快一年的时间。老板和同事都挺好，由于个人原因吧，最终还是选择了离职。其实，用大白话来说，任何一个小型的团队，在维护<strong>基本</strong>团队建设基础上，最重要的一件事，还是<strong>做成一款产品</strong>。<br>我离职，也是想了很久才下决定的，因为同事关系都挺好，也一起呆了这么久，真的不容易。<br>我离职的原因如下：<br>1.技术<br>最主要的原因。不能说在这个公司没有学到技术，只是提升速度有些缓慢。因为偏向于换皮一类，技术提升还是有限度的。我希望提升的速度更快一些。<br>2.时间<br>个人喜好吧，我还是喜欢折腾一些东西，所以，我希望有一些自己的时间去做一些东西。但是工作时间有些长，休息都不够，更不用提其他的一些东西。这也是我有近大半年没有写过东西的原因之一（懒惰是原罪= =..）<br>3.观念<br>我目前是处于学习阶段，但其他同事都是工作了5年6年，甚至9年10年的。他们是想用自己所学的东西来变现的阶段。所以，很多东西就可能有些冲突。我不想太过于牺牲我自己来成全团队，这如同一场豪赌，赌赢了还好，若是输了…毕竟，我现在的半年和五年以后的半年，价值是不一样的。</p>\n<p>在A公司，我坚持到了最后，是因为对我技术提升有很大的帮助。在B公司，收入是足够的，但是我还是离开，因为和我个人发展的确有冲突。我觉得对我不公平，对公司也不公平。所以，选择了离开。</p>\n<p>我在B公司也学到的最主要的几个词：快速迭代，快速试错，搜集数据，重视反馈。</p>\n<p><br><br><br></p>\n<h3 id=\"加入C公司\"><a href=\"#加入C公司\" class=\"headerlink\" title=\"加入C公司\"></a>加入C公司</h3><p>这次找工作目标，其实挺明确的。<br>我去面试的时候，也没有藏着掖着；虽然面试有很多套路，很多技巧；但我觉得那都不是长久之计，适当的坦诚，真的很有必要。<br>公司招人，肯定看中下面几方面：</p>\n<ul>\n<li>能不能干活</li>\n<li>能不能留下</li>\n<li>能不能学习</li>\n</ul>\n<p>再往后才是薪资什么的<br>面试官，往往能分析到能不能干活和能不能学习；对于能不能留下，不好判断。<br>所以，我面试的时候，往往会表达出我所看重的东西，我所期望的东西 —— 个人的成长和进步；也正因为如此，有很多机会我都错过了。<br>其实，我觉得个人的进步和发展和工作并不冲突；在工作能力胜任的基础上，个人的每一分成长都会对工作产生积极正面的影响，但是，往往会被认为我会误工，对工作不认真不努力。<br>对此，我也只能抱歉离开。</p>\n<p>选择C公司，真的是因为三观很合，无论是技术还是负责人。公司更看重功劳而非苦劳，鼓励高效率工作，而非低效率磨工，等等方案，当让我很有亲切感，归属感。<br>而且，入职以来，很多事情都验证了我的选择的正确性。</p>\n<p><br><br><br></p>\n<h3 id=\"这两段经历的总结\"><a href=\"#这两段经历的总结\" class=\"headerlink\" title=\"这两段经历的总结\"></a>这两段经历的总结</h3><p>这几年，我一直贯彻着，个人发展重于其他，不将就，不妥协。<br>但是还是或由于个人情感，或其他，将就了一些，妥协了一些。<br>正如我这篇文章的题目 迷 但不 茫。<br>过去这几年很迷，因为我目标明确了，但是却没有准确的实施下来。<br>过去这几年不茫，因为我还是朝着我的方向在走。<br>通过这几年的经验，最起码让我眼界扩宽了；身边的同事都比我资深，很有经验，有想法，与他们的合作与交流，让我进步很多。</p>\n<p><br><br><br></p>\n<h3 id=\"接下来\"><a href=\"#接下来\" class=\"headerlink\" title=\"接下来\"></a>接下来</h3><p>1.工作上<br>找一个对口的公司很重要，既然找到了，那就去做好它。<br>现在证明了我选择它，我选对了；接下来要给它看，它选择我，同样也是正确的。</p>\n<p>2.生活上<br>恢复博客的更新，个人主页的更新。<br>以后，还是会维护CSDN和个人主页，各有侧重。<br>博客，更侧重于算法上的一些东西；个人主页，更多的是一些杂谈感想还有技术。</p>\n<p><br><br><strong>然后，拨开迷雾，再度起航！</strong></p>\n","site":{"data":{}},"excerpt":"<p>2017都过去了4个月，<br>才有空，好好写写  过去的这一年。</p>","more":"<p><br><br><br><br>2017 - 2018, 发生了很多事，按时间段来分：<br>1.A公司 倒闭<br>2.加入&amp;离开 B公司<br>3.加入 C公司</p>\n<hr>\n<p><br><br><br></p>\n<h3 id=\"A公司-Over\"><a href=\"#A公司-Over\" class=\"headerlink\" title=\"A公司 Over\"></a>A公司 Over</h3><p>其实，早就预感到了这一天的到来。<br>薪酬已经很低了，依旧留到最后。<br>首先，我还是比较感性一些，我在A公司呆了近两年的时间，我从没毕业实习就在这。<br>其次，我在这里能学到很多东西，同伴都是很资深且专业的人。<br>最后，我喜欢这个公司的氛围，喜欢大家一起工作共事的感觉。</p>\n<p>最后做的TCG游戏的框架模式，也是我所喜欢的类型。<br>就像女巫去熬制药剂一样，我们负责提供原材料；策划通过不同原材料的比例来合成不同的东西。</p>\n<p>最后没有撑下去，从我的角度来总结就是：<br>1.版号的限制。<br>这是最主要的问题，我们主要眼光放在了 中国的苹果市场，在游戏基本完成时，恰好赶上版号限制。那时候由于是版号政策刚刚实行，还是比较严格，公司有耗了大半年吧。<br>2.目标过于单一<br>这是后来，我入职B公司以后，才想到的。如同第一个问题，过于纠结 中国的苹果市场；相应的苹果海外市场及安卓海外市场也是可以去考虑的。对于技术来说，改成多语言版本，并不是难题。<br>当然也有几个问题，我没有仔细考虑：</p>\n<ul>\n<li>做海外市场的推广，如何进行。A公司是研发团队，对运营及发行，完全没有能力。</li>\n<li>所做的题材是 西游题材，海外对此的接受程度如何。</li>\n</ul>\n<p>3.游戏选型<br>这是，我从开始就隐隐担忧的事情。做的是对战类型的游戏，它不像很多游戏，发行有很多技巧去让游戏营收。这种游戏，更重玩家数量，要的就是与人斗，其乐无穷的效果。一个小公司去研发这种类型的游戏，着实不能让我有信心。虽然，最后决定要在对战AI上弥补人数不足的问题，但是，感觉还是有些差那么一丢丢。（让AI 充个648！）</p>\n<p>但是，我并不是老板，也不是专业的人员。所以，我的想法仅仅是从我能看到的方面去考虑。这里面我肯定疏忽了很多东西，毕竟，老板他们都是专业的，都在这个行业做了十几年，比我这个小菜鸟懂得太多了。</p>\n<p>然后，就是在A公司的收获吧：<br>1.技术<br>虽然游戏不是很大，但是整个一套流程，及周边一些相关开发（SDK接入；ios平台上，针对Object-C代码的修改；android平台上，针对java代码的修改；等等…）<br>2.团队<br>一个对的团队是很重要的，三观基本一致，朝着共同的目标去奋斗，鼓励学习，追求高效。还记得凯神拿着大长刀演示，人物挥动武器时重心的变化，手的位置，发力点等；涛哥又捣鼓出了一个android应用，附近的人的聊天室…<br>3.无悔<br>在一个公司，心甘情愿的留到最后。这真的不是很容易的事情。因为这个游戏是我喜欢做的，虽然不是独一无二的原创，但是无论是玩法，还是游戏表现，还是做游戏的过程，都让我对它有信心。我感觉到自己是在开发一款游戏，美术对设计一丝不苟，吹毛求疵，策划对数值不断优化测试。不管怎么说，有过这么一次经历，也无悔了。</p>\n<p><br><br><br></p>\n<h3 id=\"B公司的入职与离职\"><a href=\"#B公司的入职与离职\" class=\"headerlink\" title=\"B公司的入职与离职\"></a>B公司的入职与离职</h3><p>A公司over以后，就开始要找工作了…<br>毕竟我也不是什么富二代啥的，在A公司由于一直在研发，也没有很高的收入，再加上女朋友也在身边，所以经济压力比较大。然后就没有花很长的时间去找一个工作。最后在很多公司中，选择了B公司。<br>我选择B公司的原因如下：</p>\n<ul>\n<li>资金充裕，游戏已经上线，营收虽然不多，但是基本能够自给自足，正在优化准备大力推广阶段。</li>\n<li>扁平化的团队，其他同事的技术水平都比较高。</li>\n<li>大公司的孵化团队，有很好的资源。</li>\n<li>主攻海外市场的细分领域，目标明确且合理。</li>\n</ul>\n<p>在这家公司也呆了快一年的时间。老板和同事都挺好，由于个人原因吧，最终还是选择了离职。其实，用大白话来说，任何一个小型的团队，在维护<strong>基本</strong>团队建设基础上，最重要的一件事，还是<strong>做成一款产品</strong>。<br>我离职，也是想了很久才下决定的，因为同事关系都挺好，也一起呆了这么久，真的不容易。<br>我离职的原因如下：<br>1.技术<br>最主要的原因。不能说在这个公司没有学到技术，只是提升速度有些缓慢。因为偏向于换皮一类，技术提升还是有限度的。我希望提升的速度更快一些。<br>2.时间<br>个人喜好吧，我还是喜欢折腾一些东西，所以，我希望有一些自己的时间去做一些东西。但是工作时间有些长，休息都不够，更不用提其他的一些东西。这也是我有近大半年没有写过东西的原因之一（懒惰是原罪= =..）<br>3.观念<br>我目前是处于学习阶段，但其他同事都是工作了5年6年，甚至9年10年的。他们是想用自己所学的东西来变现的阶段。所以，很多东西就可能有些冲突。我不想太过于牺牲我自己来成全团队，这如同一场豪赌，赌赢了还好，若是输了…毕竟，我现在的半年和五年以后的半年，价值是不一样的。</p>\n<p>在A公司，我坚持到了最后，是因为对我技术提升有很大的帮助。在B公司，收入是足够的，但是我还是离开，因为和我个人发展的确有冲突。我觉得对我不公平，对公司也不公平。所以，选择了离开。</p>\n<p>我在B公司也学到的最主要的几个词：快速迭代，快速试错，搜集数据，重视反馈。</p>\n<p><br><br><br></p>\n<h3 id=\"加入C公司\"><a href=\"#加入C公司\" class=\"headerlink\" title=\"加入C公司\"></a>加入C公司</h3><p>这次找工作目标，其实挺明确的。<br>我去面试的时候，也没有藏着掖着；虽然面试有很多套路，很多技巧；但我觉得那都不是长久之计，适当的坦诚，真的很有必要。<br>公司招人，肯定看中下面几方面：</p>\n<ul>\n<li>能不能干活</li>\n<li>能不能留下</li>\n<li>能不能学习</li>\n</ul>\n<p>再往后才是薪资什么的<br>面试官，往往能分析到能不能干活和能不能学习；对于能不能留下，不好判断。<br>所以，我面试的时候，往往会表达出我所看重的东西，我所期望的东西 —— 个人的成长和进步；也正因为如此，有很多机会我都错过了。<br>其实，我觉得个人的进步和发展和工作并不冲突；在工作能力胜任的基础上，个人的每一分成长都会对工作产生积极正面的影响，但是，往往会被认为我会误工，对工作不认真不努力。<br>对此，我也只能抱歉离开。</p>\n<p>选择C公司，真的是因为三观很合，无论是技术还是负责人。公司更看重功劳而非苦劳，鼓励高效率工作，而非低效率磨工，等等方案，当让我很有亲切感，归属感。<br>而且，入职以来，很多事情都验证了我的选择的正确性。</p>\n<p><br><br><br></p>\n<h3 id=\"这两段经历的总结\"><a href=\"#这两段经历的总结\" class=\"headerlink\" title=\"这两段经历的总结\"></a>这两段经历的总结</h3><p>这几年，我一直贯彻着，个人发展重于其他，不将就，不妥协。<br>但是还是或由于个人情感，或其他，将就了一些，妥协了一些。<br>正如我这篇文章的题目 迷 但不 茫。<br>过去这几年很迷，因为我目标明确了，但是却没有准确的实施下来。<br>过去这几年不茫，因为我还是朝着我的方向在走。<br>通过这几年的经验，最起码让我眼界扩宽了；身边的同事都比我资深，很有经验，有想法，与他们的合作与交流，让我进步很多。</p>\n<p><br><br><br></p>\n<h3 id=\"接下来\"><a href=\"#接下来\" class=\"headerlink\" title=\"接下来\"></a>接下来</h3><p>1.工作上<br>找一个对口的公司很重要，既然找到了，那就去做好它。<br>现在证明了我选择它，我选对了；接下来要给它看，它选择我，同样也是正确的。</p>\n<p>2.生活上<br>恢复博客的更新，个人主页的更新。<br>以后，还是会维护CSDN和个人主页，各有侧重。<br>博客，更侧重于算法上的一些东西；个人主页，更多的是一些杂谈感想还有技术。</p>\n<p><br><br><strong>然后，拨开迷雾，再度起航！</strong></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjfigp42t00000due1e9lqoqe","tag_id":"cjfigp43b00020duecpj774ur","_id":"cjfigp43w00070duebm8yn6nb"},{"post_id":"cjfigp43200010due5e4wjej2","tag_id":"cjfigp43b00020duecpj774ur","_id":"cjfigp444000b0duenxcm6h72"},{"post_id":"cjfigp43e00030dueuibr8eek","tag_id":"cjfigp443000a0duel0byij4s","_id":"cjfigp44n000j0duer80oenxf"},{"post_id":"cjfigp43e00030dueuibr8eek","tag_id":"cjfigp44a000e0due4unvfocg","_id":"cjfigp44q000l0duehuuxmsic"},{"post_id":"cjfigp44o000k0due173398gr","tag_id":"cjfigp43b00020duecpj774ur","_id":"cjfigp44w000o0duexwy5oaji"},{"post_id":"cjfigp44x000p0duey48rycs7","tag_id":"cjfigp44s000m0duexnuxgz3v","_id":"cjfigp451000r0duesnklprty"},{"post_id":"cjfigp43k00040dueyfjs9ksb","tag_id":"cjfigp44i000h0due560scs2n","_id":"cjfigp452000s0dueknup0iar"},{"post_id":"cjfigp43k00040dueyfjs9ksb","tag_id":"cjfigp44s000m0duexnuxgz3v","_id":"cjfigp453000u0duexk9h978g"},{"post_id":"cjfigp43r00050due7164pslb","tag_id":"cjfigp443000a0duel0byij4s","_id":"cjfigp454000v0due6aw50nwd"},{"post_id":"cjfigp43w00080duedyaamuy0","tag_id":"cjfigp452000t0duef3gf15yg","_id":"cjfigp456000x0duecimv5g8j"},{"post_id":"cjfigp44000090duew7fd2amr","tag_id":"cjfigp452000t0duef3gf15yg","_id":"cjfigp458000z0dueyam3x46p"},{"post_id":"cjfigp444000c0due3pk9v38p","tag_id":"cjfigp452000t0duef3gf15yg","_id":"cjfigp45900110due6hmks58g"},{"post_id":"cjfigp448000d0dueaeiu7ogm","tag_id":"cjfigp452000t0duef3gf15yg","_id":"cjfigp45a00130dues0nwos13"},{"post_id":"cjfigp44b000f0dueeo97kkl6","tag_id":"cjfigp452000t0duef3gf15yg","_id":"cjfigp45a00150dueahzsv3ug"},{"post_id":"cjfigp44e000g0due9o994zy3","tag_id":"cjfigp452000t0duef3gf15yg","_id":"cjfigp45b00170duerwzpjrpm"},{"post_id":"cjfigp44k000i0duegrxlpjtx","tag_id":"cjfigp452000t0duef3gf15yg","_id":"cjfigp45c00190dueimspm972"},{"post_id":"cjfigp44t000n0duevk6ik5gt","tag_id":"cjfigp44s000m0duexnuxgz3v","_id":"cjfigp45e001a0dueclt8bhhb"},{"post_id":"cjfsgy144000028uemw4k75wf","tag_id":"cjfigp43b00020duecpj774ur","_id":"cjfsgy14f000128ueajs2y9jl"}],"Tag":[{"name":"抽空写","_id":"cjfigp43b00020duecpj774ur"},{"name":"跟着学","_id":"cjfigp443000a0duel0byij4s"},{"name":"Go","_id":"cjfigp44a000e0due4unvfocg"},{"name":"cocos2d","_id":"cjfigp44i000h0due560scs2n"},{"name":"想就做","_id":"cjfigp44s000m0duexnuxgz3v"},{"name":"看着读","_id":"cjfigp452000t0duef3gf15yg"}]}}