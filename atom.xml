<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tree House</title>
  
  <subtitle>不如自挂东南枝</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-10T15:21:18.017Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ltree98</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《能力陷阱》读感</title>
    <link href="http://yoursite.com/2020/05/10/%E3%80%8A%E8%83%BD%E5%8A%9B%E9%99%B7%E9%98%B1%E3%80%8B%E8%AF%BB%E6%84%9F/"/>
    <id>http://yoursite.com/2020/05/10/%E3%80%8A%E8%83%BD%E5%8A%9B%E9%99%B7%E9%98%B1%E3%80%8B%E8%AF%BB%E6%84%9F/</id>
    <published>2020-05-10T13:37:35.000Z</published>
    <updated>2020-05-10T15:21:18.017Z</updated>
    
    <content type="html"><![CDATA[<p>避免能力陷阱</p><a id="more"></a><p><br><br><br></p><h1 id="读因"><a href="#读因" class="headerlink" title="读因"></a>读因</h1><p>为什么读这本书呢？</p><p>广义上来说，是看了榜单前列的书籍推荐，没错，就是那种 “2019最畅销的书” 那种榜单。</p><p>然后，看到简介：</p><ul><li>我们很乐于去做那些我们擅长的事，于是就会一直去做，最终就使得我们会一直擅长那些事。做得越多，就越擅长，越擅长就越愿意去做。这样的一个循环能让我们在这方面获得更多的经验，但却容易陷入能力陷阱，在其他方面无法突破。每个人都要特别警惕这种能力陷阱，避免把大量时间花在日常琐事上。如果你想要的获得更多更好的发展，就要从日常琐事中解脱出来，转变到进行更多策略性思考、在日常工作外建立人际关系网络、提升影响力等能够给你持续带来价值的工作上，这样你才能在各领域获得更好的发展。    （《能力陷阱》——埃米尼亚·伊贝拉）</li></ul><p>以前得到的都是那种：做自己擅长的事，扬长避短的观念。</p><p>这本书是提倡，在某方面达到一定阶段后，就可以换个方向继续探索，而不是继续在此钻研，去寻求能带来价值的工作上。</p><p>对于对传统秉承的观念看法提出异议的内容，我向来还是比较关注的，时代在变化，很多东西会随着时代变迁而过时，有些会留下来；但并不代表那些是真理，不会过时，除非是那种模棱两可的话术。</p><p>我关注这些异议的内容，关注它的针对的观点，关注它反对的内容，关注它适用的场景；就如同看一场辩论会，不可这可不是辩论，是一个新兴观点对传统观点的驳击。</p><p>但是也能通过这种特殊的辩论，更清晰的理清双方的观点，适用性，从而去吸收两者的优质内容。</p><p><br><br><br><br><br></p><h1 id="读感"><a href="#读感" class="headerlink" title="读感"></a>读感</h1><p>这本书，我整体感悟，分为两部分。</p><h2 id="避免能力陷阱"><a href="#避免能力陷阱" class="headerlink" title="避免能力陷阱"></a>避免能力陷阱</h2><p>为什么会出现能力陷阱呢？</p><p>因为大家都喜欢做自己所擅长的事，去做擅长的事，在做的时候有把握，做完后有更大概率获得成功，继而得到成就感。这是一个非常圆满的闭环鼓励机制，像一个永动机一样推动着去做擅长的事情。</p><p>老话说，扬长避短，不就应该就发扬自己长处，避开自己的短处吗？这个观点，是要我们避短克长？</p><p>我的理解是，首先，避短，不代表逃避，也有克服的含义，可以理解成直面自己的短处，去克服它；其次，在一个方向展现能力后，要换方向，换的那个方向不一定是“短”，也可能更“长”。</p><p>其实，归根结底，是因为时代的发展，对专才的重视度下降。</p><p>就如同书中的例子：</p><ul><li>尽管和之前相比，杰夫没有什么失误，但是他的老板现在希望能看到杰夫有更强的领导能力，而杰夫的表现并没有很出色，所以老板不确定他是否有能力担任更高的职位。    （《能力陷阱》）</li></ul><p>因为杰夫在专业领域达到了一定成就，老板认可，于是提拔他；但是到下一个阶段，所看重的能力不仅仅是之前关注的部分，可能更关注领导力，但是杰夫可能没有意会到，依然注重原来的方向，甚至更加重视。</p><p>这个看起来很简单，但实际生活中却常常出现。</p><p>很多开发者，因为业务能力出众，受到提拔，提高职级；但是，在受到提拔后，回报的方式只有更努力的去工作。但是，在职级变更后，所负责的内容，依旧是原来那些吗？每个职级对应的职责是不一样的，一般的项目组，会写明不同职级所对应的期望及工作内容，及下一个职级的期望及内容。</p><p>那么，为什么，很多开发者会选择更努力工作来回报呢？当然是因为——擅长。职级提升了，工作职责中需要统筹规划功能等，这多麻烦啊，还要去沟通，去争论，不如全给我，我自己一个人都做了，更能显示出自己的能力。在擅长的事情上更加精进，对于其他方面视若无睹。</p><p>但是，对于领导层看到这个情况，交给4个人，两个周的内容；最后是1个人3个周解决；的确这个人能力有目共睹，但是时间上延期了1个周，另外3个人的3个周工时白费。这是期望看到的结果吗？</p><p>所以，我认为的能力陷阱产生的原因是：<strong>随着时代的发展，相较以往大工厂的战斗模式，小团队攻坚成为主流；因此专才的重要性降低，领导层更加重视下属多方面能力的均值；但是，大部分人更喜欢在自己所擅长的方向上拓展进步。</strong></p><p>那，怎么解决呢？</p><p><strong>想法 + 过程 + 你本人 = 成功的转变</strong></p><p><br><br><br></p><h2 id="先行动，后思考"><a href="#先行动，后思考" class="headerlink" title="先行动，后思考"></a>先行动，后思考</h2><p>以前一直灌输的思想是 三思而后行，但是面对的环境不同，采取不同的策略。</p><p>这里主要指的是要做出一个转变，面对未知的一个策略，就如同那句话：弄清楚想要成为什么样的人是改变中最后一件要做的事情，而不是第一件。</p><p>这个也配合着书中提倡的策略：想成为什么样的人，先按照那个样子去做。然后，通过做的过程才能发现种种选择与挑战，进而反思整理，总结经验，按照自己的既定目标去选择。</p><p>如果我们不先迈出这一步，而是一直用以前的经验去想未知的探索，很难得到有用的信息。</p><p>多实践，多探索，多反思，总结经验，不断进步。</p><p>在生活中，也有类似的东西，最明显的就如同升职加薪。</p><p>在我之前的《聊聊自己》这篇文章中所说的，先做到自己期许的样子，先迈出这一步，而不是等到公司给你晋升再去做，给公司一个晋升你的理由。</p><p>如同那段话：</p><ul><li>优秀的人都是为自己打工，和公司一起成长，相互借力，才能找到自己的价值。无论公司怎么发展，个人能力最终是沉淀到了自己的身上，这远比你浪费时间和摸鱼更好。    （卖桃者说 - 人生一大误区：做到80%就已经不错了）</li></ul><p><br><br><br><br><br></p><h1 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h1><ul><li>我们很乐于去做那些我们擅长的事，于是就会一直去做，最终就使得我们会一直擅长那些事。做得越多，就越擅长，越擅长就越愿意去做。这样的一个循环能让我们在这方面获得更多的经验。而它就像是毒品一样，我们被它深深吸引，因此我们的快乐和自信都来源于它。它还会让我们产生误区，让我们相信我们擅长的事就是最有价值的且重要的事，所以值得我们花时间去做。    （能力陷阱）</li></ul><ul><li>“像水一样”，是指不要仅仅局限在一个形象里，要能适应新的环境，在新的环境里塑造一个新的自我形象（例如，把水倒进杯子里，它就是杯子的形状；把水倒进瓶子里，它就是瓶子的形状）。    （为什么人要像水一样）</li></ul><ul><li>弄清楚你想要的成为什么样的领导者是改变中最后一件需要做的事，而不是第一件。    （ 照食谱做菜并不能让你成为一个好厨师）</li></ul><ul><li>“向前展望时你不能把点点滴滴的经历联系在一起，只有在向后回顾时才能发现它们之间的联系。”    （过去的经历有用吗）</li></ul><ul><li>以下是我所摘录的他所得到的几点发现：· 没有什么是原创的  · 你只可能做的与你身边的事（或人）一样好  · 不要等到你完全认识了自己才开始做事  · 模仿你的榜样    （扩展你的自我概念）</li></ul><ul><li>你应该从哪儿开始做起呢？本书的核心观点是，成为一名优秀领导者的唯一办法就是要先表现的像一个领导者。行动，即改变你的做事方法，重建并利用你的人际关系网络以及改变展现自己的方式，能够提升你的外在表现力，刷新你对领导力的理解，还能改变促使你继续前进的动力。    （总结行动起来！）</li></ul><ul><li>从发现转变时机到转变能为你带来越来越多的好处之间是一个持续增长的过程，这个过程并不是你想象中那样径直地发展。所有的逻辑理论都告诉我们，转变过程很少会出现你所期望的持续向前进步，甚至可能不显露出有所进步，总是在不断地向前又后退，但是如果有一天，你在这条路上学到了足够多的东西，前进的势头就会一直保持下去。    （过程和结果，哪个重要）</li></ul><p><br></p><p><br></p><p><br></p><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;避免能力陷阱&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="看着读" scheme="http://yoursite.com/tags/%E7%9C%8B%E7%9D%80%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>联网战斗同步优化</title>
    <link href="http://yoursite.com/2020/04/19/%E8%81%94%E7%BD%91%E6%88%98%E6%96%97%E5%90%8C%E6%AD%A5%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/04/19/%E8%81%94%E7%BD%91%E6%88%98%E6%96%97%E5%90%8C%E6%AD%A5%E4%BC%98%E5%8C%96/</id>
    <published>2020-04-19T14:51:00.000Z</published>
    <updated>2020-04-19T15:18:33.546Z</updated>
    
    <content type="html"><![CDATA[<p>联网战斗同步之优化篇</p><a id="more"></a><p><br></p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>在上篇文章，主要讲述</p><ol><li>联网战斗的简介<ul><li>网络传输协议</li><li>网络同步模型</li><li>网络拓扑模型</li></ul></li><li>实现联网战斗的方案</li><li>实现时的一些重点处理</li><li>实现后的一些优化改进畅想</li><li>我的感悟</li></ol><p>更详细的内容，请跳转：<a href="http://www.lt-tree.com/2019/09/21/%E8%81%94%E7%BD%91%E6%88%98%E6%96%97%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">联网战斗同步实现</a></p><p><br></p><p><br></p><p><br></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>之前实现了一版联网战斗方案，还比较粗糙，存在许多不足的地方。<br>秉承着 先实现，再持续交付、快速迭代 的理念。<br>由于实践的效果不是很好，所以需要做一版优化。</p><p><br></p><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>总览：</p><ol><li>轮询机制都改为即时</li><li>帧推送间隔时间修改</li><li>建立帧缓存机制</li><li>扩充操作帧上传时机</li><li>完善的统计机制</li><li>自动化工具完善</li></ol><p><br></p><h3 id="轮询机制改为即时"><a href="#轮询机制改为即时" class="headerlink" title="轮询机制改为即时"></a>轮询机制改为即时</h3><p>在捋清各个流程步骤时，发现有些轮询机制，会导致延迟的增高。</p><ul><li>逻辑处的轮询</li><li>协议收发的轮询</li></ul><p>轮询的作用是减轻各模块功能的压力，降低成本。<br>我个人是觉得，在实现功能的时候，对于这种可控性成本需求，先按最优版本实现，做出我们最优效果。<br>之后，再根据成本等问题，进行打折简化。<br>我们做好对比数据的提供，交由项目负责人决策。</p><p><br></p><h3 id="帧推送间隔时间修改"><a href="#帧推送间隔时间修改" class="headerlink" title="帧推送间隔时间修改"></a>帧推送间隔时间修改</h3><p>之前，为了让客户端压力小一些，处于“饥饿”状态，服务器推帧间隔设置为 35ms。<br>但是，在有些模块进行逻辑处理依旧以 30帧/秒（固定间隔 33.3ms）处理数据。<br>会导致部分客户端逻辑 与 实际有差异，造成抖动。</p><p>因此，将帧推送间隔时间修改为 33ms，减缓抖动。</p><p><br></p><h3 id="建立帧缓存机制-重点"><a href="#建立帧缓存机制-重点" class="headerlink" title="建立帧缓存机制[重点]"></a>建立帧缓存机制[重点]</h3><p>基础方案，过于依赖网络状况。<br>显然这样是不现实的，所以需要做一套帧缓存机制，来应对网络的波动。</p><p>释放帧的时机：</p><ul><li>逻辑帧执行时</li><li>绘制帧执行时</li><li>逻辑帧执行时释放一次，绘制帧执行时根据需要补充释放</li></ul><p>释放帧策略：</p><ul><li>释放一次，每次释放一帧<ul><li>可能导致帧积压，越来越卡</li></ul></li><li>释放一次，每次释放帧数量可变<ul><li>每次释放帧数量根据帧缓存池内帧数变化</li></ul></li><li>释放多次，每次释放数量可变</li><li>缓存帧模式，缓存帧数量可配置</li><li>缓存帧模式，缓存一帧<ul><li>如果缓存帧数量可配置，就需要做一个让所有配置相对平衡的策略；单做缓存一帧，可以更细致的制定策略</li><li>但是经用户体验，发现这个策略并没有比大锅饭更好，甚至更差。。</li></ul></li><li>释放一次，每次释放所有帧</li></ul><h4 id="可配置缓存"><a href="#可配置缓存" class="headerlink" title="可配置缓存"></a>可配置缓存</h4><p>第一版做的是可配置缓存。<br>缓存帧的数量可配，通过实际体验来决定具体缓存帧的数量。<br>（最开始设想是，先做成可配；之后再根据实际网络状况，动态修改配置缓存的帧数量，类似于流媒体领域的 JitterBuffer）<br>对于释放帧的数量方案是：</p><p>缓存帧数量为 n<br>帧池内帧数量为 m</p><ul><li>若 m &lt;= (n+1), 释放1帧</li><li>若 m &lt;= (n+1) * 2, 释放2帧</li><li>若 m &lt;= (n+1) * 3, 释放3帧</li><li>若 m &gt; (n+1) * 3, 释放 (m-1)帧</li></ul><p>流程图：</p><p><img src="/images/sync_cacheConfig.png" alt="缓存N帧"></p><h4 id="缓存一帧"><a href="#缓存一帧" class="headerlink" title="缓存一帧"></a>缓存一帧</h4><p>经过实际体验，缓存一帧是比较理想的，大于一帧的延迟，大家接受不了。<br>之前的释放帧策略是针对缓存n帧的普适规则，既然定下来缓存1帧，就做一个更为详细的策略。</p><p>先说结论再说步骤：<br>帧池内帧数量为 m</p><p>分为四个阶段</p><ol><li>正常运行阶段<ul><li>0 &lt; m &lt;= 2, 每次释放1帧</li></ul></li><li>大步调优阶段<ul><li>m &lt;= 5, 释放1次释放2帧</li><li>m &lt;= 8, 释放1次释放3帧</li></ul></li><li>小步快跑阶段<ul><li>m &lt;= 14, 进入快跑模式, 往后每次释放k帧, 直到恢复正常, k = math.ceil((m+1) / 2)</li><li>当不足以释放k帧时，释放 k-1 帧, 退出快跑模式</li></ul></li><li>瞬间传送阶段<ul><li>m &gt; 14, 释放 (m-1)帧</li></ul></li></ol><p>流程图：</p><p><img src="/images/sync_cacheOne.png" alt="缓存一帧"></p><p>这个是怎么算出来的呢？<br>我列了一个表格，</p><p>列为：<br>帧池内帧数量 | 延迟时间 | 释放帧数量 | 释放后帧数量 | 下次释放帧时，帧池内可能帧数量 | 恢复正常所需要快播次数 | 往后每次释放帧数量</p><p>行为：<br>从1-15, 每帧33ms，15帧大约为 495ms</p><p>接下来开始填释放帧数量，依据以下原则：</p><ul><li>每次释放帧数量要保证在3帧内</li><li>恢复正常所需要的快播数，保证在3次内</li><li>尽可能平缓的恢复</li><li>若无法满足，更倾向于保证3次快播，恢复正常</li></ul><p>然后就开始填表格。<br>有一点遗憾的是，没有卡到300ms 和 500ms，都差一帧。</p><p><br></p><h3 id="扩充帧上传时机"><a href="#扩充帧上传时机" class="headerlink" title="扩充帧上传时机"></a>扩充帧上传时机</h3><p>之前方案中，客户端收集完帧，上传时机在于执行逻辑帧前：先上传之前的操作，再去执行帧操作。<br>扩充为三个方案：</p><ul><li>执行逻辑帧前</li><li>执行逻辑帧后</li><li>执行绘制帧前</li></ul><p><br></p><h3 id="完善的统计机制-重点"><a href="#完善的统计机制-重点" class="headerlink" title="完善的统计机制 [重点]"></a>完善的统计机制 [重点]</h3><p>我个人一直特别推崇数据驱动，数据不会说谎，除非数据收集的粒度与广度不够。<br>建立一套完善的统计机制，通过数据来分析用户状态、行为，进而辅助设计，优化体验，做到有依据有目的有验证标准的方式的去解决问题是非常必要的。</p><p>统计数值大概包括：</p><ul><li>基本信息<ul><li>机型</li><li>操作系统</li><li>位置信息</li><li>连接的服务器位置</li><li>战斗开始时间</li><li>战斗类型</li><li>掉线标记</li></ul></li><li>服务器项（分为两部分，客户端发往服务器&amp;服务器发往客户端）<ul><li>丢包率</li><li>重发率</li><li>协议平均延迟</li></ul></li><li>客户端项<ul><li>快播率<ul><li>释放帧时帧数大于1帧</li></ul></li><li>卡死率<ul><li>释放帧时帧数等于0帧</li></ul></li><li>正常率<ul><li>释放帧时帧数等于1帧</li></ul></li><li>帧间隔值<ul><li>收到帧间隔</li></ul></li><li>帧间隔波动值<ul><li>距离帧应到时间的差值</li></ul></li><li>PING值</li><li>FPS值</li></ul></li><li>帧操作的一生<ul><li>操作的产生</li><li>操作的上传</li><li>操作的下发</li><li>操作的执行</li></ul></li></ul><p>针对每个数值，都可以包括更详细的项：</p><ul><li>最大值</li><li>最小值</li><li>阈值达到次数<ul><li>100%</li><li>70%</li><li>50%</li></ul></li><li>平均值</li></ul><p>注意：</p><ul><li>计算平均值的时候，超出阈值的取阈值，避免一些极端数值影响平均值。</li><li>这里我采用了python的 pandas模块去处理并分析数据</li></ul><p><br></p><h3 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h3><h4 id="判定-amp-收集不同步"><a href="#判定-amp-收集不同步" class="headerlink" title="判定&amp;收集不同步"></a>判定&amp;收集不同步</h4><p>首先对战斗产生日志分级存储：</p><ol><li>【同步】帧处理，随机数，实体状态 相关</li><li>【部分同步】实体添加删除，BUFF添加删除等（包含1的所有内容）</li><li>【不同步】时间戳，其他同步信息打印（包含1，2）</li></ol><p>注意：</p><ul><li>包含关系，越往下越详细，而且下一级的内容包含上一级的所有内容，即当一条信息在 2级日志内时，不会在1级日志内出现，但会在3的日志内出现。这样做方便定位更详细的日志的各级位置</li><li>【同步】、【部分同步】、【不同步】 代表同样的战斗在不同客户端上的日志是否一致，【部分同步】表示不一致的内容只会在开头&amp;结尾，不会在中间出现</li></ul><p>1级日志内容会比较少（因为会在战斗中生成，每场战斗要重置），是重点的同步信息。这份日志主要是用来判断各客户端战斗是否同步使用的，同步判断包括两部分：</p><ul><li>随机数取值一致</li><li>实体状态一致</li></ul><p>2级日志，是用来辅助1级日志查找不同步问题，但是内容会相对3级日志更偏重联网战斗一些</p><p>3级日志，就是更广范围的日志，包含游戏其他功能模块的处理逻辑日志打印</p><p>不同步判定&amp;收集:</p><ol><li><p>战斗结束后，客户端战斗产生的1级日志内容，压缩为MD5，上传给服务器</p></li><li><p>服务器收集各客户端MD5，进行比较；判定战斗不同步即分版本存储本场战斗录像（所有的帧操作）</p></li><li>任意客户端可在debug模式中，拉取不同步的战斗进行回放现场</li></ol><h4 id="重现不同步"><a href="#重现不同步" class="headerlink" title="重现不同步"></a>重现不同步</h4><p>通过不同步收集，可以获取到不同步的战斗信息。</p><p>剩下的就是重现不同，这里采用的方式很简单，就是不断的跑这场战斗。</p><p>比如，跑100次战斗，将MD5不同的日志收集起来，进行比对，进而修改，直至这100场战斗的日志产生的MD5均一致。</p><p>其实，只要能重现BUG，就离解决不远了，而且是能无限重现的BUG。</p><h4 id="其他项"><a href="#其他项" class="headerlink" title="其他项"></a>其他项</h4><ul><li><p>前期测试时期，可以让服务器把同步的战斗操作也存储，然后拉去下来本地跑100场。</p></li><li><p>100场也只是一个样例，嫌多可以跑30场，200场，都随意。</p></li><li><p>善于利用闲置电脑，让所有客户端都能替你跑不同步测试</p><ul><li>我是在游戏内开发一套debug工具，配合服务器，可以拉取各个角色的回放信息，并进行不同步测试。在战斗时，把自己带入为双方中的任何一方视角进行战斗并输出日志。</li><li>后期也支持，只跑逻辑，不跑绘制的战斗，这样使得测试时间大大缩短。（还顺便检测出了一些BUG）</li></ul></li></ul><p><br></p><p><br></p><h2 id="优化效果"><a href="#优化效果" class="headerlink" title="优化效果"></a>优化效果</h2><p>通过最新一期的线上测试；大概近6000场战斗，总的不同步率 及 各战斗模式的不同步率 均已经降低到了 0.1%以下。(包含 1V1 PK，多人组队战斗等)。</p><p>可能还是战斗场次不够多，需要更大量的数据来检测，但是，起码目前已经到及格线，下一步就是调整优化延迟了。</p><p>联网战斗就是这样：</p><p>延迟调完调同步，同步调完调延迟。</p><p><br></p><p><br></p><h2 id="下一步方向"><a href="#下一步方向" class="headerlink" title="下一步方向"></a>下一步方向</h2><p>现在已经算是一个闭环的方案了。</p><ol><li>发现问题</li><li>重现问题</li><li>解决问题</li><li>验证问题</li><li>收集问题<ul><li>主动收集</li><li>被动收集</li></ul></li><li>提前发现问题</li></ol><p>各个方面都有解决方案了，剩下的就是基于这个基础上再去不断的优化完善。</p><p>在不同步上，目前待测试的：</p><ul><li>浮点数问题</li></ul><p>不知不觉已经做了这么多，可惜最后无法见证最终的效果，时也命也。</p><p>仅愿：</p><p>​    功成须献捷，未必去经年。</p><p><br></p><p><br></p><p><br></p><h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p>这些是在优化过程中遇到的一些问题，采用的一些方法，一些策略</p><p><br></p><h2 id="番外：痛苦的不同步"><a href="#番外：痛苦的不同步" class="headerlink" title="番外：痛苦的不同步"></a>番外：痛苦的不同步</h2><p>每次接到不同步的反馈，都是异常痛苦的，就如之前所说。<br>同步模块做的很多的事情都是大方向框架性的，具体的流畅问题、不同步问题，往往是负责最繁琐复杂的发现问题的角色，<br>然后带着发现的问题找相应模块负责人，去反馈。（最麻烦的就是发现问题，一旦定位问题，距离解决基本不远了）</p><p>但是，<br>同步方面的问题，往往是上线前无人问津，上线后铢锱必较。<br>一旦出了问题，虽然能把锅分分钟甩出去，但是最终留下来加班修改的还是自己；所以，解决这个问题才是关键。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>上线前为什么会无人问津？</p><ul><li>代码尚在修改，测试收效甚微</li><li>数据尚未到位，测试范围不足</li><li>待到代码和数据双双齐备，距离上线不足弹指一挥间，甚至上线后依然在修改调整</li><li>测试方法繁琐复杂</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>针对代码修改问题；可以提高版本内相关功能优先级，先修改相关代码，再做其他相关功能</li><li>针对数据到位问题；可以分批次到位，分批次测试，而非最终一口吃个胖子</li><li>针对测试方法繁琐复杂；可以实现自动化测试，提供测试工具</li></ul><p>自动化测试，本不应该属于这片内容。<br>作为联网战斗的实现，处理同步问题，是重中之重。<br>处理方向有两个：</p><ul><li>预防不同步，在出现前，扼杀在摇篮中</li><li>解决不同步，当出现时，如何快速定位并解决</li></ul><p>预防不同步，就是使用自动化测试的方案，针对策划所配置的所有项都提前做好测试。做一个改动后，就相关影响的战斗，都多跑几遍；就是把人力做的事情，通过技术来自动化跑。</p><p>解决不同步，可以分为三个部分：</p><ol><li>收集</li><li>重现</li><li>验证</li></ol><p>收集，就是当出现不同步问题的时候，我们一定要知道；</p><p>重现，就是我们要对现场进行重现，这样就方便查找问题，进而验证是否解决问题。</p><p>这些通过上面优化方案的自动化工具都已经初具模型。</p><p><br></p><h2 id="番外：集思广益"><a href="#番外：集思广益" class="headerlink" title="番外：集思广益"></a>番外：集思广益</h2><p>以前做东西，习惯闷头开发，因为为了做这方面的内容，查阅资料，实验功能，做了各种各样的努力，对这方面的认知和理解还是有一定的把控的。</p><p>但是，“不识庐山真面目，只缘身在此山中”，有时候往往会自己把自己限制住，对一个问题不同高度，不同角度，不同层次的解析，也是值得尝试的。</p><p>于是，这次优化，准备了以下内容，然后先在内部范围开了个会，收集大家的意见：</p><ol><li>整个机制的框架</li><li>上次测试的数据</li><li>针对测试数据分析的原因</li><li>针对分析的原因，准备做的优化方向</li></ol><p>事实证明，通过这次会议，收集到了很多有用的建议与方案，回去做了针对性的调整，再去实施。</p><p><br></p><h2 id="番外：延迟与平滑的博弈"><a href="#番外：延迟与平滑的博弈" class="headerlink" title="番外：延迟与平滑的博弈"></a>番外：延迟与平滑的博弈</h2><p>联网战斗的效果，最终都是归咎与延迟与平滑的博弈，效果平滑，完全可以通过最粗暴的高延迟实现，但是动作游戏的高延迟还是比较影响玩家体验的，所以就需要不断的调整优化，找到那个平衡点。</p><p>下面是一个经典的样例：</p><ol><li>以当前帧池数量 n 为准，差值释放，假定平均3次释放完毕，每次释放 n/3</li><li>注重延迟，当需要快播，每次选择最大释放帧数释放（3帧），保证3次释放即可恢复（100ms内）<ul><li>假设帧池中有5帧，选择<ol><li>释放3帧 =&gt; 5-3=2 ，已恢复现场</li></ol></li></ul></li><li>注重平滑，当需要快播，每次选择尽可能平滑的方式去释放帧<ul><li>假设帧池中有5帧，选择<ol><li>释放2帧 =&gt; 5-2=3</li><li>释放2帧 =&gt; 3-2=1 ，已恢复现场</li></ol></li></ul></li><li>平衡平滑与延迟，指定每个数值缓存帧时的缓存策略，</li></ol><p>注意：</p><ul><li>快播时，是否重新计算该释放的帧数</li></ul><p><br></p><h2 id="番外：电脑与收集MD5不一致"><a href="#番外：电脑与收集MD5不一致" class="headerlink" title="番外：电脑与收集MD5不一致"></a>番外：电脑与收集MD5不一致</h2><p>在重现不同步时，手机产生的MD5与PC产生的MD5不一致。</p><p>经过一系列实验检测发现，在时间种子传输过程中（Lua -&gt; C++），种子的数据类型发生变化，导致种子数值发生了改变。</p><p><br></p><h2 id="番外：卡顿反馈"><a href="#番外：卡顿反馈" class="headerlink" title="番外：卡顿反馈"></a>番外：卡顿反馈</h2><p>为了更近一步手机玩家反馈，同时也不影响玩家正常体验。</p><p>在联网战斗后，结算界面添加反馈按钮，收集第一手玩家信息。</p><p>然后，设定一个卡顿阈值来自动弹出反馈面板（该面板允许玩家选择永久不自动弹出）。</p><p><br></p><p><br></p><p><br></p><p><br></p><hr><p>参考：</p><ul><li><a href="http://www.lt-tree.com/2019/09/21/%E8%81%94%E7%BD%91%E6%88%98%E6%96%97%E5%90%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">联网战斗同步实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;联网战斗同步之优化篇&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="抽空写" scheme="http://yoursite.com/tags/%E6%8A%BD%E7%A9%BA%E5%86%99/"/>
    
      <category term="想就做" scheme="http://yoursite.com/tags/%E6%83%B3%E5%B0%B1%E5%81%9A/"/>
    
  </entry>
  
  <entry>
    <title>《高效表达》 笔记</title>
    <link href="http://yoursite.com/2020/02/23/%E3%80%8A%E9%AB%98%E6%95%88%E8%A1%A8%E8%BE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/02/23/%E3%80%8A%E9%AB%98%E6%95%88%E8%A1%A8%E8%BE%BE%E3%80%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2020-02-23T08:29:00.000Z</published>
    <updated>2020-02-23T08:33:12.983Z</updated>
    
    <content type="html"><![CDATA[<p>在接触或学习一门课程，必定会经历几个阶段：学套路 - 熟套路 - 无套路。<br>本文就是讲述如何去进行高效表达，学习表达的套路，学好套路练熟它，进而做到“手中无剑，心中有剑”的大师境界。</p><a id="more"></a><p><br></p><p>沟通，是人们分享信息、思想和情感的任何过程。这种过程不仅包含口语言和书面语言，也包含形体语言、个人的习气和方式、物质环境等——赋予信息含义的任何东西。</p><p>现在越来越多的东西傻瓜化，效率的瓶颈转化为人与人之间沟通的不足，沟通可以分为两部分：</p><ul><li>一是表达内容，将自己的想法说的更容易吸收理解</li><li>二是倾听内容，充分理解对方的想法</li></ul><p>在接触或学习一门课程，必定会经历几个阶段：学套路 - 熟套路 - 无套路。</p><p>本文就是讲述如何去进行高效表达，学习表达的套路，学好套路练熟它，进而做到“手中无剑，心中有剑”的大师境界。</p><p><br></p><p>本文是学习圈外课程《高效表达》的笔记。</p><p><br></p><p><br></p><h1 id="高效表达的框架"><a href="#高效表达的框架" class="headerlink" title="高效表达的框架"></a>高效表达的框架</h1><p>高效表达的三大步骤：</p><ol><li><p>定主题</p></li><li><p>搭架子</p></li><li><p>填素材</p></li></ol><h2 id="定主题，让人秒懂你的想法"><a href="#定主题，让人秒懂你的想法" class="headerlink" title="定主题，让人秒懂你的想法"></a>定主题，让人秒懂你的想法</h2><p>核心：<strong>表达必须要有主题，这与说多少信息无关。</strong>一个主题应该是你对所讨论内容持有的观点或想法，并且，要在一开始就明确这个主题。</p><p>无法做到核心主题的两大障碍：</p><ol><li>不知道什么是“主题”，大部分时候说的其实是无效主题</li><li>不清楚表达的目的，没有从目的出发来组织表达</li></ol><p>如何明确表达目的：</p><ol><li>定义清楚汇报的对象</li><li>站在对方的角度思考，对方所关心的内容</li><li>明确汇报要达到的效果</li></ol><p><br></p><p><br></p><h2 id="搭架子，快速整理表达思路"><a href="#搭架子，快速整理表达思路" class="headerlink" title="搭架子，快速整理表达思路"></a>搭架子，快速整理表达思路</h2><h3 id="为什么需要整理表达思路"><a href="#为什么需要整理表达思路" class="headerlink" title="为什么需要整理表达思路?"></a>为什么需要整理表达思路?</h3><ul><li><p>人类大脑的习惯：</p><ul><li>归纳主题</li><li>归类分组</li></ul></li><li><p>表达会低效，是因为信息的无序堆叠。</p></li><li><p>表达会混乱，是因为思维的混乱；思维的混乱，是因为缺乏结构。</p></li></ul><p><br></p><h3 id="常见的表达结构"><a href="#常见的表达结构" class="headerlink" title="常见的表达结构"></a>常见的表达结构</h3><p>3种职场最常见的表达结构：</p><ul><li>时间轴结构</li><li>解决问题结构</li><li>FAB结构</li></ul><h4 id="时间轴结构"><a href="#时间轴结构" class="headerlink" title="时间轴结构"></a>时间轴结构</h4><p>方法：</p><ul><li>以时间顺序来开展内容。</li><li>以事件发展顺序来开展内容。</li><li>基础结构：过去-现在-未来</li></ul><p>适用性：</p><ul><li><p>适合在身处压力环境，思路还没有打开时使用</p></li><li><p>汇报工作进度</p></li><li>谈新项目的设想</li></ul><h4 id="解决问题结构"><a href="#解决问题结构" class="headerlink" title="解决问题结构"></a>解决问题结构</h4><p>方法：</p><ul><li>问题-原因-解决方案（也就是 what-why-how）</li></ul><p>适用性：</p><ul><li>回答客户/老板提出的问题</li></ul><h4 id="FAB结构"><a href="#FAB结构" class="headerlink" title="FAB结构"></a>FAB结构</h4><p>方法：</p><ul><li>属性-优势-利益（feature-advantage-benefit）</li></ul><p>适用性:</p><ul><li>销售物品</li><li>自我介绍</li></ul><p><br></p><p><br></p><h2 id="填素材，让发言更具说服力"><a href="#填素材，让发言更具说服力" class="headerlink" title="填素材，让发言更具说服力"></a>填素材，让发言更具说服力</h2><p>前提：</p><ul><li>明确表达时间；根据时间的多少来决定故事的长短，甚至有无。</li></ul><p>素材：</p><ul><li>数据</li><li>故事</li></ul><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>为什么要使用数据：</p><ul><li><p>比起抽象的形容词，具体的数据会让表达更加精准，也让人感觉你更专业。</p></li><li><p>但是，数据本身并没有意义，数据给人的感觉才有意义。</p></li></ul><p>数据帮助表达所要遵循的基本原则：</p><ul><li>数据要筛选<ul><li>原因：过多的数据不仅影响表达的流畅度，也因信息密度过大而影响听众的理解。</li><li>解决：根据表达的目的，留下最有价值、最有力的关键数据。<ul><li>技巧：代表结果的数据往往比较重要</li></ul></li></ul></li><li>数据要解释<ul><li>原因：听众不能很快理解所说的数字传达的意思，甚至会造成理解偏差</li><li>解决：解释所使用的数据含义。<ul><li>技巧：对比、类比、换算</li></ul></li></ul></li></ul><h3 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h3><p>世界上所有的故事都包括三个最基本的要素：冲突、行动、结局。</p><p>原因：</p><ul><li>将要表达的内容用“故事”的形式呈现，能达到很好的说服效果</li></ul><p>遵循的原则：</p><ul><li>不要离奇夸张</li><li>满足三要素：冲突、行动、解决。</li><li>故事的核心是冲突，只有点明冲突，才能让别人意识到问题的严重性，进而配合你的工作。</li></ul><p><br></p><p><br></p><p><br></p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="临时汇报：老板只有3分钟，如何汇报又少又好？"><a href="#临时汇报：老板只有3分钟，如何汇报又少又好？" class="headerlink" title="临时汇报：老板只有3分钟，如何汇报又少又好？"></a>临时汇报：老板只有3分钟，如何汇报又少又好？</h2><p>在时间紧迫下，讲重点、讲结论、讲老板最想知道的内容。并且：</p><ul><li><p>根据老板的风格灵活调整汇报策略。</p></li><li><p>根据老板的反应，调整汇报的节凑。</p></li></ul><p>最后，<strong>工作汇报是一次自己影响老板的机会，而不是应付老板的差事。</strong>因为管理者时间有限，不要再汇报时过分陷入细节，而要根据目的，讲重点，有条理。</p><p>汇报类型：</p><ul><li>汇报进度</li><li>汇报成果</li><li>汇报困难</li></ul><h3 id="汇报进度"><a href="#汇报进度" class="headerlink" title="汇报进度"></a>汇报进度</h3><p>目的：</p><ul><li>告知对方进度如何。</li></ul><p>期望：</p><ul><li>让老板有“掌控感”，否则会像等外卖一样，感到焦虑。</li></ul><p>注意：</p><ul><li>汇报是重要的工作职责之一。就算老板没有强硬规定你何时汇报，也要在一些关键节点找他谈谈，让他看到你积极主动的姿态。</li></ul><h3 id="汇报成果"><a href="#汇报成果" class="headerlink" title="汇报成果"></a>汇报成果</h3><p>目的：</p><ul><li>在一个项目或一个任务结束后，进行成果汇报。</li></ul><p>期望：</p><ul><li>让老板感觉到项目的不易，与你的优秀；从而留下深刻的印象。</li></ul><p>注意：</p><ul><li>不要通过把所有做过的事情讲一边来凸显最终结果的不易。</li><li>使用关键数据和故事，可以考虑辅助图表呈现，让信息更易理解更有冲击力。<ul><li>数据是理性呈现，故事是感性打动，理性与感性的结合，才易留下深刻音响</li></ul></li></ul><h3 id="汇报困难"><a href="#汇报困难" class="headerlink" title="汇报困难"></a>汇报困难</h3><p>目的：</p><ul><li>讲述遇到的困难，申请资源与帮助。</li></ul><p>期望：</p><ul><li>获得资源与帮助的同时得到老板的理解而不是显示自己的无能。</li></ul><p>注意：</p><ul><li>职场不是学校，老板不是老师，我更不是一个被考评的学生。工作中遇到困难是必然的，老板的作用就是提供资源，帮助你把事情做好。</li><li>千万不要直接带着问题去汇报，正确的方式是要带着解决方案去汇报。最好多带几个解决方案，让老板做选择题而不是填空题或者判断题。</li><li>汇报困难的表达公式是：问题 - 原因 - 解决方案选项 - 各选项利弊分析</li></ul><p><br></p><p><br></p><h2 id="回应质疑：遭遇突然提问，怎么回答才能滴水不漏"><a href="#回应质疑：遭遇突然提问，怎么回答才能滴水不漏" class="headerlink" title="回应质疑：遭遇突然提问，怎么回答才能滴水不漏"></a>回应质疑：遭遇突然提问，怎么回答才能滴水不漏</h2><p>利用 <strong>关键的5秒钟</strong> ，思考：</p><ol><li><p>认可对方的提问</p></li><li><p>澄清对方的问题</p></li></ol><p>益处：</p><ol><li>对方感受到尊重，便于把氛围营造成对话而不是对抗</li><li>搞清楚提问的人到底想知道什么，确保和对方在谈论同一件事情</li><li>为自己赢得整理思路的时间，提升回答的质量</li></ol><h3 id="认可对方的提问"><a href="#认可对方的提问" class="headerlink" title="认可对方的提问"></a>认可对方的提问</h3><p>认可，是对情绪和事实的接纳。</p><p>避免让对方产生不舒服的感觉，比如使用“这是个好问题” 等回复。</p><p>三个方面：</p><ul><li>认可提问者<ul><li>谢谢你提出这个问题，我想其他人或许也有同样的疑问…</li><li>感谢你对我们的产品这么关注…</li></ul></li><li>认可事实<ul><li>正如你提到的…</li></ul></li><li>认可感受<ul><li>看得出xx问题让你不太满意…</li></ul></li></ul><h3 id="澄清对方的问题"><a href="#澄清对方的问题" class="headerlink" title="澄清对方的问题"></a>澄清对方的问题</h3><p>认可之后，要做的是澄清，进一步确认对方的问题。</p><p>使用高效表达公式（定主题 + 搭架子 + 填素材），快速构思一个结构化的表达。</p><p><br></p><p><br></p><h2 id="会议发言：跨团队沟通，怎样让对方接受你的方案"><a href="#会议发言：跨团队沟通，怎样让对方接受你的方案" class="headerlink" title="会议发言：跨团队沟通，怎样让对方接受你的方案"></a>会议发言：跨团队沟通，怎样让对方接受你的方案</h2><p>为什么跨团队合作和沟通困难？</p><ul><li>各个部门的优先级事项不同</li><li>各方的理解存在偏差</li></ul><p>如何解决沟通困难问题？</p><ol><li>明确职场跨团队沟通的原则：<strong>谁痛谁负责，谁痛谁解决</strong></li><li>要在会议的一开始就明确地陈述你的想法<ul><li>为什么；为什么部门间需要合作推进某件事情的发生</li><li>做什么；希望参与的各部门在项目中分别做点什么</li><li>有什么好处；推荐这件事对各个部门有什么好处</li><li>马上行动；马上大家可以完成的行动</li></ul></li></ol><p><br></p><p><br></p><p><br></p><hr><p>参考资料：</p><ul><li>圈外《高效表达》</li></ul><p><br></p><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在接触或学习一门课程，必定会经历几个阶段：学套路 - 熟套路 - 无套路。&lt;br&gt;本文就是讲述如何去进行高效表达，学习表达的套路，学好套路练熟它，进而做到“手中无剑，心中有剑”的大师境界。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="看着读" scheme="http://yoursite.com/tags/%E7%9C%8B%E7%9D%80%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>聊聊自己</title>
    <link href="http://yoursite.com/2020/02/05/%E8%81%8A%E8%81%8A%E8%87%AA%E5%B7%B1/"/>
    <id>http://yoursite.com/2020/02/05/%E8%81%8A%E8%81%8A%E8%87%AA%E5%B7%B1/</id>
    <published>2020-02-05T10:44:35.000Z</published>
    <updated>2020-02-16T06:09:45.691Z</updated>
    
    <content type="html"><![CDATA[<p>”我热爱的是做游戏，相对于玩游戏，我知道这两者的差别 …“</p><p>这，是我来北京找工作，面试时自我介绍的开头。</p><p>不知不觉，已经工作五年，经历了三家公司，做过五六个项目，一步步，算是摸爬滚打的过来了。</p><p>聊聊过去，聊聊自己。</p><a id="more"></a><p><br><br><br></p><h1 id="启蒙"><a href="#启蒙" class="headerlink" title="启蒙"></a>启蒙</h1><p>上大学前，并没有接触过编程。</p><p>仅有的经验只是金山打字通的打字练习、做PPT，管管教室电脑（就是开关机）；噢，当然还有打游戏。</p><p>大一初识C++，经典的谭浩强老师的 《C++程序设计(第二版)》，拿着忘了从哪蹭的100道经典C++练习题，一顿猛敲。</p><p>大二，就拉了个团队去做个游戏，学了点C++的皮毛，就准备撸起袖子大干一场，正好有个齐鲁软件大赛，正好有个手机游戏项目，正好就拉了几个人，一个暑假都在学校奋斗，还好，没有半途而废，算是一个完整的游戏吧？。。</p><p>后来，加入仰慕已久的ACM实验室，开始撸题。</p><p>后来，没有考研，决定就业。</p><p>…</p><p><br></p><p><br></p><p><br></p><h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><h2 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h2><p>从第一份工作到现在一直是在做手机游戏，一直用的是Cocos2d引擎来开发，有接触了解，也做过一些Creator、Unity的Demo，但真正工业级的项目没有碰过。</p><p>在我所经历过的各家公司，也各有特色与偏重，没有同质性的公司。</p><p>我目前的理解，做游戏（仅客户端而论），可以先大概分为两部分：</p><ul><li>游戏；每一行代码都能在游戏中体现，为游戏内容品质服务。<ul><li>基础组件</li><li>中间件</li><li>业务功能</li></ul></li><li>产品；项目从立项到上线，所额外负责的工作。<ul><li>版本控制</li><li>打包、SDK接入</li><li>跨平台扩展</li><li>更新机制</li><li>游戏优化</li><li>统计反馈</li><li>测试支持</li></ul></li></ul><p><br></p><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>游戏开发中，所做的每个改动，都可以在游戏中直接表现出来。 </p><p>我把游戏分为三个部分，各部分所重视的角度不同：</p><ul><li>基础组件；基础组成部分，一般涉及到自研底层代码及引擎底层代码，相对重视效率与性能。</li><li>中间件；为业务功能研发做中间转接口，将基础组件拼接组装或封装调整，相对重视通用性及便携性。</li><li>业务功能；实现各种需求，直面用户，相对重视灵活性。</li></ul><p>在开发的时候，明确并了解所开发的模块属于哪个部分，从而知晓它的重点偏向。</p><p>比如，开发业务功能，更重视灵活性，多与需求方沟通，了解他们的本意，不要厌恶、恐惧变化，甚至要拥抱变化，以 “任它需求千万变，不如我代码灵活又简便” 为目标。</p><p>再比如，如果开发基础组件，理论上，不应该为了使用方便，而去牺牲它的执行效率。</p><p><br></p><h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><p>这部分可能跟游戏的实际开发无关，但是却是完整的产品必经之路。</p><p>这些部分或许与游戏的品质等无直接相关，但是会直接影响团队的研发效率。就如同产品与包装的关系，包装不代表产品品质，但是好的包装亦能影响用户心中的价值。要不然，月饼、白酒的包装会越来越华丽呢？</p><p>这部分的特点是 <strong>简单繁琐</strong> 、 <strong>涉及广度大</strong> 、<strong>一次就好</strong>。</p><ul><li>简单繁琐；很多简单且繁琐的事情，相对于技术可能更考究细心与耐心。</li><li>涉及广度大；一般涉及的范围很大，虽不至于天文地理，但也基本和项目的开发截然不同。</li><li>一次就好；基本实现一次就好，不需要频繁迭代维护，甚至不维护。</li></ul><p>这些特点，导致这部分的内容，更像一个苦差事。但随着各种自动化工具、集成工具的发展，完全可以把这些内容脚本化，进而可视化、自动化，慢慢的就会找到这部分的乐趣，能把一堆繁琐的东西理的井井有条，还是很有成就感的。</p><p>有一点要谨记，做好文档，做好规范。</p><p><br></p><p><br></p><h2 id="软技能"><a href="#软技能" class="headerlink" title="软技能"></a>软技能</h2><p>很多行业慢慢由增量时代转入存量时代，做开发亦是如此。</p><p>由于模块拆分的越来越细，第三方的服务越来越多广泛且专业，导致开发一个产品的门槛越来越低。</p><p>不能再像以前那样，闷头只钻研技术，而忽视软技能的发展。我不否认依旧有很多硬靠技术吃饭的人，但我知道，我不是。</p><p>技术&amp;软技能，就像一块木板的长和宽；最终拼的是面积，而不是单纯的长或单纯的宽。但不要因噎废食，过于注重软技能而忽视技术；要做的是以技术为基础核心，同时也注重软技能的发展。</p><h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><p>沟通是一门很大的学问。</p><p>小的来说，沟通可以简单分为：</p><ul><li>向上沟通<ul><li>向上级汇报</li></ul></li><li>向下沟通<ul><li>向下级安排任务</li></ul></li><li>跨界沟通<ul><li>向其他部门咨询或请求援助</li></ul></li></ul><p>其实，不仅仅是说话，所写的文档、代码等，也都可以算是沟通的一部分。</p><p>沟通的目标是让别人理解你的观点，或者是理解别人所表达的内容。无论哪一个方面，都需要换位思考，并且有事直问，不要妄加揣测。</p><p><br></p><h3 id="主人翁"><a href="#主人翁" class="headerlink" title="主人翁"></a>主人翁</h3><p>全心全意去做当前所做的项目。（我可没说把公司当成自己的家。不一样吗？你品，你细品！)</p><p>不要只做自己该做的，剩下的高高挂起。</p><p>原因如下：</p><ol><li>早晚都要自己带团队做产品，与其到时抓破头皮，不如早做准备。</li><li>看的越多越仔细，会发现一些不曾注意到的细节，都是知识，都是财富。</li><li>有时候，编程也是门经验学科，有很多坑早晚都要踩过一遍就知道，踩得越晚，坑越深。</li><li>给上级一个让你晋升的理由。</li></ol><p>在开始，大家都是消费者，但可以慢慢成为一名生产者，产出对团队有利，对自己又何尝不是。</p><p>一方的利益获得不一定伴随着另一方的利益损失，世界上有很多多赢的事情，只要利益的获得满足自己的预期即可。</p><p>体会一句话：你可能血赚，但我绝对不亏。</p><p><br></p><h3 id="一个咖啡杯的故事"><a href="#一个咖啡杯的故事" class="headerlink" title="一个咖啡杯的故事"></a>一个咖啡杯的故事</h3><p>真人真事，在一个早上，我去便利蜂买杯咖啡，它们就是那种自助咖啡机，排在我前面的人，并没有放置咖啡杯，就开始扫码结算，这时我可以</p><ul><li>提醒他，让他先放杯子。</li><li>不提醒他，让他自生自灭。</li></ul><p>选择不提醒，最好的结果是，机器检测到没有放咖啡杯，然后提示放咖啡杯；最坏的结果是，机器直接出咖啡，客人手忙脚乱拿咖啡杯去硬放，烫伤自己，然后…。</p><p>选择提醒，就一句话的事情，可以避免很多事情；即使对我自己而言，也节省了我的时间，否则按最坏打算，我的这杯咖啡，什么时候能拿到呢。</p><p>其实，这个现象就跟团队内的合作沟通一样，很多东西提前通知，做好预备，往往一句话的事情，可以其他人很多的弯路，对整个项目而言，必然有利而无害的。</p><p><br></p><p><br></p><p><br></p><h1 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h1><p>工作这些年，早期，基本花了很多的时间花在摸索上，更多的关注在如何做一个完整的项目，也就是俗话中的深度和广度中的广度。</p><p>现在，对这一行有了大概的认知与理解，更需要的是去进阶一些深一层的东西。就像之前的策略 以技术为主，软技能为辅的发展一样，在技术中也要找到一个专精领域，再以其他领域为辅去进行进一步的发展。</p><p>然后，技术上很多东西是相同的，没有必要把自己局限于某个角色，在不同的角度思考问题，会发现不同的内容。</p><p>最后，依旧是那句话，屁股决定脑袋。所在的位置，利益诉求，会影响信息、判断与决定，每个人的阅历、想法不尽相同，不需要逼迫着所有人 思想的统一、行为的统一。</p><h2 id="准则"><a href="#准则" class="headerlink" title="准则"></a>准则</h2><p><strong>专业的事情交给专业的人，简单繁琐的事情交给脚本，留出时间做重要且核心的事。</strong></p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>不做总线，做一个被自己替代的人。</strong></p><p>总线，是必不可少的组件；它的阻塞会导致系统无法运行。</p><p>但有的时候，有些总线就没必要存在。</p><p>一个例子：</p><p>之前在生成 Android包及热更的时候，必须由开发来执行。</p><p>大概流程是这样的：</p><ol><li>A想要包测试内容</li><li>告知开发出包</li><li>开发出包完成，交给A</li></ol><p>这样有诸多弊端：</p><ul><li>出包占用开发电脑资源，影响开发原有功能开发</li><li>由于出包不便，必然会减少出包测试的请求，整体上讲对项目不利</li><li>期间有多个交接口，无法查进度，隐性所需时间拉长。（比如A告知开发出包，开发是否立马去出包，或者忘记出包等）</li><li>在忙碌的时候，手抖导致出包错误，重新出包</li><li>等等</li></ul><p>这个流程中，开发就是总线，但是这个总线是必要的吗？显然不是。</p><p>于是，采用一些方法去把总线替换掉：</p><ol><li>将出包相关脚本化、自动化</li><li>使用Jenkins实现接口暴露及工作空间共享</li></ol><p>这样，出包的流程变为：</p><ol><li>A想要包测试内容，登录内网jenkins地址，根据需求出包</li><li>jenkins出包</li><li>A从jenkins空间中拿包</li></ol><p>这样，开发从这个流程脱离出来，并且对于A有更多的配置选项可以配置，更为便捷，同时，出包进度也可视化，更有利于减少隐性时间消耗。</p><p>当然，这只是简单的一步，为了让它更加可靠且易用，必然要经历大量测试并且有一些预警机制，每隔一段时间进行使用者的反馈来扩展功能。</p><p>这只是简单的关于总线的例子，其实很多东西，都是表面上的总线，就如同那句话：</p><p>世界正在变得越来越自动化。因此我认为，并非每个人都需要学习编程，而是每个人都需要学习和理解如何实现自动化。—— 《Don’t Learn to Code — Learn to Automate》</p><p><br></p><p><br></p><p><br></p><h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1><p>未来，谁都不知道会怎么样。</p><p>能做的就是总结过去经验，把握当下。</p><p>确定长目标与短目标，以一年或关键时间点为期，进行总结，看是否在既定的路上前进。</p><p>重视并珍惜每一个机会，每一个项目，只有在总结的时候才去考虑收益的事，剩下的期间全心全意的去做事。</p><p>多想多讨论多实践多总结，步入一个良性的循环。</p><p>然后，多读书，保持健康。</p><p><br></p><p><br></p><p><br></p><hr><p>引用内容：</p><ul><li><a href="https://daedtech.com/dont-learn-to-code-learn-to-automate/" target="_blank" rel="noopener">Don’t Learn to Code — Learn to Automate</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;”我热爱的是做游戏，相对于玩游戏，我知道这两者的差别 …“&lt;/p&gt;
&lt;p&gt;这，是我来北京找工作，面试时自我介绍的开头。&lt;/p&gt;
&lt;p&gt;不知不觉，已经工作五年，经历了三家公司，做过五六个项目，一步步，算是摸爬滚打的过来了。&lt;/p&gt;
&lt;p&gt;聊聊过去，聊聊自己。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="抽空写" scheme="http://yoursite.com/tags/%E6%8A%BD%E7%A9%BA%E5%86%99/"/>
    
      <category term="瞎分析" scheme="http://yoursite.com/tags/%E7%9E%8E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>2019, 渐露角</title>
    <link href="http://yoursite.com/2020/01/31/2019%EF%BC%8C%E6%B8%90%E9%9C%B2%E8%A7%92/"/>
    <id>http://yoursite.com/2020/01/31/2019%EF%BC%8C%E6%B8%90%E9%9C%B2%E8%A7%92/</id>
    <published>2020-01-31T10:44:35.000Z</published>
    <updated>2020-02-16T05:42:27.582Z</updated>
    
    <content type="html"><![CDATA[<p>对过去2019年的总结，及未来2020年的展望。</p><a id="more"></a><p>今年是工作的第五年，毕业的第四年。<br>在一个行业打拼了五年，也应该能摸到一些门路了，起码大概的条条框框也该 门儿清 了。</p><p><br></p><h1 id="忆昔日，渐入佳境"><a href="#忆昔日，渐入佳境" class="headerlink" title="忆昔日，渐入佳境"></a>忆昔日，渐入佳境</h1><p>过去的一年很忙碌，虽然付出了很多，但也有很多的收获。</p><h2 id="公司"><a href="#公司" class="headerlink" title="公司"></a>公司</h2><p>一直在做 黑月 这款项目，在年前进行了五次测试，效果还不错。<br>这个项目，是从我来公司，就一直跟进的项目，目前为止已经快开发两年，从第一次测试到第五次测试，一步步见证这款游戏的变化与成长。<br>单看技术角度，相较于刚来时的情况，有很大的变化。<br>一些基础工具，扩展工具，脚本工具，自动化工具的搭建，也初见规模。<br>外延拓展分享，内部流程规范等，也很有成效。<br>虽然项目很忙，但也抽出时间，两周一期的分享，也做了十期，反响很好。<br>后面，个人负责项目中联网对战模块，吸取之前多个版本的精华，参考外界的资料，根据当前项目具体情况，也实现了一套闭环的架构。（包含 不同步判定、不同步采集、不同步回放、不同步纠错、不同步统计、延迟统计等）在最后第五次测试的效果也达到了自己的预期与标准。</p><p>过去的这段时间，尤其最近的一年非常的忙碌，但是，也很有收获。</p><p>现在项目渐入尾声，由于种种原因，非常遗憾的无法继续随着团队走下去。最后还是祝福游戏大火，不枉负大家几年来的辛勤劳动。</p><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><p>阅读，依旧在进行。在过去的一年，主要阅读行业相关的内容，更偏重一些软技能。其他方面的书籍，并不多。只是在 极客时间 中，看了不少大咖的分享，订阅了不少专栏。</p><h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><ul><li>《未来简史》</li><li>《简单逻辑学》</li><li>《小狗钱钱》</li><li>《非暴力沟通》</li><li>《Alice in Wonderland》</li><li>《Peter Pan and Wendy》</li></ul><h4 id="知识付费"><a href="#知识付费" class="headerlink" title="知识付费"></a>知识付费</h4><ul><li>《数据结构与算法之美》</li><li>《左耳听风》</li><li>《数据分析实战45讲》</li><li>《技术领导力实战笔记》</li><li>《技术与商业案例解读》</li><li>《说透中台》</li><li>《设计模式之美》</li><li>《项目管理实战》</li><li>《Python核心技术与实战》</li></ul><h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><p>去年的目标是要减肥，结果忙起来，真是……  </p><p>主要还是自己懒啊，年末的时候公司体检，查出来一堆问题，再也不是 健康灵活的小胖子了（好吧，小胖子怎么可能健康呢？时候未到罢了）。</p><p>今年，真的要重视一些了，身体这辆车抛锚，哪个路口绿灯都没用啊。</p><h3 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h3><p>据报道（不一定权威哈，但也参考参考吧），84%的90后有理财习惯。</p><p>当代年轻人压力太大了，需要合理规划自己的财产，为自己未来提前规划打算一下。</p><p>也通过主动了解，主动咨询等方式，开始一些理财行为（比如定投、打新等等），去年有获得一些小额收益，更多的是对这方面知识，有更深刻的理解。</p><h3 id="个人主页、公众号"><a href="#个人主页、公众号" class="headerlink" title="个人主页、公众号"></a>个人主页、公众号</h3><p>个人主页恢复了更新，但是频率很低。</p><p>有些文章写完大纲草稿，还没有整理；有些文章写了一半，还未完成；更有一大批的方向和主题堆积。</p><p>公众号申请完毕，在测试中，也没有好好整理过。</p><p>百废待兴的节奏= =.</p><h3 id="小游戏"><a href="#小游戏" class="headerlink" title="小游戏"></a>小游戏</h3><p>em….</p><p>有策划案，有Demo美术资源，就差一个程序员了= =，猜猜那个程序员在哪里呢。</p><p>好吧，我胖是有原因的。</p><h3 id="女朋友"><a href="#女朋友" class="headerlink" title="女朋友"></a>女朋友</h3><p>有一个在背后默默支持、鼓励的女朋友是我迄今为止最荣幸的一件事了。</p><p>过去的一年，仿佛回到了大学生活；</p><p>那时虽然在同一所大学，但是忙于实验室，无暇陪伴；</p><p>现在虽然在同一屋檐，忙于工作，无暇照顾。</p><p>经常我回家时，她已睡去，我起床时，她已上班。</p><p>但是，她依旧给我很大的鼓励，很大的支持，让我没有后顾之忧，只需勇往直前。</p><p>一切尽在不言中。</p><p><br></p><p><br></p><p><br></p><h1 id="望明朝，稳扎稳打"><a href="#望明朝，稳扎稳打" class="headerlink" title="望明朝，稳扎稳打"></a>望明朝，稳扎稳打</h1><p>今年的开头有点崩啊，先是武汉肺炎 来势汹汹，再是Kobe离世 晴天霹雳。</p><p>在这个多事之秋，各路“神仙”尽显下流本色，发国难财，谣言四起，制造恐慌，令人长吁短叹。</p><p>本来，过年开开心心去韩国玩一圈，结果因为疫情也玩的不尽兴，很早就回来自我隔离了。</p><p>各省市不断延后上班日期，给整个不大好的大环境，更添几分寒意。</p><p>跟女朋友在一起也快有10年了，不能再像以前一样，为了自己更在意的东西去牺牲太多的利益，现在需要更加稳妥一些，稳扎稳打，一步一个脚印。</p><p>总之，过去的一年，很多FLAG也算完成了，立住了；但也有很多没有立住，倒得七扭八歪。</p><p>立FLAG时间：</p><ul><li>减肥，目标80KG</li><li>小游戏</li><li>公众号</li></ul><p><br></p><p><br></p><p><br></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今年主打一个词 —— 乐观 ！</p><p>工作了五年，也对自己的未来的发展方向，有了些理解。</p><p>现在就是朝着既定的目标与方向，稳扎稳打，奋力前行。</p><p><br></p><p><br></p><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对过去2019年的总结，及未来2020年的展望。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="抽空写" scheme="http://yoursite.com/tags/%E6%8A%BD%E7%A9%BA%E5%86%99/"/>
    
  </entry>
  
</feed>
