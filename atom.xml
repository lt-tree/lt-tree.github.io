<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tree House</title>
  
  <subtitle>不如自挂东南枝</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-16T06:09:45.691Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ltree98</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聊聊自己</title>
    <link href="http://yoursite.com/2020/02/05/%E8%81%8A%E8%81%8A%E8%87%AA%E5%B7%B1/"/>
    <id>http://yoursite.com/2020/02/05/%E8%81%8A%E8%81%8A%E8%87%AA%E5%B7%B1/</id>
    <published>2020-02-05T10:44:35.000Z</published>
    <updated>2020-02-16T06:09:45.691Z</updated>
    
    <content type="html"><![CDATA[<p>”我热爱的是做游戏，相对于玩游戏，我知道这两者的差别 …“</p><p>这，是我来北京找工作，面试时自我介绍的开头。</p><p>不知不觉，已经工作五年，经历了三家公司，做过五六个项目，一步步，算是摸爬滚打的过来了。</p><p>聊聊过去，聊聊自己。</p><a id="more"></a><p><br><br><br></p><h1 id="启蒙"><a href="#启蒙" class="headerlink" title="启蒙"></a>启蒙</h1><p>上大学前，并没有接触过编程。</p><p>仅有的经验只是金山打字通的打字练习、做PPT，管管教室电脑（就是开关机）；噢，当然还有打游戏。</p><p>大一初识C++，经典的谭浩强老师的 《C++程序设计(第二版)》，拿着忘了从哪蹭的100道经典C++练习题，一顿猛敲。</p><p>大二，就拉了个团队去做个游戏，学了点C++的皮毛，就准备撸起袖子大干一场，正好有个齐鲁软件大赛，正好有个手机游戏项目，正好就拉了几个人，一个暑假都在学校奋斗，还好，没有半途而废，算是一个完整的游戏吧？。。</p><p>后来，加入仰慕已久的ACM实验室，开始撸题。</p><p>后来，没有考研，决定就业。</p><p>…</p><p><br></p><p><br></p><p><br></p><h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><h2 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h2><p>从第一份工作到现在一直是在做手机游戏，一直用的是Cocos2d引擎来开发，有接触了解，也做过一些Creator、Unity的Demo，但真正工业级的项目没有碰过。</p><p>在我所经历过的各家公司，也各有特色与偏重，没有同质性的公司。</p><p>我目前的理解，做游戏（仅客户端而论），可以先大概分为两部分：</p><ul><li>游戏；每一行代码都能在游戏中体现，为游戏内容品质服务。<ul><li>基础组件</li><li>中间件</li><li>业务功能</li></ul></li><li>产品；项目从立项到上线，所额外负责的工作。<ul><li>版本控制</li><li>打包、SDK接入</li><li>跨平台扩展</li><li>更新机制</li><li>游戏优化</li><li>统计反馈</li><li>测试支持</li></ul></li></ul><p><br></p><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>游戏开发中，所做的每个改动，都可以在游戏中直接表现出来。 </p><p>我把游戏分为三个部分，各部分所重视的角度不同：</p><ul><li>基础组件；基础组成部分，一般涉及到自研底层代码及引擎底层代码，相对重视效率与性能。</li><li>中间件；为业务功能研发做中间转接口，将基础组件拼接组装或封装调整，相对重视通用性及便携性。</li><li>业务功能；实现各种需求，直面用户，相对重视灵活性。</li></ul><p>在开发的时候，明确并了解所开发的模块属于哪个部分，从而知晓它的重点偏向。</p><p>比如，开发业务功能，更重视灵活性，多与需求方沟通，了解他们的本意，不要厌恶、恐惧变化，甚至要拥抱变化，以 “任它需求千万变，不如我代码灵活又简便” 为目标。</p><p>再比如，如果开发基础组件，理论上，不应该为了使用方便，而去牺牲它的执行效率。</p><p><br></p><h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><p>这部分可能跟游戏的实际开发无关，但是却是完整的产品必经之路。</p><p>这些部分或许与游戏的品质等无直接相关，但是会直接影响团队的研发效率。就如同产品与包装的关系，包装不代表产品品质，但是好的包装亦能影响用户心中的价值。要不然，月饼、白酒的包装会越来越华丽呢？</p><p>这部分的特点是 <strong>简单繁琐</strong> 、 <strong>涉及广度大</strong> 、<strong>一次就好</strong>。</p><ul><li>简单繁琐；很多简单且繁琐的事情，相对于技术可能更考究细心与耐心。</li><li>涉及广度大；一般涉及的范围很大，虽不至于天文地理，但也基本和项目的开发截然不同。</li><li>一次就好；基本实现一次就好，不需要频繁迭代维护，甚至不维护。</li></ul><p>这些特点，导致这部分的内容，更像一个苦差事。但随着各种自动化工具、集成工具的发展，完全可以把这些内容脚本化，进而可视化、自动化，慢慢的就会找到这部分的乐趣，能把一堆繁琐的东西理的井井有条，还是很有成就感的。</p><p>有一点要谨记，做好文档，做好规范。</p><p><br></p><p><br></p><h2 id="软技能"><a href="#软技能" class="headerlink" title="软技能"></a>软技能</h2><p>很多行业慢慢由增量时代转入存量时代，做开发亦是如此。</p><p>由于模块拆分的越来越细，第三方的服务越来越多广泛且专业，导致开发一个产品的门槛越来越低。</p><p>不能再像以前那样，闷头只钻研技术，而忽视软技能的发展。我不否认依旧有很多硬靠技术吃饭的人，但我知道，我不是。</p><p>技术&amp;软技能，就像一块木板的长和宽；最终拼的是面积，而不是单纯的长或单纯的宽。但不要因噎废食，过于注重软技能而忽视技术；要做的是以技术为基础核心，同时也注重软技能的发展。</p><h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><p>沟通是一门很大的学问。</p><p>小的来说，沟通可以简单分为：</p><ul><li>向上沟通<ul><li>向上级汇报</li></ul></li><li>向下沟通<ul><li>向下级安排任务</li></ul></li><li>跨界沟通<ul><li>向其他部门咨询或请求援助</li></ul></li></ul><p>其实，不仅仅是说话，所写的文档、代码等，也都可以算是沟通的一部分。</p><p>沟通的目标是让别人理解你的观点，或者是理解别人所表达的内容。无论哪一个方面，都需要换位思考，并且有事直问，不要妄加揣测。</p><p><br></p><h3 id="主人翁"><a href="#主人翁" class="headerlink" title="主人翁"></a>主人翁</h3><p>全心全意去做当前所做的项目。（我可没说把公司当成自己的家。不一样吗？你品，你细品！)</p><p>不要只做自己该做的，剩下的高高挂起。</p><p>原因如下：</p><ol><li>早晚都要自己带团队做产品，与其到时抓破头皮，不如早做准备。</li><li>看的越多越仔细，会发现一些不曾注意到的细节，都是知识，都是财富。</li><li>有时候，编程也是门经验学科，有很多坑早晚都要踩过一遍就知道，踩得越晚，坑越深。</li><li>给上级一个让你晋升的理由。</li></ol><p>在开始，大家都是消费者，但可以慢慢成为一名生产者，产出对团队有利，对自己又何尝不是。</p><p>一方的利益获得不一定伴随着另一方的利益损失，世界上有很多多赢的事情，只要利益的获得满足自己的预期即可。</p><p>体会一句话：你可能血赚，但我绝对不亏。</p><p><br></p><h3 id="一个咖啡杯的故事"><a href="#一个咖啡杯的故事" class="headerlink" title="一个咖啡杯的故事"></a>一个咖啡杯的故事</h3><p>真人真事，在一个早上，我去便利蜂买杯咖啡，它们就是那种自助咖啡机，排在我前面的人，并没有放置咖啡杯，就开始扫码结算，这时我可以</p><ul><li>提醒他，让他先放杯子。</li><li>不提醒他，让他自生自灭。</li></ul><p>选择不提醒，最好的结果是，机器检测到没有放咖啡杯，然后提示放咖啡杯；最坏的结果是，机器直接出咖啡，客人手忙脚乱拿咖啡杯去硬放，烫伤自己，然后…。</p><p>选择提醒，就一句话的事情，可以避免很多事情；即使对我自己而言，也节省了我的时间，否则按最坏打算，我的这杯咖啡，什么时候能拿到呢。</p><p>其实，这个现象就跟团队内的合作沟通一样，很多东西提前通知，做好预备，往往一句话的事情，可以其他人很多的弯路，对整个项目而言，必然有利而无害的。</p><p><br></p><p><br></p><p><br></p><h1 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h1><p>工作这些年，早期，基本花了很多的时间花在摸索上，更多的关注在如何做一个完整的项目，也就是俗话中的深度和广度中的广度。</p><p>现在，对这一行有了大概的认知与理解，更需要的是去进阶一些深一层的东西。就像之前的策略 以技术为主，软技能为辅的发展一样，在技术中也要找到一个专精领域，再以其他领域为辅去进行进一步的发展。</p><p>然后，技术上很多东西是相同的，没有必要把自己局限于某个角色，在不同的角度思考问题，会发现不同的内容。</p><p>最后，依旧是那句话，屁股决定脑袋。所在的位置，利益诉求，会影响信息、判断与决定，每个人的阅历、想法不尽相同，不需要逼迫着所有人 思想的统一、行为的统一。</p><h2 id="准则"><a href="#准则" class="headerlink" title="准则"></a>准则</h2><p><strong>专业的事情交给专业的人，简单繁琐的事情交给脚本，留出时间做重要且核心的事。</strong></p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>不做总线，做一个被自己替代的人。</strong></p><p>总线，是必不可少的组件；它的阻塞会导致系统无法运行。</p><p>但有的时候，有些总线就没必要存在。</p><p>一个例子：</p><p>之前在生成 Android包及热更的时候，必须由开发来执行。</p><p>大概流程是这样的：</p><ol><li>A想要包测试内容</li><li>告知开发出包</li><li>开发出包完成，交给A</li></ol><p>这样有诸多弊端：</p><ul><li>出包占用开发电脑资源，影响开发原有功能开发</li><li>由于出包不便，必然会减少出包测试的请求，整体上讲对项目不利</li><li>期间有多个交接口，无法查进度，隐性所需时间拉长。（比如A告知开发出包，开发是否立马去出包，或者忘记出包等）</li><li>在忙碌的时候，手抖导致出包错误，重新出包</li><li>等等</li></ul><p>这个流程中，开发就是总线，但是这个总线是必要的吗？显然不是。</p><p>于是，采用一些方法去把总线替换掉：</p><ol><li>将出包相关脚本化、自动化</li><li>使用Jenkins实现接口暴露及工作空间共享</li></ol><p>这样，出包的流程变为：</p><ol><li>A想要包测试内容，登录内网jenkins地址，根据需求出包</li><li>jenkins出包</li><li>A从jenkins空间中拿包</li></ol><p>这样，开发从这个流程脱离出来，并且对于A有更多的配置选项可以配置，更为便捷，同时，出包进度也可视化，更有利于减少隐性时间消耗。</p><p>当然，这只是简单的一步，为了让它更加可靠且易用，必然要经历大量测试并且有一些预警机制，每隔一段时间进行使用者的反馈来扩展功能。</p><p>这只是简单的关于总线的例子，其实很多东西，都是表面上的总线，就如同那句话：</p><p>世界正在变得越来越自动化。因此我认为，并非每个人都需要学习编程，而是每个人都需要学习和理解如何实现自动化。—— 《Don’t Learn to Code — Learn to Automate》</p><p><br></p><p><br></p><p><br></p><h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1><p>未来，谁都不知道会怎么样。</p><p>能做的就是总结过去经验，把握当下。</p><p>确定长目标与短目标，以一年或关键时间点为期，进行总结，看是否在既定的路上前进。</p><p>重视并珍惜每一个机会，每一个项目，只有在总结的时候才去考虑收益的事，剩下的期间全心全意的去做事。</p><p>多想多讨论多实践多总结，步入一个良性的循环。</p><p>然后，多读书，保持健康。</p><p><br></p><p><br></p><p><br></p><hr><p>引用内容：</p><ul><li><a href="https://daedtech.com/dont-learn-to-code-learn-to-automate/" target="_blank" rel="noopener">Don’t Learn to Code — Learn to Automate</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;”我热爱的是做游戏，相对于玩游戏，我知道这两者的差别 …“&lt;/p&gt;
&lt;p&gt;这，是我来北京找工作，面试时自我介绍的开头。&lt;/p&gt;
&lt;p&gt;不知不觉，已经工作五年，经历了三家公司，做过五六个项目，一步步，算是摸爬滚打的过来了。&lt;/p&gt;
&lt;p&gt;聊聊过去，聊聊自己。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="抽空写" scheme="http://yoursite.com/tags/%E6%8A%BD%E7%A9%BA%E5%86%99/"/>
    
      <category term="瞎分析" scheme="http://yoursite.com/tags/%E7%9E%8E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>2019, 渐露角</title>
    <link href="http://yoursite.com/2020/01/31/2019%EF%BC%8C%E6%B8%90%E9%9C%B2%E8%A7%92/"/>
    <id>http://yoursite.com/2020/01/31/2019%EF%BC%8C%E6%B8%90%E9%9C%B2%E8%A7%92/</id>
    <published>2020-01-31T10:44:35.000Z</published>
    <updated>2020-02-16T05:42:27.582Z</updated>
    
    <content type="html"><![CDATA[<p>对过去2019年的总结，及未来2020年的展望。</p><a id="more"></a><p>今年是工作的第五年，毕业的第四年。<br>在一个行业打拼了五年，也应该能摸到一些门路了，起码大概的条条框框也该 门儿清 了。</p><p><br></p><h1 id="忆昔日，渐入佳境"><a href="#忆昔日，渐入佳境" class="headerlink" title="忆昔日，渐入佳境"></a>忆昔日，渐入佳境</h1><p>过去的一年很忙碌，虽然付出了很多，但也有很多的收获。</p><h2 id="公司"><a href="#公司" class="headerlink" title="公司"></a>公司</h2><p>一直在做 黑月 这款项目，在年前进行了五次测试，效果还不错。<br>这个项目，是从我来公司，就一直跟进的项目，目前为止已经快开发两年，从第一次测试到第五次测试，一步步见证这款游戏的变化与成长。<br>单看技术角度，相较于刚来时的情况，有很大的变化。<br>一些基础工具，扩展工具，脚本工具，自动化工具的搭建，也初见规模。<br>外延拓展分享，内部流程规范等，也很有成效。<br>虽然项目很忙，但也抽出时间，两周一期的分享，也做了十期，反响很好。<br>后面，个人负责项目中联网对战模块，吸取之前多个版本的精华，参考外界的资料，根据当前项目具体情况，也实现了一套闭环的架构。（包含 不同步判定、不同步采集、不同步回放、不同步纠错、不同步统计、延迟统计等）在最后第五次测试的效果也达到了自己的预期与标准。</p><p>过去的这段时间，尤其最近的一年非常的忙碌，但是，也很有收获。</p><p>现在项目渐入尾声，由于种种原因，非常遗憾的无法继续随着团队走下去。最后还是祝福游戏大火，不枉负大家几年来的辛勤劳动。</p><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><p>阅读，依旧在进行。在过去的一年，主要阅读行业相关的内容，更偏重一些软技能。其他方面的书籍，并不多。只是在 极客时间 中，看了不少大咖的分享，订阅了不少专栏。</p><h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><ul><li>《未来简史》</li><li>《简单逻辑学》</li><li>《小狗钱钱》</li><li>《非暴力沟通》</li><li>《Alice in Wonderland》</li><li>《Peter Pan and Wendy》</li></ul><h4 id="知识付费"><a href="#知识付费" class="headerlink" title="知识付费"></a>知识付费</h4><ul><li>《数据结构与算法之美》</li><li>《左耳听风》</li><li>《数据分析实战45讲》</li><li>《技术领导力实战笔记》</li><li>《技术与商业案例解读》</li><li>《说透中台》</li><li>《设计模式之美》</li><li>《项目管理实战》</li><li>《Python核心技术与实战》</li></ul><h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><p>去年的目标是要减肥，结果忙起来，真是……  </p><p>主要还是自己懒啊，年末的时候公司体检，查出来一堆问题，再也不是 健康灵活的小胖子了（好吧，小胖子怎么可能健康呢？时候未到罢了）。</p><p>今年，真的要重视一些了，身体这辆车抛锚，哪个路口绿灯都没用啊。</p><h3 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h3><p>据报道（不一定权威哈，但也参考参考吧），84%的90后有理财习惯。</p><p>当代年轻人压力太大了，需要合理规划自己的财产，为自己未来提前规划打算一下。</p><p>也通过主动了解，主动咨询等方式，开始一些理财行为（比如定投、打新等等），去年有获得一些小额收益，更多的是对这方面知识，有更深刻的理解。</p><h3 id="个人主页、公众号"><a href="#个人主页、公众号" class="headerlink" title="个人主页、公众号"></a>个人主页、公众号</h3><p>个人主页恢复了更新，但是频率很低。</p><p>有些文章写完大纲草稿，还没有整理；有些文章写了一半，还未完成；更有一大批的方向和主题堆积。</p><p>公众号申请完毕，在测试中，也没有好好整理过。</p><p>百废待兴的节奏= =.</p><h3 id="小游戏"><a href="#小游戏" class="headerlink" title="小游戏"></a>小游戏</h3><p>em….</p><p>有策划案，有Demo美术资源，就差一个程序员了= =，猜猜那个程序员在哪里呢。</p><p>好吧，我胖是有原因的。</p><h3 id="女朋友"><a href="#女朋友" class="headerlink" title="女朋友"></a>女朋友</h3><p>有一个在背后默默支持、鼓励的女朋友是我迄今为止最荣幸的一件事了。</p><p>过去的一年，仿佛回到了大学生活；</p><p>那时虽然在同一所大学，但是忙于实验室，无暇陪伴；</p><p>现在虽然在同一屋檐，忙于工作，无暇照顾。</p><p>经常我回家时，她已睡去，我起床时，她已上班。</p><p>但是，她依旧给我很大的鼓励，很大的支持，让我没有后顾之忧，只需勇往直前。</p><p>一切尽在不言中。</p><p><br></p><p><br></p><p><br></p><h1 id="望明朝，稳扎稳打"><a href="#望明朝，稳扎稳打" class="headerlink" title="望明朝，稳扎稳打"></a>望明朝，稳扎稳打</h1><p>今年的开头有点崩啊，先是武汉肺炎 来势汹汹，再是Kobe离世 晴天霹雳。</p><p>在这个多事之秋，各路“神仙”尽显下流本色，发国难财，谣言四起，制造恐慌，令人长吁短叹。</p><p>本来，过年开开心心去韩国玩一圈，结果因为疫情也玩的不尽兴，很早就回来自我隔离了。</p><p>各省市不断延后上班日期，给整个不大好的大环境，更添几分寒意。</p><p>跟女朋友在一起也快有10年了，不能再像以前一样，为了自己更在意的东西去牺牲太多的利益，现在需要更加稳妥一些，稳扎稳打，一步一个脚印。</p><p>总之，过去的一年，很多FLAG也算完成了，立住了；但也有很多没有立住，倒得七扭八歪。</p><p>立FLAG时间：</p><ul><li>减肥，目标80KG</li><li>小游戏</li><li>公众号</li></ul><p><br></p><p><br></p><p><br></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今年主打一个词 —— 乐观 ！</p><p>工作了五年，也对自己的未来的发展方向，有了些理解。</p><p>现在就是朝着既定的目标与方向，稳扎稳打，奋力前行。</p><p><br></p><p><br></p><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对过去2019年的总结，及未来2020年的展望。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="抽空写" scheme="http://yoursite.com/tags/%E6%8A%BD%E7%A9%BA%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>《非暴力沟通》 读记</title>
    <link href="http://yoursite.com/2019/11/05/%E3%80%8A%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A%E3%80%8B%E8%AF%BB%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/11/05/%E3%80%8A%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A%E3%80%8B%E8%AF%BB%E8%AE%B0/</id>
    <published>2019-11-05T15:00:00.000Z</published>
    <updated>2019-11-06T16:06:51.083Z</updated>
    
    <content type="html"><![CDATA[<p>为你，千千万万遍。</p><a id="more"></a><p><br><br><br></p><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><h2 id="译序"><a href="#译序" class="headerlink" title="译序"></a>译序</h2><p>我很希望这本书能帮助更多的人安静下来。使用暴力的人其实是因为他们的内心的宁静遭到了破坏，所以他们才会用暴力的方式维护或寻求心灵的和平。</p><p>非暴力沟通提醒我们人性是相通的——虽然每个人的价值观和生活方式或许不同，但作为人却有共同的感受和需要。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>让尊重、理解、欣赏、感激、慈悲和友情，而非自私自利、贪婪、憎恨、偏见、怀疑和敌意，来主导生活。人们常说：这是一个弱肉强食的世界，为了生存，我们必须不择手段。这个观点，请恕我无法统一。</p><h2 id="第一章-让爱融入生活"><a href="#第一章-让爱融入生活" class="headerlink" title="第一章 让爱融入生活"></a>第一章 让爱融入生活</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>也许我们并不认为自己的谈话方式是“暴力”的，但我们的语言确实常常引发自己和他人的痛苦。</p><h3 id="人生的抉择"><a href="#人生的抉择" class="headerlink" title="人生的抉择"></a>人生的抉择</h3><p>非暴力沟通的基础是一些沟通方式——即使在逆境中，它们也能使人乐于互助。它的目的正是提醒我们借助已有的知识，让爱融入生活。</p><p>非暴力沟通知道我们转变谈话和聆听的方式。我们不再条件反射式地反应，而是去明了自己的观察、感受和愿望，有意识地使用语言。我们既诚实、清晰地表达自己，又尊重与倾听他人。</p><p>运用非暴力沟通聆听彼此心灵深处的需要，我们将以全新的眼光看待人际关系。</p><p>非暴力沟通的四个要素：1.观察  2.感受  3.需要  4.请求</p><h3 id="非暴力沟通的要素"><a href="#非暴力沟通的要素" class="headerlink" title="非暴力沟通的要素"></a>非暴力沟通的要素</h3><p>非暴力沟通的过程：</p><ul><li>什么是我的观察</li><li>我的感受如何</li><li>哪些需要（或价值、愿望等）导致那样的感受</li><li>为了改善生活，我的请求是什么</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>非暴力沟通提醒我们专注于彼此的观察、感受、需要和请求。它鼓励倾听，培育尊重与爱，使我们情意相通，乐于互助。</p><h2 id="第二章-是什么蒙蔽了爱"><a href="#第二章-是什么蒙蔽了爱" class="headerlink" title="第二章 是什么蒙蔽了爱"></a>第二章 是什么蒙蔽了爱</h2><h3 id="道德评判"><a href="#道德评判" class="headerlink" title="道德评判"></a>道德评判</h3><p>道德评判是用道德标准来评判人，如果一个人的行为不符合我们的价值观，那他就被看作是不道德或邪恶的。</p><p>对他人的评价实际上反映了我们的需要和价值观。</p><p>分类和评判提倡的是暴力。</p><p>暴力的根源来源于人们忽视彼此的感受与需要，而将冲突归咎于对方——至少大部分暴力的根源都是如此。</p><p>比较也是一种评判。</p><p>我们可以用负责任的语言代替回避责任的语言。</p><p>我们无法强迫他人按我们的期待生活。</p><p>认为“某人应当受到惩罚”使我们难以体会到心中的爱。</p><p>人们越是习惯于评定是非，他们也就越倾向于追随权威，来获得正确和错误的标准。一旦专注于自身的感受和需要，我们就不再是好奴隶和好属下。</p><p>人天生热爱生命，乐于互助。可是，异化的沟通方式使我们难以体会到心中的爱。道德评判就是其中的一种，它将不符合我们价值观的人看作是不道德的或邪恶的。进行比较也是一种评判，它会懵逼对人对己的爱意。异化的沟通方式还淡化了我们对自己的思想、情感和行为的责任意识。此外，强人所难也会造成心灵的隔阂。</p><h2 id="第三章-区分观察和评论"><a href="#第三章-区分观察和评论" class="headerlink" title="第三章 区分观察和评论"></a>第三章 区分观察和评论</h2><p>不区分观察和评论，人们将倾向于听到批评。</p><p>不带评论的观察室人类智力的最高形式。</p><p>非暴力沟通的第一个要素是观察。将观察和评论混为一谈，别人就会倾向于听到批评，并反驳我们。非暴力沟通是动态的语言，不主张绝对化的结论。它提倡在特定的时间和情景中进行观察，并清楚地描述观察结果。</p><h3 id="面具"><a href="#面具" class="headerlink" title="面具"></a>面具</h3><p>总是一副面具</p><p>由纤细白皙的手举着</p><p>挡在脸前</p><p>拿轻轻举着面具的手腕</p><p>十分灵巧</p><p>虽然有时</p><p>有点颤抖</p><p>指尖抖动</p><p>但总是</p><p>能把面具举好。</p><p>年复一年我不禁好奇</p><p>但不敢问</p><p>终于</p><p>无意中</p><p>看到了面具的背后</p><p>却</p><p>什么也没有</p><p>她没有脸</p><p>她已成了</p><p>优雅地</p><p>举着面具的手</p><h2 id="第四章-体会和表达感受"><a href="#第四章-体会和表达感受" class="headerlink" title="第四章 体会和表达感受"></a>第四章 体会和表达感受</h2><p>示弱有助于解决冲突。</p><p>区分感受和自我评价。</p><p>区分感受和判断</p><p>非暴力沟通的第二个要素是感受。通过建立表达感受的词汇表，我们可以更清楚地表达感受，从而使沟通更为顺畅。在表达感受时，示弱有助于解决冲突。此外，非暴力沟通还对表达具体感受的词语与陈述想法、评论以及观点的词语做了区分。</p><h2 id="第五章-感受的根源"><a href="#第五章-感受的根源" class="headerlink" title="第五章 感受的根源"></a>第五章 感受的根源</h2><p>别人的行为可能会刺激我们，但并不是我们感受的根源。</p><p>听到不中听的话的四种选择：</p><ol><li>责备自己</li><li>指责他人</li><li>体会自己的感受和需要</li><li>体会他人的感受和需要</li></ol><p>如果我们通过批评来提出主张，人们的反应常常是申辩或反击。反之，如果我们直接说出需要，其他人就较有可能作出积极的回应。</p><p>非暴力沟通把需要看作是有助于生命健康成长的要素，而不是某种具体的行为。一种要素是否被当做需要，关键在于它能否促进生命的健康成长。</p><p>对于大多数人来说，个人成长一般会经历三个阶段：</p><ol><li><p>第一阶段：情感的奴隶</p><p>在这个阶段，我们相信自己需要为他人负责——让他人快乐是我们的义务。如果别人不高兴，我们就会感到不安，觉得自己有责任做点什么。此时，我们特别容易把亲人看作是负担。</p><p><strong>我们认为自己又义务使他人快乐。</strong></p></li><li><p>第二阶段：面目可憎</p><p>在这个阶段，我们发现，为他人的情绪负责，牺牲自己迎合他人，代价实在很大。想到日子过得这么憋屈，我们可能会很恼怒。此时，如果遭遇他人的痛苦，我们可能就会无动于衷：“这是你自己的问题！和我有什么关系？！”虽然不再愿意为他人负责，但我们还心存疑虑。因此，我们的态度也就显得生硬。</p><p><strong>我们拒绝考虑他人的感受和需要</strong></p></li><li><p>第三阶段：生活的主人</p><p>在这个阶段，我们乐于互助。我们帮助他人，是出于爱，而不是出于恐惧、内疚或惭愧。那是自由而快乐的行为。此时，我们意识到，虽然我们对自己的意愿、感受和行动负有完全的责任，但无法对他人负责。我们还发现，人与人相互依存，损人无法真正利己。非暴力沟通正是想帮助我们既表达自己，又关心他人。</p><p><strong>虽然我们对自己的意愿、感受和行动负有完全的责任，但无法为他人负责。与此同时，我们还认识到，我们无法牺牲他人来满足自己的需要。</strong></p></li></ol><h2 id="第六章-请求帮助"><a href="#第六章-请求帮助" class="headerlink" title="第六章 请求帮助"></a>第六章 请求帮助</h2><p>如果我只是提醒自己要避免什么，而不清楚自己可以做什么，会有怎样的后果。</p><p>我们提出的请求越具体越好。如果我们的意思含糊不清，别人就难以了解我们到底想要什么。</p><p>抽象的语言无助于深化自我认识。在使用抽象的而语言表达愿望时，我们一般不会提及我们可以做的事情。</p><p>当对方给予反馈，表达我们的感激。如果对方不愿反馈，倾听他的感受和需要。</p><p>如何区分命令和请求：请求没有得到满足时，提出请求的人如果批评和指责，那就是命令；如果想利用对方的内疚来达到目的，也是命令。</p><p>非暴力沟通的目的：如果我们只是想改变别人，以使他们的行动符合我们的利益，那么非暴力沟通并不是适当的工具。非暴力沟通是用来帮助我们在诚实和倾听的基础上与人联系。使用非暴力沟通时，我们希望人们的改变和行动是出于对生命的爱。一旦人们相信我们看重彼此的感情，并能兼顾双方的需要，那么，他们也就会相信我们所表达的愿望时请求而非命令。</p><p><strong>非暴力沟通的目的不是为了改变他人来迎合我们。相反，非暴力沟通重视每个人的需要，它的目的是帮助我们在诚实和倾听的基础上与人联系。</strong></p><h2 id="第七章-用全身心倾听"><a href="#第七章-用全身心倾听" class="headerlink" title="第七章 用全身心倾听"></a>第七章 用全身心倾听</h2><p>分析妨碍了倾听</p><p>不论别人说什么，我们只听到他们此时此刻的 观察、感受、需要 和 请求。</p><p>询问前，先表达我们的感受和需要。</p><p>有时，我们认为自己收到了指责，实际上，那些话是他人表达需要和请求的方式。如果意识到这一点，我们就不会认为自己的人格受到了伤害。反之，如果一心分析自己或对方的过错，我们就会认为自己被贬低了。</p><p>当对方得到充分的倾听：我们将会体会到气氛变得轻松；他会停止谈话。</p><p>你越是留意自己内心的声音，就越能听到别人的声音。</p><p>当我们痛苦得无法倾听他人时，我们需要：</p><ol><li>体会自己的感受和需要</li><li>大声地提出请求</li><li>换一个环境</li></ol><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>当他人遭遇不幸时，我们常常急于提建议，安慰，或表达我们的态度和感受。为了倾听他人，我们需要先放下已有的想法和判断，全心全意地体会对方。倾听他人有助于对他人的理解和接纳。</p><h2 id="第八章-倾听的力量"><a href="#第八章-倾听的力量" class="headerlink" title="第八章 倾听的力量"></a>第八章 倾听的力量</h2><p>我们越是倾听他人的语言背后的感受和需要，就越不怕与他们坦诚地沟通。我们最不愿意示弱的时候往往是因为担心失去控制想显得强硬的时候。</p><p>在一个生气的人面前，需要倾听，永远不要用‘不过’ ‘可是’ ‘但是’ 之类的词语。</p><p>倾听亲人也许极为困难。</p><p>当别人说“不”的时候，我们常常会认为他们是在拒绝我们。有时，我们甚至还会觉得自己受到了伤害。然而，如果我们能够体会他人的感受和需要，我们也许就会发现是什么使他们无法答应我们的请求。</p><p>说的人更希望对方打断，而不是假装在听。</p><p>倾听有赖于我们体会他人的能力。</p><p>倾听是我们用于面对自己的弱点。它还可以帮助我们预防潜在的暴力，使谈话生动有趣，并了解“不！”和沉默所反映的感受和需要。一次又一次，我见证了，倾听帮助人们治愈心灵的创伤。</p><h2 id="第九章-爱自己"><a href="#第九章-爱自己" class="headerlink" title="第九章 爱自己"></a>第九章 爱自己</h2><p>非暴力沟通最重要的应用也许是培养对自己的爱。</p><p>我们的改变是出于对生命的爱，而不是出于羞愧或内疚这些具有负面影响的心理。</p><p>自责是尚未满足的需要的可悲表达。</p><p>非暴力沟通的忧伤：当我们的行为无法满足自身的需要，我们体会着人生的悲哀和内心的渴望。</p><p>非暴力沟通鼓励我们直面人生的苦难：在遇到挫折时，充分体会人生的悲哀和内心的渴望。是的，感到遗憾是难免的。但它能帮助我们从经历中学习，而无需责备自己。我们意识到过去的行为违背了自己的需要及价值观，并允许这种觉察引发的情感充分流淌。一旦专注于尚未满足的需要，我们就会考虑如何满足它。反之，如果用咳咳的语言指责自己，我们不仅难以找到解决的办法，而且容易陷于自我惩罚的痛苦中。</p><p>非暴力沟通的自我宽恕：感到遗憾时，我们试图了解过去的行为所要满足的需要。</p><p>人的行为总是服务于自身的需要及价值观——不论它是否能够实现目的，也不论我们事后是感到庆幸还是遗憾。</p><p>爱惜自己的关键之一是同时包容那两个不同的“我”：一方面包容对过去的某种行为感到后悔的“我”，另一方面包容采取那种行为的“我”。非暴力沟通的忧伤及自我宽恕为个人的学习和成长创造了条件。只要对自己的需要保持清醒的认识，我们就能建设性地满足它们。</p><p>当我们拥抱自己的各个方面，并理解它们所反映的需要及价值观，我们活在对自己深深的爱中。</p><p>让我们的行动基于对生命的爱，而非恐惧、内疚、羞愧或义务。</p><p>不论你选择做什么，了解自己为什么要那样做。</p><p>为了钱、他人的赞同，以及出于恐惧、羞愧或内疚的心理，你做了哪些事情？想一想你为这些事情付出的代价。</p><p>最危险的行为也许是“因为别人的要求”我们不得不做。</p><p>非暴力沟通最重要的应用也许在于培育对自己的爱。当我们的表现不完美时，我们可以通过体会忧伤和自我宽恕，来看清个人成长的方向，以及避免自我惩罚。评价自己的行为时，我们专注于尚未满足的需要；这样，我们就不再依赖羞愧、内疚、恼怒或沮丧的心理来寻求改变，而让爱主导我们的学习和成长。</p><p>同时，在日常生活中，我们主动根据需要和价值观来选择生活。我们的行为不再是为了履行职责、获得回报、逃避惩罚或避免感到内疚和羞愧。通过深入理解我们的行为的动机，并用“选择做”来取代“不得不”，我们的生活将变得和谐并充满欢乐。</p><h2 id="第十章-充分表达愤怒"><a href="#第十章-充分表达愤怒" class="headerlink" title="第十章 充分表达愤怒"></a>第十章 充分表达愤怒</h2><p>非暴力沟通不主张忽视或压抑愤怒，它认为，通过深入地了解愤怒，我们可以充分表达内心的渴望。</p><p>生气的原因在于我们的想法——对他人的评判和指责。</p><p>希望他人因为内疚发生改变，就是将刺激和原因混为一谈。</p><p>愤怒是我们的思维方式造成的。它的核心是尚未满足的需要。</p><p>愤怒驱使我们去惩罚他人。</p><p>当我们意识到自己的需要，愤怒就转变为服务需要的情感。</p><p>听到不中听的话时，我们想起那四种选择：</p><ol><li>责备自己</li><li>指责他人</li><li>体会自己的感受和需要</li><li>体会他人的感受和需要</li></ol><p>表达愤怒的步骤：</p><ol><li>停下来，呼吸</li><li>留意我们的指责</li><li>体会我们的需要</li><li>表达感受和尚未满足的需求</li></ol><p>越是能够倾听他人，也越有机会被倾听。</p><p>在大多数的情况下，在表达自己之前，我们需要先倾听他人。如果对方还处于某种情绪中，他们就很难静下心来体会我们的感受和需要。一旦我们用心倾听他们，并表达我们的理解，在得到倾听和理解之后，他们一般也就会开始留意我们的感受和需要。</p><p>一旦意识到他人的感受和需要，我们就会发现彼此相同的人性。</p><p>留意头脑中出现的暴力想法，而不评判它们。</p><p>只要人们认为自己受到了指责，他们就很难体会到别人的痛苦。</p><p>练习把每一个指责都转化为尚未满足的需要。</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>在生气时，批评和指责他人都无法真正传达我们的心声。如果想充分表达愤怒，我们就不能归咎于他人，而把注意力放在自己的感受和需要上。与批评和指责他人相比，直接说出我们的需要更又可能使我们的愿望得到满足。</p><p>表达愤怒的四个步骤：</p><ol><li>停下来，除了呼吸，什么都别做</li><li>想一想是什么想法使我们生气了</li><li>体会自己的需要</li><li>表达感受和尚未满足的需要。</li></ol><p>有时，在第三步和第四步之间，我们需要先倾听他人。在得到倾听和理解之后，他们也就可以静下心来体会我们的感受和需要。</p><h2 id="第十一章-运用强制力避免伤害"><a href="#第十一章-运用强制力避免伤害" class="headerlink" title="第十一章 运用强制力避免伤害"></a>第十一章 运用强制力避免伤害</h2><p>使用防卫性的强制力，是为了保护自己或他人，而不是为了惩罚、羞辱或谴责他人。</p><p>在使用防卫性强制力时，我们把注意里放在了自己和他人的需要上，而不评价对方及其行为。</p><p>当我们为了回避惩罚去做事情时，我们可能会忽视事情本身的价值，而陷于对失败的忧虑。</p><p>惩罚的局限性：我希望它基于怎样的原因去做我想要他做的事情？</p><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>在有些情形中，我们没有机会和他人交流，这时，我们也许需要使用强制力来保护自己和他人。我们这样做，是为了避免伤害，而不是为了惩罚他人。如果我们威胁他人或实施惩罚，人们常常会产生敌意和抵触心理。这样，彼此的关系将会疏远。同时，惩罚还可能使人忽视事情本身的意义，而把注意力放在不服从的后果上。如果我们试图通过惩罚来使人们认识自己的需要，那么，我们很可能适得其反。</p><h2 id="第十二章-重获生活的热情"><a href="#第十二章-重获生活的热情" class="headerlink" title="第十二章 重获生活的热情"></a>第十二章 重获生活的热情</h2><p>对于大多数人来说，倾听和表达自己的需要并不容易。一般来说，我们的文化倾向于把个人需要看作是消极的、具有破坏性的。如果一个人公开表达自己的需要，就很可能被看作是自私的。</p><p>专注于我们想要做的，而不是追究错在哪里。</p><p>如果以苛刻的态度对人对己，我们的心情也好不到哪里去。通过运用非暴力沟通，我们不再试图分析自己或他人有什么毛病，而是用心去了解我们的需要，这样，我们的内心就会逐渐变得平和。</p><p>体会自己的感受和需要可以释放压力。</p><p>体会他人的感受和需要也可以释放压力。</p><h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><p>在情绪低落的时候，我们也许会怨天尤人。然而，如果我们以苛刻的态度对人对己，我们的心情也好不到哪里去。通过运用非暴力沟通，我们不再试图分析自己或他人有什么毛病，而是用心去了解我们的需要，这样，我们的内心将逐渐变得平和。一旦我们发现自己心底深处的愿望，并采取积极的行动，我们将会重获生活的热情。</p><h2 id="第十三章-表达感激"><a href="#第十三章-表达感激" class="headerlink" title="第十三章 表达感激"></a>第十三章 表达感激</h2><p>用非暴力沟通的方式表达感激时，我们只是为了庆祝他人的行为提升了我们的生活品质，而不是想得到任何回报。</p><p>用非暴力沟通表达感激的三个部分：</p><ol><li>对方做了什么事情使我们的生活得到了改善</li><li>我们有哪些需要得到了满足</li><li>我们的心情怎么样</li></ol><h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><p>在赞扬他人时，我们很少揭示内心活动，而把自己放在了裁判的位置。赞扬也常常被人用来实现个人目的。非暴力沟通鼓励我们充分表达感激。在表达感激时，我们说出：</p><ol><li>对我们有益的行为</li><li>我们的那些需要得到了满足</li><li>我们的需要得到满足后，我们是什么样的心情</li></ol><p>当别人以这样的方式表达对我们的感激时，我们可以与对方一起庆祝生命的美 —— 既不自大，也不假谦虚。</p><h2 id="附录-非暴力沟通模式"><a href="#附录-非暴力沟通模式" class="headerlink" title="附录 非暴力沟通模式"></a>附录 非暴力沟通模式</h2><ol><li><p>诚实地表达自己，而不批评、指责</p><ol><li><p>观察</p><p>我所观察（看、听、回忆、想）到的有助于（或无助于）我的福祉的具体行为</p><p><em>当我（看、听、想到我看到的/听到的）……</em></p></li><li><p>感受</p><p>对于这些行为，我有什么样的感受（情感而非思想）</p><p><em>我感到……</em></p></li><li><p>需要</p><p>什么样的需要或价值（而非偏好或某种具体的行为）导致我那样的感受</p><p><em>因为我需要/看重……</em></p></li><li><p>请求</p><p>清楚地请求（而非命令）那些能丰富我生命的具体行为</p><p><em>你是否愿意……</em></p></li></ol></li><li><p>关切的倾听他人，而不解读为批评或指责</p><ol><li><p>观察</p><p>你所观察（看、听、回忆、想）到的有助于（或无助于）你的福祉的具体行为</p><p><em>当你（看、听、想到你看到的/听到的）……</em></p></li><li><p>感受</p><p>对于这些行为，你有什么样的感受（是情感而非思想）</p><p><em>你感到…..吗？</em></p></li><li><p>需要</p><p>什么样的需要或价值（而非偏好或某种具体的行为）导致你那样的感受</p><p><em>因为你需要/看重……</em></p></li><li><p>请求</p><p>关切地倾听那些能丰富你生命的具体请求，而不解读为命令</p><p><em>所以，你想……</em></p></li></ol></li></ol><h2 id="编后记"><a href="#编后记" class="headerlink" title="编后记"></a>编后记</h2><p>生活永远等待人们以一己之身去领略生命的美和神奇。</p><h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><hr><ul><li>TED 《如何缓解压力》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为你，千千万万遍。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="看着读" scheme="http://yoursite.com/tags/%E7%9C%8B%E7%9D%80%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Cocos2d 之 tolua</title>
    <link href="http://yoursite.com/2019/10/14/Cocos2d%20%E4%B9%8B%20tolua/"/>
    <id>http://yoursite.com/2019/10/14/Cocos2d%20%E4%B9%8B%20tolua/</id>
    <published>2019-10-14T15:15:16.000Z</published>
    <updated>2019-10-14T15:18:17.004Z</updated>
    
    <content type="html"><![CDATA[<p>本文简介：</p><ol><li>环境搭建</li><li>使用到的相关配置结构介绍</li><li>具体实操</li><li>遇到问题及解决方案</li></ol><a id="more"></a><p><br></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在游戏开发过程中，主要业务逻辑等由Lua开发（因为可以动态热更、灵活便捷等），但是Lua毕竟是脚本语言，遇到一些高性能需求或其他涉及底层变动，需要用C++来实现（你大爷还是你大爷）。</p><p>对于将C++的类或方法导出给Lua调用，</p><p>Cocos2d-x引擎采用的是 tolua++，通过便携tolua++的pkg配置文件，来定义要导出的每一个类的信息，这个步骤相当于用tolua++的规则将类的头文件重写成pkg文件，tolua++会根据这个文件以及类的cpp文件来生成C++代码文件。</p><p>直接使用tolua++在批量导出的时候会比较麻烦，基于此，引擎提供了 genbindings.py 文件来完成批量导出的工作，流程如下：</p><ol><li>编写要导出的C++类</li><li>为这个类编写一个ini配置文件（一个ini可对应多个类）</li><li>修改genbindings脚本，加载ini配置</li><li>执行genbindings脚本，生成类导出到Lua的C++代码</li><li>将生成的代码添加到项目中，并执行注册方法</li></ol><p><br></p><p>本文主要内容一览：</p><ol><li>环境搭建</li><li>使用到的相关配置结构介绍</li><li>具体实操</li><li>遇到问题及解决方案</li></ol><hr><p><br></p><p><br></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h2><ul><li><a href="https://blog.csdn.net/shuzfan/article/details/52690554" target="_blank" rel="noopener">NDK r9b</a><ul><li>这里 README上，写的需求版本 r10c or later；但是脚本头部注释要求版本 r9b；经过实际测试使用 <strong>r9b 版本NDK</strong> 有效。</li><li>配置环境变量，ndk根目录：NDK_ROOT </li></ul></li><li><a href="http://www.python.org/ftp/python/2.7.3/python-2.7.3.msi" target="_blank" rel="noopener">Python2.7.3(32bit)</a><ul><li>配置环境变量，具体到exe文件：PYTHON_BIN（xxx\python.exe)</li></ul></li><li><a href="http://pyyaml.org/download/pyyaml/PyYAML-3.11.win32-py2.7.exe" target="_blank" rel="noopener">Python库 pyyaml</a><ul><li>解压或安装到上面python的相应位置： xxx\Lib\site-packages</li></ul></li><li><a href="https://raw.github.com/dumganhar/my_old_cocos2d-x_backup/download/downloads/Cheetah.zip" target="_blank" rel="noopener">Python库 pyCheetah</a><ul><li>解压或安装到上面python的相应位置： xxx\Lib\site-packages</li></ul></li></ul><p><br></p><h2 id="Mac-平台"><a href="#Mac-平台" class="headerlink" title="Mac 平台"></a>Mac 平台</h2><p>待补充</p><p><br></p><p><br></p><h1 id="配置介绍"><a href="#配置介绍" class="headerlink" title="配置介绍"></a>配置介绍</h1><h2 id="genbindings-py-文件"><a href="#genbindings-py-文件" class="headerlink" title="genbindings.py 文件"></a>genbindings.py 文件</h2><p>这个脚本文件主要作用是根据ini文件，执行 cocos2d\tools\bindings-generator\generator.py 来生成导出C++代码。</p><p>这个文件需要修改的地方不多，多注意下列几个地方即可：</p><ul><li>project_root：项目工程根目录</li><li>cocos_root：cocos引擎根目录</li><li>cxx_generator_root：调用的generator.py文件所在的目录</li><li>tolua_root：tolua根目录，ini配置文件的目录</li><li>output_dir：导出C++代码的目录</li><li>cmd_args：需要处理的ini配置文件，如果这次导出不需要，可以用 # 注释</li></ul><p><br></p><h2 id="ini-文件配置"><a href="#ini-文件配置" class="headerlink" title="ini 文件配置"></a>ini 文件配置</h2><p>ini配置文件主要作用于描述要导出的类，一个ini文件可以配置多个类，一般都以文件夹为单位。</p><p>配置文件的结构由三部分组成：</p><ul><li>段：一个文件分为多个段；每个段名称用中括号包裹并独占一行</li><li>键：一个段有多个键；每个键都代表一个配置</li><li>值：一个键对应任意个值；所有值以空格分隔</li></ul><p>例如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释A</span></span><br><span class="line"><span class="section">[sectionA]</span></span><br><span class="line"><span class="attr">keyA1</span> = </span><br><span class="line"><span class="attr">keyA2</span> = valueA2</span><br><span class="line"><span class="attr">keyA3</span> = valueA3 valueA4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释B</span></span><br><span class="line"><span class="section">[sectionB]</span></span><br><span class="line"><span class="attr">keyB1</span> = valueB1</span><br><span class="line"><span class="attr">keyB2</span> =</span><br></pre></td></tr></table></figure><p><br></p><p>除了上述配置文件基本规则，还需要注意一些常用且重要的键：</p><ul><li><p>prefix：生成的函数前缀，可能在自建类的模板中用不到，它主要作用应该是做唯一性区分</p></li><li><p>target_namespace：目标命名空间，lua调用是需要用到，若不填则为全局</p></li><li><p>headers：要导出的C++类头文件</p></li><li><p>classes：要导出的Lua类</p></li><li><p>skip：需要跳过的类方法</p><ul><li><p>不同类间用 <strong>逗号</strong> 分隔，不同函数名间用 <strong>空格</strong> 分隔</p></li><li><p>函数名可以用 <strong>正则表达式</strong> ，类名::[set.*]，代表跳过所有set开头的函数</p></li><li><p>若要跳过整个类，可以用 <em> 代替，类名::[</em>]</p></li><li><p>例如： </p><ul><li><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip</span> = ClassA::[*], ClassB::[funcNameA funcNameB]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>rename_functions：可以指定某个类的某个方法以一个新名字导出</p><ul><li><p>不同类间用 <strong>逗号</strong> 分隔，不同函数名间用 <strong>空格</strong> 分隔</p></li><li><p>例如：</p><ul><li><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rename_functions</span> = ClassA::[oldFuncNameA=newFuncNameA oldFuncNameB=newFuncNameB], ClassB::[oldFuncNameC=newFuncNameC]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>还有一些其他键，不是很常用或重要，一般上面都有注释，可以自行分析填写。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>genbindings.py 文件 和 ini文件 都是为 generator.py 文件传递配置的。</p><p>一般为了将自建的类文件与引擎的区分开，都会新建一个文件夹专门放自建类文件，并与引擎文件同级，同样的导出方法也需要新建一套。</p><p>大概结构如下：</p><p><img src="tolua结构.png" alt="tolua结构"></p><p><br></p><p><br></p><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="修改引擎代码"><a href="#修改引擎代码" class="headerlink" title="修改引擎代码"></a>修改引擎代码</h2><ol><li>修改引擎相关代码（路径：xxx\cocos2d）</li><li>配置相应 ini文件、genbindings 文件（路径：xxx\cocos2d\tools\tolua）</li><li>执行genbindings脚本（注意用python2.x - 32bit）</li><li>使用VS编译导出的文件</li><li>运行游戏验证</li></ol><p><br></p><h2 id="创建或修改自建类"><a href="#创建或修改自建类" class="headerlink" title="创建或修改自建类"></a>创建或修改自建类</h2><ol><li>修改相关源码</li><li>配置相应 ini文件、genbindings 文件<ul><li>检查 相应ini文件中是否已经导出了该类<ul><li>检查 ini文件中 headers 键的值，确定能找到该文件</li><li>检查 ini文件中 classes 键的值，确定导出了所修改的类</li><li>检查 ini文件中 skip 键的值，确定所需要导出的类没有被跳过</li></ul></li><li>检查 genbindings.py，确定导出配置<ul><li>检查 genbindings.py 中 cmd_args的值，确定执行相应ini文件</li></ul></li></ul></li><li>执行genbindings脚本（注意用python2.x - 32bit）</li><li>使用VS编译导出的文件</li><li>运行游戏验证</li></ol><p><br></p><p><br></p><h1 id="出现问题及解决方案"><a href="#出现问题及解决方案" class="headerlink" title="出现问题及解决方案"></a>出现问题及解决方案</h1><ul><li><p>NDK_ROOT not defined. Please define NDK_ROOT in your environment.</p><ul><li>检查自己环境变量，加上NDK_ROOT</li></ul></li><li><p>PYTHON_BIN not defined, use current python.</p><ul><li>检查自己环境变量，加上PYTHON_BIN</li></ul></li><li><p>llvm toolchain not found!</p><ul><li>路径:  “%ndk_root%/toolchains/“ , 找不到llvm，检查文件命名；脚本中会先去检查 llvm-3.4，再去查llvm-3.3，保证这两个存在一个就行</li></ul></li><li><p>‘XX\XX\python’ 不是内部或外部命令，也不是可运行程序</p><ul><li>环境变量PYTHON_BIN路径错误，PYTHON_BIN 应该是python2的可执行程序（.exe）</li></ul></li><li><p>LibclangError: [Error 193] %1 不是有效的 Win32. To provide a path to libclang use Config.set_library_path() or Config.set_library_file().</p><ul><li>python库 pyyaml 和 pyCheetah 都用32位版本</li></ul></li><li><p>自建类的导出代码文件include中不包含文件所属的文件夹</p><ul><li><p>主要是由于自建类独立文件夹导致，generator.py 在生成头文件路径的时候，是以引擎为准，所以指定在 xxx/cocos2d/cocos 目录下查找，可见 generator.py 的 search_path 变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'search_path'</span>: os.path.abspath(os.path.join(userconfig.get(<span class="string">'DEFAULT'</span>, <span class="string">'cocosdir'</span>), <span class="string">'cocos'</span>)),</span><br></pre></td></tr></table></figure><p>所以，导出自建类文件的时候，头文件所属的文件夹均忽略了。可见 cocos2d\tools\bindings-generator\targets\lua\templates\layout_head.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"scripting/lua-bindings/auto/$&#123;out_file&#125;.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> $macro_judgement</span></span><br><span class="line">$macro_judgement</span><br><span class="line"><span class="meta">#end <span class="meta-keyword">if</span></span></span><br><span class="line"><span class="meta">#for header in $headers</span></span><br><span class="line">    <span class="meta">#set relative = os.path.relpath(header, $search_path)</span></span><br><span class="line">    #if not '..' in relative</span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"$&#123;relative.replace(os.path.sep, '/')&#125;"</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"$&#123;os.path.basename(header)&#125;"</span></span></span><br><span class="line">    <span class="meta">#end <span class="meta-keyword">if</span></span></span><br><span class="line"><span class="meta">#end for</span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"scripting/lua-bindings/manual/tolua_fix.h"</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"scripting/lua-bindings/manual/LuaBasicConversions.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> $cpp_headers</span></span><br><span class="line"><span class="meta">#for header in $cpp_headers</span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"$&#123;header&#125;"</span></span></span><br><span class="line"><span class="meta">#end for</span></span><br><span class="line"><span class="meta">#end <span class="meta-keyword">if</span></span></span><br></pre></td></tr></table></figure></li><li><p>解决：根据之前的结构来看，genbindings.py 是会像 generator.py 传递参数的，我们可以由genbindings根据自己代码源目录指定搜索路径。</p><p>在genbindings.py中 添加搜索路径参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search_root = os.path.abspath(os.path.join(源文件根目录))</span><br><span class="line">config.set(<span class="string">'DEFAULT'</span>, <span class="string">'searchdir'</span>, search_root)</span><br></pre></td></tr></table></figure><p>然后再generator.py中不再自行拼接搜索路径，而是使用传递过来的路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 'search_path': os.path.abspath(os.path.join(userconfig.get('DEFAULT', 'cocosdir'), 'cocos')),</span></span><br><span class="line"><span class="string">'search_path'</span>: os.path.abspath(os.path.join(userconfig.get(<span class="string">'DEFAULT'</span>, <span class="string">'searchdir'</span>))),</span><br></pre></td></tr></table></figure><p>至此，兼容了引擎和自建类。</p></li></ul></li></ul><p><br></p><p><br></p><p><br></p><hr><p>参考资料：</p><ul><li>《精通COCOS2D-X游戏开发 进阶卷》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简介：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;环境搭建&lt;/li&gt;
&lt;li&gt;使用到的相关配置结构介绍&lt;/li&gt;
&lt;li&gt;具体实操&lt;/li&gt;
&lt;li&gt;遇到问题及解决方案&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="cocos2d" scheme="http://yoursite.com/tags/cocos2d/"/>
    
      <category term="想就做" scheme="http://yoursite.com/tags/%E6%83%B3%E5%B0%B1%E5%81%9A/"/>
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>聊聊版本控制</title>
    <link href="http://yoursite.com/2019/10/14/%E8%81%8A%E8%81%8A%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2019/10/14/%E8%81%8A%E8%81%8A%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</id>
    <published>2019-10-14T15:11:16.000Z</published>
    <updated>2019-10-14T15:15:42.409Z</updated>
    
    <content type="html"><![CDATA[<p>版本控制系统的简介及历史<br>SVN与Git</p><a id="more"></a><p><br></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>项目一直以SVN进行版本控制，感觉上线后，分支的管理会比较繁琐；加上我之前一直用Git，就推荐用Git来管理项目。</p><p>推荐一个东西，要有凭有据，所以就看了一下版本控制这块的内容，了解了一下版本控制的发展史，感觉收获颇丰，也修正了我以前的一些观点（褒Git 贬SVN）。</p><p><br></p><p>本文主要内容：</p><ul><li>版本控制系统简介及历史</li><li>SVN与Git的应用</li></ul><p><br></p><p><br></p><p><br></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="what？"><a href="#what？" class="headerlink" title="what？"></a>what？</h2><p>版本控制系统（Version Control System）是指对软件开发过程中各种程序代码、配置文件及说明文档等文件变更的管理，是软件配置管理的核心思想之一。（源自 百度百科）</p><p>内容包括：</p><ul><li>检入检出控制</li><li>分支和合并</li><li>历史记录</li></ul><p><br></p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>这里简单的列几个时期，更加详细内容可参考 <a href="https://www.plasticscm.com/version-control-history" target="_blank" rel="noopener">版本控制的历史</a></p><p><br></p><h3 id="1-本地版本控制系统"><a href="#1-本地版本控制系统" class="headerlink" title="1. 本地版本控制系统"></a>1. 本地版本控制系统</h3><p>采用的模式为锁定文件模式：lock-modify-checkin-unlock</p><p>多客户端在同一个服务器上工作，修改文件前先锁定文件，再去修改，提交，并解除锁定。类似于多线程中的锁机制。</p><p>代表：</p><ul><li>RCS(Revision Control System) </li></ul><p><br></p><h3 id="2-集中式版本控制系统（CVCS-Centralized-Version-Control-System）"><a href="#2-集中式版本控制系统（CVCS-Centralized-Version-Control-System）" class="headerlink" title="2. 集中式版本控制系统（CVCS - Centralized Version Control System）"></a>2. 集中式版本控制系统（CVCS - Centralized Version Control System）</h3><p>采用的模式为复制修改合并模式：copy-modify-merge</p><p>此时的服务器成为一个中央存储服务器，各客户端都有一个中央服务器的备份（分支），并基于此修改，再去合并到中央服务器，修改文件不需要加锁，但是在合并的时候要处理冲突，。</p><p>代表：</p><ul><li><p>CVS(Concurrent Versions System) </p><ul><li><p>CVS管理下的每个文件都有一系列独立的版本号，比如：r1.1, r1.2 …，然后用标签（tag）来记录一个集合，这个集合的元素是一对（文件名：版本号）。比如创建个v1.0的标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag v1.0 (file1: r1.1) (file2: r1.6) (file3: r1.3)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>VSS(Visual Source Safe)</p></li><li><p>Perforce</p></li><li><p>SVN(Subservision)</p><p>不同于CVS，SVN采用关系型数据库来存储改变集，并依赖于硬链接的方式来提高效率，避免复制文件本身。</p></li></ul><p><br></p><h3 id="3-分布式版本控制系统（DVCS-Distributed-Version-Control-System）"><a href="#3-分布式版本控制系统（DVCS-Distributed-Version-Control-System）" class="headerlink" title="3. 分布式版本控制系统（DVCS - Distributed Version Control System）"></a>3. 分布式版本控制系统（DVCS - Distributed Version Control System）</h3><p>不再像本地版本控制系统与集中式版本控制系统的 C/S结构，而采用P2P结构。</p><p>相对于集中式版本控制系统，在创建、合并分支上更为便捷。支持离线的相关操作，脱离网络的控制。</p><p>代表：</p><ul><li>BitKeeper</li><li>Git<ul><li>Git有四种对象<ul><li>tag对象，作为标签指向某个commit对象</li><li>commit对象代表一次提交，它保存有修改人、修改时间、附加信息并且指向一个文件系统树（tree对象），每次commit实际上都是一次对文件系统树的快照。</li><li>tree对象代表一个文件夹，保存指向blob对象或tree对象的指针</li><li>blob对象代表一个文件</li></ul></li><li>所有的对象都有HASH值，通过HASH值变化来判断commit间是否有变化，当不同commit间某文件没有变化时，不同commit的指针都指向该文件，并不会创建一个新的blob对象</li></ul></li><li>Mercurial</li></ul><p><br></p><p><br></p><h2 id="下一代？"><a href="#下一代？" class="headerlink" title="下一代？"></a>下一代？</h2><p>在 <a href="https://www.plasticscm.com/version-control-history" target="_blank" rel="noopener">版本控制的历史</a> 网站中，也给出了对下一代版本控制系统的畅想。</p><ul><li>语义化的版本控制系统；通过了解代码结构去合并文件或对比文件差异，辅助提高代码质量</li><li>分析并提取有价值信息辅助开发；版本控制系统不仅仅作为一种交付机制，更应该成为提高生产力的工具</li><li>企业级的分布式版本控制系统；消除悲观锁等模式，并可以遵守企业所需的规定和安全策略</li><li>更好的可视化工具</li><li>更优的性能</li></ul><p><br></p><p><br></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>目前最常用的无外乎 SVN和Git，本文章主要讨论的也是这两个。</p><h2 id="SVN-Subversion"><a href="#SVN-Subversion" class="headerlink" title="SVN(Subversion)"></a>SVN(Subversion)</h2><p>Apache项目底下的一个开源版本控制系统，目的是取代CVS，特点是 <strong>集中式管理</strong> 。</p><p>优点：</p><ul><li>集中式管理，管理方式在服务端配置好，客户端只需要同步提交即可，使用方便，操作简单，容易上手。</li><li>在服务端统一控制好访问权限，利用代码的安全管理</li><li>所有的代码以服务端为标准，代码一致性高</li></ul><p>缺点：</p><ul><li>性能要求高。所有操作都需要通过服务端进行同步，这会导致服务器性能要求比较高。如果服务器宕机就无法提交代码。</li><li>分支管理不灵活。SVN分支是一个完整的目录，且这个目录拥有完整的实际文件，这些操作都是在服务端进行同步的，不是本地化操作，如果要删除分支（即删除远程分支），需要所有人都同步。</li><li>需要联网。如果无法连接到SVN服务器，就无法提交自己的代码，更别说还原、对比等操作。如果在外网，网速不稳定，同步时间会久一些。</li></ul><p>工具：</p><ul><li>首推的还是小乌龟，<a href="https://tortoisesvn.net/downloads.html" target="_blank" rel="noopener">TortoiseSVN</a><ul><li><a href="https://www.runoob.com/svn/tortoisesvn-intro.html" target="_blank" rel="noopener">TortoiseSVN使用教程 | 菜鸟教程</a></li></ul></li></ul><p>教程：</p><ul><li><a href="https://www.runoob.com/svn/svn-intro.html" target="_blank" rel="noopener">SVN教程 | 菜鸟教程</a></li></ul><p><br></p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Git是一个开源的版本控制软件，它的特点是 <strong>分布式管理</strong> 。</p><p>优点：</p><ul><li>分布式开发时，可以克隆一个本地版本，然后在本地进行操作提交，本地可以完成一个完整的版本控制。在发布的时候，推送到远程服务器即可。</li><li>分支的本质是一个指向提交快照的指针，速度快、灵活，分支之间可以任意切换，都可以在本地进行操作可以不同步到远程服务器。</li><li>可以离线工作。如果远程服务器出现问题，也可以在本地进行切换分支的操作，等联网后再提交、合并等。</li></ul><p>缺点：</p><ul><li>没有严格的权限控制，一般是通过系统设置文件的读写权限来做权限控制。</li><li>工作目录只能是整个目录，而SVN可以单独检出某个有权限的目录。</li><li>上手难度较高。</li></ul><p>工具：</p><ul><li>命令行（专业的Coder是不需要图形化界面的！  手动狗头..）</li><li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a><ul><li>之前用Mac的时候用过，感觉可视化工具里面算比较好用的；Windows上效果也不错</li></ul></li><li><a href="https://www.gitkraken.com/" target="_blank" rel="noopener">GitKraken</a><ul><li>没用过，看UI风格，挺不错的</li></ul></li></ul><p>教程：</p><ul><li><a href="https://www.runoob.com/git/git-tutorial.html" target="_blank" rel="noopener">Git教程 | 菜鸟教程</a></li></ul><p><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在很多人都无比推崇Git，贬SVN（好吧，我承认之前我也有一些），也看了许多人对此的讨论，比如 StackOverFlow 中的 <a href="https://stackoverflow.com/questions/871/why-is-git-better-than-subversion" target="_blank" rel="noopener">Why is Git better than Subversion?</a> 与 <a href="https://stackoverflow.com/questions/3215282/why-to-use-svn-any-hidden-pros-over-git-mercurial-bazaar-there" target="_blank" rel="noopener">Why to use SVN? Any hidden pros (over GIT/Mercurial/Bazaar) there?</a> 。</p><p>但是，现在我觉得无论是SVN还是Git，各有特色，没有哪个是占据绝对优势，</p><p>对于技术开发，所管理的大部分是文本文件，需求灵活多变且频繁，所以能够便捷的 创建合并 分支的Git，显然是有益处的。</p><p>对于非技术开发，再加上管理文件为 文档文件、音乐音效、图片视频等，没有diff需求，使用上手快速简单的SVN，更为稳妥。</p><p>而且对于企业，对访问控制、权限分配、安全性有较强需求，使用SVN相对于Git更好一些。</p><p><br></p><p>在所在的游戏开发这行，我觉得小孩子才做选择，我全都要！</p><p>对于策划、美术、测试等维护的文件采用SVN管理，上手简单、定向拉取；</p><p>对于技术开发，使用Git来维护，对代码管理更加灵活便捷。</p><p><br></p><p><br></p><p><br></p><hr><p>参考资料：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/61259351" target="_blank" rel="noopener">版本管理工具——SVN和GIT</a></li><li><a href="https://www.cnblogs.com/vamei/archive/2013/02/21/2918069.html" target="_blank" rel="noopener">版本管理三国志 (CVS, Subversion, git)</a></li><li><a href="http://www.catb.org/~esr/writings/version-control/version-control.html" target="_blank" rel="noopener">版本控制时间轴</a></li><li><a href="http://blog.plasticscm.com/2010/11/version-control-timeline.html" target="_blank" rel="noopener">The version control timeline</a></li><li><a href="https://www.plasticscm.com/version-control-history" target="_blank" rel="noopener">Version Control History</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版本控制系统的简介及历史&lt;br&gt;SVN与Git&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="瞎分析" scheme="http://yoursite.com/tags/%E7%9E%8E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
